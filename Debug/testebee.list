
testebee.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f96c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000830  0800fa30  0800fa30  0001fa30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010260  08010260  000302b0  2**0
                  CONTENTS
  4 .ARM          00000008  08010260  08010260  00020260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010268  08010268  000302b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010268  08010268  00020268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801026c  0801026c  0002026c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b0  20000000  08010270  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008b0  200002b0  08010520  000302b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b60  08010520  00030b60  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000302b0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000302d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015d1d  00000000  00000000  0003031b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000303e  00000000  00000000  00046038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001590  00000000  00000000  00049078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000111f  00000000  00000000  0004a608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015baf  00000000  00000000  0004b727  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018cda  00000000  00000000  000612d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00082615  00000000  00000000  00079fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006898  00000000  00000000  000fc5c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  00102e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200002b0 	.word	0x200002b0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800fa14 	.word	0x0800fa14

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200002b4 	.word	0x200002b4
 8000104:	0800fa14 	.word	0x0800fa14

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fe5f 	bl	8002100 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fdaf 	bl	8001fb0 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fe51 	bl	8002100 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fe47 	bl	8002100 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fdd7 	bl	8002034 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fdcd 	bl	8002034 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fb43 	bl	8000b3c <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 facf 	bl	8000a64 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fb35 	bl	8000b3c <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fb2b 	bl	8000b3c <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fadb 	bl	8000ab0 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fad1 	bl	8000ab0 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__aeabi_uldivmod>:
 800051c:	2b00      	cmp	r3, #0
 800051e:	d111      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000520:	2a00      	cmp	r2, #0
 8000522:	d10f      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000524:	2900      	cmp	r1, #0
 8000526:	d100      	bne.n	800052a <__aeabi_uldivmod+0xe>
 8000528:	2800      	cmp	r0, #0
 800052a:	d002      	beq.n	8000532 <__aeabi_uldivmod+0x16>
 800052c:	2100      	movs	r1, #0
 800052e:	43c9      	mvns	r1, r1
 8000530:	0008      	movs	r0, r1
 8000532:	b407      	push	{r0, r1, r2}
 8000534:	4802      	ldr	r0, [pc, #8]	; (8000540 <__aeabi_uldivmod+0x24>)
 8000536:	a102      	add	r1, pc, #8	; (adr r1, 8000540 <__aeabi_uldivmod+0x24>)
 8000538:	1840      	adds	r0, r0, r1
 800053a:	9002      	str	r0, [sp, #8]
 800053c:	bd03      	pop	{r0, r1, pc}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	fffffee9 	.word	0xfffffee9
 8000544:	b403      	push	{r0, r1}
 8000546:	4668      	mov	r0, sp
 8000548:	b501      	push	{r0, lr}
 800054a:	9802      	ldr	r0, [sp, #8]
 800054c:	f000 f8a4 	bl	8000698 <__udivmoddi4>
 8000550:	9b01      	ldr	r3, [sp, #4]
 8000552:	469e      	mov	lr, r3
 8000554:	b002      	add	sp, #8
 8000556:	bc0c      	pop	{r2, r3}
 8000558:	4770      	bx	lr
 800055a:	46c0      	nop			; (mov r8, r8)

0800055c <__aeabi_lmul>:
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	46ce      	mov	lr, r9
 8000560:	4699      	mov	r9, r3
 8000562:	0c03      	lsrs	r3, r0, #16
 8000564:	469c      	mov	ip, r3
 8000566:	0413      	lsls	r3, r2, #16
 8000568:	4647      	mov	r7, r8
 800056a:	0c1b      	lsrs	r3, r3, #16
 800056c:	001d      	movs	r5, r3
 800056e:	000e      	movs	r6, r1
 8000570:	4661      	mov	r1, ip
 8000572:	0404      	lsls	r4, r0, #16
 8000574:	0c24      	lsrs	r4, r4, #16
 8000576:	b580      	push	{r7, lr}
 8000578:	0007      	movs	r7, r0
 800057a:	0c10      	lsrs	r0, r2, #16
 800057c:	434b      	muls	r3, r1
 800057e:	4365      	muls	r5, r4
 8000580:	4341      	muls	r1, r0
 8000582:	4360      	muls	r0, r4
 8000584:	0c2c      	lsrs	r4, r5, #16
 8000586:	18c0      	adds	r0, r0, r3
 8000588:	1820      	adds	r0, r4, r0
 800058a:	468c      	mov	ip, r1
 800058c:	4283      	cmp	r3, r0
 800058e:	d903      	bls.n	8000598 <__aeabi_lmul+0x3c>
 8000590:	2380      	movs	r3, #128	; 0x80
 8000592:	025b      	lsls	r3, r3, #9
 8000594:	4698      	mov	r8, r3
 8000596:	44c4      	add	ip, r8
 8000598:	4649      	mov	r1, r9
 800059a:	4379      	muls	r1, r7
 800059c:	4356      	muls	r6, r2
 800059e:	0c03      	lsrs	r3, r0, #16
 80005a0:	042d      	lsls	r5, r5, #16
 80005a2:	0c2d      	lsrs	r5, r5, #16
 80005a4:	1989      	adds	r1, r1, r6
 80005a6:	4463      	add	r3, ip
 80005a8:	0400      	lsls	r0, r0, #16
 80005aa:	1940      	adds	r0, r0, r5
 80005ac:	18c9      	adds	r1, r1, r3
 80005ae:	bcc0      	pop	{r6, r7}
 80005b0:	46b9      	mov	r9, r7
 80005b2:	46b0      	mov	r8, r6
 80005b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b6:	46c0      	nop			; (mov r8, r8)

080005b8 <__aeabi_d2uiz>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	2200      	movs	r2, #0
 80005bc:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <__aeabi_d2uiz+0x38>)
 80005be:	0004      	movs	r4, r0
 80005c0:	000d      	movs	r5, r1
 80005c2:	f7ff ff67 	bl	8000494 <__aeabi_dcmpge>
 80005c6:	2800      	cmp	r0, #0
 80005c8:	d104      	bne.n	80005d4 <__aeabi_d2uiz+0x1c>
 80005ca:	0020      	movs	r0, r4
 80005cc:	0029      	movs	r1, r5
 80005ce:	f002 fc5d 	bl	8002e8c <__aeabi_d2iz>
 80005d2:	bd70      	pop	{r4, r5, r6, pc}
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <__aeabi_d2uiz+0x38>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	0020      	movs	r0, r4
 80005da:	0029      	movs	r1, r5
 80005dc:	f002 f8b6 	bl	800274c <__aeabi_dsub>
 80005e0:	f002 fc54 	bl	8002e8c <__aeabi_d2iz>
 80005e4:	2380      	movs	r3, #128	; 0x80
 80005e6:	061b      	lsls	r3, r3, #24
 80005e8:	469c      	mov	ip, r3
 80005ea:	4460      	add	r0, ip
 80005ec:	e7f1      	b.n	80005d2 <__aeabi_d2uiz+0x1a>
 80005ee:	46c0      	nop			; (mov r8, r8)
 80005f0:	41e00000 	.word	0x41e00000

080005f4 <__aeabi_d2lz>:
 80005f4:	b570      	push	{r4, r5, r6, lr}
 80005f6:	0005      	movs	r5, r0
 80005f8:	000c      	movs	r4, r1
 80005fa:	2200      	movs	r2, #0
 80005fc:	2300      	movs	r3, #0
 80005fe:	0028      	movs	r0, r5
 8000600:	0021      	movs	r1, r4
 8000602:	f7ff ff29 	bl	8000458 <__aeabi_dcmplt>
 8000606:	2800      	cmp	r0, #0
 8000608:	d108      	bne.n	800061c <__aeabi_d2lz+0x28>
 800060a:	0028      	movs	r0, r5
 800060c:	0021      	movs	r1, r4
 800060e:	f000 f80f 	bl	8000630 <__aeabi_d2ulz>
 8000612:	0002      	movs	r2, r0
 8000614:	000b      	movs	r3, r1
 8000616:	0010      	movs	r0, r2
 8000618:	0019      	movs	r1, r3
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	2380      	movs	r3, #128	; 0x80
 800061e:	061b      	lsls	r3, r3, #24
 8000620:	18e1      	adds	r1, r4, r3
 8000622:	0028      	movs	r0, r5
 8000624:	f000 f804 	bl	8000630 <__aeabi_d2ulz>
 8000628:	2300      	movs	r3, #0
 800062a:	4242      	negs	r2, r0
 800062c:	418b      	sbcs	r3, r1
 800062e:	e7f2      	b.n	8000616 <__aeabi_d2lz+0x22>

08000630 <__aeabi_d2ulz>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	2200      	movs	r2, #0
 8000634:	4b0b      	ldr	r3, [pc, #44]	; (8000664 <__aeabi_d2ulz+0x34>)
 8000636:	000d      	movs	r5, r1
 8000638:	0004      	movs	r4, r0
 800063a:	f001 fdc5 	bl	80021c8 <__aeabi_dmul>
 800063e:	f7ff ffbb 	bl	80005b8 <__aeabi_d2uiz>
 8000642:	0006      	movs	r6, r0
 8000644:	f002 fc88 	bl	8002f58 <__aeabi_ui2d>
 8000648:	2200      	movs	r2, #0
 800064a:	4b07      	ldr	r3, [pc, #28]	; (8000668 <__aeabi_d2ulz+0x38>)
 800064c:	f001 fdbc 	bl	80021c8 <__aeabi_dmul>
 8000650:	0002      	movs	r2, r0
 8000652:	000b      	movs	r3, r1
 8000654:	0020      	movs	r0, r4
 8000656:	0029      	movs	r1, r5
 8000658:	f002 f878 	bl	800274c <__aeabi_dsub>
 800065c:	f7ff ffac 	bl	80005b8 <__aeabi_d2uiz>
 8000660:	0031      	movs	r1, r6
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	3df00000 	.word	0x3df00000
 8000668:	41f00000 	.word	0x41f00000

0800066c <__aeabi_l2d>:
 800066c:	b570      	push	{r4, r5, r6, lr}
 800066e:	0006      	movs	r6, r0
 8000670:	0008      	movs	r0, r1
 8000672:	f002 fc41 	bl	8002ef8 <__aeabi_i2d>
 8000676:	2200      	movs	r2, #0
 8000678:	4b06      	ldr	r3, [pc, #24]	; (8000694 <__aeabi_l2d+0x28>)
 800067a:	f001 fda5 	bl	80021c8 <__aeabi_dmul>
 800067e:	000d      	movs	r5, r1
 8000680:	0004      	movs	r4, r0
 8000682:	0030      	movs	r0, r6
 8000684:	f002 fc68 	bl	8002f58 <__aeabi_ui2d>
 8000688:	002b      	movs	r3, r5
 800068a:	0022      	movs	r2, r4
 800068c:	f000 fe42 	bl	8001314 <__aeabi_dadd>
 8000690:	bd70      	pop	{r4, r5, r6, pc}
 8000692:	46c0      	nop			; (mov r8, r8)
 8000694:	41f00000 	.word	0x41f00000

08000698 <__udivmoddi4>:
 8000698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800069a:	4657      	mov	r7, sl
 800069c:	464e      	mov	r6, r9
 800069e:	4645      	mov	r5, r8
 80006a0:	46de      	mov	lr, fp
 80006a2:	b5e0      	push	{r5, r6, r7, lr}
 80006a4:	0004      	movs	r4, r0
 80006a6:	000d      	movs	r5, r1
 80006a8:	4692      	mov	sl, r2
 80006aa:	4699      	mov	r9, r3
 80006ac:	b083      	sub	sp, #12
 80006ae:	428b      	cmp	r3, r1
 80006b0:	d830      	bhi.n	8000714 <__udivmoddi4+0x7c>
 80006b2:	d02d      	beq.n	8000710 <__udivmoddi4+0x78>
 80006b4:	4649      	mov	r1, r9
 80006b6:	4650      	mov	r0, sl
 80006b8:	f002 fd60 	bl	800317c <__clzdi2>
 80006bc:	0029      	movs	r1, r5
 80006be:	0006      	movs	r6, r0
 80006c0:	0020      	movs	r0, r4
 80006c2:	f002 fd5b 	bl	800317c <__clzdi2>
 80006c6:	1a33      	subs	r3, r6, r0
 80006c8:	4698      	mov	r8, r3
 80006ca:	3b20      	subs	r3, #32
 80006cc:	d434      	bmi.n	8000738 <__udivmoddi4+0xa0>
 80006ce:	469b      	mov	fp, r3
 80006d0:	4653      	mov	r3, sl
 80006d2:	465a      	mov	r2, fp
 80006d4:	4093      	lsls	r3, r2
 80006d6:	4642      	mov	r2, r8
 80006d8:	001f      	movs	r7, r3
 80006da:	4653      	mov	r3, sl
 80006dc:	4093      	lsls	r3, r2
 80006de:	001e      	movs	r6, r3
 80006e0:	42af      	cmp	r7, r5
 80006e2:	d83b      	bhi.n	800075c <__udivmoddi4+0xc4>
 80006e4:	42af      	cmp	r7, r5
 80006e6:	d100      	bne.n	80006ea <__udivmoddi4+0x52>
 80006e8:	e079      	b.n	80007de <__udivmoddi4+0x146>
 80006ea:	465b      	mov	r3, fp
 80006ec:	1ba4      	subs	r4, r4, r6
 80006ee:	41bd      	sbcs	r5, r7
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	da00      	bge.n	80006f6 <__udivmoddi4+0x5e>
 80006f4:	e076      	b.n	80007e4 <__udivmoddi4+0x14c>
 80006f6:	2200      	movs	r2, #0
 80006f8:	2300      	movs	r3, #0
 80006fa:	9200      	str	r2, [sp, #0]
 80006fc:	9301      	str	r3, [sp, #4]
 80006fe:	2301      	movs	r3, #1
 8000700:	465a      	mov	r2, fp
 8000702:	4093      	lsls	r3, r2
 8000704:	9301      	str	r3, [sp, #4]
 8000706:	2301      	movs	r3, #1
 8000708:	4642      	mov	r2, r8
 800070a:	4093      	lsls	r3, r2
 800070c:	9300      	str	r3, [sp, #0]
 800070e:	e029      	b.n	8000764 <__udivmoddi4+0xcc>
 8000710:	4282      	cmp	r2, r0
 8000712:	d9cf      	bls.n	80006b4 <__udivmoddi4+0x1c>
 8000714:	2200      	movs	r2, #0
 8000716:	2300      	movs	r3, #0
 8000718:	9200      	str	r2, [sp, #0]
 800071a:	9301      	str	r3, [sp, #4]
 800071c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <__udivmoddi4+0x8e>
 8000722:	601c      	str	r4, [r3, #0]
 8000724:	605d      	str	r5, [r3, #4]
 8000726:	9800      	ldr	r0, [sp, #0]
 8000728:	9901      	ldr	r1, [sp, #4]
 800072a:	b003      	add	sp, #12
 800072c:	bcf0      	pop	{r4, r5, r6, r7}
 800072e:	46bb      	mov	fp, r7
 8000730:	46b2      	mov	sl, r6
 8000732:	46a9      	mov	r9, r5
 8000734:	46a0      	mov	r8, r4
 8000736:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000738:	4642      	mov	r2, r8
 800073a:	469b      	mov	fp, r3
 800073c:	2320      	movs	r3, #32
 800073e:	1a9b      	subs	r3, r3, r2
 8000740:	4652      	mov	r2, sl
 8000742:	40da      	lsrs	r2, r3
 8000744:	4641      	mov	r1, r8
 8000746:	0013      	movs	r3, r2
 8000748:	464a      	mov	r2, r9
 800074a:	408a      	lsls	r2, r1
 800074c:	0017      	movs	r7, r2
 800074e:	4642      	mov	r2, r8
 8000750:	431f      	orrs	r7, r3
 8000752:	4653      	mov	r3, sl
 8000754:	4093      	lsls	r3, r2
 8000756:	001e      	movs	r6, r3
 8000758:	42af      	cmp	r7, r5
 800075a:	d9c3      	bls.n	80006e4 <__udivmoddi4+0x4c>
 800075c:	2200      	movs	r2, #0
 800075e:	2300      	movs	r3, #0
 8000760:	9200      	str	r2, [sp, #0]
 8000762:	9301      	str	r3, [sp, #4]
 8000764:	4643      	mov	r3, r8
 8000766:	2b00      	cmp	r3, #0
 8000768:	d0d8      	beq.n	800071c <__udivmoddi4+0x84>
 800076a:	07fb      	lsls	r3, r7, #31
 800076c:	0872      	lsrs	r2, r6, #1
 800076e:	431a      	orrs	r2, r3
 8000770:	4646      	mov	r6, r8
 8000772:	087b      	lsrs	r3, r7, #1
 8000774:	e00e      	b.n	8000794 <__udivmoddi4+0xfc>
 8000776:	42ab      	cmp	r3, r5
 8000778:	d101      	bne.n	800077e <__udivmoddi4+0xe6>
 800077a:	42a2      	cmp	r2, r4
 800077c:	d80c      	bhi.n	8000798 <__udivmoddi4+0x100>
 800077e:	1aa4      	subs	r4, r4, r2
 8000780:	419d      	sbcs	r5, r3
 8000782:	2001      	movs	r0, #1
 8000784:	1924      	adds	r4, r4, r4
 8000786:	416d      	adcs	r5, r5
 8000788:	2100      	movs	r1, #0
 800078a:	3e01      	subs	r6, #1
 800078c:	1824      	adds	r4, r4, r0
 800078e:	414d      	adcs	r5, r1
 8000790:	2e00      	cmp	r6, #0
 8000792:	d006      	beq.n	80007a2 <__udivmoddi4+0x10a>
 8000794:	42ab      	cmp	r3, r5
 8000796:	d9ee      	bls.n	8000776 <__udivmoddi4+0xde>
 8000798:	3e01      	subs	r6, #1
 800079a:	1924      	adds	r4, r4, r4
 800079c:	416d      	adcs	r5, r5
 800079e:	2e00      	cmp	r6, #0
 80007a0:	d1f8      	bne.n	8000794 <__udivmoddi4+0xfc>
 80007a2:	9800      	ldr	r0, [sp, #0]
 80007a4:	9901      	ldr	r1, [sp, #4]
 80007a6:	465b      	mov	r3, fp
 80007a8:	1900      	adds	r0, r0, r4
 80007aa:	4169      	adcs	r1, r5
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	db24      	blt.n	80007fa <__udivmoddi4+0x162>
 80007b0:	002b      	movs	r3, r5
 80007b2:	465a      	mov	r2, fp
 80007b4:	4644      	mov	r4, r8
 80007b6:	40d3      	lsrs	r3, r2
 80007b8:	002a      	movs	r2, r5
 80007ba:	40e2      	lsrs	r2, r4
 80007bc:	001c      	movs	r4, r3
 80007be:	465b      	mov	r3, fp
 80007c0:	0015      	movs	r5, r2
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	db2a      	blt.n	800081c <__udivmoddi4+0x184>
 80007c6:	0026      	movs	r6, r4
 80007c8:	409e      	lsls	r6, r3
 80007ca:	0033      	movs	r3, r6
 80007cc:	0026      	movs	r6, r4
 80007ce:	4647      	mov	r7, r8
 80007d0:	40be      	lsls	r6, r7
 80007d2:	0032      	movs	r2, r6
 80007d4:	1a80      	subs	r0, r0, r2
 80007d6:	4199      	sbcs	r1, r3
 80007d8:	9000      	str	r0, [sp, #0]
 80007da:	9101      	str	r1, [sp, #4]
 80007dc:	e79e      	b.n	800071c <__udivmoddi4+0x84>
 80007de:	42a3      	cmp	r3, r4
 80007e0:	d8bc      	bhi.n	800075c <__udivmoddi4+0xc4>
 80007e2:	e782      	b.n	80006ea <__udivmoddi4+0x52>
 80007e4:	4642      	mov	r2, r8
 80007e6:	2320      	movs	r3, #32
 80007e8:	2100      	movs	r1, #0
 80007ea:	1a9b      	subs	r3, r3, r2
 80007ec:	2200      	movs	r2, #0
 80007ee:	9100      	str	r1, [sp, #0]
 80007f0:	9201      	str	r2, [sp, #4]
 80007f2:	2201      	movs	r2, #1
 80007f4:	40da      	lsrs	r2, r3
 80007f6:	9201      	str	r2, [sp, #4]
 80007f8:	e785      	b.n	8000706 <__udivmoddi4+0x6e>
 80007fa:	4642      	mov	r2, r8
 80007fc:	2320      	movs	r3, #32
 80007fe:	1a9b      	subs	r3, r3, r2
 8000800:	002a      	movs	r2, r5
 8000802:	4646      	mov	r6, r8
 8000804:	409a      	lsls	r2, r3
 8000806:	0023      	movs	r3, r4
 8000808:	40f3      	lsrs	r3, r6
 800080a:	4644      	mov	r4, r8
 800080c:	4313      	orrs	r3, r2
 800080e:	002a      	movs	r2, r5
 8000810:	40e2      	lsrs	r2, r4
 8000812:	001c      	movs	r4, r3
 8000814:	465b      	mov	r3, fp
 8000816:	0015      	movs	r5, r2
 8000818:	2b00      	cmp	r3, #0
 800081a:	dad4      	bge.n	80007c6 <__udivmoddi4+0x12e>
 800081c:	4642      	mov	r2, r8
 800081e:	002f      	movs	r7, r5
 8000820:	2320      	movs	r3, #32
 8000822:	0026      	movs	r6, r4
 8000824:	4097      	lsls	r7, r2
 8000826:	1a9b      	subs	r3, r3, r2
 8000828:	40de      	lsrs	r6, r3
 800082a:	003b      	movs	r3, r7
 800082c:	4333      	orrs	r3, r6
 800082e:	e7cd      	b.n	80007cc <__udivmoddi4+0x134>

08000830 <__aeabi_fdiv>:
 8000830:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000832:	464f      	mov	r7, r9
 8000834:	4646      	mov	r6, r8
 8000836:	46d6      	mov	lr, sl
 8000838:	0245      	lsls	r5, r0, #9
 800083a:	b5c0      	push	{r6, r7, lr}
 800083c:	0047      	lsls	r7, r0, #1
 800083e:	1c0c      	adds	r4, r1, #0
 8000840:	0a6d      	lsrs	r5, r5, #9
 8000842:	0e3f      	lsrs	r7, r7, #24
 8000844:	0fc6      	lsrs	r6, r0, #31
 8000846:	2f00      	cmp	r7, #0
 8000848:	d100      	bne.n	800084c <__aeabi_fdiv+0x1c>
 800084a:	e06f      	b.n	800092c <__aeabi_fdiv+0xfc>
 800084c:	2fff      	cmp	r7, #255	; 0xff
 800084e:	d100      	bne.n	8000852 <__aeabi_fdiv+0x22>
 8000850:	e074      	b.n	800093c <__aeabi_fdiv+0x10c>
 8000852:	2300      	movs	r3, #0
 8000854:	2280      	movs	r2, #128	; 0x80
 8000856:	4699      	mov	r9, r3
 8000858:	469a      	mov	sl, r3
 800085a:	00ed      	lsls	r5, r5, #3
 800085c:	04d2      	lsls	r2, r2, #19
 800085e:	4315      	orrs	r5, r2
 8000860:	3f7f      	subs	r7, #127	; 0x7f
 8000862:	0263      	lsls	r3, r4, #9
 8000864:	0a5b      	lsrs	r3, r3, #9
 8000866:	4698      	mov	r8, r3
 8000868:	0063      	lsls	r3, r4, #1
 800086a:	0e1b      	lsrs	r3, r3, #24
 800086c:	0fe4      	lsrs	r4, r4, #31
 800086e:	2b00      	cmp	r3, #0
 8000870:	d04d      	beq.n	800090e <__aeabi_fdiv+0xde>
 8000872:	2bff      	cmp	r3, #255	; 0xff
 8000874:	d045      	beq.n	8000902 <__aeabi_fdiv+0xd2>
 8000876:	4642      	mov	r2, r8
 8000878:	2180      	movs	r1, #128	; 0x80
 800087a:	00d2      	lsls	r2, r2, #3
 800087c:	04c9      	lsls	r1, r1, #19
 800087e:	4311      	orrs	r1, r2
 8000880:	4688      	mov	r8, r1
 8000882:	2200      	movs	r2, #0
 8000884:	3b7f      	subs	r3, #127	; 0x7f
 8000886:	0031      	movs	r1, r6
 8000888:	1aff      	subs	r7, r7, r3
 800088a:	464b      	mov	r3, r9
 800088c:	4061      	eors	r1, r4
 800088e:	b2c9      	uxtb	r1, r1
 8000890:	2b0f      	cmp	r3, #15
 8000892:	d900      	bls.n	8000896 <__aeabi_fdiv+0x66>
 8000894:	e0b8      	b.n	8000a08 <__aeabi_fdiv+0x1d8>
 8000896:	4870      	ldr	r0, [pc, #448]	; (8000a58 <__aeabi_fdiv+0x228>)
 8000898:	009b      	lsls	r3, r3, #2
 800089a:	58c3      	ldr	r3, [r0, r3]
 800089c:	469f      	mov	pc, r3
 800089e:	2300      	movs	r3, #0
 80008a0:	4698      	mov	r8, r3
 80008a2:	0026      	movs	r6, r4
 80008a4:	4645      	mov	r5, r8
 80008a6:	4692      	mov	sl, r2
 80008a8:	4653      	mov	r3, sl
 80008aa:	2b02      	cmp	r3, #2
 80008ac:	d100      	bne.n	80008b0 <__aeabi_fdiv+0x80>
 80008ae:	e08d      	b.n	80009cc <__aeabi_fdiv+0x19c>
 80008b0:	2b03      	cmp	r3, #3
 80008b2:	d100      	bne.n	80008b6 <__aeabi_fdiv+0x86>
 80008b4:	e0a1      	b.n	80009fa <__aeabi_fdiv+0x1ca>
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d018      	beq.n	80008ec <__aeabi_fdiv+0xbc>
 80008ba:	003b      	movs	r3, r7
 80008bc:	337f      	adds	r3, #127	; 0x7f
 80008be:	2b00      	cmp	r3, #0
 80008c0:	dd6d      	ble.n	800099e <__aeabi_fdiv+0x16e>
 80008c2:	076a      	lsls	r2, r5, #29
 80008c4:	d004      	beq.n	80008d0 <__aeabi_fdiv+0xa0>
 80008c6:	220f      	movs	r2, #15
 80008c8:	402a      	ands	r2, r5
 80008ca:	2a04      	cmp	r2, #4
 80008cc:	d000      	beq.n	80008d0 <__aeabi_fdiv+0xa0>
 80008ce:	3504      	adds	r5, #4
 80008d0:	012a      	lsls	r2, r5, #4
 80008d2:	d503      	bpl.n	80008dc <__aeabi_fdiv+0xac>
 80008d4:	4b61      	ldr	r3, [pc, #388]	; (8000a5c <__aeabi_fdiv+0x22c>)
 80008d6:	401d      	ands	r5, r3
 80008d8:	003b      	movs	r3, r7
 80008da:	3380      	adds	r3, #128	; 0x80
 80008dc:	2bfe      	cmp	r3, #254	; 0xfe
 80008de:	dd00      	ble.n	80008e2 <__aeabi_fdiv+0xb2>
 80008e0:	e074      	b.n	80009cc <__aeabi_fdiv+0x19c>
 80008e2:	01aa      	lsls	r2, r5, #6
 80008e4:	0a52      	lsrs	r2, r2, #9
 80008e6:	b2d8      	uxtb	r0, r3
 80008e8:	e002      	b.n	80008f0 <__aeabi_fdiv+0xc0>
 80008ea:	000e      	movs	r6, r1
 80008ec:	2000      	movs	r0, #0
 80008ee:	2200      	movs	r2, #0
 80008f0:	05c0      	lsls	r0, r0, #23
 80008f2:	07f6      	lsls	r6, r6, #31
 80008f4:	4310      	orrs	r0, r2
 80008f6:	4330      	orrs	r0, r6
 80008f8:	bce0      	pop	{r5, r6, r7}
 80008fa:	46ba      	mov	sl, r7
 80008fc:	46b1      	mov	r9, r6
 80008fe:	46a8      	mov	r8, r5
 8000900:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000902:	4643      	mov	r3, r8
 8000904:	2b00      	cmp	r3, #0
 8000906:	d13f      	bne.n	8000988 <__aeabi_fdiv+0x158>
 8000908:	2202      	movs	r2, #2
 800090a:	3fff      	subs	r7, #255	; 0xff
 800090c:	e003      	b.n	8000916 <__aeabi_fdiv+0xe6>
 800090e:	4643      	mov	r3, r8
 8000910:	2b00      	cmp	r3, #0
 8000912:	d12d      	bne.n	8000970 <__aeabi_fdiv+0x140>
 8000914:	2201      	movs	r2, #1
 8000916:	0031      	movs	r1, r6
 8000918:	464b      	mov	r3, r9
 800091a:	4061      	eors	r1, r4
 800091c:	b2c9      	uxtb	r1, r1
 800091e:	4313      	orrs	r3, r2
 8000920:	2b0f      	cmp	r3, #15
 8000922:	d838      	bhi.n	8000996 <__aeabi_fdiv+0x166>
 8000924:	484e      	ldr	r0, [pc, #312]	; (8000a60 <__aeabi_fdiv+0x230>)
 8000926:	009b      	lsls	r3, r3, #2
 8000928:	58c3      	ldr	r3, [r0, r3]
 800092a:	469f      	mov	pc, r3
 800092c:	2d00      	cmp	r5, #0
 800092e:	d113      	bne.n	8000958 <__aeabi_fdiv+0x128>
 8000930:	2304      	movs	r3, #4
 8000932:	4699      	mov	r9, r3
 8000934:	3b03      	subs	r3, #3
 8000936:	2700      	movs	r7, #0
 8000938:	469a      	mov	sl, r3
 800093a:	e792      	b.n	8000862 <__aeabi_fdiv+0x32>
 800093c:	2d00      	cmp	r5, #0
 800093e:	d105      	bne.n	800094c <__aeabi_fdiv+0x11c>
 8000940:	2308      	movs	r3, #8
 8000942:	4699      	mov	r9, r3
 8000944:	3b06      	subs	r3, #6
 8000946:	27ff      	movs	r7, #255	; 0xff
 8000948:	469a      	mov	sl, r3
 800094a:	e78a      	b.n	8000862 <__aeabi_fdiv+0x32>
 800094c:	230c      	movs	r3, #12
 800094e:	4699      	mov	r9, r3
 8000950:	3b09      	subs	r3, #9
 8000952:	27ff      	movs	r7, #255	; 0xff
 8000954:	469a      	mov	sl, r3
 8000956:	e784      	b.n	8000862 <__aeabi_fdiv+0x32>
 8000958:	0028      	movs	r0, r5
 800095a:	f002 fbf1 	bl	8003140 <__clzsi2>
 800095e:	2776      	movs	r7, #118	; 0x76
 8000960:	1f43      	subs	r3, r0, #5
 8000962:	409d      	lsls	r5, r3
 8000964:	2300      	movs	r3, #0
 8000966:	427f      	negs	r7, r7
 8000968:	4699      	mov	r9, r3
 800096a:	469a      	mov	sl, r3
 800096c:	1a3f      	subs	r7, r7, r0
 800096e:	e778      	b.n	8000862 <__aeabi_fdiv+0x32>
 8000970:	4640      	mov	r0, r8
 8000972:	f002 fbe5 	bl	8003140 <__clzsi2>
 8000976:	4642      	mov	r2, r8
 8000978:	1f43      	subs	r3, r0, #5
 800097a:	409a      	lsls	r2, r3
 800097c:	2376      	movs	r3, #118	; 0x76
 800097e:	425b      	negs	r3, r3
 8000980:	4690      	mov	r8, r2
 8000982:	1a1b      	subs	r3, r3, r0
 8000984:	2200      	movs	r2, #0
 8000986:	e77e      	b.n	8000886 <__aeabi_fdiv+0x56>
 8000988:	2303      	movs	r3, #3
 800098a:	464a      	mov	r2, r9
 800098c:	431a      	orrs	r2, r3
 800098e:	4691      	mov	r9, r2
 8000990:	33fc      	adds	r3, #252	; 0xfc
 8000992:	2203      	movs	r2, #3
 8000994:	e777      	b.n	8000886 <__aeabi_fdiv+0x56>
 8000996:	000e      	movs	r6, r1
 8000998:	20ff      	movs	r0, #255	; 0xff
 800099a:	2200      	movs	r2, #0
 800099c:	e7a8      	b.n	80008f0 <__aeabi_fdiv+0xc0>
 800099e:	2201      	movs	r2, #1
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	2b1b      	cmp	r3, #27
 80009a4:	dca2      	bgt.n	80008ec <__aeabi_fdiv+0xbc>
 80009a6:	379e      	adds	r7, #158	; 0x9e
 80009a8:	002a      	movs	r2, r5
 80009aa:	40bd      	lsls	r5, r7
 80009ac:	40da      	lsrs	r2, r3
 80009ae:	1e6b      	subs	r3, r5, #1
 80009b0:	419d      	sbcs	r5, r3
 80009b2:	4315      	orrs	r5, r2
 80009b4:	076a      	lsls	r2, r5, #29
 80009b6:	d004      	beq.n	80009c2 <__aeabi_fdiv+0x192>
 80009b8:	220f      	movs	r2, #15
 80009ba:	402a      	ands	r2, r5
 80009bc:	2a04      	cmp	r2, #4
 80009be:	d000      	beq.n	80009c2 <__aeabi_fdiv+0x192>
 80009c0:	3504      	adds	r5, #4
 80009c2:	016a      	lsls	r2, r5, #5
 80009c4:	d544      	bpl.n	8000a50 <__aeabi_fdiv+0x220>
 80009c6:	2001      	movs	r0, #1
 80009c8:	2200      	movs	r2, #0
 80009ca:	e791      	b.n	80008f0 <__aeabi_fdiv+0xc0>
 80009cc:	20ff      	movs	r0, #255	; 0xff
 80009ce:	2200      	movs	r2, #0
 80009d0:	e78e      	b.n	80008f0 <__aeabi_fdiv+0xc0>
 80009d2:	2280      	movs	r2, #128	; 0x80
 80009d4:	2600      	movs	r6, #0
 80009d6:	20ff      	movs	r0, #255	; 0xff
 80009d8:	03d2      	lsls	r2, r2, #15
 80009da:	e789      	b.n	80008f0 <__aeabi_fdiv+0xc0>
 80009dc:	2300      	movs	r3, #0
 80009de:	4698      	mov	r8, r3
 80009e0:	2280      	movs	r2, #128	; 0x80
 80009e2:	03d2      	lsls	r2, r2, #15
 80009e4:	4215      	tst	r5, r2
 80009e6:	d008      	beq.n	80009fa <__aeabi_fdiv+0x1ca>
 80009e8:	4643      	mov	r3, r8
 80009ea:	4213      	tst	r3, r2
 80009ec:	d105      	bne.n	80009fa <__aeabi_fdiv+0x1ca>
 80009ee:	431a      	orrs	r2, r3
 80009f0:	0252      	lsls	r2, r2, #9
 80009f2:	0026      	movs	r6, r4
 80009f4:	20ff      	movs	r0, #255	; 0xff
 80009f6:	0a52      	lsrs	r2, r2, #9
 80009f8:	e77a      	b.n	80008f0 <__aeabi_fdiv+0xc0>
 80009fa:	2280      	movs	r2, #128	; 0x80
 80009fc:	03d2      	lsls	r2, r2, #15
 80009fe:	432a      	orrs	r2, r5
 8000a00:	0252      	lsls	r2, r2, #9
 8000a02:	20ff      	movs	r0, #255	; 0xff
 8000a04:	0a52      	lsrs	r2, r2, #9
 8000a06:	e773      	b.n	80008f0 <__aeabi_fdiv+0xc0>
 8000a08:	4642      	mov	r2, r8
 8000a0a:	016b      	lsls	r3, r5, #5
 8000a0c:	0155      	lsls	r5, r2, #5
 8000a0e:	42ab      	cmp	r3, r5
 8000a10:	d21a      	bcs.n	8000a48 <__aeabi_fdiv+0x218>
 8000a12:	201b      	movs	r0, #27
 8000a14:	2200      	movs	r2, #0
 8000a16:	3f01      	subs	r7, #1
 8000a18:	2601      	movs	r6, #1
 8000a1a:	001c      	movs	r4, r3
 8000a1c:	0052      	lsls	r2, r2, #1
 8000a1e:	005b      	lsls	r3, r3, #1
 8000a20:	2c00      	cmp	r4, #0
 8000a22:	db01      	blt.n	8000a28 <__aeabi_fdiv+0x1f8>
 8000a24:	429d      	cmp	r5, r3
 8000a26:	d801      	bhi.n	8000a2c <__aeabi_fdiv+0x1fc>
 8000a28:	1b5b      	subs	r3, r3, r5
 8000a2a:	4332      	orrs	r2, r6
 8000a2c:	3801      	subs	r0, #1
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	d1f3      	bne.n	8000a1a <__aeabi_fdiv+0x1ea>
 8000a32:	1e58      	subs	r0, r3, #1
 8000a34:	4183      	sbcs	r3, r0
 8000a36:	4313      	orrs	r3, r2
 8000a38:	001d      	movs	r5, r3
 8000a3a:	003b      	movs	r3, r7
 8000a3c:	337f      	adds	r3, #127	; 0x7f
 8000a3e:	000e      	movs	r6, r1
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	dd00      	ble.n	8000a46 <__aeabi_fdiv+0x216>
 8000a44:	e73d      	b.n	80008c2 <__aeabi_fdiv+0x92>
 8000a46:	e7aa      	b.n	800099e <__aeabi_fdiv+0x16e>
 8000a48:	201a      	movs	r0, #26
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	1b5b      	subs	r3, r3, r5
 8000a4e:	e7e3      	b.n	8000a18 <__aeabi_fdiv+0x1e8>
 8000a50:	01aa      	lsls	r2, r5, #6
 8000a52:	2000      	movs	r0, #0
 8000a54:	0a52      	lsrs	r2, r2, #9
 8000a56:	e74b      	b.n	80008f0 <__aeabi_fdiv+0xc0>
 8000a58:	0800fbf0 	.word	0x0800fbf0
 8000a5c:	f7ffffff 	.word	0xf7ffffff
 8000a60:	0800fc30 	.word	0x0800fc30

08000a64 <__eqsf2>:
 8000a64:	b570      	push	{r4, r5, r6, lr}
 8000a66:	0042      	lsls	r2, r0, #1
 8000a68:	0245      	lsls	r5, r0, #9
 8000a6a:	024e      	lsls	r6, r1, #9
 8000a6c:	004c      	lsls	r4, r1, #1
 8000a6e:	0fc3      	lsrs	r3, r0, #31
 8000a70:	0a6d      	lsrs	r5, r5, #9
 8000a72:	2001      	movs	r0, #1
 8000a74:	0e12      	lsrs	r2, r2, #24
 8000a76:	0a76      	lsrs	r6, r6, #9
 8000a78:	0e24      	lsrs	r4, r4, #24
 8000a7a:	0fc9      	lsrs	r1, r1, #31
 8000a7c:	2aff      	cmp	r2, #255	; 0xff
 8000a7e:	d006      	beq.n	8000a8e <__eqsf2+0x2a>
 8000a80:	2cff      	cmp	r4, #255	; 0xff
 8000a82:	d003      	beq.n	8000a8c <__eqsf2+0x28>
 8000a84:	42a2      	cmp	r2, r4
 8000a86:	d101      	bne.n	8000a8c <__eqsf2+0x28>
 8000a88:	42b5      	cmp	r5, r6
 8000a8a:	d006      	beq.n	8000a9a <__eqsf2+0x36>
 8000a8c:	bd70      	pop	{r4, r5, r6, pc}
 8000a8e:	2d00      	cmp	r5, #0
 8000a90:	d1fc      	bne.n	8000a8c <__eqsf2+0x28>
 8000a92:	2cff      	cmp	r4, #255	; 0xff
 8000a94:	d1fa      	bne.n	8000a8c <__eqsf2+0x28>
 8000a96:	2e00      	cmp	r6, #0
 8000a98:	d1f8      	bne.n	8000a8c <__eqsf2+0x28>
 8000a9a:	428b      	cmp	r3, r1
 8000a9c:	d006      	beq.n	8000aac <__eqsf2+0x48>
 8000a9e:	2001      	movs	r0, #1
 8000aa0:	2a00      	cmp	r2, #0
 8000aa2:	d1f3      	bne.n	8000a8c <__eqsf2+0x28>
 8000aa4:	0028      	movs	r0, r5
 8000aa6:	1e43      	subs	r3, r0, #1
 8000aa8:	4198      	sbcs	r0, r3
 8000aaa:	e7ef      	b.n	8000a8c <__eqsf2+0x28>
 8000aac:	2000      	movs	r0, #0
 8000aae:	e7ed      	b.n	8000a8c <__eqsf2+0x28>

08000ab0 <__gesf2>:
 8000ab0:	b570      	push	{r4, r5, r6, lr}
 8000ab2:	0042      	lsls	r2, r0, #1
 8000ab4:	0245      	lsls	r5, r0, #9
 8000ab6:	024e      	lsls	r6, r1, #9
 8000ab8:	004c      	lsls	r4, r1, #1
 8000aba:	0fc3      	lsrs	r3, r0, #31
 8000abc:	0a6d      	lsrs	r5, r5, #9
 8000abe:	0e12      	lsrs	r2, r2, #24
 8000ac0:	0a76      	lsrs	r6, r6, #9
 8000ac2:	0e24      	lsrs	r4, r4, #24
 8000ac4:	0fc8      	lsrs	r0, r1, #31
 8000ac6:	2aff      	cmp	r2, #255	; 0xff
 8000ac8:	d01b      	beq.n	8000b02 <__gesf2+0x52>
 8000aca:	2cff      	cmp	r4, #255	; 0xff
 8000acc:	d00e      	beq.n	8000aec <__gesf2+0x3c>
 8000ace:	2a00      	cmp	r2, #0
 8000ad0:	d11b      	bne.n	8000b0a <__gesf2+0x5a>
 8000ad2:	2c00      	cmp	r4, #0
 8000ad4:	d101      	bne.n	8000ada <__gesf2+0x2a>
 8000ad6:	2e00      	cmp	r6, #0
 8000ad8:	d01c      	beq.n	8000b14 <__gesf2+0x64>
 8000ada:	2d00      	cmp	r5, #0
 8000adc:	d00c      	beq.n	8000af8 <__gesf2+0x48>
 8000ade:	4283      	cmp	r3, r0
 8000ae0:	d01c      	beq.n	8000b1c <__gesf2+0x6c>
 8000ae2:	2102      	movs	r1, #2
 8000ae4:	1e58      	subs	r0, r3, #1
 8000ae6:	4008      	ands	r0, r1
 8000ae8:	3801      	subs	r0, #1
 8000aea:	bd70      	pop	{r4, r5, r6, pc}
 8000aec:	2e00      	cmp	r6, #0
 8000aee:	d122      	bne.n	8000b36 <__gesf2+0x86>
 8000af0:	2a00      	cmp	r2, #0
 8000af2:	d1f4      	bne.n	8000ade <__gesf2+0x2e>
 8000af4:	2d00      	cmp	r5, #0
 8000af6:	d1f2      	bne.n	8000ade <__gesf2+0x2e>
 8000af8:	2800      	cmp	r0, #0
 8000afa:	d1f6      	bne.n	8000aea <__gesf2+0x3a>
 8000afc:	2001      	movs	r0, #1
 8000afe:	4240      	negs	r0, r0
 8000b00:	e7f3      	b.n	8000aea <__gesf2+0x3a>
 8000b02:	2d00      	cmp	r5, #0
 8000b04:	d117      	bne.n	8000b36 <__gesf2+0x86>
 8000b06:	2cff      	cmp	r4, #255	; 0xff
 8000b08:	d0f0      	beq.n	8000aec <__gesf2+0x3c>
 8000b0a:	2c00      	cmp	r4, #0
 8000b0c:	d1e7      	bne.n	8000ade <__gesf2+0x2e>
 8000b0e:	2e00      	cmp	r6, #0
 8000b10:	d1e5      	bne.n	8000ade <__gesf2+0x2e>
 8000b12:	e7e6      	b.n	8000ae2 <__gesf2+0x32>
 8000b14:	2000      	movs	r0, #0
 8000b16:	2d00      	cmp	r5, #0
 8000b18:	d0e7      	beq.n	8000aea <__gesf2+0x3a>
 8000b1a:	e7e2      	b.n	8000ae2 <__gesf2+0x32>
 8000b1c:	42a2      	cmp	r2, r4
 8000b1e:	dc05      	bgt.n	8000b2c <__gesf2+0x7c>
 8000b20:	dbea      	blt.n	8000af8 <__gesf2+0x48>
 8000b22:	42b5      	cmp	r5, r6
 8000b24:	d802      	bhi.n	8000b2c <__gesf2+0x7c>
 8000b26:	d3e7      	bcc.n	8000af8 <__gesf2+0x48>
 8000b28:	2000      	movs	r0, #0
 8000b2a:	e7de      	b.n	8000aea <__gesf2+0x3a>
 8000b2c:	4243      	negs	r3, r0
 8000b2e:	4158      	adcs	r0, r3
 8000b30:	0040      	lsls	r0, r0, #1
 8000b32:	3801      	subs	r0, #1
 8000b34:	e7d9      	b.n	8000aea <__gesf2+0x3a>
 8000b36:	2002      	movs	r0, #2
 8000b38:	4240      	negs	r0, r0
 8000b3a:	e7d6      	b.n	8000aea <__gesf2+0x3a>

08000b3c <__lesf2>:
 8000b3c:	b570      	push	{r4, r5, r6, lr}
 8000b3e:	0042      	lsls	r2, r0, #1
 8000b40:	0245      	lsls	r5, r0, #9
 8000b42:	024e      	lsls	r6, r1, #9
 8000b44:	004c      	lsls	r4, r1, #1
 8000b46:	0fc3      	lsrs	r3, r0, #31
 8000b48:	0a6d      	lsrs	r5, r5, #9
 8000b4a:	0e12      	lsrs	r2, r2, #24
 8000b4c:	0a76      	lsrs	r6, r6, #9
 8000b4e:	0e24      	lsrs	r4, r4, #24
 8000b50:	0fc8      	lsrs	r0, r1, #31
 8000b52:	2aff      	cmp	r2, #255	; 0xff
 8000b54:	d00b      	beq.n	8000b6e <__lesf2+0x32>
 8000b56:	2cff      	cmp	r4, #255	; 0xff
 8000b58:	d00d      	beq.n	8000b76 <__lesf2+0x3a>
 8000b5a:	2a00      	cmp	r2, #0
 8000b5c:	d11f      	bne.n	8000b9e <__lesf2+0x62>
 8000b5e:	2c00      	cmp	r4, #0
 8000b60:	d116      	bne.n	8000b90 <__lesf2+0x54>
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	d114      	bne.n	8000b90 <__lesf2+0x54>
 8000b66:	2000      	movs	r0, #0
 8000b68:	2d00      	cmp	r5, #0
 8000b6a:	d010      	beq.n	8000b8e <__lesf2+0x52>
 8000b6c:	e009      	b.n	8000b82 <__lesf2+0x46>
 8000b6e:	2d00      	cmp	r5, #0
 8000b70:	d10c      	bne.n	8000b8c <__lesf2+0x50>
 8000b72:	2cff      	cmp	r4, #255	; 0xff
 8000b74:	d113      	bne.n	8000b9e <__lesf2+0x62>
 8000b76:	2e00      	cmp	r6, #0
 8000b78:	d108      	bne.n	8000b8c <__lesf2+0x50>
 8000b7a:	2a00      	cmp	r2, #0
 8000b7c:	d008      	beq.n	8000b90 <__lesf2+0x54>
 8000b7e:	4283      	cmp	r3, r0
 8000b80:	d012      	beq.n	8000ba8 <__lesf2+0x6c>
 8000b82:	2102      	movs	r1, #2
 8000b84:	1e58      	subs	r0, r3, #1
 8000b86:	4008      	ands	r0, r1
 8000b88:	3801      	subs	r0, #1
 8000b8a:	e000      	b.n	8000b8e <__lesf2+0x52>
 8000b8c:	2002      	movs	r0, #2
 8000b8e:	bd70      	pop	{r4, r5, r6, pc}
 8000b90:	2d00      	cmp	r5, #0
 8000b92:	d1f4      	bne.n	8000b7e <__lesf2+0x42>
 8000b94:	2800      	cmp	r0, #0
 8000b96:	d1fa      	bne.n	8000b8e <__lesf2+0x52>
 8000b98:	2001      	movs	r0, #1
 8000b9a:	4240      	negs	r0, r0
 8000b9c:	e7f7      	b.n	8000b8e <__lesf2+0x52>
 8000b9e:	2c00      	cmp	r4, #0
 8000ba0:	d1ed      	bne.n	8000b7e <__lesf2+0x42>
 8000ba2:	2e00      	cmp	r6, #0
 8000ba4:	d1eb      	bne.n	8000b7e <__lesf2+0x42>
 8000ba6:	e7ec      	b.n	8000b82 <__lesf2+0x46>
 8000ba8:	42a2      	cmp	r2, r4
 8000baa:	dc05      	bgt.n	8000bb8 <__lesf2+0x7c>
 8000bac:	dbf2      	blt.n	8000b94 <__lesf2+0x58>
 8000bae:	42b5      	cmp	r5, r6
 8000bb0:	d802      	bhi.n	8000bb8 <__lesf2+0x7c>
 8000bb2:	d3ef      	bcc.n	8000b94 <__lesf2+0x58>
 8000bb4:	2000      	movs	r0, #0
 8000bb6:	e7ea      	b.n	8000b8e <__lesf2+0x52>
 8000bb8:	4243      	negs	r3, r0
 8000bba:	4158      	adcs	r0, r3
 8000bbc:	0040      	lsls	r0, r0, #1
 8000bbe:	3801      	subs	r0, #1
 8000bc0:	e7e5      	b.n	8000b8e <__lesf2+0x52>
 8000bc2:	46c0      	nop			; (mov r8, r8)

08000bc4 <__aeabi_fmul>:
 8000bc4:	0243      	lsls	r3, r0, #9
 8000bc6:	0a5b      	lsrs	r3, r3, #9
 8000bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bca:	464f      	mov	r7, r9
 8000bcc:	4646      	mov	r6, r8
 8000bce:	4699      	mov	r9, r3
 8000bd0:	46d6      	mov	lr, sl
 8000bd2:	0fc3      	lsrs	r3, r0, #31
 8000bd4:	0045      	lsls	r5, r0, #1
 8000bd6:	4698      	mov	r8, r3
 8000bd8:	b5c0      	push	{r6, r7, lr}
 8000bda:	464b      	mov	r3, r9
 8000bdc:	1c0f      	adds	r7, r1, #0
 8000bde:	0e2d      	lsrs	r5, r5, #24
 8000be0:	d100      	bne.n	8000be4 <__aeabi_fmul+0x20>
 8000be2:	e0cb      	b.n	8000d7c <__aeabi_fmul+0x1b8>
 8000be4:	2dff      	cmp	r5, #255	; 0xff
 8000be6:	d100      	bne.n	8000bea <__aeabi_fmul+0x26>
 8000be8:	e0cf      	b.n	8000d8a <__aeabi_fmul+0x1c6>
 8000bea:	2280      	movs	r2, #128	; 0x80
 8000bec:	00db      	lsls	r3, r3, #3
 8000bee:	04d2      	lsls	r2, r2, #19
 8000bf0:	431a      	orrs	r2, r3
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	4691      	mov	r9, r2
 8000bf6:	2600      	movs	r6, #0
 8000bf8:	469a      	mov	sl, r3
 8000bfa:	3d7f      	subs	r5, #127	; 0x7f
 8000bfc:	027c      	lsls	r4, r7, #9
 8000bfe:	007b      	lsls	r3, r7, #1
 8000c00:	0a64      	lsrs	r4, r4, #9
 8000c02:	0e1b      	lsrs	r3, r3, #24
 8000c04:	0fff      	lsrs	r7, r7, #31
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d100      	bne.n	8000c0c <__aeabi_fmul+0x48>
 8000c0a:	e0a9      	b.n	8000d60 <__aeabi_fmul+0x19c>
 8000c0c:	2bff      	cmp	r3, #255	; 0xff
 8000c0e:	d011      	beq.n	8000c34 <__aeabi_fmul+0x70>
 8000c10:	2280      	movs	r2, #128	; 0x80
 8000c12:	00e4      	lsls	r4, r4, #3
 8000c14:	04d2      	lsls	r2, r2, #19
 8000c16:	4314      	orrs	r4, r2
 8000c18:	4642      	mov	r2, r8
 8000c1a:	3b7f      	subs	r3, #127	; 0x7f
 8000c1c:	195b      	adds	r3, r3, r5
 8000c1e:	407a      	eors	r2, r7
 8000c20:	2000      	movs	r0, #0
 8000c22:	b2d2      	uxtb	r2, r2
 8000c24:	1c5d      	adds	r5, r3, #1
 8000c26:	2e0a      	cmp	r6, #10
 8000c28:	dd13      	ble.n	8000c52 <__aeabi_fmul+0x8e>
 8000c2a:	003a      	movs	r2, r7
 8000c2c:	2e0b      	cmp	r6, #11
 8000c2e:	d047      	beq.n	8000cc0 <__aeabi_fmul+0xfc>
 8000c30:	4647      	mov	r7, r8
 8000c32:	e03f      	b.n	8000cb4 <__aeabi_fmul+0xf0>
 8000c34:	002b      	movs	r3, r5
 8000c36:	33ff      	adds	r3, #255	; 0xff
 8000c38:	2c00      	cmp	r4, #0
 8000c3a:	d11e      	bne.n	8000c7a <__aeabi_fmul+0xb6>
 8000c3c:	2202      	movs	r2, #2
 8000c3e:	4316      	orrs	r6, r2
 8000c40:	4642      	mov	r2, r8
 8000c42:	3501      	adds	r5, #1
 8000c44:	407a      	eors	r2, r7
 8000c46:	b2d2      	uxtb	r2, r2
 8000c48:	35ff      	adds	r5, #255	; 0xff
 8000c4a:	2e0a      	cmp	r6, #10
 8000c4c:	dd00      	ble.n	8000c50 <__aeabi_fmul+0x8c>
 8000c4e:	e0e4      	b.n	8000e1a <__aeabi_fmul+0x256>
 8000c50:	2002      	movs	r0, #2
 8000c52:	2e02      	cmp	r6, #2
 8000c54:	dc1c      	bgt.n	8000c90 <__aeabi_fmul+0xcc>
 8000c56:	3e01      	subs	r6, #1
 8000c58:	2e01      	cmp	r6, #1
 8000c5a:	d842      	bhi.n	8000ce2 <__aeabi_fmul+0x11e>
 8000c5c:	2802      	cmp	r0, #2
 8000c5e:	d03d      	beq.n	8000cdc <__aeabi_fmul+0x118>
 8000c60:	2801      	cmp	r0, #1
 8000c62:	d166      	bne.n	8000d32 <__aeabi_fmul+0x16e>
 8000c64:	2000      	movs	r0, #0
 8000c66:	2100      	movs	r1, #0
 8000c68:	05c0      	lsls	r0, r0, #23
 8000c6a:	4308      	orrs	r0, r1
 8000c6c:	07d2      	lsls	r2, r2, #31
 8000c6e:	4310      	orrs	r0, r2
 8000c70:	bce0      	pop	{r5, r6, r7}
 8000c72:	46ba      	mov	sl, r7
 8000c74:	46b1      	mov	r9, r6
 8000c76:	46a8      	mov	r8, r5
 8000c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c7a:	2203      	movs	r2, #3
 8000c7c:	4316      	orrs	r6, r2
 8000c7e:	4642      	mov	r2, r8
 8000c80:	3501      	adds	r5, #1
 8000c82:	407a      	eors	r2, r7
 8000c84:	b2d2      	uxtb	r2, r2
 8000c86:	35ff      	adds	r5, #255	; 0xff
 8000c88:	2e0a      	cmp	r6, #10
 8000c8a:	dd00      	ble.n	8000c8e <__aeabi_fmul+0xca>
 8000c8c:	e0e4      	b.n	8000e58 <__aeabi_fmul+0x294>
 8000c8e:	2003      	movs	r0, #3
 8000c90:	2101      	movs	r1, #1
 8000c92:	40b1      	lsls	r1, r6
 8000c94:	26a6      	movs	r6, #166	; 0xa6
 8000c96:	00f6      	lsls	r6, r6, #3
 8000c98:	4231      	tst	r1, r6
 8000c9a:	d10a      	bne.n	8000cb2 <__aeabi_fmul+0xee>
 8000c9c:	2690      	movs	r6, #144	; 0x90
 8000c9e:	00b6      	lsls	r6, r6, #2
 8000ca0:	4231      	tst	r1, r6
 8000ca2:	d116      	bne.n	8000cd2 <__aeabi_fmul+0x10e>
 8000ca4:	3eb9      	subs	r6, #185	; 0xb9
 8000ca6:	3eff      	subs	r6, #255	; 0xff
 8000ca8:	420e      	tst	r6, r1
 8000caa:	d01a      	beq.n	8000ce2 <__aeabi_fmul+0x11e>
 8000cac:	46a1      	mov	r9, r4
 8000cae:	4682      	mov	sl, r0
 8000cb0:	e000      	b.n	8000cb4 <__aeabi_fmul+0xf0>
 8000cb2:	0017      	movs	r7, r2
 8000cb4:	4653      	mov	r3, sl
 8000cb6:	003a      	movs	r2, r7
 8000cb8:	2b02      	cmp	r3, #2
 8000cba:	d00f      	beq.n	8000cdc <__aeabi_fmul+0x118>
 8000cbc:	464c      	mov	r4, r9
 8000cbe:	4650      	mov	r0, sl
 8000cc0:	2803      	cmp	r0, #3
 8000cc2:	d1cd      	bne.n	8000c60 <__aeabi_fmul+0x9c>
 8000cc4:	2180      	movs	r1, #128	; 0x80
 8000cc6:	03c9      	lsls	r1, r1, #15
 8000cc8:	4321      	orrs	r1, r4
 8000cca:	0249      	lsls	r1, r1, #9
 8000ccc:	20ff      	movs	r0, #255	; 0xff
 8000cce:	0a49      	lsrs	r1, r1, #9
 8000cd0:	e7ca      	b.n	8000c68 <__aeabi_fmul+0xa4>
 8000cd2:	2180      	movs	r1, #128	; 0x80
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	20ff      	movs	r0, #255	; 0xff
 8000cd8:	03c9      	lsls	r1, r1, #15
 8000cda:	e7c5      	b.n	8000c68 <__aeabi_fmul+0xa4>
 8000cdc:	20ff      	movs	r0, #255	; 0xff
 8000cde:	2100      	movs	r1, #0
 8000ce0:	e7c2      	b.n	8000c68 <__aeabi_fmul+0xa4>
 8000ce2:	0c20      	lsrs	r0, r4, #16
 8000ce4:	4649      	mov	r1, r9
 8000ce6:	0424      	lsls	r4, r4, #16
 8000ce8:	0c24      	lsrs	r4, r4, #16
 8000cea:	0027      	movs	r7, r4
 8000cec:	0c0e      	lsrs	r6, r1, #16
 8000cee:	0409      	lsls	r1, r1, #16
 8000cf0:	0c09      	lsrs	r1, r1, #16
 8000cf2:	4374      	muls	r4, r6
 8000cf4:	434f      	muls	r7, r1
 8000cf6:	4346      	muls	r6, r0
 8000cf8:	4348      	muls	r0, r1
 8000cfa:	0c39      	lsrs	r1, r7, #16
 8000cfc:	1900      	adds	r0, r0, r4
 8000cfe:	1809      	adds	r1, r1, r0
 8000d00:	428c      	cmp	r4, r1
 8000d02:	d903      	bls.n	8000d0c <__aeabi_fmul+0x148>
 8000d04:	2080      	movs	r0, #128	; 0x80
 8000d06:	0240      	lsls	r0, r0, #9
 8000d08:	4684      	mov	ip, r0
 8000d0a:	4466      	add	r6, ip
 8000d0c:	043f      	lsls	r7, r7, #16
 8000d0e:	0408      	lsls	r0, r1, #16
 8000d10:	0c3f      	lsrs	r7, r7, #16
 8000d12:	19c0      	adds	r0, r0, r7
 8000d14:	0184      	lsls	r4, r0, #6
 8000d16:	1e67      	subs	r7, r4, #1
 8000d18:	41bc      	sbcs	r4, r7
 8000d1a:	0c09      	lsrs	r1, r1, #16
 8000d1c:	0e80      	lsrs	r0, r0, #26
 8000d1e:	1989      	adds	r1, r1, r6
 8000d20:	4304      	orrs	r4, r0
 8000d22:	0189      	lsls	r1, r1, #6
 8000d24:	430c      	orrs	r4, r1
 8000d26:	0109      	lsls	r1, r1, #4
 8000d28:	d571      	bpl.n	8000e0e <__aeabi_fmul+0x24a>
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	0861      	lsrs	r1, r4, #1
 8000d2e:	401c      	ands	r4, r3
 8000d30:	430c      	orrs	r4, r1
 8000d32:	002b      	movs	r3, r5
 8000d34:	337f      	adds	r3, #127	; 0x7f
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	dd51      	ble.n	8000dde <__aeabi_fmul+0x21a>
 8000d3a:	0761      	lsls	r1, r4, #29
 8000d3c:	d004      	beq.n	8000d48 <__aeabi_fmul+0x184>
 8000d3e:	210f      	movs	r1, #15
 8000d40:	4021      	ands	r1, r4
 8000d42:	2904      	cmp	r1, #4
 8000d44:	d000      	beq.n	8000d48 <__aeabi_fmul+0x184>
 8000d46:	3404      	adds	r4, #4
 8000d48:	0121      	lsls	r1, r4, #4
 8000d4a:	d503      	bpl.n	8000d54 <__aeabi_fmul+0x190>
 8000d4c:	4b43      	ldr	r3, [pc, #268]	; (8000e5c <__aeabi_fmul+0x298>)
 8000d4e:	401c      	ands	r4, r3
 8000d50:	002b      	movs	r3, r5
 8000d52:	3380      	adds	r3, #128	; 0x80
 8000d54:	2bfe      	cmp	r3, #254	; 0xfe
 8000d56:	dcc1      	bgt.n	8000cdc <__aeabi_fmul+0x118>
 8000d58:	01a1      	lsls	r1, r4, #6
 8000d5a:	0a49      	lsrs	r1, r1, #9
 8000d5c:	b2d8      	uxtb	r0, r3
 8000d5e:	e783      	b.n	8000c68 <__aeabi_fmul+0xa4>
 8000d60:	2c00      	cmp	r4, #0
 8000d62:	d12c      	bne.n	8000dbe <__aeabi_fmul+0x1fa>
 8000d64:	2301      	movs	r3, #1
 8000d66:	4642      	mov	r2, r8
 8000d68:	431e      	orrs	r6, r3
 8000d6a:	002b      	movs	r3, r5
 8000d6c:	407a      	eors	r2, r7
 8000d6e:	2001      	movs	r0, #1
 8000d70:	b2d2      	uxtb	r2, r2
 8000d72:	1c5d      	adds	r5, r3, #1
 8000d74:	2e0a      	cmp	r6, #10
 8000d76:	dd00      	ble.n	8000d7a <__aeabi_fmul+0x1b6>
 8000d78:	e757      	b.n	8000c2a <__aeabi_fmul+0x66>
 8000d7a:	e76a      	b.n	8000c52 <__aeabi_fmul+0x8e>
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d110      	bne.n	8000da2 <__aeabi_fmul+0x1de>
 8000d80:	2301      	movs	r3, #1
 8000d82:	2604      	movs	r6, #4
 8000d84:	2500      	movs	r5, #0
 8000d86:	469a      	mov	sl, r3
 8000d88:	e738      	b.n	8000bfc <__aeabi_fmul+0x38>
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d104      	bne.n	8000d98 <__aeabi_fmul+0x1d4>
 8000d8e:	2302      	movs	r3, #2
 8000d90:	2608      	movs	r6, #8
 8000d92:	25ff      	movs	r5, #255	; 0xff
 8000d94:	469a      	mov	sl, r3
 8000d96:	e731      	b.n	8000bfc <__aeabi_fmul+0x38>
 8000d98:	2303      	movs	r3, #3
 8000d9a:	260c      	movs	r6, #12
 8000d9c:	25ff      	movs	r5, #255	; 0xff
 8000d9e:	469a      	mov	sl, r3
 8000da0:	e72c      	b.n	8000bfc <__aeabi_fmul+0x38>
 8000da2:	4648      	mov	r0, r9
 8000da4:	f002 f9cc 	bl	8003140 <__clzsi2>
 8000da8:	464a      	mov	r2, r9
 8000daa:	1f43      	subs	r3, r0, #5
 8000dac:	2576      	movs	r5, #118	; 0x76
 8000dae:	409a      	lsls	r2, r3
 8000db0:	2300      	movs	r3, #0
 8000db2:	426d      	negs	r5, r5
 8000db4:	4691      	mov	r9, r2
 8000db6:	2600      	movs	r6, #0
 8000db8:	469a      	mov	sl, r3
 8000dba:	1a2d      	subs	r5, r5, r0
 8000dbc:	e71e      	b.n	8000bfc <__aeabi_fmul+0x38>
 8000dbe:	0020      	movs	r0, r4
 8000dc0:	f002 f9be 	bl	8003140 <__clzsi2>
 8000dc4:	4642      	mov	r2, r8
 8000dc6:	1f43      	subs	r3, r0, #5
 8000dc8:	409c      	lsls	r4, r3
 8000dca:	1a2b      	subs	r3, r5, r0
 8000dcc:	3b76      	subs	r3, #118	; 0x76
 8000dce:	407a      	eors	r2, r7
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	b2d2      	uxtb	r2, r2
 8000dd4:	1c5d      	adds	r5, r3, #1
 8000dd6:	2e0a      	cmp	r6, #10
 8000dd8:	dd00      	ble.n	8000ddc <__aeabi_fmul+0x218>
 8000dda:	e726      	b.n	8000c2a <__aeabi_fmul+0x66>
 8000ddc:	e739      	b.n	8000c52 <__aeabi_fmul+0x8e>
 8000dde:	2101      	movs	r1, #1
 8000de0:	1acb      	subs	r3, r1, r3
 8000de2:	2b1b      	cmp	r3, #27
 8000de4:	dd00      	ble.n	8000de8 <__aeabi_fmul+0x224>
 8000de6:	e73d      	b.n	8000c64 <__aeabi_fmul+0xa0>
 8000de8:	359e      	adds	r5, #158	; 0x9e
 8000dea:	0021      	movs	r1, r4
 8000dec:	40ac      	lsls	r4, r5
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	1e63      	subs	r3, r4, #1
 8000df2:	419c      	sbcs	r4, r3
 8000df4:	4321      	orrs	r1, r4
 8000df6:	074b      	lsls	r3, r1, #29
 8000df8:	d004      	beq.n	8000e04 <__aeabi_fmul+0x240>
 8000dfa:	230f      	movs	r3, #15
 8000dfc:	400b      	ands	r3, r1
 8000dfe:	2b04      	cmp	r3, #4
 8000e00:	d000      	beq.n	8000e04 <__aeabi_fmul+0x240>
 8000e02:	3104      	adds	r1, #4
 8000e04:	014b      	lsls	r3, r1, #5
 8000e06:	d504      	bpl.n	8000e12 <__aeabi_fmul+0x24e>
 8000e08:	2001      	movs	r0, #1
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	e72c      	b.n	8000c68 <__aeabi_fmul+0xa4>
 8000e0e:	001d      	movs	r5, r3
 8000e10:	e78f      	b.n	8000d32 <__aeabi_fmul+0x16e>
 8000e12:	0189      	lsls	r1, r1, #6
 8000e14:	2000      	movs	r0, #0
 8000e16:	0a49      	lsrs	r1, r1, #9
 8000e18:	e726      	b.n	8000c68 <__aeabi_fmul+0xa4>
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	2e0f      	cmp	r6, #15
 8000e1e:	d10c      	bne.n	8000e3a <__aeabi_fmul+0x276>
 8000e20:	2180      	movs	r1, #128	; 0x80
 8000e22:	464b      	mov	r3, r9
 8000e24:	03c9      	lsls	r1, r1, #15
 8000e26:	420b      	tst	r3, r1
 8000e28:	d00d      	beq.n	8000e46 <__aeabi_fmul+0x282>
 8000e2a:	420c      	tst	r4, r1
 8000e2c:	d10b      	bne.n	8000e46 <__aeabi_fmul+0x282>
 8000e2e:	4321      	orrs	r1, r4
 8000e30:	0249      	lsls	r1, r1, #9
 8000e32:	003a      	movs	r2, r7
 8000e34:	20ff      	movs	r0, #255	; 0xff
 8000e36:	0a49      	lsrs	r1, r1, #9
 8000e38:	e716      	b.n	8000c68 <__aeabi_fmul+0xa4>
 8000e3a:	2e0b      	cmp	r6, #11
 8000e3c:	d000      	beq.n	8000e40 <__aeabi_fmul+0x27c>
 8000e3e:	e6f7      	b.n	8000c30 <__aeabi_fmul+0x6c>
 8000e40:	46a1      	mov	r9, r4
 8000e42:	469a      	mov	sl, r3
 8000e44:	e736      	b.n	8000cb4 <__aeabi_fmul+0xf0>
 8000e46:	2180      	movs	r1, #128	; 0x80
 8000e48:	464b      	mov	r3, r9
 8000e4a:	03c9      	lsls	r1, r1, #15
 8000e4c:	4319      	orrs	r1, r3
 8000e4e:	0249      	lsls	r1, r1, #9
 8000e50:	4642      	mov	r2, r8
 8000e52:	20ff      	movs	r0, #255	; 0xff
 8000e54:	0a49      	lsrs	r1, r1, #9
 8000e56:	e707      	b.n	8000c68 <__aeabi_fmul+0xa4>
 8000e58:	2303      	movs	r3, #3
 8000e5a:	e7df      	b.n	8000e1c <__aeabi_fmul+0x258>
 8000e5c:	f7ffffff 	.word	0xf7ffffff

08000e60 <__aeabi_fsub>:
 8000e60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e62:	46c6      	mov	lr, r8
 8000e64:	0243      	lsls	r3, r0, #9
 8000e66:	0a5b      	lsrs	r3, r3, #9
 8000e68:	0045      	lsls	r5, r0, #1
 8000e6a:	00da      	lsls	r2, r3, #3
 8000e6c:	0fc4      	lsrs	r4, r0, #31
 8000e6e:	0248      	lsls	r0, r1, #9
 8000e70:	004f      	lsls	r7, r1, #1
 8000e72:	4694      	mov	ip, r2
 8000e74:	0a42      	lsrs	r2, r0, #9
 8000e76:	001e      	movs	r6, r3
 8000e78:	4690      	mov	r8, r2
 8000e7a:	b500      	push	{lr}
 8000e7c:	0e2d      	lsrs	r5, r5, #24
 8000e7e:	0e3f      	lsrs	r7, r7, #24
 8000e80:	0fc9      	lsrs	r1, r1, #31
 8000e82:	0980      	lsrs	r0, r0, #6
 8000e84:	2fff      	cmp	r7, #255	; 0xff
 8000e86:	d059      	beq.n	8000f3c <__aeabi_fsub+0xdc>
 8000e88:	2201      	movs	r2, #1
 8000e8a:	4051      	eors	r1, r2
 8000e8c:	428c      	cmp	r4, r1
 8000e8e:	d039      	beq.n	8000f04 <__aeabi_fsub+0xa4>
 8000e90:	1bea      	subs	r2, r5, r7
 8000e92:	2a00      	cmp	r2, #0
 8000e94:	dd58      	ble.n	8000f48 <__aeabi_fsub+0xe8>
 8000e96:	2f00      	cmp	r7, #0
 8000e98:	d068      	beq.n	8000f6c <__aeabi_fsub+0x10c>
 8000e9a:	2dff      	cmp	r5, #255	; 0xff
 8000e9c:	d100      	bne.n	8000ea0 <__aeabi_fsub+0x40>
 8000e9e:	e0d1      	b.n	8001044 <__aeabi_fsub+0x1e4>
 8000ea0:	2380      	movs	r3, #128	; 0x80
 8000ea2:	04db      	lsls	r3, r3, #19
 8000ea4:	4318      	orrs	r0, r3
 8000ea6:	2a1b      	cmp	r2, #27
 8000ea8:	dc00      	bgt.n	8000eac <__aeabi_fsub+0x4c>
 8000eaa:	e0e3      	b.n	8001074 <__aeabi_fsub+0x214>
 8000eac:	2301      	movs	r3, #1
 8000eae:	4662      	mov	r2, ip
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	015a      	lsls	r2, r3, #5
 8000eb4:	d400      	bmi.n	8000eb8 <__aeabi_fsub+0x58>
 8000eb6:	e0ac      	b.n	8001012 <__aeabi_fsub+0x1b2>
 8000eb8:	019b      	lsls	r3, r3, #6
 8000eba:	099e      	lsrs	r6, r3, #6
 8000ebc:	0030      	movs	r0, r6
 8000ebe:	f002 f93f 	bl	8003140 <__clzsi2>
 8000ec2:	0033      	movs	r3, r6
 8000ec4:	3805      	subs	r0, #5
 8000ec6:	4083      	lsls	r3, r0
 8000ec8:	4285      	cmp	r5, r0
 8000eca:	dc00      	bgt.n	8000ece <__aeabi_fsub+0x6e>
 8000ecc:	e0c6      	b.n	800105c <__aeabi_fsub+0x1fc>
 8000ece:	4ab2      	ldr	r2, [pc, #712]	; (8001198 <__aeabi_fsub+0x338>)
 8000ed0:	1a2d      	subs	r5, r5, r0
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	075a      	lsls	r2, r3, #29
 8000ed6:	d004      	beq.n	8000ee2 <__aeabi_fsub+0x82>
 8000ed8:	220f      	movs	r2, #15
 8000eda:	401a      	ands	r2, r3
 8000edc:	2a04      	cmp	r2, #4
 8000ede:	d000      	beq.n	8000ee2 <__aeabi_fsub+0x82>
 8000ee0:	3304      	adds	r3, #4
 8000ee2:	015a      	lsls	r2, r3, #5
 8000ee4:	d400      	bmi.n	8000ee8 <__aeabi_fsub+0x88>
 8000ee6:	e097      	b.n	8001018 <__aeabi_fsub+0x1b8>
 8000ee8:	1c6a      	adds	r2, r5, #1
 8000eea:	2dfe      	cmp	r5, #254	; 0xfe
 8000eec:	d100      	bne.n	8000ef0 <__aeabi_fsub+0x90>
 8000eee:	e084      	b.n	8000ffa <__aeabi_fsub+0x19a>
 8000ef0:	019b      	lsls	r3, r3, #6
 8000ef2:	0a5e      	lsrs	r6, r3, #9
 8000ef4:	b2d2      	uxtb	r2, r2
 8000ef6:	05d0      	lsls	r0, r2, #23
 8000ef8:	4330      	orrs	r0, r6
 8000efa:	07e4      	lsls	r4, r4, #31
 8000efc:	4320      	orrs	r0, r4
 8000efe:	bc80      	pop	{r7}
 8000f00:	46b8      	mov	r8, r7
 8000f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f04:	1bea      	subs	r2, r5, r7
 8000f06:	2a00      	cmp	r2, #0
 8000f08:	dd41      	ble.n	8000f8e <__aeabi_fsub+0x12e>
 8000f0a:	2f00      	cmp	r7, #0
 8000f0c:	d06b      	beq.n	8000fe6 <__aeabi_fsub+0x186>
 8000f0e:	2dff      	cmp	r5, #255	; 0xff
 8000f10:	d100      	bne.n	8000f14 <__aeabi_fsub+0xb4>
 8000f12:	e097      	b.n	8001044 <__aeabi_fsub+0x1e4>
 8000f14:	2380      	movs	r3, #128	; 0x80
 8000f16:	04db      	lsls	r3, r3, #19
 8000f18:	4318      	orrs	r0, r3
 8000f1a:	2a1b      	cmp	r2, #27
 8000f1c:	dc00      	bgt.n	8000f20 <__aeabi_fsub+0xc0>
 8000f1e:	e0cc      	b.n	80010ba <__aeabi_fsub+0x25a>
 8000f20:	2301      	movs	r3, #1
 8000f22:	4463      	add	r3, ip
 8000f24:	015a      	lsls	r2, r3, #5
 8000f26:	d574      	bpl.n	8001012 <__aeabi_fsub+0x1b2>
 8000f28:	3501      	adds	r5, #1
 8000f2a:	2dff      	cmp	r5, #255	; 0xff
 8000f2c:	d065      	beq.n	8000ffa <__aeabi_fsub+0x19a>
 8000f2e:	2201      	movs	r2, #1
 8000f30:	499a      	ldr	r1, [pc, #616]	; (800119c <__aeabi_fsub+0x33c>)
 8000f32:	401a      	ands	r2, r3
 8000f34:	085b      	lsrs	r3, r3, #1
 8000f36:	400b      	ands	r3, r1
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	e7cb      	b.n	8000ed4 <__aeabi_fsub+0x74>
 8000f3c:	2800      	cmp	r0, #0
 8000f3e:	d01f      	beq.n	8000f80 <__aeabi_fsub+0x120>
 8000f40:	428c      	cmp	r4, r1
 8000f42:	d022      	beq.n	8000f8a <__aeabi_fsub+0x12a>
 8000f44:	002a      	movs	r2, r5
 8000f46:	3aff      	subs	r2, #255	; 0xff
 8000f48:	2a00      	cmp	r2, #0
 8000f4a:	d035      	beq.n	8000fb8 <__aeabi_fsub+0x158>
 8000f4c:	1b7a      	subs	r2, r7, r5
 8000f4e:	2d00      	cmp	r5, #0
 8000f50:	d000      	beq.n	8000f54 <__aeabi_fsub+0xf4>
 8000f52:	e099      	b.n	8001088 <__aeabi_fsub+0x228>
 8000f54:	4663      	mov	r3, ip
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d100      	bne.n	8000f5c <__aeabi_fsub+0xfc>
 8000f5a:	e0dd      	b.n	8001118 <__aeabi_fsub+0x2b8>
 8000f5c:	1e53      	subs	r3, r2, #1
 8000f5e:	2a01      	cmp	r2, #1
 8000f60:	d100      	bne.n	8000f64 <__aeabi_fsub+0x104>
 8000f62:	e105      	b.n	8001170 <__aeabi_fsub+0x310>
 8000f64:	2aff      	cmp	r2, #255	; 0xff
 8000f66:	d06b      	beq.n	8001040 <__aeabi_fsub+0x1e0>
 8000f68:	001a      	movs	r2, r3
 8000f6a:	e094      	b.n	8001096 <__aeabi_fsub+0x236>
 8000f6c:	2800      	cmp	r0, #0
 8000f6e:	d073      	beq.n	8001058 <__aeabi_fsub+0x1f8>
 8000f70:	1e51      	subs	r1, r2, #1
 8000f72:	2a01      	cmp	r2, #1
 8000f74:	d100      	bne.n	8000f78 <__aeabi_fsub+0x118>
 8000f76:	e0df      	b.n	8001138 <__aeabi_fsub+0x2d8>
 8000f78:	2aff      	cmp	r2, #255	; 0xff
 8000f7a:	d063      	beq.n	8001044 <__aeabi_fsub+0x1e4>
 8000f7c:	000a      	movs	r2, r1
 8000f7e:	e792      	b.n	8000ea6 <__aeabi_fsub+0x46>
 8000f80:	2201      	movs	r2, #1
 8000f82:	4051      	eors	r1, r2
 8000f84:	42a1      	cmp	r1, r4
 8000f86:	d000      	beq.n	8000f8a <__aeabi_fsub+0x12a>
 8000f88:	e782      	b.n	8000e90 <__aeabi_fsub+0x30>
 8000f8a:	002a      	movs	r2, r5
 8000f8c:	3aff      	subs	r2, #255	; 0xff
 8000f8e:	2a00      	cmp	r2, #0
 8000f90:	d036      	beq.n	8001000 <__aeabi_fsub+0x1a0>
 8000f92:	1b7a      	subs	r2, r7, r5
 8000f94:	2d00      	cmp	r5, #0
 8000f96:	d100      	bne.n	8000f9a <__aeabi_fsub+0x13a>
 8000f98:	e0aa      	b.n	80010f0 <__aeabi_fsub+0x290>
 8000f9a:	2fff      	cmp	r7, #255	; 0xff
 8000f9c:	d100      	bne.n	8000fa0 <__aeabi_fsub+0x140>
 8000f9e:	e0da      	b.n	8001156 <__aeabi_fsub+0x2f6>
 8000fa0:	2380      	movs	r3, #128	; 0x80
 8000fa2:	4661      	mov	r1, ip
 8000fa4:	04db      	lsls	r3, r3, #19
 8000fa6:	4319      	orrs	r1, r3
 8000fa8:	468c      	mov	ip, r1
 8000faa:	2a1b      	cmp	r2, #27
 8000fac:	dc00      	bgt.n	8000fb0 <__aeabi_fsub+0x150>
 8000fae:	e0d4      	b.n	800115a <__aeabi_fsub+0x2fa>
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	003d      	movs	r5, r7
 8000fb4:	181b      	adds	r3, r3, r0
 8000fb6:	e7b5      	b.n	8000f24 <__aeabi_fsub+0xc4>
 8000fb8:	27fe      	movs	r7, #254	; 0xfe
 8000fba:	1c6a      	adds	r2, r5, #1
 8000fbc:	4217      	tst	r7, r2
 8000fbe:	d171      	bne.n	80010a4 <__aeabi_fsub+0x244>
 8000fc0:	2d00      	cmp	r5, #0
 8000fc2:	d000      	beq.n	8000fc6 <__aeabi_fsub+0x166>
 8000fc4:	e09e      	b.n	8001104 <__aeabi_fsub+0x2a4>
 8000fc6:	4663      	mov	r3, ip
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d100      	bne.n	8000fce <__aeabi_fsub+0x16e>
 8000fcc:	e0d5      	b.n	800117a <__aeabi_fsub+0x31a>
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2800      	cmp	r0, #0
 8000fd2:	d100      	bne.n	8000fd6 <__aeabi_fsub+0x176>
 8000fd4:	e78f      	b.n	8000ef6 <__aeabi_fsub+0x96>
 8000fd6:	1a1b      	subs	r3, r3, r0
 8000fd8:	015e      	lsls	r6, r3, #5
 8000fda:	d400      	bmi.n	8000fde <__aeabi_fsub+0x17e>
 8000fdc:	e0d6      	b.n	800118c <__aeabi_fsub+0x32c>
 8000fde:	4663      	mov	r3, ip
 8000fe0:	000c      	movs	r4, r1
 8000fe2:	1ac3      	subs	r3, r0, r3
 8000fe4:	e776      	b.n	8000ed4 <__aeabi_fsub+0x74>
 8000fe6:	2800      	cmp	r0, #0
 8000fe8:	d036      	beq.n	8001058 <__aeabi_fsub+0x1f8>
 8000fea:	1e51      	subs	r1, r2, #1
 8000fec:	2a01      	cmp	r2, #1
 8000fee:	d100      	bne.n	8000ff2 <__aeabi_fsub+0x192>
 8000ff0:	e09a      	b.n	8001128 <__aeabi_fsub+0x2c8>
 8000ff2:	2aff      	cmp	r2, #255	; 0xff
 8000ff4:	d026      	beq.n	8001044 <__aeabi_fsub+0x1e4>
 8000ff6:	000a      	movs	r2, r1
 8000ff8:	e78f      	b.n	8000f1a <__aeabi_fsub+0xba>
 8000ffa:	22ff      	movs	r2, #255	; 0xff
 8000ffc:	2600      	movs	r6, #0
 8000ffe:	e77a      	b.n	8000ef6 <__aeabi_fsub+0x96>
 8001000:	27fe      	movs	r7, #254	; 0xfe
 8001002:	1c6a      	adds	r2, r5, #1
 8001004:	4217      	tst	r7, r2
 8001006:	d062      	beq.n	80010ce <__aeabi_fsub+0x26e>
 8001008:	2aff      	cmp	r2, #255	; 0xff
 800100a:	d0f6      	beq.n	8000ffa <__aeabi_fsub+0x19a>
 800100c:	0015      	movs	r5, r2
 800100e:	4460      	add	r0, ip
 8001010:	0843      	lsrs	r3, r0, #1
 8001012:	075a      	lsls	r2, r3, #29
 8001014:	d000      	beq.n	8001018 <__aeabi_fsub+0x1b8>
 8001016:	e75f      	b.n	8000ed8 <__aeabi_fsub+0x78>
 8001018:	08db      	lsrs	r3, r3, #3
 800101a:	2dff      	cmp	r5, #255	; 0xff
 800101c:	d012      	beq.n	8001044 <__aeabi_fsub+0x1e4>
 800101e:	025b      	lsls	r3, r3, #9
 8001020:	0a5e      	lsrs	r6, r3, #9
 8001022:	b2ea      	uxtb	r2, r5
 8001024:	e767      	b.n	8000ef6 <__aeabi_fsub+0x96>
 8001026:	4662      	mov	r2, ip
 8001028:	2a00      	cmp	r2, #0
 800102a:	d100      	bne.n	800102e <__aeabi_fsub+0x1ce>
 800102c:	e093      	b.n	8001156 <__aeabi_fsub+0x2f6>
 800102e:	2800      	cmp	r0, #0
 8001030:	d008      	beq.n	8001044 <__aeabi_fsub+0x1e4>
 8001032:	2280      	movs	r2, #128	; 0x80
 8001034:	03d2      	lsls	r2, r2, #15
 8001036:	4213      	tst	r3, r2
 8001038:	d004      	beq.n	8001044 <__aeabi_fsub+0x1e4>
 800103a:	4640      	mov	r0, r8
 800103c:	4210      	tst	r0, r2
 800103e:	d101      	bne.n	8001044 <__aeabi_fsub+0x1e4>
 8001040:	000c      	movs	r4, r1
 8001042:	4643      	mov	r3, r8
 8001044:	2b00      	cmp	r3, #0
 8001046:	d0d8      	beq.n	8000ffa <__aeabi_fsub+0x19a>
 8001048:	2680      	movs	r6, #128	; 0x80
 800104a:	03f6      	lsls	r6, r6, #15
 800104c:	431e      	orrs	r6, r3
 800104e:	0276      	lsls	r6, r6, #9
 8001050:	22ff      	movs	r2, #255	; 0xff
 8001052:	0a76      	lsrs	r6, r6, #9
 8001054:	e74f      	b.n	8000ef6 <__aeabi_fsub+0x96>
 8001056:	4643      	mov	r3, r8
 8001058:	0015      	movs	r5, r2
 800105a:	e7de      	b.n	800101a <__aeabi_fsub+0x1ba>
 800105c:	2220      	movs	r2, #32
 800105e:	1b40      	subs	r0, r0, r5
 8001060:	3001      	adds	r0, #1
 8001062:	1a12      	subs	r2, r2, r0
 8001064:	0019      	movs	r1, r3
 8001066:	4093      	lsls	r3, r2
 8001068:	40c1      	lsrs	r1, r0
 800106a:	1e5a      	subs	r2, r3, #1
 800106c:	4193      	sbcs	r3, r2
 800106e:	2500      	movs	r5, #0
 8001070:	430b      	orrs	r3, r1
 8001072:	e72f      	b.n	8000ed4 <__aeabi_fsub+0x74>
 8001074:	2320      	movs	r3, #32
 8001076:	1a9b      	subs	r3, r3, r2
 8001078:	0001      	movs	r1, r0
 800107a:	4098      	lsls	r0, r3
 800107c:	0003      	movs	r3, r0
 800107e:	40d1      	lsrs	r1, r2
 8001080:	1e5a      	subs	r2, r3, #1
 8001082:	4193      	sbcs	r3, r2
 8001084:	430b      	orrs	r3, r1
 8001086:	e712      	b.n	8000eae <__aeabi_fsub+0x4e>
 8001088:	2fff      	cmp	r7, #255	; 0xff
 800108a:	d0d9      	beq.n	8001040 <__aeabi_fsub+0x1e0>
 800108c:	2380      	movs	r3, #128	; 0x80
 800108e:	4664      	mov	r4, ip
 8001090:	04db      	lsls	r3, r3, #19
 8001092:	431c      	orrs	r4, r3
 8001094:	46a4      	mov	ip, r4
 8001096:	2a1b      	cmp	r2, #27
 8001098:	dd52      	ble.n	8001140 <__aeabi_fsub+0x2e0>
 800109a:	2301      	movs	r3, #1
 800109c:	000c      	movs	r4, r1
 800109e:	003d      	movs	r5, r7
 80010a0:	1ac3      	subs	r3, r0, r3
 80010a2:	e706      	b.n	8000eb2 <__aeabi_fsub+0x52>
 80010a4:	4663      	mov	r3, ip
 80010a6:	1a1e      	subs	r6, r3, r0
 80010a8:	0173      	lsls	r3, r6, #5
 80010aa:	d439      	bmi.n	8001120 <__aeabi_fsub+0x2c0>
 80010ac:	2e00      	cmp	r6, #0
 80010ae:	d000      	beq.n	80010b2 <__aeabi_fsub+0x252>
 80010b0:	e704      	b.n	8000ebc <__aeabi_fsub+0x5c>
 80010b2:	2400      	movs	r4, #0
 80010b4:	2200      	movs	r2, #0
 80010b6:	2600      	movs	r6, #0
 80010b8:	e71d      	b.n	8000ef6 <__aeabi_fsub+0x96>
 80010ba:	2320      	movs	r3, #32
 80010bc:	1a9b      	subs	r3, r3, r2
 80010be:	0001      	movs	r1, r0
 80010c0:	4098      	lsls	r0, r3
 80010c2:	0003      	movs	r3, r0
 80010c4:	40d1      	lsrs	r1, r2
 80010c6:	1e5a      	subs	r2, r3, #1
 80010c8:	4193      	sbcs	r3, r2
 80010ca:	430b      	orrs	r3, r1
 80010cc:	e729      	b.n	8000f22 <__aeabi_fsub+0xc2>
 80010ce:	2d00      	cmp	r5, #0
 80010d0:	d1a9      	bne.n	8001026 <__aeabi_fsub+0x1c6>
 80010d2:	4663      	mov	r3, ip
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d056      	beq.n	8001186 <__aeabi_fsub+0x326>
 80010d8:	2200      	movs	r2, #0
 80010da:	2800      	cmp	r0, #0
 80010dc:	d100      	bne.n	80010e0 <__aeabi_fsub+0x280>
 80010de:	e70a      	b.n	8000ef6 <__aeabi_fsub+0x96>
 80010e0:	0003      	movs	r3, r0
 80010e2:	4463      	add	r3, ip
 80010e4:	015a      	lsls	r2, r3, #5
 80010e6:	d594      	bpl.n	8001012 <__aeabi_fsub+0x1b2>
 80010e8:	4a2b      	ldr	r2, [pc, #172]	; (8001198 <__aeabi_fsub+0x338>)
 80010ea:	3501      	adds	r5, #1
 80010ec:	4013      	ands	r3, r2
 80010ee:	e790      	b.n	8001012 <__aeabi_fsub+0x1b2>
 80010f0:	4663      	mov	r3, ip
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d0af      	beq.n	8001056 <__aeabi_fsub+0x1f6>
 80010f6:	1e53      	subs	r3, r2, #1
 80010f8:	2a01      	cmp	r2, #1
 80010fa:	d015      	beq.n	8001128 <__aeabi_fsub+0x2c8>
 80010fc:	2aff      	cmp	r2, #255	; 0xff
 80010fe:	d02a      	beq.n	8001156 <__aeabi_fsub+0x2f6>
 8001100:	001a      	movs	r2, r3
 8001102:	e752      	b.n	8000faa <__aeabi_fsub+0x14a>
 8001104:	4662      	mov	r2, ip
 8001106:	2a00      	cmp	r2, #0
 8001108:	d191      	bne.n	800102e <__aeabi_fsub+0x1ce>
 800110a:	2800      	cmp	r0, #0
 800110c:	d198      	bne.n	8001040 <__aeabi_fsub+0x1e0>
 800110e:	2680      	movs	r6, #128	; 0x80
 8001110:	2400      	movs	r4, #0
 8001112:	22ff      	movs	r2, #255	; 0xff
 8001114:	03f6      	lsls	r6, r6, #15
 8001116:	e6ee      	b.n	8000ef6 <__aeabi_fsub+0x96>
 8001118:	000c      	movs	r4, r1
 800111a:	4643      	mov	r3, r8
 800111c:	0015      	movs	r5, r2
 800111e:	e77c      	b.n	800101a <__aeabi_fsub+0x1ba>
 8001120:	4663      	mov	r3, ip
 8001122:	000c      	movs	r4, r1
 8001124:	1ac6      	subs	r6, r0, r3
 8001126:	e6c9      	b.n	8000ebc <__aeabi_fsub+0x5c>
 8001128:	0003      	movs	r3, r0
 800112a:	4463      	add	r3, ip
 800112c:	2501      	movs	r5, #1
 800112e:	015a      	lsls	r2, r3, #5
 8001130:	d400      	bmi.n	8001134 <__aeabi_fsub+0x2d4>
 8001132:	e76e      	b.n	8001012 <__aeabi_fsub+0x1b2>
 8001134:	2502      	movs	r5, #2
 8001136:	e6fa      	b.n	8000f2e <__aeabi_fsub+0xce>
 8001138:	4663      	mov	r3, ip
 800113a:	2501      	movs	r5, #1
 800113c:	1a1b      	subs	r3, r3, r0
 800113e:	e6b8      	b.n	8000eb2 <__aeabi_fsub+0x52>
 8001140:	4664      	mov	r4, ip
 8001142:	2320      	movs	r3, #32
 8001144:	40d4      	lsrs	r4, r2
 8001146:	1a9b      	subs	r3, r3, r2
 8001148:	4662      	mov	r2, ip
 800114a:	409a      	lsls	r2, r3
 800114c:	0013      	movs	r3, r2
 800114e:	1e5a      	subs	r2, r3, #1
 8001150:	4193      	sbcs	r3, r2
 8001152:	4323      	orrs	r3, r4
 8001154:	e7a2      	b.n	800109c <__aeabi_fsub+0x23c>
 8001156:	4643      	mov	r3, r8
 8001158:	e774      	b.n	8001044 <__aeabi_fsub+0x1e4>
 800115a:	4661      	mov	r1, ip
 800115c:	2320      	movs	r3, #32
 800115e:	40d1      	lsrs	r1, r2
 8001160:	1a9b      	subs	r3, r3, r2
 8001162:	4662      	mov	r2, ip
 8001164:	409a      	lsls	r2, r3
 8001166:	0013      	movs	r3, r2
 8001168:	1e5a      	subs	r2, r3, #1
 800116a:	4193      	sbcs	r3, r2
 800116c:	430b      	orrs	r3, r1
 800116e:	e720      	b.n	8000fb2 <__aeabi_fsub+0x152>
 8001170:	4663      	mov	r3, ip
 8001172:	000c      	movs	r4, r1
 8001174:	2501      	movs	r5, #1
 8001176:	1ac3      	subs	r3, r0, r3
 8001178:	e69b      	b.n	8000eb2 <__aeabi_fsub+0x52>
 800117a:	2800      	cmp	r0, #0
 800117c:	d099      	beq.n	80010b2 <__aeabi_fsub+0x252>
 800117e:	000c      	movs	r4, r1
 8001180:	4646      	mov	r6, r8
 8001182:	2200      	movs	r2, #0
 8001184:	e6b7      	b.n	8000ef6 <__aeabi_fsub+0x96>
 8001186:	4646      	mov	r6, r8
 8001188:	2200      	movs	r2, #0
 800118a:	e6b4      	b.n	8000ef6 <__aeabi_fsub+0x96>
 800118c:	2b00      	cmp	r3, #0
 800118e:	d000      	beq.n	8001192 <__aeabi_fsub+0x332>
 8001190:	e73f      	b.n	8001012 <__aeabi_fsub+0x1b2>
 8001192:	2400      	movs	r4, #0
 8001194:	2600      	movs	r6, #0
 8001196:	e6ae      	b.n	8000ef6 <__aeabi_fsub+0x96>
 8001198:	fbffffff 	.word	0xfbffffff
 800119c:	7dffffff 	.word	0x7dffffff

080011a0 <__aeabi_f2iz>:
 80011a0:	0241      	lsls	r1, r0, #9
 80011a2:	0042      	lsls	r2, r0, #1
 80011a4:	0fc3      	lsrs	r3, r0, #31
 80011a6:	0a49      	lsrs	r1, r1, #9
 80011a8:	2000      	movs	r0, #0
 80011aa:	0e12      	lsrs	r2, r2, #24
 80011ac:	2a7e      	cmp	r2, #126	; 0x7e
 80011ae:	dd03      	ble.n	80011b8 <__aeabi_f2iz+0x18>
 80011b0:	2a9d      	cmp	r2, #157	; 0x9d
 80011b2:	dd02      	ble.n	80011ba <__aeabi_f2iz+0x1a>
 80011b4:	4a09      	ldr	r2, [pc, #36]	; (80011dc <__aeabi_f2iz+0x3c>)
 80011b6:	1898      	adds	r0, r3, r2
 80011b8:	4770      	bx	lr
 80011ba:	2080      	movs	r0, #128	; 0x80
 80011bc:	0400      	lsls	r0, r0, #16
 80011be:	4301      	orrs	r1, r0
 80011c0:	2a95      	cmp	r2, #149	; 0x95
 80011c2:	dc07      	bgt.n	80011d4 <__aeabi_f2iz+0x34>
 80011c4:	2096      	movs	r0, #150	; 0x96
 80011c6:	1a82      	subs	r2, r0, r2
 80011c8:	40d1      	lsrs	r1, r2
 80011ca:	4248      	negs	r0, r1
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d1f3      	bne.n	80011b8 <__aeabi_f2iz+0x18>
 80011d0:	0008      	movs	r0, r1
 80011d2:	e7f1      	b.n	80011b8 <__aeabi_f2iz+0x18>
 80011d4:	3a96      	subs	r2, #150	; 0x96
 80011d6:	4091      	lsls	r1, r2
 80011d8:	e7f7      	b.n	80011ca <__aeabi_f2iz+0x2a>
 80011da:	46c0      	nop			; (mov r8, r8)
 80011dc:	7fffffff 	.word	0x7fffffff

080011e0 <__aeabi_i2f>:
 80011e0:	b570      	push	{r4, r5, r6, lr}
 80011e2:	2800      	cmp	r0, #0
 80011e4:	d013      	beq.n	800120e <__aeabi_i2f+0x2e>
 80011e6:	17c3      	asrs	r3, r0, #31
 80011e8:	18c5      	adds	r5, r0, r3
 80011ea:	405d      	eors	r5, r3
 80011ec:	0fc4      	lsrs	r4, r0, #31
 80011ee:	0028      	movs	r0, r5
 80011f0:	f001 ffa6 	bl	8003140 <__clzsi2>
 80011f4:	239e      	movs	r3, #158	; 0x9e
 80011f6:	0001      	movs	r1, r0
 80011f8:	1a1b      	subs	r3, r3, r0
 80011fa:	2b96      	cmp	r3, #150	; 0x96
 80011fc:	dc0f      	bgt.n	800121e <__aeabi_i2f+0x3e>
 80011fe:	2808      	cmp	r0, #8
 8001200:	d031      	beq.n	8001266 <__aeabi_i2f+0x86>
 8001202:	3908      	subs	r1, #8
 8001204:	408d      	lsls	r5, r1
 8001206:	026d      	lsls	r5, r5, #9
 8001208:	0a6d      	lsrs	r5, r5, #9
 800120a:	b2d8      	uxtb	r0, r3
 800120c:	e002      	b.n	8001214 <__aeabi_i2f+0x34>
 800120e:	2400      	movs	r4, #0
 8001210:	2000      	movs	r0, #0
 8001212:	2500      	movs	r5, #0
 8001214:	05c0      	lsls	r0, r0, #23
 8001216:	4328      	orrs	r0, r5
 8001218:	07e4      	lsls	r4, r4, #31
 800121a:	4320      	orrs	r0, r4
 800121c:	bd70      	pop	{r4, r5, r6, pc}
 800121e:	2b99      	cmp	r3, #153	; 0x99
 8001220:	dd0c      	ble.n	800123c <__aeabi_i2f+0x5c>
 8001222:	2205      	movs	r2, #5
 8001224:	1a12      	subs	r2, r2, r0
 8001226:	0028      	movs	r0, r5
 8001228:	40d0      	lsrs	r0, r2
 800122a:	0002      	movs	r2, r0
 800122c:	0008      	movs	r0, r1
 800122e:	301b      	adds	r0, #27
 8001230:	4085      	lsls	r5, r0
 8001232:	0028      	movs	r0, r5
 8001234:	1e45      	subs	r5, r0, #1
 8001236:	41a8      	sbcs	r0, r5
 8001238:	4302      	orrs	r2, r0
 800123a:	0015      	movs	r5, r2
 800123c:	2905      	cmp	r1, #5
 800123e:	dc16      	bgt.n	800126e <__aeabi_i2f+0x8e>
 8001240:	002a      	movs	r2, r5
 8001242:	480f      	ldr	r0, [pc, #60]	; (8001280 <__aeabi_i2f+0xa0>)
 8001244:	4002      	ands	r2, r0
 8001246:	076e      	lsls	r6, r5, #29
 8001248:	d009      	beq.n	800125e <__aeabi_i2f+0x7e>
 800124a:	260f      	movs	r6, #15
 800124c:	4035      	ands	r5, r6
 800124e:	2d04      	cmp	r5, #4
 8001250:	d005      	beq.n	800125e <__aeabi_i2f+0x7e>
 8001252:	3204      	adds	r2, #4
 8001254:	0155      	lsls	r5, r2, #5
 8001256:	d502      	bpl.n	800125e <__aeabi_i2f+0x7e>
 8001258:	239f      	movs	r3, #159	; 0x9f
 800125a:	4002      	ands	r2, r0
 800125c:	1a5b      	subs	r3, r3, r1
 800125e:	0192      	lsls	r2, r2, #6
 8001260:	0a55      	lsrs	r5, r2, #9
 8001262:	b2d8      	uxtb	r0, r3
 8001264:	e7d6      	b.n	8001214 <__aeabi_i2f+0x34>
 8001266:	026d      	lsls	r5, r5, #9
 8001268:	2096      	movs	r0, #150	; 0x96
 800126a:	0a6d      	lsrs	r5, r5, #9
 800126c:	e7d2      	b.n	8001214 <__aeabi_i2f+0x34>
 800126e:	1f4a      	subs	r2, r1, #5
 8001270:	4095      	lsls	r5, r2
 8001272:	002a      	movs	r2, r5
 8001274:	4802      	ldr	r0, [pc, #8]	; (8001280 <__aeabi_i2f+0xa0>)
 8001276:	4002      	ands	r2, r0
 8001278:	076e      	lsls	r6, r5, #29
 800127a:	d0f0      	beq.n	800125e <__aeabi_i2f+0x7e>
 800127c:	e7e5      	b.n	800124a <__aeabi_i2f+0x6a>
 800127e:	46c0      	nop			; (mov r8, r8)
 8001280:	fbffffff 	.word	0xfbffffff

08001284 <__aeabi_ui2f>:
 8001284:	b570      	push	{r4, r5, r6, lr}
 8001286:	1e04      	subs	r4, r0, #0
 8001288:	d00e      	beq.n	80012a8 <__aeabi_ui2f+0x24>
 800128a:	f001 ff59 	bl	8003140 <__clzsi2>
 800128e:	239e      	movs	r3, #158	; 0x9e
 8001290:	0001      	movs	r1, r0
 8001292:	1a1b      	subs	r3, r3, r0
 8001294:	2b96      	cmp	r3, #150	; 0x96
 8001296:	dc0c      	bgt.n	80012b2 <__aeabi_ui2f+0x2e>
 8001298:	2808      	cmp	r0, #8
 800129a:	d02c      	beq.n	80012f6 <__aeabi_ui2f+0x72>
 800129c:	3908      	subs	r1, #8
 800129e:	408c      	lsls	r4, r1
 80012a0:	0264      	lsls	r4, r4, #9
 80012a2:	0a64      	lsrs	r4, r4, #9
 80012a4:	b2d8      	uxtb	r0, r3
 80012a6:	e001      	b.n	80012ac <__aeabi_ui2f+0x28>
 80012a8:	2000      	movs	r0, #0
 80012aa:	2400      	movs	r4, #0
 80012ac:	05c0      	lsls	r0, r0, #23
 80012ae:	4320      	orrs	r0, r4
 80012b0:	bd70      	pop	{r4, r5, r6, pc}
 80012b2:	2b99      	cmp	r3, #153	; 0x99
 80012b4:	dd0a      	ble.n	80012cc <__aeabi_ui2f+0x48>
 80012b6:	0002      	movs	r2, r0
 80012b8:	0020      	movs	r0, r4
 80012ba:	321b      	adds	r2, #27
 80012bc:	4090      	lsls	r0, r2
 80012be:	0002      	movs	r2, r0
 80012c0:	1e50      	subs	r0, r2, #1
 80012c2:	4182      	sbcs	r2, r0
 80012c4:	2005      	movs	r0, #5
 80012c6:	1a40      	subs	r0, r0, r1
 80012c8:	40c4      	lsrs	r4, r0
 80012ca:	4314      	orrs	r4, r2
 80012cc:	2905      	cmp	r1, #5
 80012ce:	dc16      	bgt.n	80012fe <__aeabi_ui2f+0x7a>
 80012d0:	0022      	movs	r2, r4
 80012d2:	480f      	ldr	r0, [pc, #60]	; (8001310 <__aeabi_ui2f+0x8c>)
 80012d4:	4002      	ands	r2, r0
 80012d6:	0765      	lsls	r5, r4, #29
 80012d8:	d009      	beq.n	80012ee <__aeabi_ui2f+0x6a>
 80012da:	250f      	movs	r5, #15
 80012dc:	402c      	ands	r4, r5
 80012de:	2c04      	cmp	r4, #4
 80012e0:	d005      	beq.n	80012ee <__aeabi_ui2f+0x6a>
 80012e2:	3204      	adds	r2, #4
 80012e4:	0154      	lsls	r4, r2, #5
 80012e6:	d502      	bpl.n	80012ee <__aeabi_ui2f+0x6a>
 80012e8:	239f      	movs	r3, #159	; 0x9f
 80012ea:	4002      	ands	r2, r0
 80012ec:	1a5b      	subs	r3, r3, r1
 80012ee:	0192      	lsls	r2, r2, #6
 80012f0:	0a54      	lsrs	r4, r2, #9
 80012f2:	b2d8      	uxtb	r0, r3
 80012f4:	e7da      	b.n	80012ac <__aeabi_ui2f+0x28>
 80012f6:	0264      	lsls	r4, r4, #9
 80012f8:	2096      	movs	r0, #150	; 0x96
 80012fa:	0a64      	lsrs	r4, r4, #9
 80012fc:	e7d6      	b.n	80012ac <__aeabi_ui2f+0x28>
 80012fe:	1f4a      	subs	r2, r1, #5
 8001300:	4094      	lsls	r4, r2
 8001302:	0022      	movs	r2, r4
 8001304:	4802      	ldr	r0, [pc, #8]	; (8001310 <__aeabi_ui2f+0x8c>)
 8001306:	4002      	ands	r2, r0
 8001308:	0765      	lsls	r5, r4, #29
 800130a:	d0f0      	beq.n	80012ee <__aeabi_ui2f+0x6a>
 800130c:	e7e5      	b.n	80012da <__aeabi_ui2f+0x56>
 800130e:	46c0      	nop			; (mov r8, r8)
 8001310:	fbffffff 	.word	0xfbffffff

08001314 <__aeabi_dadd>:
 8001314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001316:	464f      	mov	r7, r9
 8001318:	4646      	mov	r6, r8
 800131a:	46d6      	mov	lr, sl
 800131c:	0004      	movs	r4, r0
 800131e:	b5c0      	push	{r6, r7, lr}
 8001320:	001f      	movs	r7, r3
 8001322:	030b      	lsls	r3, r1, #12
 8001324:	0010      	movs	r0, r2
 8001326:	004e      	lsls	r6, r1, #1
 8001328:	0a5b      	lsrs	r3, r3, #9
 800132a:	0fcd      	lsrs	r5, r1, #31
 800132c:	0f61      	lsrs	r1, r4, #29
 800132e:	007a      	lsls	r2, r7, #1
 8001330:	4319      	orrs	r1, r3
 8001332:	00e3      	lsls	r3, r4, #3
 8001334:	033c      	lsls	r4, r7, #12
 8001336:	0fff      	lsrs	r7, r7, #31
 8001338:	46bc      	mov	ip, r7
 800133a:	0a64      	lsrs	r4, r4, #9
 800133c:	0f47      	lsrs	r7, r0, #29
 800133e:	4327      	orrs	r7, r4
 8001340:	0d76      	lsrs	r6, r6, #21
 8001342:	0d52      	lsrs	r2, r2, #21
 8001344:	00c0      	lsls	r0, r0, #3
 8001346:	46b9      	mov	r9, r7
 8001348:	4680      	mov	r8, r0
 800134a:	1ab7      	subs	r7, r6, r2
 800134c:	4565      	cmp	r5, ip
 800134e:	d100      	bne.n	8001352 <__aeabi_dadd+0x3e>
 8001350:	e09b      	b.n	800148a <__aeabi_dadd+0x176>
 8001352:	2f00      	cmp	r7, #0
 8001354:	dc00      	bgt.n	8001358 <__aeabi_dadd+0x44>
 8001356:	e084      	b.n	8001462 <__aeabi_dadd+0x14e>
 8001358:	2a00      	cmp	r2, #0
 800135a:	d100      	bne.n	800135e <__aeabi_dadd+0x4a>
 800135c:	e0be      	b.n	80014dc <__aeabi_dadd+0x1c8>
 800135e:	4ac8      	ldr	r2, [pc, #800]	; (8001680 <__aeabi_dadd+0x36c>)
 8001360:	4296      	cmp	r6, r2
 8001362:	d100      	bne.n	8001366 <__aeabi_dadd+0x52>
 8001364:	e124      	b.n	80015b0 <__aeabi_dadd+0x29c>
 8001366:	2280      	movs	r2, #128	; 0x80
 8001368:	464c      	mov	r4, r9
 800136a:	0412      	lsls	r2, r2, #16
 800136c:	4314      	orrs	r4, r2
 800136e:	46a1      	mov	r9, r4
 8001370:	2f38      	cmp	r7, #56	; 0x38
 8001372:	dd00      	ble.n	8001376 <__aeabi_dadd+0x62>
 8001374:	e167      	b.n	8001646 <__aeabi_dadd+0x332>
 8001376:	2f1f      	cmp	r7, #31
 8001378:	dd00      	ble.n	800137c <__aeabi_dadd+0x68>
 800137a:	e1d6      	b.n	800172a <__aeabi_dadd+0x416>
 800137c:	2220      	movs	r2, #32
 800137e:	464c      	mov	r4, r9
 8001380:	1bd2      	subs	r2, r2, r7
 8001382:	4094      	lsls	r4, r2
 8001384:	46a2      	mov	sl, r4
 8001386:	4644      	mov	r4, r8
 8001388:	40fc      	lsrs	r4, r7
 800138a:	0020      	movs	r0, r4
 800138c:	4654      	mov	r4, sl
 800138e:	4304      	orrs	r4, r0
 8001390:	4640      	mov	r0, r8
 8001392:	4090      	lsls	r0, r2
 8001394:	1e42      	subs	r2, r0, #1
 8001396:	4190      	sbcs	r0, r2
 8001398:	464a      	mov	r2, r9
 800139a:	40fa      	lsrs	r2, r7
 800139c:	4304      	orrs	r4, r0
 800139e:	1a89      	subs	r1, r1, r2
 80013a0:	1b1c      	subs	r4, r3, r4
 80013a2:	42a3      	cmp	r3, r4
 80013a4:	4192      	sbcs	r2, r2
 80013a6:	4252      	negs	r2, r2
 80013a8:	1a8b      	subs	r3, r1, r2
 80013aa:	469a      	mov	sl, r3
 80013ac:	4653      	mov	r3, sl
 80013ae:	021b      	lsls	r3, r3, #8
 80013b0:	d400      	bmi.n	80013b4 <__aeabi_dadd+0xa0>
 80013b2:	e0d4      	b.n	800155e <__aeabi_dadd+0x24a>
 80013b4:	4653      	mov	r3, sl
 80013b6:	025a      	lsls	r2, r3, #9
 80013b8:	0a53      	lsrs	r3, r2, #9
 80013ba:	469a      	mov	sl, r3
 80013bc:	4653      	mov	r3, sl
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d100      	bne.n	80013c4 <__aeabi_dadd+0xb0>
 80013c2:	e104      	b.n	80015ce <__aeabi_dadd+0x2ba>
 80013c4:	4650      	mov	r0, sl
 80013c6:	f001 febb 	bl	8003140 <__clzsi2>
 80013ca:	0003      	movs	r3, r0
 80013cc:	3b08      	subs	r3, #8
 80013ce:	2220      	movs	r2, #32
 80013d0:	0020      	movs	r0, r4
 80013d2:	1ad2      	subs	r2, r2, r3
 80013d4:	4651      	mov	r1, sl
 80013d6:	40d0      	lsrs	r0, r2
 80013d8:	4099      	lsls	r1, r3
 80013da:	0002      	movs	r2, r0
 80013dc:	409c      	lsls	r4, r3
 80013de:	430a      	orrs	r2, r1
 80013e0:	42b3      	cmp	r3, r6
 80013e2:	da00      	bge.n	80013e6 <__aeabi_dadd+0xd2>
 80013e4:	e102      	b.n	80015ec <__aeabi_dadd+0x2d8>
 80013e6:	1b9b      	subs	r3, r3, r6
 80013e8:	1c59      	adds	r1, r3, #1
 80013ea:	291f      	cmp	r1, #31
 80013ec:	dd00      	ble.n	80013f0 <__aeabi_dadd+0xdc>
 80013ee:	e0a7      	b.n	8001540 <__aeabi_dadd+0x22c>
 80013f0:	2320      	movs	r3, #32
 80013f2:	0010      	movs	r0, r2
 80013f4:	0026      	movs	r6, r4
 80013f6:	1a5b      	subs	r3, r3, r1
 80013f8:	409c      	lsls	r4, r3
 80013fa:	4098      	lsls	r0, r3
 80013fc:	40ce      	lsrs	r6, r1
 80013fe:	40ca      	lsrs	r2, r1
 8001400:	1e63      	subs	r3, r4, #1
 8001402:	419c      	sbcs	r4, r3
 8001404:	4330      	orrs	r0, r6
 8001406:	4692      	mov	sl, r2
 8001408:	2600      	movs	r6, #0
 800140a:	4304      	orrs	r4, r0
 800140c:	0763      	lsls	r3, r4, #29
 800140e:	d009      	beq.n	8001424 <__aeabi_dadd+0x110>
 8001410:	230f      	movs	r3, #15
 8001412:	4023      	ands	r3, r4
 8001414:	2b04      	cmp	r3, #4
 8001416:	d005      	beq.n	8001424 <__aeabi_dadd+0x110>
 8001418:	1d23      	adds	r3, r4, #4
 800141a:	42a3      	cmp	r3, r4
 800141c:	41a4      	sbcs	r4, r4
 800141e:	4264      	negs	r4, r4
 8001420:	44a2      	add	sl, r4
 8001422:	001c      	movs	r4, r3
 8001424:	4653      	mov	r3, sl
 8001426:	021b      	lsls	r3, r3, #8
 8001428:	d400      	bmi.n	800142c <__aeabi_dadd+0x118>
 800142a:	e09b      	b.n	8001564 <__aeabi_dadd+0x250>
 800142c:	4b94      	ldr	r3, [pc, #592]	; (8001680 <__aeabi_dadd+0x36c>)
 800142e:	3601      	adds	r6, #1
 8001430:	429e      	cmp	r6, r3
 8001432:	d100      	bne.n	8001436 <__aeabi_dadd+0x122>
 8001434:	e0b8      	b.n	80015a8 <__aeabi_dadd+0x294>
 8001436:	4653      	mov	r3, sl
 8001438:	4992      	ldr	r1, [pc, #584]	; (8001684 <__aeabi_dadd+0x370>)
 800143a:	08e4      	lsrs	r4, r4, #3
 800143c:	400b      	ands	r3, r1
 800143e:	0019      	movs	r1, r3
 8001440:	075b      	lsls	r3, r3, #29
 8001442:	4323      	orrs	r3, r4
 8001444:	0572      	lsls	r2, r6, #21
 8001446:	024c      	lsls	r4, r1, #9
 8001448:	0b24      	lsrs	r4, r4, #12
 800144a:	0d52      	lsrs	r2, r2, #21
 800144c:	0512      	lsls	r2, r2, #20
 800144e:	07ed      	lsls	r5, r5, #31
 8001450:	4322      	orrs	r2, r4
 8001452:	432a      	orrs	r2, r5
 8001454:	0018      	movs	r0, r3
 8001456:	0011      	movs	r1, r2
 8001458:	bce0      	pop	{r5, r6, r7}
 800145a:	46ba      	mov	sl, r7
 800145c:	46b1      	mov	r9, r6
 800145e:	46a8      	mov	r8, r5
 8001460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001462:	2f00      	cmp	r7, #0
 8001464:	d048      	beq.n	80014f8 <__aeabi_dadd+0x1e4>
 8001466:	1b97      	subs	r7, r2, r6
 8001468:	2e00      	cmp	r6, #0
 800146a:	d000      	beq.n	800146e <__aeabi_dadd+0x15a>
 800146c:	e10e      	b.n	800168c <__aeabi_dadd+0x378>
 800146e:	000c      	movs	r4, r1
 8001470:	431c      	orrs	r4, r3
 8001472:	d100      	bne.n	8001476 <__aeabi_dadd+0x162>
 8001474:	e1b7      	b.n	80017e6 <__aeabi_dadd+0x4d2>
 8001476:	1e7c      	subs	r4, r7, #1
 8001478:	2f01      	cmp	r7, #1
 800147a:	d100      	bne.n	800147e <__aeabi_dadd+0x16a>
 800147c:	e226      	b.n	80018cc <__aeabi_dadd+0x5b8>
 800147e:	4d80      	ldr	r5, [pc, #512]	; (8001680 <__aeabi_dadd+0x36c>)
 8001480:	42af      	cmp	r7, r5
 8001482:	d100      	bne.n	8001486 <__aeabi_dadd+0x172>
 8001484:	e1d5      	b.n	8001832 <__aeabi_dadd+0x51e>
 8001486:	0027      	movs	r7, r4
 8001488:	e107      	b.n	800169a <__aeabi_dadd+0x386>
 800148a:	2f00      	cmp	r7, #0
 800148c:	dc00      	bgt.n	8001490 <__aeabi_dadd+0x17c>
 800148e:	e0b2      	b.n	80015f6 <__aeabi_dadd+0x2e2>
 8001490:	2a00      	cmp	r2, #0
 8001492:	d047      	beq.n	8001524 <__aeabi_dadd+0x210>
 8001494:	4a7a      	ldr	r2, [pc, #488]	; (8001680 <__aeabi_dadd+0x36c>)
 8001496:	4296      	cmp	r6, r2
 8001498:	d100      	bne.n	800149c <__aeabi_dadd+0x188>
 800149a:	e089      	b.n	80015b0 <__aeabi_dadd+0x29c>
 800149c:	2280      	movs	r2, #128	; 0x80
 800149e:	464c      	mov	r4, r9
 80014a0:	0412      	lsls	r2, r2, #16
 80014a2:	4314      	orrs	r4, r2
 80014a4:	46a1      	mov	r9, r4
 80014a6:	2f38      	cmp	r7, #56	; 0x38
 80014a8:	dc6b      	bgt.n	8001582 <__aeabi_dadd+0x26e>
 80014aa:	2f1f      	cmp	r7, #31
 80014ac:	dc00      	bgt.n	80014b0 <__aeabi_dadd+0x19c>
 80014ae:	e16e      	b.n	800178e <__aeabi_dadd+0x47a>
 80014b0:	003a      	movs	r2, r7
 80014b2:	4648      	mov	r0, r9
 80014b4:	3a20      	subs	r2, #32
 80014b6:	40d0      	lsrs	r0, r2
 80014b8:	4684      	mov	ip, r0
 80014ba:	2f20      	cmp	r7, #32
 80014bc:	d007      	beq.n	80014ce <__aeabi_dadd+0x1ba>
 80014be:	2240      	movs	r2, #64	; 0x40
 80014c0:	4648      	mov	r0, r9
 80014c2:	1bd2      	subs	r2, r2, r7
 80014c4:	4090      	lsls	r0, r2
 80014c6:	0002      	movs	r2, r0
 80014c8:	4640      	mov	r0, r8
 80014ca:	4310      	orrs	r0, r2
 80014cc:	4680      	mov	r8, r0
 80014ce:	4640      	mov	r0, r8
 80014d0:	1e42      	subs	r2, r0, #1
 80014d2:	4190      	sbcs	r0, r2
 80014d4:	4662      	mov	r2, ip
 80014d6:	0004      	movs	r4, r0
 80014d8:	4314      	orrs	r4, r2
 80014da:	e057      	b.n	800158c <__aeabi_dadd+0x278>
 80014dc:	464a      	mov	r2, r9
 80014de:	4302      	orrs	r2, r0
 80014e0:	d100      	bne.n	80014e4 <__aeabi_dadd+0x1d0>
 80014e2:	e103      	b.n	80016ec <__aeabi_dadd+0x3d8>
 80014e4:	1e7a      	subs	r2, r7, #1
 80014e6:	2f01      	cmp	r7, #1
 80014e8:	d100      	bne.n	80014ec <__aeabi_dadd+0x1d8>
 80014ea:	e193      	b.n	8001814 <__aeabi_dadd+0x500>
 80014ec:	4c64      	ldr	r4, [pc, #400]	; (8001680 <__aeabi_dadd+0x36c>)
 80014ee:	42a7      	cmp	r7, r4
 80014f0:	d100      	bne.n	80014f4 <__aeabi_dadd+0x1e0>
 80014f2:	e18a      	b.n	800180a <__aeabi_dadd+0x4f6>
 80014f4:	0017      	movs	r7, r2
 80014f6:	e73b      	b.n	8001370 <__aeabi_dadd+0x5c>
 80014f8:	4c63      	ldr	r4, [pc, #396]	; (8001688 <__aeabi_dadd+0x374>)
 80014fa:	1c72      	adds	r2, r6, #1
 80014fc:	4222      	tst	r2, r4
 80014fe:	d000      	beq.n	8001502 <__aeabi_dadd+0x1ee>
 8001500:	e0e0      	b.n	80016c4 <__aeabi_dadd+0x3b0>
 8001502:	000a      	movs	r2, r1
 8001504:	431a      	orrs	r2, r3
 8001506:	2e00      	cmp	r6, #0
 8001508:	d000      	beq.n	800150c <__aeabi_dadd+0x1f8>
 800150a:	e174      	b.n	80017f6 <__aeabi_dadd+0x4e2>
 800150c:	2a00      	cmp	r2, #0
 800150e:	d100      	bne.n	8001512 <__aeabi_dadd+0x1fe>
 8001510:	e1d0      	b.n	80018b4 <__aeabi_dadd+0x5a0>
 8001512:	464a      	mov	r2, r9
 8001514:	4302      	orrs	r2, r0
 8001516:	d000      	beq.n	800151a <__aeabi_dadd+0x206>
 8001518:	e1e3      	b.n	80018e2 <__aeabi_dadd+0x5ce>
 800151a:	074a      	lsls	r2, r1, #29
 800151c:	08db      	lsrs	r3, r3, #3
 800151e:	4313      	orrs	r3, r2
 8001520:	08c9      	lsrs	r1, r1, #3
 8001522:	e029      	b.n	8001578 <__aeabi_dadd+0x264>
 8001524:	464a      	mov	r2, r9
 8001526:	4302      	orrs	r2, r0
 8001528:	d100      	bne.n	800152c <__aeabi_dadd+0x218>
 800152a:	e17d      	b.n	8001828 <__aeabi_dadd+0x514>
 800152c:	1e7a      	subs	r2, r7, #1
 800152e:	2f01      	cmp	r7, #1
 8001530:	d100      	bne.n	8001534 <__aeabi_dadd+0x220>
 8001532:	e0e0      	b.n	80016f6 <__aeabi_dadd+0x3e2>
 8001534:	4c52      	ldr	r4, [pc, #328]	; (8001680 <__aeabi_dadd+0x36c>)
 8001536:	42a7      	cmp	r7, r4
 8001538:	d100      	bne.n	800153c <__aeabi_dadd+0x228>
 800153a:	e166      	b.n	800180a <__aeabi_dadd+0x4f6>
 800153c:	0017      	movs	r7, r2
 800153e:	e7b2      	b.n	80014a6 <__aeabi_dadd+0x192>
 8001540:	0010      	movs	r0, r2
 8001542:	3b1f      	subs	r3, #31
 8001544:	40d8      	lsrs	r0, r3
 8001546:	2920      	cmp	r1, #32
 8001548:	d003      	beq.n	8001552 <__aeabi_dadd+0x23e>
 800154a:	2340      	movs	r3, #64	; 0x40
 800154c:	1a5b      	subs	r3, r3, r1
 800154e:	409a      	lsls	r2, r3
 8001550:	4314      	orrs	r4, r2
 8001552:	1e63      	subs	r3, r4, #1
 8001554:	419c      	sbcs	r4, r3
 8001556:	2300      	movs	r3, #0
 8001558:	2600      	movs	r6, #0
 800155a:	469a      	mov	sl, r3
 800155c:	4304      	orrs	r4, r0
 800155e:	0763      	lsls	r3, r4, #29
 8001560:	d000      	beq.n	8001564 <__aeabi_dadd+0x250>
 8001562:	e755      	b.n	8001410 <__aeabi_dadd+0xfc>
 8001564:	4652      	mov	r2, sl
 8001566:	08e3      	lsrs	r3, r4, #3
 8001568:	0752      	lsls	r2, r2, #29
 800156a:	4313      	orrs	r3, r2
 800156c:	4652      	mov	r2, sl
 800156e:	0037      	movs	r7, r6
 8001570:	08d1      	lsrs	r1, r2, #3
 8001572:	4a43      	ldr	r2, [pc, #268]	; (8001680 <__aeabi_dadd+0x36c>)
 8001574:	4297      	cmp	r7, r2
 8001576:	d01f      	beq.n	80015b8 <__aeabi_dadd+0x2a4>
 8001578:	0309      	lsls	r1, r1, #12
 800157a:	057a      	lsls	r2, r7, #21
 800157c:	0b0c      	lsrs	r4, r1, #12
 800157e:	0d52      	lsrs	r2, r2, #21
 8001580:	e764      	b.n	800144c <__aeabi_dadd+0x138>
 8001582:	4642      	mov	r2, r8
 8001584:	464c      	mov	r4, r9
 8001586:	4314      	orrs	r4, r2
 8001588:	1e62      	subs	r2, r4, #1
 800158a:	4194      	sbcs	r4, r2
 800158c:	18e4      	adds	r4, r4, r3
 800158e:	429c      	cmp	r4, r3
 8001590:	4192      	sbcs	r2, r2
 8001592:	4252      	negs	r2, r2
 8001594:	4692      	mov	sl, r2
 8001596:	448a      	add	sl, r1
 8001598:	4653      	mov	r3, sl
 800159a:	021b      	lsls	r3, r3, #8
 800159c:	d5df      	bpl.n	800155e <__aeabi_dadd+0x24a>
 800159e:	4b38      	ldr	r3, [pc, #224]	; (8001680 <__aeabi_dadd+0x36c>)
 80015a0:	3601      	adds	r6, #1
 80015a2:	429e      	cmp	r6, r3
 80015a4:	d000      	beq.n	80015a8 <__aeabi_dadd+0x294>
 80015a6:	e0b3      	b.n	8001710 <__aeabi_dadd+0x3fc>
 80015a8:	0032      	movs	r2, r6
 80015aa:	2400      	movs	r4, #0
 80015ac:	2300      	movs	r3, #0
 80015ae:	e74d      	b.n	800144c <__aeabi_dadd+0x138>
 80015b0:	074a      	lsls	r2, r1, #29
 80015b2:	08db      	lsrs	r3, r3, #3
 80015b4:	4313      	orrs	r3, r2
 80015b6:	08c9      	lsrs	r1, r1, #3
 80015b8:	001a      	movs	r2, r3
 80015ba:	430a      	orrs	r2, r1
 80015bc:	d100      	bne.n	80015c0 <__aeabi_dadd+0x2ac>
 80015be:	e200      	b.n	80019c2 <__aeabi_dadd+0x6ae>
 80015c0:	2480      	movs	r4, #128	; 0x80
 80015c2:	0324      	lsls	r4, r4, #12
 80015c4:	430c      	orrs	r4, r1
 80015c6:	0324      	lsls	r4, r4, #12
 80015c8:	4a2d      	ldr	r2, [pc, #180]	; (8001680 <__aeabi_dadd+0x36c>)
 80015ca:	0b24      	lsrs	r4, r4, #12
 80015cc:	e73e      	b.n	800144c <__aeabi_dadd+0x138>
 80015ce:	0020      	movs	r0, r4
 80015d0:	f001 fdb6 	bl	8003140 <__clzsi2>
 80015d4:	0003      	movs	r3, r0
 80015d6:	3318      	adds	r3, #24
 80015d8:	2b1f      	cmp	r3, #31
 80015da:	dc00      	bgt.n	80015de <__aeabi_dadd+0x2ca>
 80015dc:	e6f7      	b.n	80013ce <__aeabi_dadd+0xba>
 80015de:	0022      	movs	r2, r4
 80015e0:	3808      	subs	r0, #8
 80015e2:	4082      	lsls	r2, r0
 80015e4:	2400      	movs	r4, #0
 80015e6:	42b3      	cmp	r3, r6
 80015e8:	db00      	blt.n	80015ec <__aeabi_dadd+0x2d8>
 80015ea:	e6fc      	b.n	80013e6 <__aeabi_dadd+0xd2>
 80015ec:	1af6      	subs	r6, r6, r3
 80015ee:	4b25      	ldr	r3, [pc, #148]	; (8001684 <__aeabi_dadd+0x370>)
 80015f0:	401a      	ands	r2, r3
 80015f2:	4692      	mov	sl, r2
 80015f4:	e70a      	b.n	800140c <__aeabi_dadd+0xf8>
 80015f6:	2f00      	cmp	r7, #0
 80015f8:	d02b      	beq.n	8001652 <__aeabi_dadd+0x33e>
 80015fa:	1b97      	subs	r7, r2, r6
 80015fc:	2e00      	cmp	r6, #0
 80015fe:	d100      	bne.n	8001602 <__aeabi_dadd+0x2ee>
 8001600:	e0b8      	b.n	8001774 <__aeabi_dadd+0x460>
 8001602:	4c1f      	ldr	r4, [pc, #124]	; (8001680 <__aeabi_dadd+0x36c>)
 8001604:	42a2      	cmp	r2, r4
 8001606:	d100      	bne.n	800160a <__aeabi_dadd+0x2f6>
 8001608:	e11c      	b.n	8001844 <__aeabi_dadd+0x530>
 800160a:	2480      	movs	r4, #128	; 0x80
 800160c:	0424      	lsls	r4, r4, #16
 800160e:	4321      	orrs	r1, r4
 8001610:	2f38      	cmp	r7, #56	; 0x38
 8001612:	dd00      	ble.n	8001616 <__aeabi_dadd+0x302>
 8001614:	e11e      	b.n	8001854 <__aeabi_dadd+0x540>
 8001616:	2f1f      	cmp	r7, #31
 8001618:	dd00      	ble.n	800161c <__aeabi_dadd+0x308>
 800161a:	e19e      	b.n	800195a <__aeabi_dadd+0x646>
 800161c:	2620      	movs	r6, #32
 800161e:	000c      	movs	r4, r1
 8001620:	1bf6      	subs	r6, r6, r7
 8001622:	0018      	movs	r0, r3
 8001624:	40b3      	lsls	r3, r6
 8001626:	40b4      	lsls	r4, r6
 8001628:	40f8      	lsrs	r0, r7
 800162a:	1e5e      	subs	r6, r3, #1
 800162c:	41b3      	sbcs	r3, r6
 800162e:	40f9      	lsrs	r1, r7
 8001630:	4304      	orrs	r4, r0
 8001632:	431c      	orrs	r4, r3
 8001634:	4489      	add	r9, r1
 8001636:	4444      	add	r4, r8
 8001638:	4544      	cmp	r4, r8
 800163a:	419b      	sbcs	r3, r3
 800163c:	425b      	negs	r3, r3
 800163e:	444b      	add	r3, r9
 8001640:	469a      	mov	sl, r3
 8001642:	0016      	movs	r6, r2
 8001644:	e7a8      	b.n	8001598 <__aeabi_dadd+0x284>
 8001646:	4642      	mov	r2, r8
 8001648:	464c      	mov	r4, r9
 800164a:	4314      	orrs	r4, r2
 800164c:	1e62      	subs	r2, r4, #1
 800164e:	4194      	sbcs	r4, r2
 8001650:	e6a6      	b.n	80013a0 <__aeabi_dadd+0x8c>
 8001652:	4c0d      	ldr	r4, [pc, #52]	; (8001688 <__aeabi_dadd+0x374>)
 8001654:	1c72      	adds	r2, r6, #1
 8001656:	4222      	tst	r2, r4
 8001658:	d000      	beq.n	800165c <__aeabi_dadd+0x348>
 800165a:	e0a8      	b.n	80017ae <__aeabi_dadd+0x49a>
 800165c:	000a      	movs	r2, r1
 800165e:	431a      	orrs	r2, r3
 8001660:	2e00      	cmp	r6, #0
 8001662:	d000      	beq.n	8001666 <__aeabi_dadd+0x352>
 8001664:	e10a      	b.n	800187c <__aeabi_dadd+0x568>
 8001666:	2a00      	cmp	r2, #0
 8001668:	d100      	bne.n	800166c <__aeabi_dadd+0x358>
 800166a:	e15e      	b.n	800192a <__aeabi_dadd+0x616>
 800166c:	464a      	mov	r2, r9
 800166e:	4302      	orrs	r2, r0
 8001670:	d000      	beq.n	8001674 <__aeabi_dadd+0x360>
 8001672:	e161      	b.n	8001938 <__aeabi_dadd+0x624>
 8001674:	074a      	lsls	r2, r1, #29
 8001676:	08db      	lsrs	r3, r3, #3
 8001678:	4313      	orrs	r3, r2
 800167a:	08c9      	lsrs	r1, r1, #3
 800167c:	e77c      	b.n	8001578 <__aeabi_dadd+0x264>
 800167e:	46c0      	nop			; (mov r8, r8)
 8001680:	000007ff 	.word	0x000007ff
 8001684:	ff7fffff 	.word	0xff7fffff
 8001688:	000007fe 	.word	0x000007fe
 800168c:	4ccf      	ldr	r4, [pc, #828]	; (80019cc <__aeabi_dadd+0x6b8>)
 800168e:	42a2      	cmp	r2, r4
 8001690:	d100      	bne.n	8001694 <__aeabi_dadd+0x380>
 8001692:	e0ce      	b.n	8001832 <__aeabi_dadd+0x51e>
 8001694:	2480      	movs	r4, #128	; 0x80
 8001696:	0424      	lsls	r4, r4, #16
 8001698:	4321      	orrs	r1, r4
 800169a:	2f38      	cmp	r7, #56	; 0x38
 800169c:	dc5b      	bgt.n	8001756 <__aeabi_dadd+0x442>
 800169e:	2f1f      	cmp	r7, #31
 80016a0:	dd00      	ble.n	80016a4 <__aeabi_dadd+0x390>
 80016a2:	e0dc      	b.n	800185e <__aeabi_dadd+0x54a>
 80016a4:	2520      	movs	r5, #32
 80016a6:	000c      	movs	r4, r1
 80016a8:	1bed      	subs	r5, r5, r7
 80016aa:	001e      	movs	r6, r3
 80016ac:	40ab      	lsls	r3, r5
 80016ae:	40ac      	lsls	r4, r5
 80016b0:	40fe      	lsrs	r6, r7
 80016b2:	1e5d      	subs	r5, r3, #1
 80016b4:	41ab      	sbcs	r3, r5
 80016b6:	4334      	orrs	r4, r6
 80016b8:	40f9      	lsrs	r1, r7
 80016ba:	431c      	orrs	r4, r3
 80016bc:	464b      	mov	r3, r9
 80016be:	1a5b      	subs	r3, r3, r1
 80016c0:	4699      	mov	r9, r3
 80016c2:	e04c      	b.n	800175e <__aeabi_dadd+0x44a>
 80016c4:	464a      	mov	r2, r9
 80016c6:	1a1c      	subs	r4, r3, r0
 80016c8:	1a88      	subs	r0, r1, r2
 80016ca:	42a3      	cmp	r3, r4
 80016cc:	4192      	sbcs	r2, r2
 80016ce:	4252      	negs	r2, r2
 80016d0:	4692      	mov	sl, r2
 80016d2:	0002      	movs	r2, r0
 80016d4:	4650      	mov	r0, sl
 80016d6:	1a12      	subs	r2, r2, r0
 80016d8:	4692      	mov	sl, r2
 80016da:	0212      	lsls	r2, r2, #8
 80016dc:	d478      	bmi.n	80017d0 <__aeabi_dadd+0x4bc>
 80016de:	4653      	mov	r3, sl
 80016e0:	4323      	orrs	r3, r4
 80016e2:	d000      	beq.n	80016e6 <__aeabi_dadd+0x3d2>
 80016e4:	e66a      	b.n	80013bc <__aeabi_dadd+0xa8>
 80016e6:	2100      	movs	r1, #0
 80016e8:	2500      	movs	r5, #0
 80016ea:	e745      	b.n	8001578 <__aeabi_dadd+0x264>
 80016ec:	074a      	lsls	r2, r1, #29
 80016ee:	08db      	lsrs	r3, r3, #3
 80016f0:	4313      	orrs	r3, r2
 80016f2:	08c9      	lsrs	r1, r1, #3
 80016f4:	e73d      	b.n	8001572 <__aeabi_dadd+0x25e>
 80016f6:	181c      	adds	r4, r3, r0
 80016f8:	429c      	cmp	r4, r3
 80016fa:	419b      	sbcs	r3, r3
 80016fc:	4449      	add	r1, r9
 80016fe:	468a      	mov	sl, r1
 8001700:	425b      	negs	r3, r3
 8001702:	449a      	add	sl, r3
 8001704:	4653      	mov	r3, sl
 8001706:	2601      	movs	r6, #1
 8001708:	021b      	lsls	r3, r3, #8
 800170a:	d400      	bmi.n	800170e <__aeabi_dadd+0x3fa>
 800170c:	e727      	b.n	800155e <__aeabi_dadd+0x24a>
 800170e:	2602      	movs	r6, #2
 8001710:	4652      	mov	r2, sl
 8001712:	4baf      	ldr	r3, [pc, #700]	; (80019d0 <__aeabi_dadd+0x6bc>)
 8001714:	2101      	movs	r1, #1
 8001716:	401a      	ands	r2, r3
 8001718:	0013      	movs	r3, r2
 800171a:	4021      	ands	r1, r4
 800171c:	0862      	lsrs	r2, r4, #1
 800171e:	430a      	orrs	r2, r1
 8001720:	07dc      	lsls	r4, r3, #31
 8001722:	085b      	lsrs	r3, r3, #1
 8001724:	469a      	mov	sl, r3
 8001726:	4314      	orrs	r4, r2
 8001728:	e670      	b.n	800140c <__aeabi_dadd+0xf8>
 800172a:	003a      	movs	r2, r7
 800172c:	464c      	mov	r4, r9
 800172e:	3a20      	subs	r2, #32
 8001730:	40d4      	lsrs	r4, r2
 8001732:	46a4      	mov	ip, r4
 8001734:	2f20      	cmp	r7, #32
 8001736:	d007      	beq.n	8001748 <__aeabi_dadd+0x434>
 8001738:	2240      	movs	r2, #64	; 0x40
 800173a:	4648      	mov	r0, r9
 800173c:	1bd2      	subs	r2, r2, r7
 800173e:	4090      	lsls	r0, r2
 8001740:	0002      	movs	r2, r0
 8001742:	4640      	mov	r0, r8
 8001744:	4310      	orrs	r0, r2
 8001746:	4680      	mov	r8, r0
 8001748:	4640      	mov	r0, r8
 800174a:	1e42      	subs	r2, r0, #1
 800174c:	4190      	sbcs	r0, r2
 800174e:	4662      	mov	r2, ip
 8001750:	0004      	movs	r4, r0
 8001752:	4314      	orrs	r4, r2
 8001754:	e624      	b.n	80013a0 <__aeabi_dadd+0x8c>
 8001756:	4319      	orrs	r1, r3
 8001758:	000c      	movs	r4, r1
 800175a:	1e63      	subs	r3, r4, #1
 800175c:	419c      	sbcs	r4, r3
 800175e:	4643      	mov	r3, r8
 8001760:	1b1c      	subs	r4, r3, r4
 8001762:	45a0      	cmp	r8, r4
 8001764:	419b      	sbcs	r3, r3
 8001766:	4649      	mov	r1, r9
 8001768:	425b      	negs	r3, r3
 800176a:	1acb      	subs	r3, r1, r3
 800176c:	469a      	mov	sl, r3
 800176e:	4665      	mov	r5, ip
 8001770:	0016      	movs	r6, r2
 8001772:	e61b      	b.n	80013ac <__aeabi_dadd+0x98>
 8001774:	000c      	movs	r4, r1
 8001776:	431c      	orrs	r4, r3
 8001778:	d100      	bne.n	800177c <__aeabi_dadd+0x468>
 800177a:	e0c7      	b.n	800190c <__aeabi_dadd+0x5f8>
 800177c:	1e7c      	subs	r4, r7, #1
 800177e:	2f01      	cmp	r7, #1
 8001780:	d100      	bne.n	8001784 <__aeabi_dadd+0x470>
 8001782:	e0f9      	b.n	8001978 <__aeabi_dadd+0x664>
 8001784:	4e91      	ldr	r6, [pc, #580]	; (80019cc <__aeabi_dadd+0x6b8>)
 8001786:	42b7      	cmp	r7, r6
 8001788:	d05c      	beq.n	8001844 <__aeabi_dadd+0x530>
 800178a:	0027      	movs	r7, r4
 800178c:	e740      	b.n	8001610 <__aeabi_dadd+0x2fc>
 800178e:	2220      	movs	r2, #32
 8001790:	464c      	mov	r4, r9
 8001792:	4640      	mov	r0, r8
 8001794:	1bd2      	subs	r2, r2, r7
 8001796:	4094      	lsls	r4, r2
 8001798:	40f8      	lsrs	r0, r7
 800179a:	4304      	orrs	r4, r0
 800179c:	4640      	mov	r0, r8
 800179e:	4090      	lsls	r0, r2
 80017a0:	1e42      	subs	r2, r0, #1
 80017a2:	4190      	sbcs	r0, r2
 80017a4:	464a      	mov	r2, r9
 80017a6:	40fa      	lsrs	r2, r7
 80017a8:	4304      	orrs	r4, r0
 80017aa:	1889      	adds	r1, r1, r2
 80017ac:	e6ee      	b.n	800158c <__aeabi_dadd+0x278>
 80017ae:	4c87      	ldr	r4, [pc, #540]	; (80019cc <__aeabi_dadd+0x6b8>)
 80017b0:	42a2      	cmp	r2, r4
 80017b2:	d100      	bne.n	80017b6 <__aeabi_dadd+0x4a2>
 80017b4:	e6f9      	b.n	80015aa <__aeabi_dadd+0x296>
 80017b6:	1818      	adds	r0, r3, r0
 80017b8:	4298      	cmp	r0, r3
 80017ba:	419b      	sbcs	r3, r3
 80017bc:	4449      	add	r1, r9
 80017be:	425b      	negs	r3, r3
 80017c0:	18cb      	adds	r3, r1, r3
 80017c2:	07dc      	lsls	r4, r3, #31
 80017c4:	0840      	lsrs	r0, r0, #1
 80017c6:	085b      	lsrs	r3, r3, #1
 80017c8:	469a      	mov	sl, r3
 80017ca:	0016      	movs	r6, r2
 80017cc:	4304      	orrs	r4, r0
 80017ce:	e6c6      	b.n	800155e <__aeabi_dadd+0x24a>
 80017d0:	4642      	mov	r2, r8
 80017d2:	1ad4      	subs	r4, r2, r3
 80017d4:	45a0      	cmp	r8, r4
 80017d6:	4180      	sbcs	r0, r0
 80017d8:	464b      	mov	r3, r9
 80017da:	4240      	negs	r0, r0
 80017dc:	1a59      	subs	r1, r3, r1
 80017de:	1a0b      	subs	r3, r1, r0
 80017e0:	469a      	mov	sl, r3
 80017e2:	4665      	mov	r5, ip
 80017e4:	e5ea      	b.n	80013bc <__aeabi_dadd+0xa8>
 80017e6:	464b      	mov	r3, r9
 80017e8:	464a      	mov	r2, r9
 80017ea:	08c0      	lsrs	r0, r0, #3
 80017ec:	075b      	lsls	r3, r3, #29
 80017ee:	4665      	mov	r5, ip
 80017f0:	4303      	orrs	r3, r0
 80017f2:	08d1      	lsrs	r1, r2, #3
 80017f4:	e6bd      	b.n	8001572 <__aeabi_dadd+0x25e>
 80017f6:	2a00      	cmp	r2, #0
 80017f8:	d000      	beq.n	80017fc <__aeabi_dadd+0x4e8>
 80017fa:	e08e      	b.n	800191a <__aeabi_dadd+0x606>
 80017fc:	464b      	mov	r3, r9
 80017fe:	4303      	orrs	r3, r0
 8001800:	d117      	bne.n	8001832 <__aeabi_dadd+0x51e>
 8001802:	2180      	movs	r1, #128	; 0x80
 8001804:	2500      	movs	r5, #0
 8001806:	0309      	lsls	r1, r1, #12
 8001808:	e6da      	b.n	80015c0 <__aeabi_dadd+0x2ac>
 800180a:	074a      	lsls	r2, r1, #29
 800180c:	08db      	lsrs	r3, r3, #3
 800180e:	4313      	orrs	r3, r2
 8001810:	08c9      	lsrs	r1, r1, #3
 8001812:	e6d1      	b.n	80015b8 <__aeabi_dadd+0x2a4>
 8001814:	1a1c      	subs	r4, r3, r0
 8001816:	464a      	mov	r2, r9
 8001818:	42a3      	cmp	r3, r4
 800181a:	419b      	sbcs	r3, r3
 800181c:	1a89      	subs	r1, r1, r2
 800181e:	425b      	negs	r3, r3
 8001820:	1acb      	subs	r3, r1, r3
 8001822:	469a      	mov	sl, r3
 8001824:	2601      	movs	r6, #1
 8001826:	e5c1      	b.n	80013ac <__aeabi_dadd+0x98>
 8001828:	074a      	lsls	r2, r1, #29
 800182a:	08db      	lsrs	r3, r3, #3
 800182c:	4313      	orrs	r3, r2
 800182e:	08c9      	lsrs	r1, r1, #3
 8001830:	e69f      	b.n	8001572 <__aeabi_dadd+0x25e>
 8001832:	4643      	mov	r3, r8
 8001834:	08d8      	lsrs	r0, r3, #3
 8001836:	464b      	mov	r3, r9
 8001838:	464a      	mov	r2, r9
 800183a:	075b      	lsls	r3, r3, #29
 800183c:	4665      	mov	r5, ip
 800183e:	4303      	orrs	r3, r0
 8001840:	08d1      	lsrs	r1, r2, #3
 8001842:	e6b9      	b.n	80015b8 <__aeabi_dadd+0x2a4>
 8001844:	4643      	mov	r3, r8
 8001846:	08d8      	lsrs	r0, r3, #3
 8001848:	464b      	mov	r3, r9
 800184a:	464a      	mov	r2, r9
 800184c:	075b      	lsls	r3, r3, #29
 800184e:	4303      	orrs	r3, r0
 8001850:	08d1      	lsrs	r1, r2, #3
 8001852:	e6b1      	b.n	80015b8 <__aeabi_dadd+0x2a4>
 8001854:	4319      	orrs	r1, r3
 8001856:	000c      	movs	r4, r1
 8001858:	1e63      	subs	r3, r4, #1
 800185a:	419c      	sbcs	r4, r3
 800185c:	e6eb      	b.n	8001636 <__aeabi_dadd+0x322>
 800185e:	003c      	movs	r4, r7
 8001860:	000d      	movs	r5, r1
 8001862:	3c20      	subs	r4, #32
 8001864:	40e5      	lsrs	r5, r4
 8001866:	2f20      	cmp	r7, #32
 8001868:	d003      	beq.n	8001872 <__aeabi_dadd+0x55e>
 800186a:	2440      	movs	r4, #64	; 0x40
 800186c:	1be4      	subs	r4, r4, r7
 800186e:	40a1      	lsls	r1, r4
 8001870:	430b      	orrs	r3, r1
 8001872:	001c      	movs	r4, r3
 8001874:	1e63      	subs	r3, r4, #1
 8001876:	419c      	sbcs	r4, r3
 8001878:	432c      	orrs	r4, r5
 800187a:	e770      	b.n	800175e <__aeabi_dadd+0x44a>
 800187c:	2a00      	cmp	r2, #0
 800187e:	d0e1      	beq.n	8001844 <__aeabi_dadd+0x530>
 8001880:	464a      	mov	r2, r9
 8001882:	4302      	orrs	r2, r0
 8001884:	d0c1      	beq.n	800180a <__aeabi_dadd+0x4f6>
 8001886:	074a      	lsls	r2, r1, #29
 8001888:	08db      	lsrs	r3, r3, #3
 800188a:	4313      	orrs	r3, r2
 800188c:	2280      	movs	r2, #128	; 0x80
 800188e:	08c9      	lsrs	r1, r1, #3
 8001890:	0312      	lsls	r2, r2, #12
 8001892:	4211      	tst	r1, r2
 8001894:	d008      	beq.n	80018a8 <__aeabi_dadd+0x594>
 8001896:	4648      	mov	r0, r9
 8001898:	08c4      	lsrs	r4, r0, #3
 800189a:	4214      	tst	r4, r2
 800189c:	d104      	bne.n	80018a8 <__aeabi_dadd+0x594>
 800189e:	4643      	mov	r3, r8
 80018a0:	0021      	movs	r1, r4
 80018a2:	08db      	lsrs	r3, r3, #3
 80018a4:	0742      	lsls	r2, r0, #29
 80018a6:	4313      	orrs	r3, r2
 80018a8:	0f5a      	lsrs	r2, r3, #29
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	0752      	lsls	r2, r2, #29
 80018ae:	08db      	lsrs	r3, r3, #3
 80018b0:	4313      	orrs	r3, r2
 80018b2:	e681      	b.n	80015b8 <__aeabi_dadd+0x2a4>
 80018b4:	464b      	mov	r3, r9
 80018b6:	4303      	orrs	r3, r0
 80018b8:	d100      	bne.n	80018bc <__aeabi_dadd+0x5a8>
 80018ba:	e714      	b.n	80016e6 <__aeabi_dadd+0x3d2>
 80018bc:	464b      	mov	r3, r9
 80018be:	464a      	mov	r2, r9
 80018c0:	08c0      	lsrs	r0, r0, #3
 80018c2:	075b      	lsls	r3, r3, #29
 80018c4:	4665      	mov	r5, ip
 80018c6:	4303      	orrs	r3, r0
 80018c8:	08d1      	lsrs	r1, r2, #3
 80018ca:	e655      	b.n	8001578 <__aeabi_dadd+0x264>
 80018cc:	1ac4      	subs	r4, r0, r3
 80018ce:	45a0      	cmp	r8, r4
 80018d0:	4180      	sbcs	r0, r0
 80018d2:	464b      	mov	r3, r9
 80018d4:	4240      	negs	r0, r0
 80018d6:	1a59      	subs	r1, r3, r1
 80018d8:	1a0b      	subs	r3, r1, r0
 80018da:	469a      	mov	sl, r3
 80018dc:	4665      	mov	r5, ip
 80018de:	2601      	movs	r6, #1
 80018e0:	e564      	b.n	80013ac <__aeabi_dadd+0x98>
 80018e2:	1a1c      	subs	r4, r3, r0
 80018e4:	464a      	mov	r2, r9
 80018e6:	42a3      	cmp	r3, r4
 80018e8:	4180      	sbcs	r0, r0
 80018ea:	1a8a      	subs	r2, r1, r2
 80018ec:	4240      	negs	r0, r0
 80018ee:	1a12      	subs	r2, r2, r0
 80018f0:	4692      	mov	sl, r2
 80018f2:	0212      	lsls	r2, r2, #8
 80018f4:	d549      	bpl.n	800198a <__aeabi_dadd+0x676>
 80018f6:	4642      	mov	r2, r8
 80018f8:	1ad4      	subs	r4, r2, r3
 80018fa:	45a0      	cmp	r8, r4
 80018fc:	4180      	sbcs	r0, r0
 80018fe:	464b      	mov	r3, r9
 8001900:	4240      	negs	r0, r0
 8001902:	1a59      	subs	r1, r3, r1
 8001904:	1a0b      	subs	r3, r1, r0
 8001906:	469a      	mov	sl, r3
 8001908:	4665      	mov	r5, ip
 800190a:	e57f      	b.n	800140c <__aeabi_dadd+0xf8>
 800190c:	464b      	mov	r3, r9
 800190e:	464a      	mov	r2, r9
 8001910:	08c0      	lsrs	r0, r0, #3
 8001912:	075b      	lsls	r3, r3, #29
 8001914:	4303      	orrs	r3, r0
 8001916:	08d1      	lsrs	r1, r2, #3
 8001918:	e62b      	b.n	8001572 <__aeabi_dadd+0x25e>
 800191a:	464a      	mov	r2, r9
 800191c:	08db      	lsrs	r3, r3, #3
 800191e:	4302      	orrs	r2, r0
 8001920:	d138      	bne.n	8001994 <__aeabi_dadd+0x680>
 8001922:	074a      	lsls	r2, r1, #29
 8001924:	4313      	orrs	r3, r2
 8001926:	08c9      	lsrs	r1, r1, #3
 8001928:	e646      	b.n	80015b8 <__aeabi_dadd+0x2a4>
 800192a:	464b      	mov	r3, r9
 800192c:	464a      	mov	r2, r9
 800192e:	08c0      	lsrs	r0, r0, #3
 8001930:	075b      	lsls	r3, r3, #29
 8001932:	4303      	orrs	r3, r0
 8001934:	08d1      	lsrs	r1, r2, #3
 8001936:	e61f      	b.n	8001578 <__aeabi_dadd+0x264>
 8001938:	181c      	adds	r4, r3, r0
 800193a:	429c      	cmp	r4, r3
 800193c:	419b      	sbcs	r3, r3
 800193e:	4449      	add	r1, r9
 8001940:	468a      	mov	sl, r1
 8001942:	425b      	negs	r3, r3
 8001944:	449a      	add	sl, r3
 8001946:	4653      	mov	r3, sl
 8001948:	021b      	lsls	r3, r3, #8
 800194a:	d400      	bmi.n	800194e <__aeabi_dadd+0x63a>
 800194c:	e607      	b.n	800155e <__aeabi_dadd+0x24a>
 800194e:	4652      	mov	r2, sl
 8001950:	4b1f      	ldr	r3, [pc, #124]	; (80019d0 <__aeabi_dadd+0x6bc>)
 8001952:	2601      	movs	r6, #1
 8001954:	401a      	ands	r2, r3
 8001956:	4692      	mov	sl, r2
 8001958:	e601      	b.n	800155e <__aeabi_dadd+0x24a>
 800195a:	003c      	movs	r4, r7
 800195c:	000e      	movs	r6, r1
 800195e:	3c20      	subs	r4, #32
 8001960:	40e6      	lsrs	r6, r4
 8001962:	2f20      	cmp	r7, #32
 8001964:	d003      	beq.n	800196e <__aeabi_dadd+0x65a>
 8001966:	2440      	movs	r4, #64	; 0x40
 8001968:	1be4      	subs	r4, r4, r7
 800196a:	40a1      	lsls	r1, r4
 800196c:	430b      	orrs	r3, r1
 800196e:	001c      	movs	r4, r3
 8001970:	1e63      	subs	r3, r4, #1
 8001972:	419c      	sbcs	r4, r3
 8001974:	4334      	orrs	r4, r6
 8001976:	e65e      	b.n	8001636 <__aeabi_dadd+0x322>
 8001978:	4443      	add	r3, r8
 800197a:	4283      	cmp	r3, r0
 800197c:	4180      	sbcs	r0, r0
 800197e:	4449      	add	r1, r9
 8001980:	468a      	mov	sl, r1
 8001982:	4240      	negs	r0, r0
 8001984:	001c      	movs	r4, r3
 8001986:	4482      	add	sl, r0
 8001988:	e6bc      	b.n	8001704 <__aeabi_dadd+0x3f0>
 800198a:	4653      	mov	r3, sl
 800198c:	4323      	orrs	r3, r4
 800198e:	d100      	bne.n	8001992 <__aeabi_dadd+0x67e>
 8001990:	e6a9      	b.n	80016e6 <__aeabi_dadd+0x3d2>
 8001992:	e5e4      	b.n	800155e <__aeabi_dadd+0x24a>
 8001994:	074a      	lsls	r2, r1, #29
 8001996:	4313      	orrs	r3, r2
 8001998:	2280      	movs	r2, #128	; 0x80
 800199a:	08c9      	lsrs	r1, r1, #3
 800199c:	0312      	lsls	r2, r2, #12
 800199e:	4211      	tst	r1, r2
 80019a0:	d009      	beq.n	80019b6 <__aeabi_dadd+0x6a2>
 80019a2:	4648      	mov	r0, r9
 80019a4:	08c4      	lsrs	r4, r0, #3
 80019a6:	4214      	tst	r4, r2
 80019a8:	d105      	bne.n	80019b6 <__aeabi_dadd+0x6a2>
 80019aa:	4643      	mov	r3, r8
 80019ac:	4665      	mov	r5, ip
 80019ae:	0021      	movs	r1, r4
 80019b0:	08db      	lsrs	r3, r3, #3
 80019b2:	0742      	lsls	r2, r0, #29
 80019b4:	4313      	orrs	r3, r2
 80019b6:	0f5a      	lsrs	r2, r3, #29
 80019b8:	00db      	lsls	r3, r3, #3
 80019ba:	08db      	lsrs	r3, r3, #3
 80019bc:	0752      	lsls	r2, r2, #29
 80019be:	4313      	orrs	r3, r2
 80019c0:	e5fa      	b.n	80015b8 <__aeabi_dadd+0x2a4>
 80019c2:	2300      	movs	r3, #0
 80019c4:	4a01      	ldr	r2, [pc, #4]	; (80019cc <__aeabi_dadd+0x6b8>)
 80019c6:	001c      	movs	r4, r3
 80019c8:	e540      	b.n	800144c <__aeabi_dadd+0x138>
 80019ca:	46c0      	nop			; (mov r8, r8)
 80019cc:	000007ff 	.word	0x000007ff
 80019d0:	ff7fffff 	.word	0xff7fffff

080019d4 <__aeabi_ddiv>:
 80019d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019d6:	4657      	mov	r7, sl
 80019d8:	464e      	mov	r6, r9
 80019da:	4645      	mov	r5, r8
 80019dc:	46de      	mov	lr, fp
 80019de:	b5e0      	push	{r5, r6, r7, lr}
 80019e0:	030c      	lsls	r4, r1, #12
 80019e2:	001f      	movs	r7, r3
 80019e4:	004b      	lsls	r3, r1, #1
 80019e6:	4681      	mov	r9, r0
 80019e8:	4692      	mov	sl, r2
 80019ea:	0005      	movs	r5, r0
 80019ec:	b085      	sub	sp, #20
 80019ee:	0b24      	lsrs	r4, r4, #12
 80019f0:	0d5b      	lsrs	r3, r3, #21
 80019f2:	0fce      	lsrs	r6, r1, #31
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d100      	bne.n	80019fa <__aeabi_ddiv+0x26>
 80019f8:	e152      	b.n	8001ca0 <__aeabi_ddiv+0x2cc>
 80019fa:	4ad2      	ldr	r2, [pc, #840]	; (8001d44 <__aeabi_ddiv+0x370>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d100      	bne.n	8001a02 <__aeabi_ddiv+0x2e>
 8001a00:	e16e      	b.n	8001ce0 <__aeabi_ddiv+0x30c>
 8001a02:	0f42      	lsrs	r2, r0, #29
 8001a04:	00e4      	lsls	r4, r4, #3
 8001a06:	4314      	orrs	r4, r2
 8001a08:	2280      	movs	r2, #128	; 0x80
 8001a0a:	0412      	lsls	r2, r2, #16
 8001a0c:	4322      	orrs	r2, r4
 8001a0e:	4690      	mov	r8, r2
 8001a10:	4acd      	ldr	r2, [pc, #820]	; (8001d48 <__aeabi_ddiv+0x374>)
 8001a12:	00c5      	lsls	r5, r0, #3
 8001a14:	4693      	mov	fp, r2
 8001a16:	449b      	add	fp, r3
 8001a18:	2300      	movs	r3, #0
 8001a1a:	4699      	mov	r9, r3
 8001a1c:	9300      	str	r3, [sp, #0]
 8001a1e:	033c      	lsls	r4, r7, #12
 8001a20:	007b      	lsls	r3, r7, #1
 8001a22:	4650      	mov	r0, sl
 8001a24:	0b24      	lsrs	r4, r4, #12
 8001a26:	0d5b      	lsrs	r3, r3, #21
 8001a28:	0fff      	lsrs	r7, r7, #31
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d100      	bne.n	8001a30 <__aeabi_ddiv+0x5c>
 8001a2e:	e11a      	b.n	8001c66 <__aeabi_ddiv+0x292>
 8001a30:	4ac4      	ldr	r2, [pc, #784]	; (8001d44 <__aeabi_ddiv+0x370>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d100      	bne.n	8001a38 <__aeabi_ddiv+0x64>
 8001a36:	e15e      	b.n	8001cf6 <__aeabi_ddiv+0x322>
 8001a38:	0f42      	lsrs	r2, r0, #29
 8001a3a:	00e4      	lsls	r4, r4, #3
 8001a3c:	4322      	orrs	r2, r4
 8001a3e:	2480      	movs	r4, #128	; 0x80
 8001a40:	0424      	lsls	r4, r4, #16
 8001a42:	4314      	orrs	r4, r2
 8001a44:	4ac0      	ldr	r2, [pc, #768]	; (8001d48 <__aeabi_ddiv+0x374>)
 8001a46:	00c1      	lsls	r1, r0, #3
 8001a48:	4694      	mov	ip, r2
 8001a4a:	465a      	mov	r2, fp
 8001a4c:	4463      	add	r3, ip
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	469b      	mov	fp, r3
 8001a52:	2000      	movs	r0, #0
 8001a54:	0033      	movs	r3, r6
 8001a56:	407b      	eors	r3, r7
 8001a58:	469a      	mov	sl, r3
 8001a5a:	464b      	mov	r3, r9
 8001a5c:	2b0f      	cmp	r3, #15
 8001a5e:	d827      	bhi.n	8001ab0 <__aeabi_ddiv+0xdc>
 8001a60:	4aba      	ldr	r2, [pc, #744]	; (8001d4c <__aeabi_ddiv+0x378>)
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	58d3      	ldr	r3, [r2, r3]
 8001a66:	469f      	mov	pc, r3
 8001a68:	46b2      	mov	sl, r6
 8001a6a:	9b00      	ldr	r3, [sp, #0]
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d016      	beq.n	8001a9e <__aeabi_ddiv+0xca>
 8001a70:	2b03      	cmp	r3, #3
 8001a72:	d100      	bne.n	8001a76 <__aeabi_ddiv+0xa2>
 8001a74:	e287      	b.n	8001f86 <__aeabi_ddiv+0x5b2>
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d000      	beq.n	8001a7c <__aeabi_ddiv+0xa8>
 8001a7a:	e0d5      	b.n	8001c28 <__aeabi_ddiv+0x254>
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	2200      	movs	r2, #0
 8001a80:	2500      	movs	r5, #0
 8001a82:	051b      	lsls	r3, r3, #20
 8001a84:	4313      	orrs	r3, r2
 8001a86:	4652      	mov	r2, sl
 8001a88:	07d2      	lsls	r2, r2, #31
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	0028      	movs	r0, r5
 8001a8e:	0019      	movs	r1, r3
 8001a90:	b005      	add	sp, #20
 8001a92:	bcf0      	pop	{r4, r5, r6, r7}
 8001a94:	46bb      	mov	fp, r7
 8001a96:	46b2      	mov	sl, r6
 8001a98:	46a9      	mov	r9, r5
 8001a9a:	46a0      	mov	r8, r4
 8001a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	2500      	movs	r5, #0
 8001aa2:	4ba8      	ldr	r3, [pc, #672]	; (8001d44 <__aeabi_ddiv+0x370>)
 8001aa4:	e7ed      	b.n	8001a82 <__aeabi_ddiv+0xae>
 8001aa6:	46ba      	mov	sl, r7
 8001aa8:	46a0      	mov	r8, r4
 8001aaa:	000d      	movs	r5, r1
 8001aac:	9000      	str	r0, [sp, #0]
 8001aae:	e7dc      	b.n	8001a6a <__aeabi_ddiv+0x96>
 8001ab0:	4544      	cmp	r4, r8
 8001ab2:	d200      	bcs.n	8001ab6 <__aeabi_ddiv+0xe2>
 8001ab4:	e1c4      	b.n	8001e40 <__aeabi_ddiv+0x46c>
 8001ab6:	d100      	bne.n	8001aba <__aeabi_ddiv+0xe6>
 8001ab8:	e1bf      	b.n	8001e3a <__aeabi_ddiv+0x466>
 8001aba:	2301      	movs	r3, #1
 8001abc:	425b      	negs	r3, r3
 8001abe:	469c      	mov	ip, r3
 8001ac0:	002e      	movs	r6, r5
 8001ac2:	4640      	mov	r0, r8
 8001ac4:	2500      	movs	r5, #0
 8001ac6:	44e3      	add	fp, ip
 8001ac8:	0223      	lsls	r3, r4, #8
 8001aca:	0e0c      	lsrs	r4, r1, #24
 8001acc:	431c      	orrs	r4, r3
 8001ace:	0c1b      	lsrs	r3, r3, #16
 8001ad0:	4699      	mov	r9, r3
 8001ad2:	0423      	lsls	r3, r4, #16
 8001ad4:	020a      	lsls	r2, r1, #8
 8001ad6:	0c1f      	lsrs	r7, r3, #16
 8001ad8:	4649      	mov	r1, r9
 8001ada:	9200      	str	r2, [sp, #0]
 8001adc:	9701      	str	r7, [sp, #4]
 8001ade:	f7fe fbb5 	bl	800024c <__aeabi_uidivmod>
 8001ae2:	0002      	movs	r2, r0
 8001ae4:	437a      	muls	r2, r7
 8001ae6:	040b      	lsls	r3, r1, #16
 8001ae8:	0c31      	lsrs	r1, r6, #16
 8001aea:	4680      	mov	r8, r0
 8001aec:	4319      	orrs	r1, r3
 8001aee:	428a      	cmp	r2, r1
 8001af0:	d907      	bls.n	8001b02 <__aeabi_ddiv+0x12e>
 8001af2:	2301      	movs	r3, #1
 8001af4:	425b      	negs	r3, r3
 8001af6:	469c      	mov	ip, r3
 8001af8:	1909      	adds	r1, r1, r4
 8001afa:	44e0      	add	r8, ip
 8001afc:	428c      	cmp	r4, r1
 8001afe:	d800      	bhi.n	8001b02 <__aeabi_ddiv+0x12e>
 8001b00:	e201      	b.n	8001f06 <__aeabi_ddiv+0x532>
 8001b02:	1a88      	subs	r0, r1, r2
 8001b04:	4649      	mov	r1, r9
 8001b06:	f7fe fba1 	bl	800024c <__aeabi_uidivmod>
 8001b0a:	9a01      	ldr	r2, [sp, #4]
 8001b0c:	0436      	lsls	r6, r6, #16
 8001b0e:	4342      	muls	r2, r0
 8001b10:	0409      	lsls	r1, r1, #16
 8001b12:	0c36      	lsrs	r6, r6, #16
 8001b14:	0003      	movs	r3, r0
 8001b16:	430e      	orrs	r6, r1
 8001b18:	42b2      	cmp	r2, r6
 8001b1a:	d904      	bls.n	8001b26 <__aeabi_ddiv+0x152>
 8001b1c:	1936      	adds	r6, r6, r4
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	42b4      	cmp	r4, r6
 8001b22:	d800      	bhi.n	8001b26 <__aeabi_ddiv+0x152>
 8001b24:	e1e9      	b.n	8001efa <__aeabi_ddiv+0x526>
 8001b26:	1ab0      	subs	r0, r6, r2
 8001b28:	4642      	mov	r2, r8
 8001b2a:	9e00      	ldr	r6, [sp, #0]
 8001b2c:	0412      	lsls	r2, r2, #16
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	0c33      	lsrs	r3, r6, #16
 8001b32:	001f      	movs	r7, r3
 8001b34:	0c11      	lsrs	r1, r2, #16
 8001b36:	4690      	mov	r8, r2
 8001b38:	9302      	str	r3, [sp, #8]
 8001b3a:	0413      	lsls	r3, r2, #16
 8001b3c:	0432      	lsls	r2, r6, #16
 8001b3e:	0c16      	lsrs	r6, r2, #16
 8001b40:	0032      	movs	r2, r6
 8001b42:	0c1b      	lsrs	r3, r3, #16
 8001b44:	435a      	muls	r2, r3
 8001b46:	9603      	str	r6, [sp, #12]
 8001b48:	437b      	muls	r3, r7
 8001b4a:	434e      	muls	r6, r1
 8001b4c:	4379      	muls	r1, r7
 8001b4e:	0c17      	lsrs	r7, r2, #16
 8001b50:	46bc      	mov	ip, r7
 8001b52:	199b      	adds	r3, r3, r6
 8001b54:	4463      	add	r3, ip
 8001b56:	429e      	cmp	r6, r3
 8001b58:	d903      	bls.n	8001b62 <__aeabi_ddiv+0x18e>
 8001b5a:	2680      	movs	r6, #128	; 0x80
 8001b5c:	0276      	lsls	r6, r6, #9
 8001b5e:	46b4      	mov	ip, r6
 8001b60:	4461      	add	r1, ip
 8001b62:	0c1e      	lsrs	r6, r3, #16
 8001b64:	1871      	adds	r1, r6, r1
 8001b66:	0416      	lsls	r6, r2, #16
 8001b68:	041b      	lsls	r3, r3, #16
 8001b6a:	0c36      	lsrs	r6, r6, #16
 8001b6c:	199e      	adds	r6, r3, r6
 8001b6e:	4288      	cmp	r0, r1
 8001b70:	d302      	bcc.n	8001b78 <__aeabi_ddiv+0x1a4>
 8001b72:	d112      	bne.n	8001b9a <__aeabi_ddiv+0x1c6>
 8001b74:	42b5      	cmp	r5, r6
 8001b76:	d210      	bcs.n	8001b9a <__aeabi_ddiv+0x1c6>
 8001b78:	4643      	mov	r3, r8
 8001b7a:	1e5a      	subs	r2, r3, #1
 8001b7c:	9b00      	ldr	r3, [sp, #0]
 8001b7e:	469c      	mov	ip, r3
 8001b80:	4465      	add	r5, ip
 8001b82:	001f      	movs	r7, r3
 8001b84:	429d      	cmp	r5, r3
 8001b86:	419b      	sbcs	r3, r3
 8001b88:	425b      	negs	r3, r3
 8001b8a:	191b      	adds	r3, r3, r4
 8001b8c:	18c0      	adds	r0, r0, r3
 8001b8e:	4284      	cmp	r4, r0
 8001b90:	d200      	bcs.n	8001b94 <__aeabi_ddiv+0x1c0>
 8001b92:	e19e      	b.n	8001ed2 <__aeabi_ddiv+0x4fe>
 8001b94:	d100      	bne.n	8001b98 <__aeabi_ddiv+0x1c4>
 8001b96:	e199      	b.n	8001ecc <__aeabi_ddiv+0x4f8>
 8001b98:	4690      	mov	r8, r2
 8001b9a:	1bae      	subs	r6, r5, r6
 8001b9c:	42b5      	cmp	r5, r6
 8001b9e:	41ad      	sbcs	r5, r5
 8001ba0:	1a40      	subs	r0, r0, r1
 8001ba2:	426d      	negs	r5, r5
 8001ba4:	1b40      	subs	r0, r0, r5
 8001ba6:	4284      	cmp	r4, r0
 8001ba8:	d100      	bne.n	8001bac <__aeabi_ddiv+0x1d8>
 8001baa:	e1d2      	b.n	8001f52 <__aeabi_ddiv+0x57e>
 8001bac:	4649      	mov	r1, r9
 8001bae:	f7fe fb4d 	bl	800024c <__aeabi_uidivmod>
 8001bb2:	9a01      	ldr	r2, [sp, #4]
 8001bb4:	040b      	lsls	r3, r1, #16
 8001bb6:	4342      	muls	r2, r0
 8001bb8:	0c31      	lsrs	r1, r6, #16
 8001bba:	0005      	movs	r5, r0
 8001bbc:	4319      	orrs	r1, r3
 8001bbe:	428a      	cmp	r2, r1
 8001bc0:	d900      	bls.n	8001bc4 <__aeabi_ddiv+0x1f0>
 8001bc2:	e16c      	b.n	8001e9e <__aeabi_ddiv+0x4ca>
 8001bc4:	1a88      	subs	r0, r1, r2
 8001bc6:	4649      	mov	r1, r9
 8001bc8:	f7fe fb40 	bl	800024c <__aeabi_uidivmod>
 8001bcc:	9a01      	ldr	r2, [sp, #4]
 8001bce:	0436      	lsls	r6, r6, #16
 8001bd0:	4342      	muls	r2, r0
 8001bd2:	0409      	lsls	r1, r1, #16
 8001bd4:	0c36      	lsrs	r6, r6, #16
 8001bd6:	0003      	movs	r3, r0
 8001bd8:	430e      	orrs	r6, r1
 8001bda:	42b2      	cmp	r2, r6
 8001bdc:	d900      	bls.n	8001be0 <__aeabi_ddiv+0x20c>
 8001bde:	e153      	b.n	8001e88 <__aeabi_ddiv+0x4b4>
 8001be0:	9803      	ldr	r0, [sp, #12]
 8001be2:	1ab6      	subs	r6, r6, r2
 8001be4:	0002      	movs	r2, r0
 8001be6:	042d      	lsls	r5, r5, #16
 8001be8:	431d      	orrs	r5, r3
 8001bea:	9f02      	ldr	r7, [sp, #8]
 8001bec:	042b      	lsls	r3, r5, #16
 8001bee:	0c1b      	lsrs	r3, r3, #16
 8001bf0:	435a      	muls	r2, r3
 8001bf2:	437b      	muls	r3, r7
 8001bf4:	469c      	mov	ip, r3
 8001bf6:	0c29      	lsrs	r1, r5, #16
 8001bf8:	4348      	muls	r0, r1
 8001bfa:	0c13      	lsrs	r3, r2, #16
 8001bfc:	4484      	add	ip, r0
 8001bfe:	4463      	add	r3, ip
 8001c00:	4379      	muls	r1, r7
 8001c02:	4298      	cmp	r0, r3
 8001c04:	d903      	bls.n	8001c0e <__aeabi_ddiv+0x23a>
 8001c06:	2080      	movs	r0, #128	; 0x80
 8001c08:	0240      	lsls	r0, r0, #9
 8001c0a:	4684      	mov	ip, r0
 8001c0c:	4461      	add	r1, ip
 8001c0e:	0c18      	lsrs	r0, r3, #16
 8001c10:	0412      	lsls	r2, r2, #16
 8001c12:	041b      	lsls	r3, r3, #16
 8001c14:	0c12      	lsrs	r2, r2, #16
 8001c16:	1840      	adds	r0, r0, r1
 8001c18:	189b      	adds	r3, r3, r2
 8001c1a:	4286      	cmp	r6, r0
 8001c1c:	d200      	bcs.n	8001c20 <__aeabi_ddiv+0x24c>
 8001c1e:	e100      	b.n	8001e22 <__aeabi_ddiv+0x44e>
 8001c20:	d100      	bne.n	8001c24 <__aeabi_ddiv+0x250>
 8001c22:	e0fb      	b.n	8001e1c <__aeabi_ddiv+0x448>
 8001c24:	2301      	movs	r3, #1
 8001c26:	431d      	orrs	r5, r3
 8001c28:	4b49      	ldr	r3, [pc, #292]	; (8001d50 <__aeabi_ddiv+0x37c>)
 8001c2a:	445b      	add	r3, fp
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	dc00      	bgt.n	8001c32 <__aeabi_ddiv+0x25e>
 8001c30:	e0aa      	b.n	8001d88 <__aeabi_ddiv+0x3b4>
 8001c32:	076a      	lsls	r2, r5, #29
 8001c34:	d000      	beq.n	8001c38 <__aeabi_ddiv+0x264>
 8001c36:	e13d      	b.n	8001eb4 <__aeabi_ddiv+0x4e0>
 8001c38:	08e9      	lsrs	r1, r5, #3
 8001c3a:	4642      	mov	r2, r8
 8001c3c:	01d2      	lsls	r2, r2, #7
 8001c3e:	d506      	bpl.n	8001c4e <__aeabi_ddiv+0x27a>
 8001c40:	4642      	mov	r2, r8
 8001c42:	4b44      	ldr	r3, [pc, #272]	; (8001d54 <__aeabi_ddiv+0x380>)
 8001c44:	401a      	ands	r2, r3
 8001c46:	2380      	movs	r3, #128	; 0x80
 8001c48:	4690      	mov	r8, r2
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	445b      	add	r3, fp
 8001c4e:	4a42      	ldr	r2, [pc, #264]	; (8001d58 <__aeabi_ddiv+0x384>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	dd00      	ble.n	8001c56 <__aeabi_ddiv+0x282>
 8001c54:	e723      	b.n	8001a9e <__aeabi_ddiv+0xca>
 8001c56:	4642      	mov	r2, r8
 8001c58:	055b      	lsls	r3, r3, #21
 8001c5a:	0755      	lsls	r5, r2, #29
 8001c5c:	0252      	lsls	r2, r2, #9
 8001c5e:	430d      	orrs	r5, r1
 8001c60:	0b12      	lsrs	r2, r2, #12
 8001c62:	0d5b      	lsrs	r3, r3, #21
 8001c64:	e70d      	b.n	8001a82 <__aeabi_ddiv+0xae>
 8001c66:	4651      	mov	r1, sl
 8001c68:	4321      	orrs	r1, r4
 8001c6a:	d100      	bne.n	8001c6e <__aeabi_ddiv+0x29a>
 8001c6c:	e07c      	b.n	8001d68 <__aeabi_ddiv+0x394>
 8001c6e:	2c00      	cmp	r4, #0
 8001c70:	d100      	bne.n	8001c74 <__aeabi_ddiv+0x2a0>
 8001c72:	e0fb      	b.n	8001e6c <__aeabi_ddiv+0x498>
 8001c74:	0020      	movs	r0, r4
 8001c76:	f001 fa63 	bl	8003140 <__clzsi2>
 8001c7a:	0002      	movs	r2, r0
 8001c7c:	3a0b      	subs	r2, #11
 8001c7e:	231d      	movs	r3, #29
 8001c80:	1a9b      	subs	r3, r3, r2
 8001c82:	4652      	mov	r2, sl
 8001c84:	0001      	movs	r1, r0
 8001c86:	40da      	lsrs	r2, r3
 8001c88:	4653      	mov	r3, sl
 8001c8a:	3908      	subs	r1, #8
 8001c8c:	408b      	lsls	r3, r1
 8001c8e:	408c      	lsls	r4, r1
 8001c90:	0019      	movs	r1, r3
 8001c92:	4314      	orrs	r4, r2
 8001c94:	4b31      	ldr	r3, [pc, #196]	; (8001d5c <__aeabi_ddiv+0x388>)
 8001c96:	4458      	add	r0, fp
 8001c98:	469b      	mov	fp, r3
 8001c9a:	4483      	add	fp, r0
 8001c9c:	2000      	movs	r0, #0
 8001c9e:	e6d9      	b.n	8001a54 <__aeabi_ddiv+0x80>
 8001ca0:	0003      	movs	r3, r0
 8001ca2:	4323      	orrs	r3, r4
 8001ca4:	4698      	mov	r8, r3
 8001ca6:	d044      	beq.n	8001d32 <__aeabi_ddiv+0x35e>
 8001ca8:	2c00      	cmp	r4, #0
 8001caa:	d100      	bne.n	8001cae <__aeabi_ddiv+0x2da>
 8001cac:	e0cf      	b.n	8001e4e <__aeabi_ddiv+0x47a>
 8001cae:	0020      	movs	r0, r4
 8001cb0:	f001 fa46 	bl	8003140 <__clzsi2>
 8001cb4:	0001      	movs	r1, r0
 8001cb6:	0002      	movs	r2, r0
 8001cb8:	390b      	subs	r1, #11
 8001cba:	231d      	movs	r3, #29
 8001cbc:	1a5b      	subs	r3, r3, r1
 8001cbe:	4649      	mov	r1, r9
 8001cc0:	0010      	movs	r0, r2
 8001cc2:	40d9      	lsrs	r1, r3
 8001cc4:	3808      	subs	r0, #8
 8001cc6:	4084      	lsls	r4, r0
 8001cc8:	000b      	movs	r3, r1
 8001cca:	464d      	mov	r5, r9
 8001ccc:	4323      	orrs	r3, r4
 8001cce:	4698      	mov	r8, r3
 8001cd0:	4085      	lsls	r5, r0
 8001cd2:	4b23      	ldr	r3, [pc, #140]	; (8001d60 <__aeabi_ddiv+0x38c>)
 8001cd4:	1a9b      	subs	r3, r3, r2
 8001cd6:	469b      	mov	fp, r3
 8001cd8:	2300      	movs	r3, #0
 8001cda:	4699      	mov	r9, r3
 8001cdc:	9300      	str	r3, [sp, #0]
 8001cde:	e69e      	b.n	8001a1e <__aeabi_ddiv+0x4a>
 8001ce0:	0002      	movs	r2, r0
 8001ce2:	4322      	orrs	r2, r4
 8001ce4:	4690      	mov	r8, r2
 8001ce6:	d11d      	bne.n	8001d24 <__aeabi_ddiv+0x350>
 8001ce8:	2208      	movs	r2, #8
 8001cea:	469b      	mov	fp, r3
 8001cec:	2302      	movs	r3, #2
 8001cee:	2500      	movs	r5, #0
 8001cf0:	4691      	mov	r9, r2
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	e693      	b.n	8001a1e <__aeabi_ddiv+0x4a>
 8001cf6:	4651      	mov	r1, sl
 8001cf8:	4321      	orrs	r1, r4
 8001cfa:	d109      	bne.n	8001d10 <__aeabi_ddiv+0x33c>
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	464a      	mov	r2, r9
 8001d00:	431a      	orrs	r2, r3
 8001d02:	4b18      	ldr	r3, [pc, #96]	; (8001d64 <__aeabi_ddiv+0x390>)
 8001d04:	4691      	mov	r9, r2
 8001d06:	469c      	mov	ip, r3
 8001d08:	2400      	movs	r4, #0
 8001d0a:	2002      	movs	r0, #2
 8001d0c:	44e3      	add	fp, ip
 8001d0e:	e6a1      	b.n	8001a54 <__aeabi_ddiv+0x80>
 8001d10:	2303      	movs	r3, #3
 8001d12:	464a      	mov	r2, r9
 8001d14:	431a      	orrs	r2, r3
 8001d16:	4b13      	ldr	r3, [pc, #76]	; (8001d64 <__aeabi_ddiv+0x390>)
 8001d18:	4691      	mov	r9, r2
 8001d1a:	469c      	mov	ip, r3
 8001d1c:	4651      	mov	r1, sl
 8001d1e:	2003      	movs	r0, #3
 8001d20:	44e3      	add	fp, ip
 8001d22:	e697      	b.n	8001a54 <__aeabi_ddiv+0x80>
 8001d24:	220c      	movs	r2, #12
 8001d26:	469b      	mov	fp, r3
 8001d28:	2303      	movs	r3, #3
 8001d2a:	46a0      	mov	r8, r4
 8001d2c:	4691      	mov	r9, r2
 8001d2e:	9300      	str	r3, [sp, #0]
 8001d30:	e675      	b.n	8001a1e <__aeabi_ddiv+0x4a>
 8001d32:	2304      	movs	r3, #4
 8001d34:	4699      	mov	r9, r3
 8001d36:	2300      	movs	r3, #0
 8001d38:	469b      	mov	fp, r3
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	2500      	movs	r5, #0
 8001d3e:	9300      	str	r3, [sp, #0]
 8001d40:	e66d      	b.n	8001a1e <__aeabi_ddiv+0x4a>
 8001d42:	46c0      	nop			; (mov r8, r8)
 8001d44:	000007ff 	.word	0x000007ff
 8001d48:	fffffc01 	.word	0xfffffc01
 8001d4c:	0800fc70 	.word	0x0800fc70
 8001d50:	000003ff 	.word	0x000003ff
 8001d54:	feffffff 	.word	0xfeffffff
 8001d58:	000007fe 	.word	0x000007fe
 8001d5c:	000003f3 	.word	0x000003f3
 8001d60:	fffffc0d 	.word	0xfffffc0d
 8001d64:	fffff801 	.word	0xfffff801
 8001d68:	464a      	mov	r2, r9
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	431a      	orrs	r2, r3
 8001d6e:	4691      	mov	r9, r2
 8001d70:	2400      	movs	r4, #0
 8001d72:	2001      	movs	r0, #1
 8001d74:	e66e      	b.n	8001a54 <__aeabi_ddiv+0x80>
 8001d76:	2300      	movs	r3, #0
 8001d78:	2280      	movs	r2, #128	; 0x80
 8001d7a:	469a      	mov	sl, r3
 8001d7c:	2500      	movs	r5, #0
 8001d7e:	4b88      	ldr	r3, [pc, #544]	; (8001fa0 <__aeabi_ddiv+0x5cc>)
 8001d80:	0312      	lsls	r2, r2, #12
 8001d82:	e67e      	b.n	8001a82 <__aeabi_ddiv+0xae>
 8001d84:	2501      	movs	r5, #1
 8001d86:	426d      	negs	r5, r5
 8001d88:	2201      	movs	r2, #1
 8001d8a:	1ad2      	subs	r2, r2, r3
 8001d8c:	2a38      	cmp	r2, #56	; 0x38
 8001d8e:	dd00      	ble.n	8001d92 <__aeabi_ddiv+0x3be>
 8001d90:	e674      	b.n	8001a7c <__aeabi_ddiv+0xa8>
 8001d92:	2a1f      	cmp	r2, #31
 8001d94:	dc00      	bgt.n	8001d98 <__aeabi_ddiv+0x3c4>
 8001d96:	e0bd      	b.n	8001f14 <__aeabi_ddiv+0x540>
 8001d98:	211f      	movs	r1, #31
 8001d9a:	4249      	negs	r1, r1
 8001d9c:	1acb      	subs	r3, r1, r3
 8001d9e:	4641      	mov	r1, r8
 8001da0:	40d9      	lsrs	r1, r3
 8001da2:	000b      	movs	r3, r1
 8001da4:	2a20      	cmp	r2, #32
 8001da6:	d004      	beq.n	8001db2 <__aeabi_ddiv+0x3de>
 8001da8:	4641      	mov	r1, r8
 8001daa:	4a7e      	ldr	r2, [pc, #504]	; (8001fa4 <__aeabi_ddiv+0x5d0>)
 8001dac:	445a      	add	r2, fp
 8001dae:	4091      	lsls	r1, r2
 8001db0:	430d      	orrs	r5, r1
 8001db2:	0029      	movs	r1, r5
 8001db4:	1e4a      	subs	r2, r1, #1
 8001db6:	4191      	sbcs	r1, r2
 8001db8:	4319      	orrs	r1, r3
 8001dba:	2307      	movs	r3, #7
 8001dbc:	001d      	movs	r5, r3
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	400d      	ands	r5, r1
 8001dc2:	420b      	tst	r3, r1
 8001dc4:	d100      	bne.n	8001dc8 <__aeabi_ddiv+0x3f4>
 8001dc6:	e0d0      	b.n	8001f6a <__aeabi_ddiv+0x596>
 8001dc8:	220f      	movs	r2, #15
 8001dca:	2300      	movs	r3, #0
 8001dcc:	400a      	ands	r2, r1
 8001dce:	2a04      	cmp	r2, #4
 8001dd0:	d100      	bne.n	8001dd4 <__aeabi_ddiv+0x400>
 8001dd2:	e0c7      	b.n	8001f64 <__aeabi_ddiv+0x590>
 8001dd4:	1d0a      	adds	r2, r1, #4
 8001dd6:	428a      	cmp	r2, r1
 8001dd8:	4189      	sbcs	r1, r1
 8001dda:	4249      	negs	r1, r1
 8001ddc:	185b      	adds	r3, r3, r1
 8001dde:	0011      	movs	r1, r2
 8001de0:	021a      	lsls	r2, r3, #8
 8001de2:	d400      	bmi.n	8001de6 <__aeabi_ddiv+0x412>
 8001de4:	e0be      	b.n	8001f64 <__aeabi_ddiv+0x590>
 8001de6:	2301      	movs	r3, #1
 8001de8:	2200      	movs	r2, #0
 8001dea:	2500      	movs	r5, #0
 8001dec:	e649      	b.n	8001a82 <__aeabi_ddiv+0xae>
 8001dee:	2280      	movs	r2, #128	; 0x80
 8001df0:	4643      	mov	r3, r8
 8001df2:	0312      	lsls	r2, r2, #12
 8001df4:	4213      	tst	r3, r2
 8001df6:	d008      	beq.n	8001e0a <__aeabi_ddiv+0x436>
 8001df8:	4214      	tst	r4, r2
 8001dfa:	d106      	bne.n	8001e0a <__aeabi_ddiv+0x436>
 8001dfc:	4322      	orrs	r2, r4
 8001dfe:	0312      	lsls	r2, r2, #12
 8001e00:	46ba      	mov	sl, r7
 8001e02:	000d      	movs	r5, r1
 8001e04:	4b66      	ldr	r3, [pc, #408]	; (8001fa0 <__aeabi_ddiv+0x5cc>)
 8001e06:	0b12      	lsrs	r2, r2, #12
 8001e08:	e63b      	b.n	8001a82 <__aeabi_ddiv+0xae>
 8001e0a:	2280      	movs	r2, #128	; 0x80
 8001e0c:	4643      	mov	r3, r8
 8001e0e:	0312      	lsls	r2, r2, #12
 8001e10:	431a      	orrs	r2, r3
 8001e12:	0312      	lsls	r2, r2, #12
 8001e14:	46b2      	mov	sl, r6
 8001e16:	4b62      	ldr	r3, [pc, #392]	; (8001fa0 <__aeabi_ddiv+0x5cc>)
 8001e18:	0b12      	lsrs	r2, r2, #12
 8001e1a:	e632      	b.n	8001a82 <__aeabi_ddiv+0xae>
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d100      	bne.n	8001e22 <__aeabi_ddiv+0x44e>
 8001e20:	e702      	b.n	8001c28 <__aeabi_ddiv+0x254>
 8001e22:	19a6      	adds	r6, r4, r6
 8001e24:	1e6a      	subs	r2, r5, #1
 8001e26:	42a6      	cmp	r6, r4
 8001e28:	d200      	bcs.n	8001e2c <__aeabi_ddiv+0x458>
 8001e2a:	e089      	b.n	8001f40 <__aeabi_ddiv+0x56c>
 8001e2c:	4286      	cmp	r6, r0
 8001e2e:	d200      	bcs.n	8001e32 <__aeabi_ddiv+0x45e>
 8001e30:	e09f      	b.n	8001f72 <__aeabi_ddiv+0x59e>
 8001e32:	d100      	bne.n	8001e36 <__aeabi_ddiv+0x462>
 8001e34:	e0af      	b.n	8001f96 <__aeabi_ddiv+0x5c2>
 8001e36:	0015      	movs	r5, r2
 8001e38:	e6f4      	b.n	8001c24 <__aeabi_ddiv+0x250>
 8001e3a:	42a9      	cmp	r1, r5
 8001e3c:	d900      	bls.n	8001e40 <__aeabi_ddiv+0x46c>
 8001e3e:	e63c      	b.n	8001aba <__aeabi_ddiv+0xe6>
 8001e40:	4643      	mov	r3, r8
 8001e42:	07de      	lsls	r6, r3, #31
 8001e44:	0858      	lsrs	r0, r3, #1
 8001e46:	086b      	lsrs	r3, r5, #1
 8001e48:	431e      	orrs	r6, r3
 8001e4a:	07ed      	lsls	r5, r5, #31
 8001e4c:	e63c      	b.n	8001ac8 <__aeabi_ddiv+0xf4>
 8001e4e:	f001 f977 	bl	8003140 <__clzsi2>
 8001e52:	0001      	movs	r1, r0
 8001e54:	0002      	movs	r2, r0
 8001e56:	3115      	adds	r1, #21
 8001e58:	3220      	adds	r2, #32
 8001e5a:	291c      	cmp	r1, #28
 8001e5c:	dc00      	bgt.n	8001e60 <__aeabi_ddiv+0x48c>
 8001e5e:	e72c      	b.n	8001cba <__aeabi_ddiv+0x2e6>
 8001e60:	464b      	mov	r3, r9
 8001e62:	3808      	subs	r0, #8
 8001e64:	4083      	lsls	r3, r0
 8001e66:	2500      	movs	r5, #0
 8001e68:	4698      	mov	r8, r3
 8001e6a:	e732      	b.n	8001cd2 <__aeabi_ddiv+0x2fe>
 8001e6c:	f001 f968 	bl	8003140 <__clzsi2>
 8001e70:	0003      	movs	r3, r0
 8001e72:	001a      	movs	r2, r3
 8001e74:	3215      	adds	r2, #21
 8001e76:	3020      	adds	r0, #32
 8001e78:	2a1c      	cmp	r2, #28
 8001e7a:	dc00      	bgt.n	8001e7e <__aeabi_ddiv+0x4aa>
 8001e7c:	e6ff      	b.n	8001c7e <__aeabi_ddiv+0x2aa>
 8001e7e:	4654      	mov	r4, sl
 8001e80:	3b08      	subs	r3, #8
 8001e82:	2100      	movs	r1, #0
 8001e84:	409c      	lsls	r4, r3
 8001e86:	e705      	b.n	8001c94 <__aeabi_ddiv+0x2c0>
 8001e88:	1936      	adds	r6, r6, r4
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	42b4      	cmp	r4, r6
 8001e8e:	d900      	bls.n	8001e92 <__aeabi_ddiv+0x4be>
 8001e90:	e6a6      	b.n	8001be0 <__aeabi_ddiv+0x20c>
 8001e92:	42b2      	cmp	r2, r6
 8001e94:	d800      	bhi.n	8001e98 <__aeabi_ddiv+0x4c4>
 8001e96:	e6a3      	b.n	8001be0 <__aeabi_ddiv+0x20c>
 8001e98:	1e83      	subs	r3, r0, #2
 8001e9a:	1936      	adds	r6, r6, r4
 8001e9c:	e6a0      	b.n	8001be0 <__aeabi_ddiv+0x20c>
 8001e9e:	1909      	adds	r1, r1, r4
 8001ea0:	3d01      	subs	r5, #1
 8001ea2:	428c      	cmp	r4, r1
 8001ea4:	d900      	bls.n	8001ea8 <__aeabi_ddiv+0x4d4>
 8001ea6:	e68d      	b.n	8001bc4 <__aeabi_ddiv+0x1f0>
 8001ea8:	428a      	cmp	r2, r1
 8001eaa:	d800      	bhi.n	8001eae <__aeabi_ddiv+0x4da>
 8001eac:	e68a      	b.n	8001bc4 <__aeabi_ddiv+0x1f0>
 8001eae:	1e85      	subs	r5, r0, #2
 8001eb0:	1909      	adds	r1, r1, r4
 8001eb2:	e687      	b.n	8001bc4 <__aeabi_ddiv+0x1f0>
 8001eb4:	220f      	movs	r2, #15
 8001eb6:	402a      	ands	r2, r5
 8001eb8:	2a04      	cmp	r2, #4
 8001eba:	d100      	bne.n	8001ebe <__aeabi_ddiv+0x4ea>
 8001ebc:	e6bc      	b.n	8001c38 <__aeabi_ddiv+0x264>
 8001ebe:	1d29      	adds	r1, r5, #4
 8001ec0:	42a9      	cmp	r1, r5
 8001ec2:	41ad      	sbcs	r5, r5
 8001ec4:	426d      	negs	r5, r5
 8001ec6:	08c9      	lsrs	r1, r1, #3
 8001ec8:	44a8      	add	r8, r5
 8001eca:	e6b6      	b.n	8001c3a <__aeabi_ddiv+0x266>
 8001ecc:	42af      	cmp	r7, r5
 8001ece:	d900      	bls.n	8001ed2 <__aeabi_ddiv+0x4fe>
 8001ed0:	e662      	b.n	8001b98 <__aeabi_ddiv+0x1c4>
 8001ed2:	4281      	cmp	r1, r0
 8001ed4:	d804      	bhi.n	8001ee0 <__aeabi_ddiv+0x50c>
 8001ed6:	d000      	beq.n	8001eda <__aeabi_ddiv+0x506>
 8001ed8:	e65e      	b.n	8001b98 <__aeabi_ddiv+0x1c4>
 8001eda:	42ae      	cmp	r6, r5
 8001edc:	d800      	bhi.n	8001ee0 <__aeabi_ddiv+0x50c>
 8001ede:	e65b      	b.n	8001b98 <__aeabi_ddiv+0x1c4>
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	425b      	negs	r3, r3
 8001ee4:	469c      	mov	ip, r3
 8001ee6:	9b00      	ldr	r3, [sp, #0]
 8001ee8:	44e0      	add	r8, ip
 8001eea:	469c      	mov	ip, r3
 8001eec:	4465      	add	r5, ip
 8001eee:	429d      	cmp	r5, r3
 8001ef0:	419b      	sbcs	r3, r3
 8001ef2:	425b      	negs	r3, r3
 8001ef4:	191b      	adds	r3, r3, r4
 8001ef6:	18c0      	adds	r0, r0, r3
 8001ef8:	e64f      	b.n	8001b9a <__aeabi_ddiv+0x1c6>
 8001efa:	42b2      	cmp	r2, r6
 8001efc:	d800      	bhi.n	8001f00 <__aeabi_ddiv+0x52c>
 8001efe:	e612      	b.n	8001b26 <__aeabi_ddiv+0x152>
 8001f00:	1e83      	subs	r3, r0, #2
 8001f02:	1936      	adds	r6, r6, r4
 8001f04:	e60f      	b.n	8001b26 <__aeabi_ddiv+0x152>
 8001f06:	428a      	cmp	r2, r1
 8001f08:	d800      	bhi.n	8001f0c <__aeabi_ddiv+0x538>
 8001f0a:	e5fa      	b.n	8001b02 <__aeabi_ddiv+0x12e>
 8001f0c:	1e83      	subs	r3, r0, #2
 8001f0e:	4698      	mov	r8, r3
 8001f10:	1909      	adds	r1, r1, r4
 8001f12:	e5f6      	b.n	8001b02 <__aeabi_ddiv+0x12e>
 8001f14:	4b24      	ldr	r3, [pc, #144]	; (8001fa8 <__aeabi_ddiv+0x5d4>)
 8001f16:	0028      	movs	r0, r5
 8001f18:	445b      	add	r3, fp
 8001f1a:	4641      	mov	r1, r8
 8001f1c:	409d      	lsls	r5, r3
 8001f1e:	4099      	lsls	r1, r3
 8001f20:	40d0      	lsrs	r0, r2
 8001f22:	1e6b      	subs	r3, r5, #1
 8001f24:	419d      	sbcs	r5, r3
 8001f26:	4643      	mov	r3, r8
 8001f28:	4301      	orrs	r1, r0
 8001f2a:	4329      	orrs	r1, r5
 8001f2c:	40d3      	lsrs	r3, r2
 8001f2e:	074a      	lsls	r2, r1, #29
 8001f30:	d100      	bne.n	8001f34 <__aeabi_ddiv+0x560>
 8001f32:	e755      	b.n	8001de0 <__aeabi_ddiv+0x40c>
 8001f34:	220f      	movs	r2, #15
 8001f36:	400a      	ands	r2, r1
 8001f38:	2a04      	cmp	r2, #4
 8001f3a:	d000      	beq.n	8001f3e <__aeabi_ddiv+0x56a>
 8001f3c:	e74a      	b.n	8001dd4 <__aeabi_ddiv+0x400>
 8001f3e:	e74f      	b.n	8001de0 <__aeabi_ddiv+0x40c>
 8001f40:	0015      	movs	r5, r2
 8001f42:	4286      	cmp	r6, r0
 8001f44:	d000      	beq.n	8001f48 <__aeabi_ddiv+0x574>
 8001f46:	e66d      	b.n	8001c24 <__aeabi_ddiv+0x250>
 8001f48:	9a00      	ldr	r2, [sp, #0]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d000      	beq.n	8001f50 <__aeabi_ddiv+0x57c>
 8001f4e:	e669      	b.n	8001c24 <__aeabi_ddiv+0x250>
 8001f50:	e66a      	b.n	8001c28 <__aeabi_ddiv+0x254>
 8001f52:	4b16      	ldr	r3, [pc, #88]	; (8001fac <__aeabi_ddiv+0x5d8>)
 8001f54:	445b      	add	r3, fp
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	dc00      	bgt.n	8001f5c <__aeabi_ddiv+0x588>
 8001f5a:	e713      	b.n	8001d84 <__aeabi_ddiv+0x3b0>
 8001f5c:	2501      	movs	r5, #1
 8001f5e:	2100      	movs	r1, #0
 8001f60:	44a8      	add	r8, r5
 8001f62:	e66a      	b.n	8001c3a <__aeabi_ddiv+0x266>
 8001f64:	075d      	lsls	r5, r3, #29
 8001f66:	025b      	lsls	r3, r3, #9
 8001f68:	0b1a      	lsrs	r2, r3, #12
 8001f6a:	08c9      	lsrs	r1, r1, #3
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	430d      	orrs	r5, r1
 8001f70:	e587      	b.n	8001a82 <__aeabi_ddiv+0xae>
 8001f72:	9900      	ldr	r1, [sp, #0]
 8001f74:	3d02      	subs	r5, #2
 8001f76:	004a      	lsls	r2, r1, #1
 8001f78:	428a      	cmp	r2, r1
 8001f7a:	41bf      	sbcs	r7, r7
 8001f7c:	427f      	negs	r7, r7
 8001f7e:	193f      	adds	r7, r7, r4
 8001f80:	19f6      	adds	r6, r6, r7
 8001f82:	9200      	str	r2, [sp, #0]
 8001f84:	e7dd      	b.n	8001f42 <__aeabi_ddiv+0x56e>
 8001f86:	2280      	movs	r2, #128	; 0x80
 8001f88:	4643      	mov	r3, r8
 8001f8a:	0312      	lsls	r2, r2, #12
 8001f8c:	431a      	orrs	r2, r3
 8001f8e:	0312      	lsls	r2, r2, #12
 8001f90:	4b03      	ldr	r3, [pc, #12]	; (8001fa0 <__aeabi_ddiv+0x5cc>)
 8001f92:	0b12      	lsrs	r2, r2, #12
 8001f94:	e575      	b.n	8001a82 <__aeabi_ddiv+0xae>
 8001f96:	9900      	ldr	r1, [sp, #0]
 8001f98:	4299      	cmp	r1, r3
 8001f9a:	d3ea      	bcc.n	8001f72 <__aeabi_ddiv+0x59e>
 8001f9c:	0015      	movs	r5, r2
 8001f9e:	e7d3      	b.n	8001f48 <__aeabi_ddiv+0x574>
 8001fa0:	000007ff 	.word	0x000007ff
 8001fa4:	0000043e 	.word	0x0000043e
 8001fa8:	0000041e 	.word	0x0000041e
 8001fac:	000003ff 	.word	0x000003ff

08001fb0 <__eqdf2>:
 8001fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fb2:	464e      	mov	r6, r9
 8001fb4:	4645      	mov	r5, r8
 8001fb6:	46de      	mov	lr, fp
 8001fb8:	4657      	mov	r7, sl
 8001fba:	4690      	mov	r8, r2
 8001fbc:	b5e0      	push	{r5, r6, r7, lr}
 8001fbe:	0017      	movs	r7, r2
 8001fc0:	031a      	lsls	r2, r3, #12
 8001fc2:	0b12      	lsrs	r2, r2, #12
 8001fc4:	0005      	movs	r5, r0
 8001fc6:	4684      	mov	ip, r0
 8001fc8:	4819      	ldr	r0, [pc, #100]	; (8002030 <__eqdf2+0x80>)
 8001fca:	030e      	lsls	r6, r1, #12
 8001fcc:	004c      	lsls	r4, r1, #1
 8001fce:	4691      	mov	r9, r2
 8001fd0:	005a      	lsls	r2, r3, #1
 8001fd2:	0fdb      	lsrs	r3, r3, #31
 8001fd4:	469b      	mov	fp, r3
 8001fd6:	0b36      	lsrs	r6, r6, #12
 8001fd8:	0d64      	lsrs	r4, r4, #21
 8001fda:	0fc9      	lsrs	r1, r1, #31
 8001fdc:	0d52      	lsrs	r2, r2, #21
 8001fde:	4284      	cmp	r4, r0
 8001fe0:	d019      	beq.n	8002016 <__eqdf2+0x66>
 8001fe2:	4282      	cmp	r2, r0
 8001fe4:	d010      	beq.n	8002008 <__eqdf2+0x58>
 8001fe6:	2001      	movs	r0, #1
 8001fe8:	4294      	cmp	r4, r2
 8001fea:	d10e      	bne.n	800200a <__eqdf2+0x5a>
 8001fec:	454e      	cmp	r6, r9
 8001fee:	d10c      	bne.n	800200a <__eqdf2+0x5a>
 8001ff0:	2001      	movs	r0, #1
 8001ff2:	45c4      	cmp	ip, r8
 8001ff4:	d109      	bne.n	800200a <__eqdf2+0x5a>
 8001ff6:	4559      	cmp	r1, fp
 8001ff8:	d017      	beq.n	800202a <__eqdf2+0x7a>
 8001ffa:	2c00      	cmp	r4, #0
 8001ffc:	d105      	bne.n	800200a <__eqdf2+0x5a>
 8001ffe:	0030      	movs	r0, r6
 8002000:	4328      	orrs	r0, r5
 8002002:	1e43      	subs	r3, r0, #1
 8002004:	4198      	sbcs	r0, r3
 8002006:	e000      	b.n	800200a <__eqdf2+0x5a>
 8002008:	2001      	movs	r0, #1
 800200a:	bcf0      	pop	{r4, r5, r6, r7}
 800200c:	46bb      	mov	fp, r7
 800200e:	46b2      	mov	sl, r6
 8002010:	46a9      	mov	r9, r5
 8002012:	46a0      	mov	r8, r4
 8002014:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002016:	0033      	movs	r3, r6
 8002018:	2001      	movs	r0, #1
 800201a:	432b      	orrs	r3, r5
 800201c:	d1f5      	bne.n	800200a <__eqdf2+0x5a>
 800201e:	42a2      	cmp	r2, r4
 8002020:	d1f3      	bne.n	800200a <__eqdf2+0x5a>
 8002022:	464b      	mov	r3, r9
 8002024:	433b      	orrs	r3, r7
 8002026:	d1f0      	bne.n	800200a <__eqdf2+0x5a>
 8002028:	e7e2      	b.n	8001ff0 <__eqdf2+0x40>
 800202a:	2000      	movs	r0, #0
 800202c:	e7ed      	b.n	800200a <__eqdf2+0x5a>
 800202e:	46c0      	nop			; (mov r8, r8)
 8002030:	000007ff 	.word	0x000007ff

08002034 <__gedf2>:
 8002034:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002036:	4647      	mov	r7, r8
 8002038:	46ce      	mov	lr, r9
 800203a:	0004      	movs	r4, r0
 800203c:	0018      	movs	r0, r3
 800203e:	0016      	movs	r6, r2
 8002040:	031b      	lsls	r3, r3, #12
 8002042:	0b1b      	lsrs	r3, r3, #12
 8002044:	4d2d      	ldr	r5, [pc, #180]	; (80020fc <__gedf2+0xc8>)
 8002046:	004a      	lsls	r2, r1, #1
 8002048:	4699      	mov	r9, r3
 800204a:	b580      	push	{r7, lr}
 800204c:	0043      	lsls	r3, r0, #1
 800204e:	030f      	lsls	r7, r1, #12
 8002050:	46a4      	mov	ip, r4
 8002052:	46b0      	mov	r8, r6
 8002054:	0b3f      	lsrs	r7, r7, #12
 8002056:	0d52      	lsrs	r2, r2, #21
 8002058:	0fc9      	lsrs	r1, r1, #31
 800205a:	0d5b      	lsrs	r3, r3, #21
 800205c:	0fc0      	lsrs	r0, r0, #31
 800205e:	42aa      	cmp	r2, r5
 8002060:	d021      	beq.n	80020a6 <__gedf2+0x72>
 8002062:	42ab      	cmp	r3, r5
 8002064:	d013      	beq.n	800208e <__gedf2+0x5a>
 8002066:	2a00      	cmp	r2, #0
 8002068:	d122      	bne.n	80020b0 <__gedf2+0x7c>
 800206a:	433c      	orrs	r4, r7
 800206c:	2b00      	cmp	r3, #0
 800206e:	d102      	bne.n	8002076 <__gedf2+0x42>
 8002070:	464d      	mov	r5, r9
 8002072:	432e      	orrs	r6, r5
 8002074:	d022      	beq.n	80020bc <__gedf2+0x88>
 8002076:	2c00      	cmp	r4, #0
 8002078:	d010      	beq.n	800209c <__gedf2+0x68>
 800207a:	4281      	cmp	r1, r0
 800207c:	d022      	beq.n	80020c4 <__gedf2+0x90>
 800207e:	2002      	movs	r0, #2
 8002080:	3901      	subs	r1, #1
 8002082:	4008      	ands	r0, r1
 8002084:	3801      	subs	r0, #1
 8002086:	bcc0      	pop	{r6, r7}
 8002088:	46b9      	mov	r9, r7
 800208a:	46b0      	mov	r8, r6
 800208c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800208e:	464d      	mov	r5, r9
 8002090:	432e      	orrs	r6, r5
 8002092:	d129      	bne.n	80020e8 <__gedf2+0xb4>
 8002094:	2a00      	cmp	r2, #0
 8002096:	d1f0      	bne.n	800207a <__gedf2+0x46>
 8002098:	433c      	orrs	r4, r7
 800209a:	d1ee      	bne.n	800207a <__gedf2+0x46>
 800209c:	2800      	cmp	r0, #0
 800209e:	d1f2      	bne.n	8002086 <__gedf2+0x52>
 80020a0:	2001      	movs	r0, #1
 80020a2:	4240      	negs	r0, r0
 80020a4:	e7ef      	b.n	8002086 <__gedf2+0x52>
 80020a6:	003d      	movs	r5, r7
 80020a8:	4325      	orrs	r5, r4
 80020aa:	d11d      	bne.n	80020e8 <__gedf2+0xb4>
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d0ee      	beq.n	800208e <__gedf2+0x5a>
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1e2      	bne.n	800207a <__gedf2+0x46>
 80020b4:	464c      	mov	r4, r9
 80020b6:	4326      	orrs	r6, r4
 80020b8:	d1df      	bne.n	800207a <__gedf2+0x46>
 80020ba:	e7e0      	b.n	800207e <__gedf2+0x4a>
 80020bc:	2000      	movs	r0, #0
 80020be:	2c00      	cmp	r4, #0
 80020c0:	d0e1      	beq.n	8002086 <__gedf2+0x52>
 80020c2:	e7dc      	b.n	800207e <__gedf2+0x4a>
 80020c4:	429a      	cmp	r2, r3
 80020c6:	dc0a      	bgt.n	80020de <__gedf2+0xaa>
 80020c8:	dbe8      	blt.n	800209c <__gedf2+0x68>
 80020ca:	454f      	cmp	r7, r9
 80020cc:	d8d7      	bhi.n	800207e <__gedf2+0x4a>
 80020ce:	d00e      	beq.n	80020ee <__gedf2+0xba>
 80020d0:	2000      	movs	r0, #0
 80020d2:	454f      	cmp	r7, r9
 80020d4:	d2d7      	bcs.n	8002086 <__gedf2+0x52>
 80020d6:	2900      	cmp	r1, #0
 80020d8:	d0e2      	beq.n	80020a0 <__gedf2+0x6c>
 80020da:	0008      	movs	r0, r1
 80020dc:	e7d3      	b.n	8002086 <__gedf2+0x52>
 80020de:	4243      	negs	r3, r0
 80020e0:	4158      	adcs	r0, r3
 80020e2:	0040      	lsls	r0, r0, #1
 80020e4:	3801      	subs	r0, #1
 80020e6:	e7ce      	b.n	8002086 <__gedf2+0x52>
 80020e8:	2002      	movs	r0, #2
 80020ea:	4240      	negs	r0, r0
 80020ec:	e7cb      	b.n	8002086 <__gedf2+0x52>
 80020ee:	45c4      	cmp	ip, r8
 80020f0:	d8c5      	bhi.n	800207e <__gedf2+0x4a>
 80020f2:	2000      	movs	r0, #0
 80020f4:	45c4      	cmp	ip, r8
 80020f6:	d2c6      	bcs.n	8002086 <__gedf2+0x52>
 80020f8:	e7ed      	b.n	80020d6 <__gedf2+0xa2>
 80020fa:	46c0      	nop			; (mov r8, r8)
 80020fc:	000007ff 	.word	0x000007ff

08002100 <__ledf2>:
 8002100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002102:	4647      	mov	r7, r8
 8002104:	46ce      	mov	lr, r9
 8002106:	0004      	movs	r4, r0
 8002108:	0018      	movs	r0, r3
 800210a:	0016      	movs	r6, r2
 800210c:	031b      	lsls	r3, r3, #12
 800210e:	0b1b      	lsrs	r3, r3, #12
 8002110:	4d2c      	ldr	r5, [pc, #176]	; (80021c4 <__ledf2+0xc4>)
 8002112:	004a      	lsls	r2, r1, #1
 8002114:	4699      	mov	r9, r3
 8002116:	b580      	push	{r7, lr}
 8002118:	0043      	lsls	r3, r0, #1
 800211a:	030f      	lsls	r7, r1, #12
 800211c:	46a4      	mov	ip, r4
 800211e:	46b0      	mov	r8, r6
 8002120:	0b3f      	lsrs	r7, r7, #12
 8002122:	0d52      	lsrs	r2, r2, #21
 8002124:	0fc9      	lsrs	r1, r1, #31
 8002126:	0d5b      	lsrs	r3, r3, #21
 8002128:	0fc0      	lsrs	r0, r0, #31
 800212a:	42aa      	cmp	r2, r5
 800212c:	d00d      	beq.n	800214a <__ledf2+0x4a>
 800212e:	42ab      	cmp	r3, r5
 8002130:	d010      	beq.n	8002154 <__ledf2+0x54>
 8002132:	2a00      	cmp	r2, #0
 8002134:	d127      	bne.n	8002186 <__ledf2+0x86>
 8002136:	433c      	orrs	r4, r7
 8002138:	2b00      	cmp	r3, #0
 800213a:	d111      	bne.n	8002160 <__ledf2+0x60>
 800213c:	464d      	mov	r5, r9
 800213e:	432e      	orrs	r6, r5
 8002140:	d10e      	bne.n	8002160 <__ledf2+0x60>
 8002142:	2000      	movs	r0, #0
 8002144:	2c00      	cmp	r4, #0
 8002146:	d015      	beq.n	8002174 <__ledf2+0x74>
 8002148:	e00e      	b.n	8002168 <__ledf2+0x68>
 800214a:	003d      	movs	r5, r7
 800214c:	4325      	orrs	r5, r4
 800214e:	d110      	bne.n	8002172 <__ledf2+0x72>
 8002150:	4293      	cmp	r3, r2
 8002152:	d118      	bne.n	8002186 <__ledf2+0x86>
 8002154:	464d      	mov	r5, r9
 8002156:	432e      	orrs	r6, r5
 8002158:	d10b      	bne.n	8002172 <__ledf2+0x72>
 800215a:	2a00      	cmp	r2, #0
 800215c:	d102      	bne.n	8002164 <__ledf2+0x64>
 800215e:	433c      	orrs	r4, r7
 8002160:	2c00      	cmp	r4, #0
 8002162:	d00b      	beq.n	800217c <__ledf2+0x7c>
 8002164:	4281      	cmp	r1, r0
 8002166:	d014      	beq.n	8002192 <__ledf2+0x92>
 8002168:	2002      	movs	r0, #2
 800216a:	3901      	subs	r1, #1
 800216c:	4008      	ands	r0, r1
 800216e:	3801      	subs	r0, #1
 8002170:	e000      	b.n	8002174 <__ledf2+0x74>
 8002172:	2002      	movs	r0, #2
 8002174:	bcc0      	pop	{r6, r7}
 8002176:	46b9      	mov	r9, r7
 8002178:	46b0      	mov	r8, r6
 800217a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800217c:	2800      	cmp	r0, #0
 800217e:	d1f9      	bne.n	8002174 <__ledf2+0x74>
 8002180:	2001      	movs	r0, #1
 8002182:	4240      	negs	r0, r0
 8002184:	e7f6      	b.n	8002174 <__ledf2+0x74>
 8002186:	2b00      	cmp	r3, #0
 8002188:	d1ec      	bne.n	8002164 <__ledf2+0x64>
 800218a:	464c      	mov	r4, r9
 800218c:	4326      	orrs	r6, r4
 800218e:	d1e9      	bne.n	8002164 <__ledf2+0x64>
 8002190:	e7ea      	b.n	8002168 <__ledf2+0x68>
 8002192:	429a      	cmp	r2, r3
 8002194:	dd04      	ble.n	80021a0 <__ledf2+0xa0>
 8002196:	4243      	negs	r3, r0
 8002198:	4158      	adcs	r0, r3
 800219a:	0040      	lsls	r0, r0, #1
 800219c:	3801      	subs	r0, #1
 800219e:	e7e9      	b.n	8002174 <__ledf2+0x74>
 80021a0:	429a      	cmp	r2, r3
 80021a2:	dbeb      	blt.n	800217c <__ledf2+0x7c>
 80021a4:	454f      	cmp	r7, r9
 80021a6:	d8df      	bhi.n	8002168 <__ledf2+0x68>
 80021a8:	d006      	beq.n	80021b8 <__ledf2+0xb8>
 80021aa:	2000      	movs	r0, #0
 80021ac:	454f      	cmp	r7, r9
 80021ae:	d2e1      	bcs.n	8002174 <__ledf2+0x74>
 80021b0:	2900      	cmp	r1, #0
 80021b2:	d0e5      	beq.n	8002180 <__ledf2+0x80>
 80021b4:	0008      	movs	r0, r1
 80021b6:	e7dd      	b.n	8002174 <__ledf2+0x74>
 80021b8:	45c4      	cmp	ip, r8
 80021ba:	d8d5      	bhi.n	8002168 <__ledf2+0x68>
 80021bc:	2000      	movs	r0, #0
 80021be:	45c4      	cmp	ip, r8
 80021c0:	d2d8      	bcs.n	8002174 <__ledf2+0x74>
 80021c2:	e7f5      	b.n	80021b0 <__ledf2+0xb0>
 80021c4:	000007ff 	.word	0x000007ff

080021c8 <__aeabi_dmul>:
 80021c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021ca:	4645      	mov	r5, r8
 80021cc:	46de      	mov	lr, fp
 80021ce:	4657      	mov	r7, sl
 80021d0:	464e      	mov	r6, r9
 80021d2:	b5e0      	push	{r5, r6, r7, lr}
 80021d4:	001f      	movs	r7, r3
 80021d6:	030b      	lsls	r3, r1, #12
 80021d8:	0b1b      	lsrs	r3, r3, #12
 80021da:	469b      	mov	fp, r3
 80021dc:	004d      	lsls	r5, r1, #1
 80021de:	0fcb      	lsrs	r3, r1, #31
 80021e0:	0004      	movs	r4, r0
 80021e2:	4691      	mov	r9, r2
 80021e4:	4698      	mov	r8, r3
 80021e6:	b087      	sub	sp, #28
 80021e8:	0d6d      	lsrs	r5, r5, #21
 80021ea:	d100      	bne.n	80021ee <__aeabi_dmul+0x26>
 80021ec:	e1cd      	b.n	800258a <__aeabi_dmul+0x3c2>
 80021ee:	4bce      	ldr	r3, [pc, #824]	; (8002528 <__aeabi_dmul+0x360>)
 80021f0:	429d      	cmp	r5, r3
 80021f2:	d100      	bne.n	80021f6 <__aeabi_dmul+0x2e>
 80021f4:	e1e9      	b.n	80025ca <__aeabi_dmul+0x402>
 80021f6:	465a      	mov	r2, fp
 80021f8:	0f43      	lsrs	r3, r0, #29
 80021fa:	00d2      	lsls	r2, r2, #3
 80021fc:	4313      	orrs	r3, r2
 80021fe:	2280      	movs	r2, #128	; 0x80
 8002200:	0412      	lsls	r2, r2, #16
 8002202:	431a      	orrs	r2, r3
 8002204:	00c3      	lsls	r3, r0, #3
 8002206:	469a      	mov	sl, r3
 8002208:	4bc8      	ldr	r3, [pc, #800]	; (800252c <__aeabi_dmul+0x364>)
 800220a:	4693      	mov	fp, r2
 800220c:	469c      	mov	ip, r3
 800220e:	2300      	movs	r3, #0
 8002210:	2600      	movs	r6, #0
 8002212:	4465      	add	r5, ip
 8002214:	9300      	str	r3, [sp, #0]
 8002216:	033c      	lsls	r4, r7, #12
 8002218:	007b      	lsls	r3, r7, #1
 800221a:	4648      	mov	r0, r9
 800221c:	0b24      	lsrs	r4, r4, #12
 800221e:	0d5b      	lsrs	r3, r3, #21
 8002220:	0fff      	lsrs	r7, r7, #31
 8002222:	2b00      	cmp	r3, #0
 8002224:	d100      	bne.n	8002228 <__aeabi_dmul+0x60>
 8002226:	e189      	b.n	800253c <__aeabi_dmul+0x374>
 8002228:	4abf      	ldr	r2, [pc, #764]	; (8002528 <__aeabi_dmul+0x360>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d019      	beq.n	8002262 <__aeabi_dmul+0x9a>
 800222e:	0f42      	lsrs	r2, r0, #29
 8002230:	00e4      	lsls	r4, r4, #3
 8002232:	4322      	orrs	r2, r4
 8002234:	2480      	movs	r4, #128	; 0x80
 8002236:	0424      	lsls	r4, r4, #16
 8002238:	4314      	orrs	r4, r2
 800223a:	4abc      	ldr	r2, [pc, #752]	; (800252c <__aeabi_dmul+0x364>)
 800223c:	2100      	movs	r1, #0
 800223e:	4694      	mov	ip, r2
 8002240:	4642      	mov	r2, r8
 8002242:	4463      	add	r3, ip
 8002244:	195b      	adds	r3, r3, r5
 8002246:	9301      	str	r3, [sp, #4]
 8002248:	9b01      	ldr	r3, [sp, #4]
 800224a:	407a      	eors	r2, r7
 800224c:	3301      	adds	r3, #1
 800224e:	00c0      	lsls	r0, r0, #3
 8002250:	b2d2      	uxtb	r2, r2
 8002252:	9302      	str	r3, [sp, #8]
 8002254:	2e0a      	cmp	r6, #10
 8002256:	dd1c      	ble.n	8002292 <__aeabi_dmul+0xca>
 8002258:	003a      	movs	r2, r7
 800225a:	2e0b      	cmp	r6, #11
 800225c:	d05e      	beq.n	800231c <__aeabi_dmul+0x154>
 800225e:	4647      	mov	r7, r8
 8002260:	e056      	b.n	8002310 <__aeabi_dmul+0x148>
 8002262:	4649      	mov	r1, r9
 8002264:	4bb0      	ldr	r3, [pc, #704]	; (8002528 <__aeabi_dmul+0x360>)
 8002266:	4321      	orrs	r1, r4
 8002268:	18eb      	adds	r3, r5, r3
 800226a:	9301      	str	r3, [sp, #4]
 800226c:	2900      	cmp	r1, #0
 800226e:	d12a      	bne.n	80022c6 <__aeabi_dmul+0xfe>
 8002270:	2080      	movs	r0, #128	; 0x80
 8002272:	2202      	movs	r2, #2
 8002274:	0100      	lsls	r0, r0, #4
 8002276:	002b      	movs	r3, r5
 8002278:	4684      	mov	ip, r0
 800227a:	4316      	orrs	r6, r2
 800227c:	4642      	mov	r2, r8
 800227e:	4463      	add	r3, ip
 8002280:	407a      	eors	r2, r7
 8002282:	b2d2      	uxtb	r2, r2
 8002284:	9302      	str	r3, [sp, #8]
 8002286:	2e0a      	cmp	r6, #10
 8002288:	dd00      	ble.n	800228c <__aeabi_dmul+0xc4>
 800228a:	e231      	b.n	80026f0 <__aeabi_dmul+0x528>
 800228c:	2000      	movs	r0, #0
 800228e:	2400      	movs	r4, #0
 8002290:	2102      	movs	r1, #2
 8002292:	2e02      	cmp	r6, #2
 8002294:	dc26      	bgt.n	80022e4 <__aeabi_dmul+0x11c>
 8002296:	3e01      	subs	r6, #1
 8002298:	2e01      	cmp	r6, #1
 800229a:	d852      	bhi.n	8002342 <__aeabi_dmul+0x17a>
 800229c:	2902      	cmp	r1, #2
 800229e:	d04c      	beq.n	800233a <__aeabi_dmul+0x172>
 80022a0:	2901      	cmp	r1, #1
 80022a2:	d000      	beq.n	80022a6 <__aeabi_dmul+0xde>
 80022a4:	e118      	b.n	80024d8 <__aeabi_dmul+0x310>
 80022a6:	2300      	movs	r3, #0
 80022a8:	2400      	movs	r4, #0
 80022aa:	2500      	movs	r5, #0
 80022ac:	051b      	lsls	r3, r3, #20
 80022ae:	4323      	orrs	r3, r4
 80022b0:	07d2      	lsls	r2, r2, #31
 80022b2:	4313      	orrs	r3, r2
 80022b4:	0028      	movs	r0, r5
 80022b6:	0019      	movs	r1, r3
 80022b8:	b007      	add	sp, #28
 80022ba:	bcf0      	pop	{r4, r5, r6, r7}
 80022bc:	46bb      	mov	fp, r7
 80022be:	46b2      	mov	sl, r6
 80022c0:	46a9      	mov	r9, r5
 80022c2:	46a0      	mov	r8, r4
 80022c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022c6:	2180      	movs	r1, #128	; 0x80
 80022c8:	2203      	movs	r2, #3
 80022ca:	0109      	lsls	r1, r1, #4
 80022cc:	002b      	movs	r3, r5
 80022ce:	468c      	mov	ip, r1
 80022d0:	4316      	orrs	r6, r2
 80022d2:	4642      	mov	r2, r8
 80022d4:	4463      	add	r3, ip
 80022d6:	407a      	eors	r2, r7
 80022d8:	b2d2      	uxtb	r2, r2
 80022da:	9302      	str	r3, [sp, #8]
 80022dc:	2e0a      	cmp	r6, #10
 80022de:	dd00      	ble.n	80022e2 <__aeabi_dmul+0x11a>
 80022e0:	e228      	b.n	8002734 <__aeabi_dmul+0x56c>
 80022e2:	2103      	movs	r1, #3
 80022e4:	2501      	movs	r5, #1
 80022e6:	40b5      	lsls	r5, r6
 80022e8:	46ac      	mov	ip, r5
 80022ea:	26a6      	movs	r6, #166	; 0xa6
 80022ec:	4663      	mov	r3, ip
 80022ee:	00f6      	lsls	r6, r6, #3
 80022f0:	4035      	ands	r5, r6
 80022f2:	4233      	tst	r3, r6
 80022f4:	d10b      	bne.n	800230e <__aeabi_dmul+0x146>
 80022f6:	2690      	movs	r6, #144	; 0x90
 80022f8:	00b6      	lsls	r6, r6, #2
 80022fa:	4233      	tst	r3, r6
 80022fc:	d118      	bne.n	8002330 <__aeabi_dmul+0x168>
 80022fe:	3eb9      	subs	r6, #185	; 0xb9
 8002300:	3eff      	subs	r6, #255	; 0xff
 8002302:	421e      	tst	r6, r3
 8002304:	d01d      	beq.n	8002342 <__aeabi_dmul+0x17a>
 8002306:	46a3      	mov	fp, r4
 8002308:	4682      	mov	sl, r0
 800230a:	9100      	str	r1, [sp, #0]
 800230c:	e000      	b.n	8002310 <__aeabi_dmul+0x148>
 800230e:	0017      	movs	r7, r2
 8002310:	9900      	ldr	r1, [sp, #0]
 8002312:	003a      	movs	r2, r7
 8002314:	2902      	cmp	r1, #2
 8002316:	d010      	beq.n	800233a <__aeabi_dmul+0x172>
 8002318:	465c      	mov	r4, fp
 800231a:	4650      	mov	r0, sl
 800231c:	2903      	cmp	r1, #3
 800231e:	d1bf      	bne.n	80022a0 <__aeabi_dmul+0xd8>
 8002320:	2380      	movs	r3, #128	; 0x80
 8002322:	031b      	lsls	r3, r3, #12
 8002324:	431c      	orrs	r4, r3
 8002326:	0324      	lsls	r4, r4, #12
 8002328:	0005      	movs	r5, r0
 800232a:	4b7f      	ldr	r3, [pc, #508]	; (8002528 <__aeabi_dmul+0x360>)
 800232c:	0b24      	lsrs	r4, r4, #12
 800232e:	e7bd      	b.n	80022ac <__aeabi_dmul+0xe4>
 8002330:	2480      	movs	r4, #128	; 0x80
 8002332:	2200      	movs	r2, #0
 8002334:	4b7c      	ldr	r3, [pc, #496]	; (8002528 <__aeabi_dmul+0x360>)
 8002336:	0324      	lsls	r4, r4, #12
 8002338:	e7b8      	b.n	80022ac <__aeabi_dmul+0xe4>
 800233a:	2400      	movs	r4, #0
 800233c:	2500      	movs	r5, #0
 800233e:	4b7a      	ldr	r3, [pc, #488]	; (8002528 <__aeabi_dmul+0x360>)
 8002340:	e7b4      	b.n	80022ac <__aeabi_dmul+0xe4>
 8002342:	4653      	mov	r3, sl
 8002344:	041e      	lsls	r6, r3, #16
 8002346:	0c36      	lsrs	r6, r6, #16
 8002348:	0c1f      	lsrs	r7, r3, #16
 800234a:	0033      	movs	r3, r6
 800234c:	0c01      	lsrs	r1, r0, #16
 800234e:	0400      	lsls	r0, r0, #16
 8002350:	0c00      	lsrs	r0, r0, #16
 8002352:	4343      	muls	r3, r0
 8002354:	4698      	mov	r8, r3
 8002356:	0003      	movs	r3, r0
 8002358:	437b      	muls	r3, r7
 800235a:	4699      	mov	r9, r3
 800235c:	0033      	movs	r3, r6
 800235e:	434b      	muls	r3, r1
 8002360:	469c      	mov	ip, r3
 8002362:	4643      	mov	r3, r8
 8002364:	000d      	movs	r5, r1
 8002366:	0c1b      	lsrs	r3, r3, #16
 8002368:	469a      	mov	sl, r3
 800236a:	437d      	muls	r5, r7
 800236c:	44cc      	add	ip, r9
 800236e:	44d4      	add	ip, sl
 8002370:	9500      	str	r5, [sp, #0]
 8002372:	45e1      	cmp	r9, ip
 8002374:	d904      	bls.n	8002380 <__aeabi_dmul+0x1b8>
 8002376:	2380      	movs	r3, #128	; 0x80
 8002378:	025b      	lsls	r3, r3, #9
 800237a:	4699      	mov	r9, r3
 800237c:	444d      	add	r5, r9
 800237e:	9500      	str	r5, [sp, #0]
 8002380:	4663      	mov	r3, ip
 8002382:	0c1b      	lsrs	r3, r3, #16
 8002384:	001d      	movs	r5, r3
 8002386:	4663      	mov	r3, ip
 8002388:	041b      	lsls	r3, r3, #16
 800238a:	469c      	mov	ip, r3
 800238c:	4643      	mov	r3, r8
 800238e:	041b      	lsls	r3, r3, #16
 8002390:	0c1b      	lsrs	r3, r3, #16
 8002392:	4698      	mov	r8, r3
 8002394:	4663      	mov	r3, ip
 8002396:	4443      	add	r3, r8
 8002398:	9303      	str	r3, [sp, #12]
 800239a:	0c23      	lsrs	r3, r4, #16
 800239c:	4698      	mov	r8, r3
 800239e:	0033      	movs	r3, r6
 80023a0:	0424      	lsls	r4, r4, #16
 80023a2:	0c24      	lsrs	r4, r4, #16
 80023a4:	4363      	muls	r3, r4
 80023a6:	469c      	mov	ip, r3
 80023a8:	0023      	movs	r3, r4
 80023aa:	437b      	muls	r3, r7
 80023ac:	4699      	mov	r9, r3
 80023ae:	4643      	mov	r3, r8
 80023b0:	435e      	muls	r6, r3
 80023b2:	435f      	muls	r7, r3
 80023b4:	444e      	add	r6, r9
 80023b6:	4663      	mov	r3, ip
 80023b8:	46b2      	mov	sl, r6
 80023ba:	0c1e      	lsrs	r6, r3, #16
 80023bc:	4456      	add	r6, sl
 80023be:	45b1      	cmp	r9, r6
 80023c0:	d903      	bls.n	80023ca <__aeabi_dmul+0x202>
 80023c2:	2380      	movs	r3, #128	; 0x80
 80023c4:	025b      	lsls	r3, r3, #9
 80023c6:	4699      	mov	r9, r3
 80023c8:	444f      	add	r7, r9
 80023ca:	0c33      	lsrs	r3, r6, #16
 80023cc:	4699      	mov	r9, r3
 80023ce:	003b      	movs	r3, r7
 80023d0:	444b      	add	r3, r9
 80023d2:	9305      	str	r3, [sp, #20]
 80023d4:	4663      	mov	r3, ip
 80023d6:	46ac      	mov	ip, r5
 80023d8:	041f      	lsls	r7, r3, #16
 80023da:	0c3f      	lsrs	r7, r7, #16
 80023dc:	0436      	lsls	r6, r6, #16
 80023de:	19f6      	adds	r6, r6, r7
 80023e0:	44b4      	add	ip, r6
 80023e2:	4663      	mov	r3, ip
 80023e4:	9304      	str	r3, [sp, #16]
 80023e6:	465b      	mov	r3, fp
 80023e8:	0c1b      	lsrs	r3, r3, #16
 80023ea:	469c      	mov	ip, r3
 80023ec:	465b      	mov	r3, fp
 80023ee:	041f      	lsls	r7, r3, #16
 80023f0:	0c3f      	lsrs	r7, r7, #16
 80023f2:	003b      	movs	r3, r7
 80023f4:	4343      	muls	r3, r0
 80023f6:	4699      	mov	r9, r3
 80023f8:	4663      	mov	r3, ip
 80023fa:	4343      	muls	r3, r0
 80023fc:	469a      	mov	sl, r3
 80023fe:	464b      	mov	r3, r9
 8002400:	4660      	mov	r0, ip
 8002402:	0c1b      	lsrs	r3, r3, #16
 8002404:	469b      	mov	fp, r3
 8002406:	4348      	muls	r0, r1
 8002408:	4379      	muls	r1, r7
 800240a:	4451      	add	r1, sl
 800240c:	4459      	add	r1, fp
 800240e:	458a      	cmp	sl, r1
 8002410:	d903      	bls.n	800241a <__aeabi_dmul+0x252>
 8002412:	2380      	movs	r3, #128	; 0x80
 8002414:	025b      	lsls	r3, r3, #9
 8002416:	469a      	mov	sl, r3
 8002418:	4450      	add	r0, sl
 800241a:	0c0b      	lsrs	r3, r1, #16
 800241c:	469a      	mov	sl, r3
 800241e:	464b      	mov	r3, r9
 8002420:	041b      	lsls	r3, r3, #16
 8002422:	0c1b      	lsrs	r3, r3, #16
 8002424:	4699      	mov	r9, r3
 8002426:	003b      	movs	r3, r7
 8002428:	4363      	muls	r3, r4
 800242a:	0409      	lsls	r1, r1, #16
 800242c:	4645      	mov	r5, r8
 800242e:	4449      	add	r1, r9
 8002430:	4699      	mov	r9, r3
 8002432:	4663      	mov	r3, ip
 8002434:	435c      	muls	r4, r3
 8002436:	436b      	muls	r3, r5
 8002438:	469c      	mov	ip, r3
 800243a:	464b      	mov	r3, r9
 800243c:	0c1b      	lsrs	r3, r3, #16
 800243e:	4698      	mov	r8, r3
 8002440:	436f      	muls	r7, r5
 8002442:	193f      	adds	r7, r7, r4
 8002444:	4447      	add	r7, r8
 8002446:	4450      	add	r0, sl
 8002448:	42bc      	cmp	r4, r7
 800244a:	d903      	bls.n	8002454 <__aeabi_dmul+0x28c>
 800244c:	2380      	movs	r3, #128	; 0x80
 800244e:	025b      	lsls	r3, r3, #9
 8002450:	4698      	mov	r8, r3
 8002452:	44c4      	add	ip, r8
 8002454:	9b04      	ldr	r3, [sp, #16]
 8002456:	9d00      	ldr	r5, [sp, #0]
 8002458:	4698      	mov	r8, r3
 800245a:	4445      	add	r5, r8
 800245c:	42b5      	cmp	r5, r6
 800245e:	41b6      	sbcs	r6, r6
 8002460:	4273      	negs	r3, r6
 8002462:	4698      	mov	r8, r3
 8002464:	464b      	mov	r3, r9
 8002466:	041e      	lsls	r6, r3, #16
 8002468:	9b05      	ldr	r3, [sp, #20]
 800246a:	043c      	lsls	r4, r7, #16
 800246c:	4699      	mov	r9, r3
 800246e:	0c36      	lsrs	r6, r6, #16
 8002470:	19a4      	adds	r4, r4, r6
 8002472:	444c      	add	r4, r9
 8002474:	46a1      	mov	r9, r4
 8002476:	4683      	mov	fp, r0
 8002478:	186e      	adds	r6, r5, r1
 800247a:	44c1      	add	r9, r8
 800247c:	428e      	cmp	r6, r1
 800247e:	4189      	sbcs	r1, r1
 8002480:	44cb      	add	fp, r9
 8002482:	465d      	mov	r5, fp
 8002484:	4249      	negs	r1, r1
 8002486:	186d      	adds	r5, r5, r1
 8002488:	429c      	cmp	r4, r3
 800248a:	41a4      	sbcs	r4, r4
 800248c:	45c1      	cmp	r9, r8
 800248e:	419b      	sbcs	r3, r3
 8002490:	4583      	cmp	fp, r0
 8002492:	4180      	sbcs	r0, r0
 8002494:	428d      	cmp	r5, r1
 8002496:	4189      	sbcs	r1, r1
 8002498:	425b      	negs	r3, r3
 800249a:	4264      	negs	r4, r4
 800249c:	431c      	orrs	r4, r3
 800249e:	4240      	negs	r0, r0
 80024a0:	9b03      	ldr	r3, [sp, #12]
 80024a2:	4249      	negs	r1, r1
 80024a4:	4301      	orrs	r1, r0
 80024a6:	0270      	lsls	r0, r6, #9
 80024a8:	0c3f      	lsrs	r7, r7, #16
 80024aa:	4318      	orrs	r0, r3
 80024ac:	19e4      	adds	r4, r4, r7
 80024ae:	1e47      	subs	r7, r0, #1
 80024b0:	41b8      	sbcs	r0, r7
 80024b2:	1864      	adds	r4, r4, r1
 80024b4:	4464      	add	r4, ip
 80024b6:	0df6      	lsrs	r6, r6, #23
 80024b8:	0261      	lsls	r1, r4, #9
 80024ba:	4330      	orrs	r0, r6
 80024bc:	0dec      	lsrs	r4, r5, #23
 80024be:	026e      	lsls	r6, r5, #9
 80024c0:	430c      	orrs	r4, r1
 80024c2:	4330      	orrs	r0, r6
 80024c4:	01c9      	lsls	r1, r1, #7
 80024c6:	d400      	bmi.n	80024ca <__aeabi_dmul+0x302>
 80024c8:	e0f1      	b.n	80026ae <__aeabi_dmul+0x4e6>
 80024ca:	2101      	movs	r1, #1
 80024cc:	0843      	lsrs	r3, r0, #1
 80024ce:	4001      	ands	r1, r0
 80024d0:	430b      	orrs	r3, r1
 80024d2:	07e0      	lsls	r0, r4, #31
 80024d4:	4318      	orrs	r0, r3
 80024d6:	0864      	lsrs	r4, r4, #1
 80024d8:	4915      	ldr	r1, [pc, #84]	; (8002530 <__aeabi_dmul+0x368>)
 80024da:	9b02      	ldr	r3, [sp, #8]
 80024dc:	468c      	mov	ip, r1
 80024de:	4463      	add	r3, ip
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	dc00      	bgt.n	80024e6 <__aeabi_dmul+0x31e>
 80024e4:	e097      	b.n	8002616 <__aeabi_dmul+0x44e>
 80024e6:	0741      	lsls	r1, r0, #29
 80024e8:	d009      	beq.n	80024fe <__aeabi_dmul+0x336>
 80024ea:	210f      	movs	r1, #15
 80024ec:	4001      	ands	r1, r0
 80024ee:	2904      	cmp	r1, #4
 80024f0:	d005      	beq.n	80024fe <__aeabi_dmul+0x336>
 80024f2:	1d01      	adds	r1, r0, #4
 80024f4:	4281      	cmp	r1, r0
 80024f6:	4180      	sbcs	r0, r0
 80024f8:	4240      	negs	r0, r0
 80024fa:	1824      	adds	r4, r4, r0
 80024fc:	0008      	movs	r0, r1
 80024fe:	01e1      	lsls	r1, r4, #7
 8002500:	d506      	bpl.n	8002510 <__aeabi_dmul+0x348>
 8002502:	2180      	movs	r1, #128	; 0x80
 8002504:	00c9      	lsls	r1, r1, #3
 8002506:	468c      	mov	ip, r1
 8002508:	4b0a      	ldr	r3, [pc, #40]	; (8002534 <__aeabi_dmul+0x36c>)
 800250a:	401c      	ands	r4, r3
 800250c:	9b02      	ldr	r3, [sp, #8]
 800250e:	4463      	add	r3, ip
 8002510:	4909      	ldr	r1, [pc, #36]	; (8002538 <__aeabi_dmul+0x370>)
 8002512:	428b      	cmp	r3, r1
 8002514:	dd00      	ble.n	8002518 <__aeabi_dmul+0x350>
 8002516:	e710      	b.n	800233a <__aeabi_dmul+0x172>
 8002518:	0761      	lsls	r1, r4, #29
 800251a:	08c5      	lsrs	r5, r0, #3
 800251c:	0264      	lsls	r4, r4, #9
 800251e:	055b      	lsls	r3, r3, #21
 8002520:	430d      	orrs	r5, r1
 8002522:	0b24      	lsrs	r4, r4, #12
 8002524:	0d5b      	lsrs	r3, r3, #21
 8002526:	e6c1      	b.n	80022ac <__aeabi_dmul+0xe4>
 8002528:	000007ff 	.word	0x000007ff
 800252c:	fffffc01 	.word	0xfffffc01
 8002530:	000003ff 	.word	0x000003ff
 8002534:	feffffff 	.word	0xfeffffff
 8002538:	000007fe 	.word	0x000007fe
 800253c:	464b      	mov	r3, r9
 800253e:	4323      	orrs	r3, r4
 8002540:	d059      	beq.n	80025f6 <__aeabi_dmul+0x42e>
 8002542:	2c00      	cmp	r4, #0
 8002544:	d100      	bne.n	8002548 <__aeabi_dmul+0x380>
 8002546:	e0a3      	b.n	8002690 <__aeabi_dmul+0x4c8>
 8002548:	0020      	movs	r0, r4
 800254a:	f000 fdf9 	bl	8003140 <__clzsi2>
 800254e:	0001      	movs	r1, r0
 8002550:	0003      	movs	r3, r0
 8002552:	390b      	subs	r1, #11
 8002554:	221d      	movs	r2, #29
 8002556:	1a52      	subs	r2, r2, r1
 8002558:	4649      	mov	r1, r9
 800255a:	0018      	movs	r0, r3
 800255c:	40d1      	lsrs	r1, r2
 800255e:	464a      	mov	r2, r9
 8002560:	3808      	subs	r0, #8
 8002562:	4082      	lsls	r2, r0
 8002564:	4084      	lsls	r4, r0
 8002566:	0010      	movs	r0, r2
 8002568:	430c      	orrs	r4, r1
 800256a:	4a74      	ldr	r2, [pc, #464]	; (800273c <__aeabi_dmul+0x574>)
 800256c:	1aeb      	subs	r3, r5, r3
 800256e:	4694      	mov	ip, r2
 8002570:	4642      	mov	r2, r8
 8002572:	4463      	add	r3, ip
 8002574:	9301      	str	r3, [sp, #4]
 8002576:	9b01      	ldr	r3, [sp, #4]
 8002578:	407a      	eors	r2, r7
 800257a:	3301      	adds	r3, #1
 800257c:	2100      	movs	r1, #0
 800257e:	b2d2      	uxtb	r2, r2
 8002580:	9302      	str	r3, [sp, #8]
 8002582:	2e0a      	cmp	r6, #10
 8002584:	dd00      	ble.n	8002588 <__aeabi_dmul+0x3c0>
 8002586:	e667      	b.n	8002258 <__aeabi_dmul+0x90>
 8002588:	e683      	b.n	8002292 <__aeabi_dmul+0xca>
 800258a:	465b      	mov	r3, fp
 800258c:	4303      	orrs	r3, r0
 800258e:	469a      	mov	sl, r3
 8002590:	d02a      	beq.n	80025e8 <__aeabi_dmul+0x420>
 8002592:	465b      	mov	r3, fp
 8002594:	2b00      	cmp	r3, #0
 8002596:	d06d      	beq.n	8002674 <__aeabi_dmul+0x4ac>
 8002598:	4658      	mov	r0, fp
 800259a:	f000 fdd1 	bl	8003140 <__clzsi2>
 800259e:	0001      	movs	r1, r0
 80025a0:	0003      	movs	r3, r0
 80025a2:	390b      	subs	r1, #11
 80025a4:	221d      	movs	r2, #29
 80025a6:	1a52      	subs	r2, r2, r1
 80025a8:	0021      	movs	r1, r4
 80025aa:	0018      	movs	r0, r3
 80025ac:	465d      	mov	r5, fp
 80025ae:	40d1      	lsrs	r1, r2
 80025b0:	3808      	subs	r0, #8
 80025b2:	4085      	lsls	r5, r0
 80025b4:	000a      	movs	r2, r1
 80025b6:	4084      	lsls	r4, r0
 80025b8:	432a      	orrs	r2, r5
 80025ba:	4693      	mov	fp, r2
 80025bc:	46a2      	mov	sl, r4
 80025be:	4d5f      	ldr	r5, [pc, #380]	; (800273c <__aeabi_dmul+0x574>)
 80025c0:	2600      	movs	r6, #0
 80025c2:	1aed      	subs	r5, r5, r3
 80025c4:	2300      	movs	r3, #0
 80025c6:	9300      	str	r3, [sp, #0]
 80025c8:	e625      	b.n	8002216 <__aeabi_dmul+0x4e>
 80025ca:	465b      	mov	r3, fp
 80025cc:	4303      	orrs	r3, r0
 80025ce:	469a      	mov	sl, r3
 80025d0:	d105      	bne.n	80025de <__aeabi_dmul+0x416>
 80025d2:	2300      	movs	r3, #0
 80025d4:	469b      	mov	fp, r3
 80025d6:	3302      	adds	r3, #2
 80025d8:	2608      	movs	r6, #8
 80025da:	9300      	str	r3, [sp, #0]
 80025dc:	e61b      	b.n	8002216 <__aeabi_dmul+0x4e>
 80025de:	2303      	movs	r3, #3
 80025e0:	4682      	mov	sl, r0
 80025e2:	260c      	movs	r6, #12
 80025e4:	9300      	str	r3, [sp, #0]
 80025e6:	e616      	b.n	8002216 <__aeabi_dmul+0x4e>
 80025e8:	2300      	movs	r3, #0
 80025ea:	469b      	mov	fp, r3
 80025ec:	3301      	adds	r3, #1
 80025ee:	2604      	movs	r6, #4
 80025f0:	2500      	movs	r5, #0
 80025f2:	9300      	str	r3, [sp, #0]
 80025f4:	e60f      	b.n	8002216 <__aeabi_dmul+0x4e>
 80025f6:	4642      	mov	r2, r8
 80025f8:	3301      	adds	r3, #1
 80025fa:	9501      	str	r5, [sp, #4]
 80025fc:	431e      	orrs	r6, r3
 80025fe:	9b01      	ldr	r3, [sp, #4]
 8002600:	407a      	eors	r2, r7
 8002602:	3301      	adds	r3, #1
 8002604:	2400      	movs	r4, #0
 8002606:	2000      	movs	r0, #0
 8002608:	2101      	movs	r1, #1
 800260a:	b2d2      	uxtb	r2, r2
 800260c:	9302      	str	r3, [sp, #8]
 800260e:	2e0a      	cmp	r6, #10
 8002610:	dd00      	ble.n	8002614 <__aeabi_dmul+0x44c>
 8002612:	e621      	b.n	8002258 <__aeabi_dmul+0x90>
 8002614:	e63d      	b.n	8002292 <__aeabi_dmul+0xca>
 8002616:	2101      	movs	r1, #1
 8002618:	1ac9      	subs	r1, r1, r3
 800261a:	2938      	cmp	r1, #56	; 0x38
 800261c:	dd00      	ble.n	8002620 <__aeabi_dmul+0x458>
 800261e:	e642      	b.n	80022a6 <__aeabi_dmul+0xde>
 8002620:	291f      	cmp	r1, #31
 8002622:	dd47      	ble.n	80026b4 <__aeabi_dmul+0x4ec>
 8002624:	261f      	movs	r6, #31
 8002626:	0025      	movs	r5, r4
 8002628:	4276      	negs	r6, r6
 800262a:	1af3      	subs	r3, r6, r3
 800262c:	40dd      	lsrs	r5, r3
 800262e:	002b      	movs	r3, r5
 8002630:	2920      	cmp	r1, #32
 8002632:	d005      	beq.n	8002640 <__aeabi_dmul+0x478>
 8002634:	4942      	ldr	r1, [pc, #264]	; (8002740 <__aeabi_dmul+0x578>)
 8002636:	9d02      	ldr	r5, [sp, #8]
 8002638:	468c      	mov	ip, r1
 800263a:	4465      	add	r5, ip
 800263c:	40ac      	lsls	r4, r5
 800263e:	4320      	orrs	r0, r4
 8002640:	1e41      	subs	r1, r0, #1
 8002642:	4188      	sbcs	r0, r1
 8002644:	4318      	orrs	r0, r3
 8002646:	2307      	movs	r3, #7
 8002648:	001d      	movs	r5, r3
 800264a:	2400      	movs	r4, #0
 800264c:	4005      	ands	r5, r0
 800264e:	4203      	tst	r3, r0
 8002650:	d04a      	beq.n	80026e8 <__aeabi_dmul+0x520>
 8002652:	230f      	movs	r3, #15
 8002654:	2400      	movs	r4, #0
 8002656:	4003      	ands	r3, r0
 8002658:	2b04      	cmp	r3, #4
 800265a:	d042      	beq.n	80026e2 <__aeabi_dmul+0x51a>
 800265c:	1d03      	adds	r3, r0, #4
 800265e:	4283      	cmp	r3, r0
 8002660:	4180      	sbcs	r0, r0
 8002662:	4240      	negs	r0, r0
 8002664:	1824      	adds	r4, r4, r0
 8002666:	0018      	movs	r0, r3
 8002668:	0223      	lsls	r3, r4, #8
 800266a:	d53a      	bpl.n	80026e2 <__aeabi_dmul+0x51a>
 800266c:	2301      	movs	r3, #1
 800266e:	2400      	movs	r4, #0
 8002670:	2500      	movs	r5, #0
 8002672:	e61b      	b.n	80022ac <__aeabi_dmul+0xe4>
 8002674:	f000 fd64 	bl	8003140 <__clzsi2>
 8002678:	0001      	movs	r1, r0
 800267a:	0003      	movs	r3, r0
 800267c:	3115      	adds	r1, #21
 800267e:	3320      	adds	r3, #32
 8002680:	291c      	cmp	r1, #28
 8002682:	dd8f      	ble.n	80025a4 <__aeabi_dmul+0x3dc>
 8002684:	3808      	subs	r0, #8
 8002686:	2200      	movs	r2, #0
 8002688:	4084      	lsls	r4, r0
 800268a:	4692      	mov	sl, r2
 800268c:	46a3      	mov	fp, r4
 800268e:	e796      	b.n	80025be <__aeabi_dmul+0x3f6>
 8002690:	f000 fd56 	bl	8003140 <__clzsi2>
 8002694:	0001      	movs	r1, r0
 8002696:	0003      	movs	r3, r0
 8002698:	3115      	adds	r1, #21
 800269a:	3320      	adds	r3, #32
 800269c:	291c      	cmp	r1, #28
 800269e:	dc00      	bgt.n	80026a2 <__aeabi_dmul+0x4da>
 80026a0:	e758      	b.n	8002554 <__aeabi_dmul+0x38c>
 80026a2:	0002      	movs	r2, r0
 80026a4:	464c      	mov	r4, r9
 80026a6:	3a08      	subs	r2, #8
 80026a8:	2000      	movs	r0, #0
 80026aa:	4094      	lsls	r4, r2
 80026ac:	e75d      	b.n	800256a <__aeabi_dmul+0x3a2>
 80026ae:	9b01      	ldr	r3, [sp, #4]
 80026b0:	9302      	str	r3, [sp, #8]
 80026b2:	e711      	b.n	80024d8 <__aeabi_dmul+0x310>
 80026b4:	4b23      	ldr	r3, [pc, #140]	; (8002744 <__aeabi_dmul+0x57c>)
 80026b6:	0026      	movs	r6, r4
 80026b8:	469c      	mov	ip, r3
 80026ba:	0003      	movs	r3, r0
 80026bc:	9d02      	ldr	r5, [sp, #8]
 80026be:	40cb      	lsrs	r3, r1
 80026c0:	4465      	add	r5, ip
 80026c2:	40ae      	lsls	r6, r5
 80026c4:	431e      	orrs	r6, r3
 80026c6:	0003      	movs	r3, r0
 80026c8:	40ab      	lsls	r3, r5
 80026ca:	1e58      	subs	r0, r3, #1
 80026cc:	4183      	sbcs	r3, r0
 80026ce:	0030      	movs	r0, r6
 80026d0:	4318      	orrs	r0, r3
 80026d2:	40cc      	lsrs	r4, r1
 80026d4:	0743      	lsls	r3, r0, #29
 80026d6:	d0c7      	beq.n	8002668 <__aeabi_dmul+0x4a0>
 80026d8:	230f      	movs	r3, #15
 80026da:	4003      	ands	r3, r0
 80026dc:	2b04      	cmp	r3, #4
 80026de:	d1bd      	bne.n	800265c <__aeabi_dmul+0x494>
 80026e0:	e7c2      	b.n	8002668 <__aeabi_dmul+0x4a0>
 80026e2:	0765      	lsls	r5, r4, #29
 80026e4:	0264      	lsls	r4, r4, #9
 80026e6:	0b24      	lsrs	r4, r4, #12
 80026e8:	08c0      	lsrs	r0, r0, #3
 80026ea:	2300      	movs	r3, #0
 80026ec:	4305      	orrs	r5, r0
 80026ee:	e5dd      	b.n	80022ac <__aeabi_dmul+0xe4>
 80026f0:	2500      	movs	r5, #0
 80026f2:	2302      	movs	r3, #2
 80026f4:	2e0f      	cmp	r6, #15
 80026f6:	d10c      	bne.n	8002712 <__aeabi_dmul+0x54a>
 80026f8:	2480      	movs	r4, #128	; 0x80
 80026fa:	465b      	mov	r3, fp
 80026fc:	0324      	lsls	r4, r4, #12
 80026fe:	4223      	tst	r3, r4
 8002700:	d00e      	beq.n	8002720 <__aeabi_dmul+0x558>
 8002702:	4221      	tst	r1, r4
 8002704:	d10c      	bne.n	8002720 <__aeabi_dmul+0x558>
 8002706:	430c      	orrs	r4, r1
 8002708:	0324      	lsls	r4, r4, #12
 800270a:	003a      	movs	r2, r7
 800270c:	4b0e      	ldr	r3, [pc, #56]	; (8002748 <__aeabi_dmul+0x580>)
 800270e:	0b24      	lsrs	r4, r4, #12
 8002710:	e5cc      	b.n	80022ac <__aeabi_dmul+0xe4>
 8002712:	2e0b      	cmp	r6, #11
 8002714:	d000      	beq.n	8002718 <__aeabi_dmul+0x550>
 8002716:	e5a2      	b.n	800225e <__aeabi_dmul+0x96>
 8002718:	468b      	mov	fp, r1
 800271a:	46aa      	mov	sl, r5
 800271c:	9300      	str	r3, [sp, #0]
 800271e:	e5f7      	b.n	8002310 <__aeabi_dmul+0x148>
 8002720:	2480      	movs	r4, #128	; 0x80
 8002722:	465b      	mov	r3, fp
 8002724:	0324      	lsls	r4, r4, #12
 8002726:	431c      	orrs	r4, r3
 8002728:	0324      	lsls	r4, r4, #12
 800272a:	4642      	mov	r2, r8
 800272c:	4655      	mov	r5, sl
 800272e:	4b06      	ldr	r3, [pc, #24]	; (8002748 <__aeabi_dmul+0x580>)
 8002730:	0b24      	lsrs	r4, r4, #12
 8002732:	e5bb      	b.n	80022ac <__aeabi_dmul+0xe4>
 8002734:	464d      	mov	r5, r9
 8002736:	0021      	movs	r1, r4
 8002738:	2303      	movs	r3, #3
 800273a:	e7db      	b.n	80026f4 <__aeabi_dmul+0x52c>
 800273c:	fffffc0d 	.word	0xfffffc0d
 8002740:	0000043e 	.word	0x0000043e
 8002744:	0000041e 	.word	0x0000041e
 8002748:	000007ff 	.word	0x000007ff

0800274c <__aeabi_dsub>:
 800274c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800274e:	4657      	mov	r7, sl
 8002750:	464e      	mov	r6, r9
 8002752:	4645      	mov	r5, r8
 8002754:	46de      	mov	lr, fp
 8002756:	b5e0      	push	{r5, r6, r7, lr}
 8002758:	000d      	movs	r5, r1
 800275a:	0004      	movs	r4, r0
 800275c:	0019      	movs	r1, r3
 800275e:	0010      	movs	r0, r2
 8002760:	032b      	lsls	r3, r5, #12
 8002762:	0a5b      	lsrs	r3, r3, #9
 8002764:	0f62      	lsrs	r2, r4, #29
 8002766:	431a      	orrs	r2, r3
 8002768:	00e3      	lsls	r3, r4, #3
 800276a:	030c      	lsls	r4, r1, #12
 800276c:	0a64      	lsrs	r4, r4, #9
 800276e:	0f47      	lsrs	r7, r0, #29
 8002770:	4327      	orrs	r7, r4
 8002772:	4cd0      	ldr	r4, [pc, #832]	; (8002ab4 <__aeabi_dsub+0x368>)
 8002774:	006e      	lsls	r6, r5, #1
 8002776:	4691      	mov	r9, r2
 8002778:	b083      	sub	sp, #12
 800277a:	004a      	lsls	r2, r1, #1
 800277c:	00c0      	lsls	r0, r0, #3
 800277e:	4698      	mov	r8, r3
 8002780:	46a2      	mov	sl, r4
 8002782:	0d76      	lsrs	r6, r6, #21
 8002784:	0fed      	lsrs	r5, r5, #31
 8002786:	0d52      	lsrs	r2, r2, #21
 8002788:	0fc9      	lsrs	r1, r1, #31
 800278a:	9001      	str	r0, [sp, #4]
 800278c:	42a2      	cmp	r2, r4
 800278e:	d100      	bne.n	8002792 <__aeabi_dsub+0x46>
 8002790:	e0b9      	b.n	8002906 <__aeabi_dsub+0x1ba>
 8002792:	2401      	movs	r4, #1
 8002794:	4061      	eors	r1, r4
 8002796:	468b      	mov	fp, r1
 8002798:	428d      	cmp	r5, r1
 800279a:	d100      	bne.n	800279e <__aeabi_dsub+0x52>
 800279c:	e08d      	b.n	80028ba <__aeabi_dsub+0x16e>
 800279e:	1ab4      	subs	r4, r6, r2
 80027a0:	46a4      	mov	ip, r4
 80027a2:	2c00      	cmp	r4, #0
 80027a4:	dc00      	bgt.n	80027a8 <__aeabi_dsub+0x5c>
 80027a6:	e0b7      	b.n	8002918 <__aeabi_dsub+0x1cc>
 80027a8:	2a00      	cmp	r2, #0
 80027aa:	d100      	bne.n	80027ae <__aeabi_dsub+0x62>
 80027ac:	e0cb      	b.n	8002946 <__aeabi_dsub+0x1fa>
 80027ae:	4ac1      	ldr	r2, [pc, #772]	; (8002ab4 <__aeabi_dsub+0x368>)
 80027b0:	4296      	cmp	r6, r2
 80027b2:	d100      	bne.n	80027b6 <__aeabi_dsub+0x6a>
 80027b4:	e186      	b.n	8002ac4 <__aeabi_dsub+0x378>
 80027b6:	2280      	movs	r2, #128	; 0x80
 80027b8:	0412      	lsls	r2, r2, #16
 80027ba:	4317      	orrs	r7, r2
 80027bc:	4662      	mov	r2, ip
 80027be:	2a38      	cmp	r2, #56	; 0x38
 80027c0:	dd00      	ble.n	80027c4 <__aeabi_dsub+0x78>
 80027c2:	e1a4      	b.n	8002b0e <__aeabi_dsub+0x3c2>
 80027c4:	2a1f      	cmp	r2, #31
 80027c6:	dd00      	ble.n	80027ca <__aeabi_dsub+0x7e>
 80027c8:	e21d      	b.n	8002c06 <__aeabi_dsub+0x4ba>
 80027ca:	4661      	mov	r1, ip
 80027cc:	2220      	movs	r2, #32
 80027ce:	003c      	movs	r4, r7
 80027d0:	1a52      	subs	r2, r2, r1
 80027d2:	0001      	movs	r1, r0
 80027d4:	4090      	lsls	r0, r2
 80027d6:	4094      	lsls	r4, r2
 80027d8:	1e42      	subs	r2, r0, #1
 80027da:	4190      	sbcs	r0, r2
 80027dc:	4662      	mov	r2, ip
 80027de:	46a0      	mov	r8, r4
 80027e0:	4664      	mov	r4, ip
 80027e2:	40d7      	lsrs	r7, r2
 80027e4:	464a      	mov	r2, r9
 80027e6:	40e1      	lsrs	r1, r4
 80027e8:	4644      	mov	r4, r8
 80027ea:	1bd2      	subs	r2, r2, r7
 80027ec:	4691      	mov	r9, r2
 80027ee:	430c      	orrs	r4, r1
 80027f0:	4304      	orrs	r4, r0
 80027f2:	1b1c      	subs	r4, r3, r4
 80027f4:	42a3      	cmp	r3, r4
 80027f6:	4192      	sbcs	r2, r2
 80027f8:	464b      	mov	r3, r9
 80027fa:	4252      	negs	r2, r2
 80027fc:	1a9b      	subs	r3, r3, r2
 80027fe:	469a      	mov	sl, r3
 8002800:	4653      	mov	r3, sl
 8002802:	021b      	lsls	r3, r3, #8
 8002804:	d400      	bmi.n	8002808 <__aeabi_dsub+0xbc>
 8002806:	e12b      	b.n	8002a60 <__aeabi_dsub+0x314>
 8002808:	4653      	mov	r3, sl
 800280a:	025a      	lsls	r2, r3, #9
 800280c:	0a53      	lsrs	r3, r2, #9
 800280e:	469a      	mov	sl, r3
 8002810:	4653      	mov	r3, sl
 8002812:	2b00      	cmp	r3, #0
 8002814:	d100      	bne.n	8002818 <__aeabi_dsub+0xcc>
 8002816:	e166      	b.n	8002ae6 <__aeabi_dsub+0x39a>
 8002818:	4650      	mov	r0, sl
 800281a:	f000 fc91 	bl	8003140 <__clzsi2>
 800281e:	0003      	movs	r3, r0
 8002820:	3b08      	subs	r3, #8
 8002822:	2220      	movs	r2, #32
 8002824:	0020      	movs	r0, r4
 8002826:	1ad2      	subs	r2, r2, r3
 8002828:	4651      	mov	r1, sl
 800282a:	40d0      	lsrs	r0, r2
 800282c:	4099      	lsls	r1, r3
 800282e:	0002      	movs	r2, r0
 8002830:	409c      	lsls	r4, r3
 8002832:	430a      	orrs	r2, r1
 8002834:	429e      	cmp	r6, r3
 8002836:	dd00      	ble.n	800283a <__aeabi_dsub+0xee>
 8002838:	e164      	b.n	8002b04 <__aeabi_dsub+0x3b8>
 800283a:	1b9b      	subs	r3, r3, r6
 800283c:	1c59      	adds	r1, r3, #1
 800283e:	291f      	cmp	r1, #31
 8002840:	dd00      	ble.n	8002844 <__aeabi_dsub+0xf8>
 8002842:	e0fe      	b.n	8002a42 <__aeabi_dsub+0x2f6>
 8002844:	2320      	movs	r3, #32
 8002846:	0010      	movs	r0, r2
 8002848:	0026      	movs	r6, r4
 800284a:	1a5b      	subs	r3, r3, r1
 800284c:	409c      	lsls	r4, r3
 800284e:	4098      	lsls	r0, r3
 8002850:	40ce      	lsrs	r6, r1
 8002852:	40ca      	lsrs	r2, r1
 8002854:	1e63      	subs	r3, r4, #1
 8002856:	419c      	sbcs	r4, r3
 8002858:	4330      	orrs	r0, r6
 800285a:	4692      	mov	sl, r2
 800285c:	2600      	movs	r6, #0
 800285e:	4304      	orrs	r4, r0
 8002860:	0763      	lsls	r3, r4, #29
 8002862:	d009      	beq.n	8002878 <__aeabi_dsub+0x12c>
 8002864:	230f      	movs	r3, #15
 8002866:	4023      	ands	r3, r4
 8002868:	2b04      	cmp	r3, #4
 800286a:	d005      	beq.n	8002878 <__aeabi_dsub+0x12c>
 800286c:	1d23      	adds	r3, r4, #4
 800286e:	42a3      	cmp	r3, r4
 8002870:	41a4      	sbcs	r4, r4
 8002872:	4264      	negs	r4, r4
 8002874:	44a2      	add	sl, r4
 8002876:	001c      	movs	r4, r3
 8002878:	4653      	mov	r3, sl
 800287a:	021b      	lsls	r3, r3, #8
 800287c:	d400      	bmi.n	8002880 <__aeabi_dsub+0x134>
 800287e:	e0f2      	b.n	8002a66 <__aeabi_dsub+0x31a>
 8002880:	4b8c      	ldr	r3, [pc, #560]	; (8002ab4 <__aeabi_dsub+0x368>)
 8002882:	3601      	adds	r6, #1
 8002884:	429e      	cmp	r6, r3
 8002886:	d100      	bne.n	800288a <__aeabi_dsub+0x13e>
 8002888:	e10f      	b.n	8002aaa <__aeabi_dsub+0x35e>
 800288a:	4653      	mov	r3, sl
 800288c:	498a      	ldr	r1, [pc, #552]	; (8002ab8 <__aeabi_dsub+0x36c>)
 800288e:	08e4      	lsrs	r4, r4, #3
 8002890:	400b      	ands	r3, r1
 8002892:	0019      	movs	r1, r3
 8002894:	075b      	lsls	r3, r3, #29
 8002896:	4323      	orrs	r3, r4
 8002898:	0572      	lsls	r2, r6, #21
 800289a:	024c      	lsls	r4, r1, #9
 800289c:	0b24      	lsrs	r4, r4, #12
 800289e:	0d52      	lsrs	r2, r2, #21
 80028a0:	0512      	lsls	r2, r2, #20
 80028a2:	4322      	orrs	r2, r4
 80028a4:	07ed      	lsls	r5, r5, #31
 80028a6:	432a      	orrs	r2, r5
 80028a8:	0018      	movs	r0, r3
 80028aa:	0011      	movs	r1, r2
 80028ac:	b003      	add	sp, #12
 80028ae:	bcf0      	pop	{r4, r5, r6, r7}
 80028b0:	46bb      	mov	fp, r7
 80028b2:	46b2      	mov	sl, r6
 80028b4:	46a9      	mov	r9, r5
 80028b6:	46a0      	mov	r8, r4
 80028b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028ba:	1ab4      	subs	r4, r6, r2
 80028bc:	46a4      	mov	ip, r4
 80028be:	2c00      	cmp	r4, #0
 80028c0:	dd59      	ble.n	8002976 <__aeabi_dsub+0x22a>
 80028c2:	2a00      	cmp	r2, #0
 80028c4:	d100      	bne.n	80028c8 <__aeabi_dsub+0x17c>
 80028c6:	e0b0      	b.n	8002a2a <__aeabi_dsub+0x2de>
 80028c8:	4556      	cmp	r6, sl
 80028ca:	d100      	bne.n	80028ce <__aeabi_dsub+0x182>
 80028cc:	e0fa      	b.n	8002ac4 <__aeabi_dsub+0x378>
 80028ce:	2280      	movs	r2, #128	; 0x80
 80028d0:	0412      	lsls	r2, r2, #16
 80028d2:	4317      	orrs	r7, r2
 80028d4:	4662      	mov	r2, ip
 80028d6:	2a38      	cmp	r2, #56	; 0x38
 80028d8:	dd00      	ble.n	80028dc <__aeabi_dsub+0x190>
 80028da:	e0d4      	b.n	8002a86 <__aeabi_dsub+0x33a>
 80028dc:	2a1f      	cmp	r2, #31
 80028de:	dc00      	bgt.n	80028e2 <__aeabi_dsub+0x196>
 80028e0:	e1c0      	b.n	8002c64 <__aeabi_dsub+0x518>
 80028e2:	0039      	movs	r1, r7
 80028e4:	3a20      	subs	r2, #32
 80028e6:	40d1      	lsrs	r1, r2
 80028e8:	4662      	mov	r2, ip
 80028ea:	2a20      	cmp	r2, #32
 80028ec:	d006      	beq.n	80028fc <__aeabi_dsub+0x1b0>
 80028ee:	4664      	mov	r4, ip
 80028f0:	2240      	movs	r2, #64	; 0x40
 80028f2:	1b12      	subs	r2, r2, r4
 80028f4:	003c      	movs	r4, r7
 80028f6:	4094      	lsls	r4, r2
 80028f8:	4304      	orrs	r4, r0
 80028fa:	9401      	str	r4, [sp, #4]
 80028fc:	9c01      	ldr	r4, [sp, #4]
 80028fe:	1e62      	subs	r2, r4, #1
 8002900:	4194      	sbcs	r4, r2
 8002902:	430c      	orrs	r4, r1
 8002904:	e0c3      	b.n	8002a8e <__aeabi_dsub+0x342>
 8002906:	003c      	movs	r4, r7
 8002908:	4304      	orrs	r4, r0
 800290a:	d02b      	beq.n	8002964 <__aeabi_dsub+0x218>
 800290c:	468b      	mov	fp, r1
 800290e:	428d      	cmp	r5, r1
 8002910:	d02e      	beq.n	8002970 <__aeabi_dsub+0x224>
 8002912:	4c6a      	ldr	r4, [pc, #424]	; (8002abc <__aeabi_dsub+0x370>)
 8002914:	46a4      	mov	ip, r4
 8002916:	44b4      	add	ip, r6
 8002918:	4664      	mov	r4, ip
 800291a:	2c00      	cmp	r4, #0
 800291c:	d05f      	beq.n	80029de <__aeabi_dsub+0x292>
 800291e:	1b94      	subs	r4, r2, r6
 8002920:	46a4      	mov	ip, r4
 8002922:	2e00      	cmp	r6, #0
 8002924:	d000      	beq.n	8002928 <__aeabi_dsub+0x1dc>
 8002926:	e120      	b.n	8002b6a <__aeabi_dsub+0x41e>
 8002928:	464c      	mov	r4, r9
 800292a:	431c      	orrs	r4, r3
 800292c:	d100      	bne.n	8002930 <__aeabi_dsub+0x1e4>
 800292e:	e1c7      	b.n	8002cc0 <__aeabi_dsub+0x574>
 8002930:	4661      	mov	r1, ip
 8002932:	1e4c      	subs	r4, r1, #1
 8002934:	2901      	cmp	r1, #1
 8002936:	d100      	bne.n	800293a <__aeabi_dsub+0x1ee>
 8002938:	e223      	b.n	8002d82 <__aeabi_dsub+0x636>
 800293a:	4d5e      	ldr	r5, [pc, #376]	; (8002ab4 <__aeabi_dsub+0x368>)
 800293c:	45ac      	cmp	ip, r5
 800293e:	d100      	bne.n	8002942 <__aeabi_dsub+0x1f6>
 8002940:	e1d8      	b.n	8002cf4 <__aeabi_dsub+0x5a8>
 8002942:	46a4      	mov	ip, r4
 8002944:	e11a      	b.n	8002b7c <__aeabi_dsub+0x430>
 8002946:	003a      	movs	r2, r7
 8002948:	4302      	orrs	r2, r0
 800294a:	d100      	bne.n	800294e <__aeabi_dsub+0x202>
 800294c:	e0e4      	b.n	8002b18 <__aeabi_dsub+0x3cc>
 800294e:	0022      	movs	r2, r4
 8002950:	3a01      	subs	r2, #1
 8002952:	2c01      	cmp	r4, #1
 8002954:	d100      	bne.n	8002958 <__aeabi_dsub+0x20c>
 8002956:	e1c3      	b.n	8002ce0 <__aeabi_dsub+0x594>
 8002958:	4956      	ldr	r1, [pc, #344]	; (8002ab4 <__aeabi_dsub+0x368>)
 800295a:	428c      	cmp	r4, r1
 800295c:	d100      	bne.n	8002960 <__aeabi_dsub+0x214>
 800295e:	e0b1      	b.n	8002ac4 <__aeabi_dsub+0x378>
 8002960:	4694      	mov	ip, r2
 8002962:	e72b      	b.n	80027bc <__aeabi_dsub+0x70>
 8002964:	2401      	movs	r4, #1
 8002966:	4061      	eors	r1, r4
 8002968:	468b      	mov	fp, r1
 800296a:	428d      	cmp	r5, r1
 800296c:	d000      	beq.n	8002970 <__aeabi_dsub+0x224>
 800296e:	e716      	b.n	800279e <__aeabi_dsub+0x52>
 8002970:	4952      	ldr	r1, [pc, #328]	; (8002abc <__aeabi_dsub+0x370>)
 8002972:	468c      	mov	ip, r1
 8002974:	44b4      	add	ip, r6
 8002976:	4664      	mov	r4, ip
 8002978:	2c00      	cmp	r4, #0
 800297a:	d100      	bne.n	800297e <__aeabi_dsub+0x232>
 800297c:	e0d3      	b.n	8002b26 <__aeabi_dsub+0x3da>
 800297e:	1b91      	subs	r1, r2, r6
 8002980:	468c      	mov	ip, r1
 8002982:	2e00      	cmp	r6, #0
 8002984:	d100      	bne.n	8002988 <__aeabi_dsub+0x23c>
 8002986:	e15e      	b.n	8002c46 <__aeabi_dsub+0x4fa>
 8002988:	494a      	ldr	r1, [pc, #296]	; (8002ab4 <__aeabi_dsub+0x368>)
 800298a:	428a      	cmp	r2, r1
 800298c:	d100      	bne.n	8002990 <__aeabi_dsub+0x244>
 800298e:	e1be      	b.n	8002d0e <__aeabi_dsub+0x5c2>
 8002990:	2180      	movs	r1, #128	; 0x80
 8002992:	464c      	mov	r4, r9
 8002994:	0409      	lsls	r1, r1, #16
 8002996:	430c      	orrs	r4, r1
 8002998:	46a1      	mov	r9, r4
 800299a:	4661      	mov	r1, ip
 800299c:	2938      	cmp	r1, #56	; 0x38
 800299e:	dd00      	ble.n	80029a2 <__aeabi_dsub+0x256>
 80029a0:	e1ba      	b.n	8002d18 <__aeabi_dsub+0x5cc>
 80029a2:	291f      	cmp	r1, #31
 80029a4:	dd00      	ble.n	80029a8 <__aeabi_dsub+0x25c>
 80029a6:	e227      	b.n	8002df8 <__aeabi_dsub+0x6ac>
 80029a8:	2420      	movs	r4, #32
 80029aa:	1a64      	subs	r4, r4, r1
 80029ac:	4649      	mov	r1, r9
 80029ae:	40a1      	lsls	r1, r4
 80029b0:	001e      	movs	r6, r3
 80029b2:	4688      	mov	r8, r1
 80029b4:	4661      	mov	r1, ip
 80029b6:	40a3      	lsls	r3, r4
 80029b8:	40ce      	lsrs	r6, r1
 80029ba:	4641      	mov	r1, r8
 80029bc:	1e5c      	subs	r4, r3, #1
 80029be:	41a3      	sbcs	r3, r4
 80029c0:	4331      	orrs	r1, r6
 80029c2:	4319      	orrs	r1, r3
 80029c4:	000c      	movs	r4, r1
 80029c6:	4663      	mov	r3, ip
 80029c8:	4649      	mov	r1, r9
 80029ca:	40d9      	lsrs	r1, r3
 80029cc:	187f      	adds	r7, r7, r1
 80029ce:	1824      	adds	r4, r4, r0
 80029d0:	4284      	cmp	r4, r0
 80029d2:	419b      	sbcs	r3, r3
 80029d4:	425b      	negs	r3, r3
 80029d6:	469a      	mov	sl, r3
 80029d8:	0016      	movs	r6, r2
 80029da:	44ba      	add	sl, r7
 80029dc:	e05d      	b.n	8002a9a <__aeabi_dsub+0x34e>
 80029de:	4c38      	ldr	r4, [pc, #224]	; (8002ac0 <__aeabi_dsub+0x374>)
 80029e0:	1c72      	adds	r2, r6, #1
 80029e2:	4222      	tst	r2, r4
 80029e4:	d000      	beq.n	80029e8 <__aeabi_dsub+0x29c>
 80029e6:	e0df      	b.n	8002ba8 <__aeabi_dsub+0x45c>
 80029e8:	464a      	mov	r2, r9
 80029ea:	431a      	orrs	r2, r3
 80029ec:	2e00      	cmp	r6, #0
 80029ee:	d000      	beq.n	80029f2 <__aeabi_dsub+0x2a6>
 80029f0:	e15c      	b.n	8002cac <__aeabi_dsub+0x560>
 80029f2:	2a00      	cmp	r2, #0
 80029f4:	d100      	bne.n	80029f8 <__aeabi_dsub+0x2ac>
 80029f6:	e1cf      	b.n	8002d98 <__aeabi_dsub+0x64c>
 80029f8:	003a      	movs	r2, r7
 80029fa:	4302      	orrs	r2, r0
 80029fc:	d100      	bne.n	8002a00 <__aeabi_dsub+0x2b4>
 80029fe:	e17f      	b.n	8002d00 <__aeabi_dsub+0x5b4>
 8002a00:	1a1c      	subs	r4, r3, r0
 8002a02:	464a      	mov	r2, r9
 8002a04:	42a3      	cmp	r3, r4
 8002a06:	4189      	sbcs	r1, r1
 8002a08:	1bd2      	subs	r2, r2, r7
 8002a0a:	4249      	negs	r1, r1
 8002a0c:	1a52      	subs	r2, r2, r1
 8002a0e:	4692      	mov	sl, r2
 8002a10:	0212      	lsls	r2, r2, #8
 8002a12:	d400      	bmi.n	8002a16 <__aeabi_dsub+0x2ca>
 8002a14:	e20a      	b.n	8002e2c <__aeabi_dsub+0x6e0>
 8002a16:	1ac4      	subs	r4, r0, r3
 8002a18:	42a0      	cmp	r0, r4
 8002a1a:	4180      	sbcs	r0, r0
 8002a1c:	464b      	mov	r3, r9
 8002a1e:	4240      	negs	r0, r0
 8002a20:	1aff      	subs	r7, r7, r3
 8002a22:	1a3b      	subs	r3, r7, r0
 8002a24:	469a      	mov	sl, r3
 8002a26:	465d      	mov	r5, fp
 8002a28:	e71a      	b.n	8002860 <__aeabi_dsub+0x114>
 8002a2a:	003a      	movs	r2, r7
 8002a2c:	4302      	orrs	r2, r0
 8002a2e:	d073      	beq.n	8002b18 <__aeabi_dsub+0x3cc>
 8002a30:	0022      	movs	r2, r4
 8002a32:	3a01      	subs	r2, #1
 8002a34:	2c01      	cmp	r4, #1
 8002a36:	d100      	bne.n	8002a3a <__aeabi_dsub+0x2ee>
 8002a38:	e0cb      	b.n	8002bd2 <__aeabi_dsub+0x486>
 8002a3a:	4554      	cmp	r4, sl
 8002a3c:	d042      	beq.n	8002ac4 <__aeabi_dsub+0x378>
 8002a3e:	4694      	mov	ip, r2
 8002a40:	e748      	b.n	80028d4 <__aeabi_dsub+0x188>
 8002a42:	0010      	movs	r0, r2
 8002a44:	3b1f      	subs	r3, #31
 8002a46:	40d8      	lsrs	r0, r3
 8002a48:	2920      	cmp	r1, #32
 8002a4a:	d003      	beq.n	8002a54 <__aeabi_dsub+0x308>
 8002a4c:	2340      	movs	r3, #64	; 0x40
 8002a4e:	1a5b      	subs	r3, r3, r1
 8002a50:	409a      	lsls	r2, r3
 8002a52:	4314      	orrs	r4, r2
 8002a54:	1e63      	subs	r3, r4, #1
 8002a56:	419c      	sbcs	r4, r3
 8002a58:	2300      	movs	r3, #0
 8002a5a:	2600      	movs	r6, #0
 8002a5c:	469a      	mov	sl, r3
 8002a5e:	4304      	orrs	r4, r0
 8002a60:	0763      	lsls	r3, r4, #29
 8002a62:	d000      	beq.n	8002a66 <__aeabi_dsub+0x31a>
 8002a64:	e6fe      	b.n	8002864 <__aeabi_dsub+0x118>
 8002a66:	4652      	mov	r2, sl
 8002a68:	08e3      	lsrs	r3, r4, #3
 8002a6a:	0752      	lsls	r2, r2, #29
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	4652      	mov	r2, sl
 8002a70:	46b4      	mov	ip, r6
 8002a72:	08d2      	lsrs	r2, r2, #3
 8002a74:	490f      	ldr	r1, [pc, #60]	; (8002ab4 <__aeabi_dsub+0x368>)
 8002a76:	458c      	cmp	ip, r1
 8002a78:	d02a      	beq.n	8002ad0 <__aeabi_dsub+0x384>
 8002a7a:	0312      	lsls	r2, r2, #12
 8002a7c:	0b14      	lsrs	r4, r2, #12
 8002a7e:	4662      	mov	r2, ip
 8002a80:	0552      	lsls	r2, r2, #21
 8002a82:	0d52      	lsrs	r2, r2, #21
 8002a84:	e70c      	b.n	80028a0 <__aeabi_dsub+0x154>
 8002a86:	003c      	movs	r4, r7
 8002a88:	4304      	orrs	r4, r0
 8002a8a:	1e62      	subs	r2, r4, #1
 8002a8c:	4194      	sbcs	r4, r2
 8002a8e:	18e4      	adds	r4, r4, r3
 8002a90:	429c      	cmp	r4, r3
 8002a92:	4192      	sbcs	r2, r2
 8002a94:	4252      	negs	r2, r2
 8002a96:	444a      	add	r2, r9
 8002a98:	4692      	mov	sl, r2
 8002a9a:	4653      	mov	r3, sl
 8002a9c:	021b      	lsls	r3, r3, #8
 8002a9e:	d5df      	bpl.n	8002a60 <__aeabi_dsub+0x314>
 8002aa0:	4b04      	ldr	r3, [pc, #16]	; (8002ab4 <__aeabi_dsub+0x368>)
 8002aa2:	3601      	adds	r6, #1
 8002aa4:	429e      	cmp	r6, r3
 8002aa6:	d000      	beq.n	8002aaa <__aeabi_dsub+0x35e>
 8002aa8:	e0a0      	b.n	8002bec <__aeabi_dsub+0x4a0>
 8002aaa:	0032      	movs	r2, r6
 8002aac:	2400      	movs	r4, #0
 8002aae:	2300      	movs	r3, #0
 8002ab0:	e6f6      	b.n	80028a0 <__aeabi_dsub+0x154>
 8002ab2:	46c0      	nop			; (mov r8, r8)
 8002ab4:	000007ff 	.word	0x000007ff
 8002ab8:	ff7fffff 	.word	0xff7fffff
 8002abc:	fffff801 	.word	0xfffff801
 8002ac0:	000007fe 	.word	0x000007fe
 8002ac4:	08db      	lsrs	r3, r3, #3
 8002ac6:	464a      	mov	r2, r9
 8002ac8:	0752      	lsls	r2, r2, #29
 8002aca:	4313      	orrs	r3, r2
 8002acc:	464a      	mov	r2, r9
 8002ace:	08d2      	lsrs	r2, r2, #3
 8002ad0:	0019      	movs	r1, r3
 8002ad2:	4311      	orrs	r1, r2
 8002ad4:	d100      	bne.n	8002ad8 <__aeabi_dsub+0x38c>
 8002ad6:	e1b5      	b.n	8002e44 <__aeabi_dsub+0x6f8>
 8002ad8:	2480      	movs	r4, #128	; 0x80
 8002ada:	0324      	lsls	r4, r4, #12
 8002adc:	4314      	orrs	r4, r2
 8002ade:	0324      	lsls	r4, r4, #12
 8002ae0:	4ad5      	ldr	r2, [pc, #852]	; (8002e38 <__aeabi_dsub+0x6ec>)
 8002ae2:	0b24      	lsrs	r4, r4, #12
 8002ae4:	e6dc      	b.n	80028a0 <__aeabi_dsub+0x154>
 8002ae6:	0020      	movs	r0, r4
 8002ae8:	f000 fb2a 	bl	8003140 <__clzsi2>
 8002aec:	0003      	movs	r3, r0
 8002aee:	3318      	adds	r3, #24
 8002af0:	2b1f      	cmp	r3, #31
 8002af2:	dc00      	bgt.n	8002af6 <__aeabi_dsub+0x3aa>
 8002af4:	e695      	b.n	8002822 <__aeabi_dsub+0xd6>
 8002af6:	0022      	movs	r2, r4
 8002af8:	3808      	subs	r0, #8
 8002afa:	4082      	lsls	r2, r0
 8002afc:	2400      	movs	r4, #0
 8002afe:	429e      	cmp	r6, r3
 8002b00:	dc00      	bgt.n	8002b04 <__aeabi_dsub+0x3b8>
 8002b02:	e69a      	b.n	800283a <__aeabi_dsub+0xee>
 8002b04:	1af6      	subs	r6, r6, r3
 8002b06:	4bcd      	ldr	r3, [pc, #820]	; (8002e3c <__aeabi_dsub+0x6f0>)
 8002b08:	401a      	ands	r2, r3
 8002b0a:	4692      	mov	sl, r2
 8002b0c:	e6a8      	b.n	8002860 <__aeabi_dsub+0x114>
 8002b0e:	003c      	movs	r4, r7
 8002b10:	4304      	orrs	r4, r0
 8002b12:	1e62      	subs	r2, r4, #1
 8002b14:	4194      	sbcs	r4, r2
 8002b16:	e66c      	b.n	80027f2 <__aeabi_dsub+0xa6>
 8002b18:	464a      	mov	r2, r9
 8002b1a:	08db      	lsrs	r3, r3, #3
 8002b1c:	0752      	lsls	r2, r2, #29
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	464a      	mov	r2, r9
 8002b22:	08d2      	lsrs	r2, r2, #3
 8002b24:	e7a6      	b.n	8002a74 <__aeabi_dsub+0x328>
 8002b26:	4cc6      	ldr	r4, [pc, #792]	; (8002e40 <__aeabi_dsub+0x6f4>)
 8002b28:	1c72      	adds	r2, r6, #1
 8002b2a:	4222      	tst	r2, r4
 8002b2c:	d000      	beq.n	8002b30 <__aeabi_dsub+0x3e4>
 8002b2e:	e0ac      	b.n	8002c8a <__aeabi_dsub+0x53e>
 8002b30:	464a      	mov	r2, r9
 8002b32:	431a      	orrs	r2, r3
 8002b34:	2e00      	cmp	r6, #0
 8002b36:	d000      	beq.n	8002b3a <__aeabi_dsub+0x3ee>
 8002b38:	e105      	b.n	8002d46 <__aeabi_dsub+0x5fa>
 8002b3a:	2a00      	cmp	r2, #0
 8002b3c:	d100      	bne.n	8002b40 <__aeabi_dsub+0x3f4>
 8002b3e:	e156      	b.n	8002dee <__aeabi_dsub+0x6a2>
 8002b40:	003a      	movs	r2, r7
 8002b42:	4302      	orrs	r2, r0
 8002b44:	d100      	bne.n	8002b48 <__aeabi_dsub+0x3fc>
 8002b46:	e0db      	b.n	8002d00 <__aeabi_dsub+0x5b4>
 8002b48:	181c      	adds	r4, r3, r0
 8002b4a:	429c      	cmp	r4, r3
 8002b4c:	419b      	sbcs	r3, r3
 8002b4e:	444f      	add	r7, r9
 8002b50:	46ba      	mov	sl, r7
 8002b52:	425b      	negs	r3, r3
 8002b54:	449a      	add	sl, r3
 8002b56:	4653      	mov	r3, sl
 8002b58:	021b      	lsls	r3, r3, #8
 8002b5a:	d400      	bmi.n	8002b5e <__aeabi_dsub+0x412>
 8002b5c:	e780      	b.n	8002a60 <__aeabi_dsub+0x314>
 8002b5e:	4652      	mov	r2, sl
 8002b60:	4bb6      	ldr	r3, [pc, #728]	; (8002e3c <__aeabi_dsub+0x6f0>)
 8002b62:	2601      	movs	r6, #1
 8002b64:	401a      	ands	r2, r3
 8002b66:	4692      	mov	sl, r2
 8002b68:	e77a      	b.n	8002a60 <__aeabi_dsub+0x314>
 8002b6a:	4cb3      	ldr	r4, [pc, #716]	; (8002e38 <__aeabi_dsub+0x6ec>)
 8002b6c:	42a2      	cmp	r2, r4
 8002b6e:	d100      	bne.n	8002b72 <__aeabi_dsub+0x426>
 8002b70:	e0c0      	b.n	8002cf4 <__aeabi_dsub+0x5a8>
 8002b72:	2480      	movs	r4, #128	; 0x80
 8002b74:	464d      	mov	r5, r9
 8002b76:	0424      	lsls	r4, r4, #16
 8002b78:	4325      	orrs	r5, r4
 8002b7a:	46a9      	mov	r9, r5
 8002b7c:	4664      	mov	r4, ip
 8002b7e:	2c38      	cmp	r4, #56	; 0x38
 8002b80:	dc53      	bgt.n	8002c2a <__aeabi_dsub+0x4de>
 8002b82:	4661      	mov	r1, ip
 8002b84:	2c1f      	cmp	r4, #31
 8002b86:	dd00      	ble.n	8002b8a <__aeabi_dsub+0x43e>
 8002b88:	e0cd      	b.n	8002d26 <__aeabi_dsub+0x5da>
 8002b8a:	2520      	movs	r5, #32
 8002b8c:	001e      	movs	r6, r3
 8002b8e:	1b2d      	subs	r5, r5, r4
 8002b90:	464c      	mov	r4, r9
 8002b92:	40ab      	lsls	r3, r5
 8002b94:	40ac      	lsls	r4, r5
 8002b96:	40ce      	lsrs	r6, r1
 8002b98:	1e5d      	subs	r5, r3, #1
 8002b9a:	41ab      	sbcs	r3, r5
 8002b9c:	4334      	orrs	r4, r6
 8002b9e:	4323      	orrs	r3, r4
 8002ba0:	464c      	mov	r4, r9
 8002ba2:	40cc      	lsrs	r4, r1
 8002ba4:	1b3f      	subs	r7, r7, r4
 8002ba6:	e045      	b.n	8002c34 <__aeabi_dsub+0x4e8>
 8002ba8:	464a      	mov	r2, r9
 8002baa:	1a1c      	subs	r4, r3, r0
 8002bac:	1bd1      	subs	r1, r2, r7
 8002bae:	42a3      	cmp	r3, r4
 8002bb0:	4192      	sbcs	r2, r2
 8002bb2:	4252      	negs	r2, r2
 8002bb4:	4692      	mov	sl, r2
 8002bb6:	000a      	movs	r2, r1
 8002bb8:	4651      	mov	r1, sl
 8002bba:	1a52      	subs	r2, r2, r1
 8002bbc:	4692      	mov	sl, r2
 8002bbe:	0212      	lsls	r2, r2, #8
 8002bc0:	d500      	bpl.n	8002bc4 <__aeabi_dsub+0x478>
 8002bc2:	e083      	b.n	8002ccc <__aeabi_dsub+0x580>
 8002bc4:	4653      	mov	r3, sl
 8002bc6:	4323      	orrs	r3, r4
 8002bc8:	d000      	beq.n	8002bcc <__aeabi_dsub+0x480>
 8002bca:	e621      	b.n	8002810 <__aeabi_dsub+0xc4>
 8002bcc:	2200      	movs	r2, #0
 8002bce:	2500      	movs	r5, #0
 8002bd0:	e753      	b.n	8002a7a <__aeabi_dsub+0x32e>
 8002bd2:	181c      	adds	r4, r3, r0
 8002bd4:	429c      	cmp	r4, r3
 8002bd6:	419b      	sbcs	r3, r3
 8002bd8:	444f      	add	r7, r9
 8002bda:	46ba      	mov	sl, r7
 8002bdc:	425b      	negs	r3, r3
 8002bde:	449a      	add	sl, r3
 8002be0:	4653      	mov	r3, sl
 8002be2:	2601      	movs	r6, #1
 8002be4:	021b      	lsls	r3, r3, #8
 8002be6:	d400      	bmi.n	8002bea <__aeabi_dsub+0x49e>
 8002be8:	e73a      	b.n	8002a60 <__aeabi_dsub+0x314>
 8002bea:	2602      	movs	r6, #2
 8002bec:	4652      	mov	r2, sl
 8002bee:	4b93      	ldr	r3, [pc, #588]	; (8002e3c <__aeabi_dsub+0x6f0>)
 8002bf0:	2101      	movs	r1, #1
 8002bf2:	401a      	ands	r2, r3
 8002bf4:	0013      	movs	r3, r2
 8002bf6:	4021      	ands	r1, r4
 8002bf8:	0862      	lsrs	r2, r4, #1
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	07dc      	lsls	r4, r3, #31
 8002bfe:	085b      	lsrs	r3, r3, #1
 8002c00:	469a      	mov	sl, r3
 8002c02:	4314      	orrs	r4, r2
 8002c04:	e62c      	b.n	8002860 <__aeabi_dsub+0x114>
 8002c06:	0039      	movs	r1, r7
 8002c08:	3a20      	subs	r2, #32
 8002c0a:	40d1      	lsrs	r1, r2
 8002c0c:	4662      	mov	r2, ip
 8002c0e:	2a20      	cmp	r2, #32
 8002c10:	d006      	beq.n	8002c20 <__aeabi_dsub+0x4d4>
 8002c12:	4664      	mov	r4, ip
 8002c14:	2240      	movs	r2, #64	; 0x40
 8002c16:	1b12      	subs	r2, r2, r4
 8002c18:	003c      	movs	r4, r7
 8002c1a:	4094      	lsls	r4, r2
 8002c1c:	4304      	orrs	r4, r0
 8002c1e:	9401      	str	r4, [sp, #4]
 8002c20:	9c01      	ldr	r4, [sp, #4]
 8002c22:	1e62      	subs	r2, r4, #1
 8002c24:	4194      	sbcs	r4, r2
 8002c26:	430c      	orrs	r4, r1
 8002c28:	e5e3      	b.n	80027f2 <__aeabi_dsub+0xa6>
 8002c2a:	4649      	mov	r1, r9
 8002c2c:	4319      	orrs	r1, r3
 8002c2e:	000b      	movs	r3, r1
 8002c30:	1e5c      	subs	r4, r3, #1
 8002c32:	41a3      	sbcs	r3, r4
 8002c34:	1ac4      	subs	r4, r0, r3
 8002c36:	42a0      	cmp	r0, r4
 8002c38:	419b      	sbcs	r3, r3
 8002c3a:	425b      	negs	r3, r3
 8002c3c:	1afb      	subs	r3, r7, r3
 8002c3e:	469a      	mov	sl, r3
 8002c40:	465d      	mov	r5, fp
 8002c42:	0016      	movs	r6, r2
 8002c44:	e5dc      	b.n	8002800 <__aeabi_dsub+0xb4>
 8002c46:	4649      	mov	r1, r9
 8002c48:	4319      	orrs	r1, r3
 8002c4a:	d100      	bne.n	8002c4e <__aeabi_dsub+0x502>
 8002c4c:	e0ae      	b.n	8002dac <__aeabi_dsub+0x660>
 8002c4e:	4661      	mov	r1, ip
 8002c50:	4664      	mov	r4, ip
 8002c52:	3901      	subs	r1, #1
 8002c54:	2c01      	cmp	r4, #1
 8002c56:	d100      	bne.n	8002c5a <__aeabi_dsub+0x50e>
 8002c58:	e0e0      	b.n	8002e1c <__aeabi_dsub+0x6d0>
 8002c5a:	4c77      	ldr	r4, [pc, #476]	; (8002e38 <__aeabi_dsub+0x6ec>)
 8002c5c:	45a4      	cmp	ip, r4
 8002c5e:	d056      	beq.n	8002d0e <__aeabi_dsub+0x5c2>
 8002c60:	468c      	mov	ip, r1
 8002c62:	e69a      	b.n	800299a <__aeabi_dsub+0x24e>
 8002c64:	4661      	mov	r1, ip
 8002c66:	2220      	movs	r2, #32
 8002c68:	003c      	movs	r4, r7
 8002c6a:	1a52      	subs	r2, r2, r1
 8002c6c:	4094      	lsls	r4, r2
 8002c6e:	0001      	movs	r1, r0
 8002c70:	4090      	lsls	r0, r2
 8002c72:	46a0      	mov	r8, r4
 8002c74:	4664      	mov	r4, ip
 8002c76:	1e42      	subs	r2, r0, #1
 8002c78:	4190      	sbcs	r0, r2
 8002c7a:	4662      	mov	r2, ip
 8002c7c:	40e1      	lsrs	r1, r4
 8002c7e:	4644      	mov	r4, r8
 8002c80:	40d7      	lsrs	r7, r2
 8002c82:	430c      	orrs	r4, r1
 8002c84:	4304      	orrs	r4, r0
 8002c86:	44b9      	add	r9, r7
 8002c88:	e701      	b.n	8002a8e <__aeabi_dsub+0x342>
 8002c8a:	496b      	ldr	r1, [pc, #428]	; (8002e38 <__aeabi_dsub+0x6ec>)
 8002c8c:	428a      	cmp	r2, r1
 8002c8e:	d100      	bne.n	8002c92 <__aeabi_dsub+0x546>
 8002c90:	e70c      	b.n	8002aac <__aeabi_dsub+0x360>
 8002c92:	1818      	adds	r0, r3, r0
 8002c94:	4298      	cmp	r0, r3
 8002c96:	419b      	sbcs	r3, r3
 8002c98:	444f      	add	r7, r9
 8002c9a:	425b      	negs	r3, r3
 8002c9c:	18fb      	adds	r3, r7, r3
 8002c9e:	07dc      	lsls	r4, r3, #31
 8002ca0:	0840      	lsrs	r0, r0, #1
 8002ca2:	085b      	lsrs	r3, r3, #1
 8002ca4:	469a      	mov	sl, r3
 8002ca6:	0016      	movs	r6, r2
 8002ca8:	4304      	orrs	r4, r0
 8002caa:	e6d9      	b.n	8002a60 <__aeabi_dsub+0x314>
 8002cac:	2a00      	cmp	r2, #0
 8002cae:	d000      	beq.n	8002cb2 <__aeabi_dsub+0x566>
 8002cb0:	e081      	b.n	8002db6 <__aeabi_dsub+0x66a>
 8002cb2:	003b      	movs	r3, r7
 8002cb4:	4303      	orrs	r3, r0
 8002cb6:	d11d      	bne.n	8002cf4 <__aeabi_dsub+0x5a8>
 8002cb8:	2280      	movs	r2, #128	; 0x80
 8002cba:	2500      	movs	r5, #0
 8002cbc:	0312      	lsls	r2, r2, #12
 8002cbe:	e70b      	b.n	8002ad8 <__aeabi_dsub+0x38c>
 8002cc0:	08c0      	lsrs	r0, r0, #3
 8002cc2:	077b      	lsls	r3, r7, #29
 8002cc4:	465d      	mov	r5, fp
 8002cc6:	4303      	orrs	r3, r0
 8002cc8:	08fa      	lsrs	r2, r7, #3
 8002cca:	e6d3      	b.n	8002a74 <__aeabi_dsub+0x328>
 8002ccc:	1ac4      	subs	r4, r0, r3
 8002cce:	42a0      	cmp	r0, r4
 8002cd0:	4180      	sbcs	r0, r0
 8002cd2:	464b      	mov	r3, r9
 8002cd4:	4240      	negs	r0, r0
 8002cd6:	1aff      	subs	r7, r7, r3
 8002cd8:	1a3b      	subs	r3, r7, r0
 8002cda:	469a      	mov	sl, r3
 8002cdc:	465d      	mov	r5, fp
 8002cde:	e597      	b.n	8002810 <__aeabi_dsub+0xc4>
 8002ce0:	1a1c      	subs	r4, r3, r0
 8002ce2:	464a      	mov	r2, r9
 8002ce4:	42a3      	cmp	r3, r4
 8002ce6:	419b      	sbcs	r3, r3
 8002ce8:	1bd7      	subs	r7, r2, r7
 8002cea:	425b      	negs	r3, r3
 8002cec:	1afb      	subs	r3, r7, r3
 8002cee:	469a      	mov	sl, r3
 8002cf0:	2601      	movs	r6, #1
 8002cf2:	e585      	b.n	8002800 <__aeabi_dsub+0xb4>
 8002cf4:	08c0      	lsrs	r0, r0, #3
 8002cf6:	077b      	lsls	r3, r7, #29
 8002cf8:	465d      	mov	r5, fp
 8002cfa:	4303      	orrs	r3, r0
 8002cfc:	08fa      	lsrs	r2, r7, #3
 8002cfe:	e6e7      	b.n	8002ad0 <__aeabi_dsub+0x384>
 8002d00:	464a      	mov	r2, r9
 8002d02:	08db      	lsrs	r3, r3, #3
 8002d04:	0752      	lsls	r2, r2, #29
 8002d06:	4313      	orrs	r3, r2
 8002d08:	464a      	mov	r2, r9
 8002d0a:	08d2      	lsrs	r2, r2, #3
 8002d0c:	e6b5      	b.n	8002a7a <__aeabi_dsub+0x32e>
 8002d0e:	08c0      	lsrs	r0, r0, #3
 8002d10:	077b      	lsls	r3, r7, #29
 8002d12:	4303      	orrs	r3, r0
 8002d14:	08fa      	lsrs	r2, r7, #3
 8002d16:	e6db      	b.n	8002ad0 <__aeabi_dsub+0x384>
 8002d18:	4649      	mov	r1, r9
 8002d1a:	4319      	orrs	r1, r3
 8002d1c:	000b      	movs	r3, r1
 8002d1e:	1e59      	subs	r1, r3, #1
 8002d20:	418b      	sbcs	r3, r1
 8002d22:	001c      	movs	r4, r3
 8002d24:	e653      	b.n	80029ce <__aeabi_dsub+0x282>
 8002d26:	464d      	mov	r5, r9
 8002d28:	3c20      	subs	r4, #32
 8002d2a:	40e5      	lsrs	r5, r4
 8002d2c:	2920      	cmp	r1, #32
 8002d2e:	d005      	beq.n	8002d3c <__aeabi_dsub+0x5f0>
 8002d30:	2440      	movs	r4, #64	; 0x40
 8002d32:	1a64      	subs	r4, r4, r1
 8002d34:	4649      	mov	r1, r9
 8002d36:	40a1      	lsls	r1, r4
 8002d38:	430b      	orrs	r3, r1
 8002d3a:	4698      	mov	r8, r3
 8002d3c:	4643      	mov	r3, r8
 8002d3e:	1e5c      	subs	r4, r3, #1
 8002d40:	41a3      	sbcs	r3, r4
 8002d42:	432b      	orrs	r3, r5
 8002d44:	e776      	b.n	8002c34 <__aeabi_dsub+0x4e8>
 8002d46:	2a00      	cmp	r2, #0
 8002d48:	d0e1      	beq.n	8002d0e <__aeabi_dsub+0x5c2>
 8002d4a:	003a      	movs	r2, r7
 8002d4c:	08db      	lsrs	r3, r3, #3
 8002d4e:	4302      	orrs	r2, r0
 8002d50:	d100      	bne.n	8002d54 <__aeabi_dsub+0x608>
 8002d52:	e6b8      	b.n	8002ac6 <__aeabi_dsub+0x37a>
 8002d54:	464a      	mov	r2, r9
 8002d56:	0752      	lsls	r2, r2, #29
 8002d58:	2480      	movs	r4, #128	; 0x80
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	464a      	mov	r2, r9
 8002d5e:	0324      	lsls	r4, r4, #12
 8002d60:	08d2      	lsrs	r2, r2, #3
 8002d62:	4222      	tst	r2, r4
 8002d64:	d007      	beq.n	8002d76 <__aeabi_dsub+0x62a>
 8002d66:	08fe      	lsrs	r6, r7, #3
 8002d68:	4226      	tst	r6, r4
 8002d6a:	d104      	bne.n	8002d76 <__aeabi_dsub+0x62a>
 8002d6c:	465d      	mov	r5, fp
 8002d6e:	0032      	movs	r2, r6
 8002d70:	08c3      	lsrs	r3, r0, #3
 8002d72:	077f      	lsls	r7, r7, #29
 8002d74:	433b      	orrs	r3, r7
 8002d76:	0f59      	lsrs	r1, r3, #29
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	0749      	lsls	r1, r1, #29
 8002d7c:	08db      	lsrs	r3, r3, #3
 8002d7e:	430b      	orrs	r3, r1
 8002d80:	e6a6      	b.n	8002ad0 <__aeabi_dsub+0x384>
 8002d82:	1ac4      	subs	r4, r0, r3
 8002d84:	42a0      	cmp	r0, r4
 8002d86:	4180      	sbcs	r0, r0
 8002d88:	464b      	mov	r3, r9
 8002d8a:	4240      	negs	r0, r0
 8002d8c:	1aff      	subs	r7, r7, r3
 8002d8e:	1a3b      	subs	r3, r7, r0
 8002d90:	469a      	mov	sl, r3
 8002d92:	465d      	mov	r5, fp
 8002d94:	2601      	movs	r6, #1
 8002d96:	e533      	b.n	8002800 <__aeabi_dsub+0xb4>
 8002d98:	003b      	movs	r3, r7
 8002d9a:	4303      	orrs	r3, r0
 8002d9c:	d100      	bne.n	8002da0 <__aeabi_dsub+0x654>
 8002d9e:	e715      	b.n	8002bcc <__aeabi_dsub+0x480>
 8002da0:	08c0      	lsrs	r0, r0, #3
 8002da2:	077b      	lsls	r3, r7, #29
 8002da4:	465d      	mov	r5, fp
 8002da6:	4303      	orrs	r3, r0
 8002da8:	08fa      	lsrs	r2, r7, #3
 8002daa:	e666      	b.n	8002a7a <__aeabi_dsub+0x32e>
 8002dac:	08c0      	lsrs	r0, r0, #3
 8002dae:	077b      	lsls	r3, r7, #29
 8002db0:	4303      	orrs	r3, r0
 8002db2:	08fa      	lsrs	r2, r7, #3
 8002db4:	e65e      	b.n	8002a74 <__aeabi_dsub+0x328>
 8002db6:	003a      	movs	r2, r7
 8002db8:	08db      	lsrs	r3, r3, #3
 8002dba:	4302      	orrs	r2, r0
 8002dbc:	d100      	bne.n	8002dc0 <__aeabi_dsub+0x674>
 8002dbe:	e682      	b.n	8002ac6 <__aeabi_dsub+0x37a>
 8002dc0:	464a      	mov	r2, r9
 8002dc2:	0752      	lsls	r2, r2, #29
 8002dc4:	2480      	movs	r4, #128	; 0x80
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	464a      	mov	r2, r9
 8002dca:	0324      	lsls	r4, r4, #12
 8002dcc:	08d2      	lsrs	r2, r2, #3
 8002dce:	4222      	tst	r2, r4
 8002dd0:	d007      	beq.n	8002de2 <__aeabi_dsub+0x696>
 8002dd2:	08fe      	lsrs	r6, r7, #3
 8002dd4:	4226      	tst	r6, r4
 8002dd6:	d104      	bne.n	8002de2 <__aeabi_dsub+0x696>
 8002dd8:	465d      	mov	r5, fp
 8002dda:	0032      	movs	r2, r6
 8002ddc:	08c3      	lsrs	r3, r0, #3
 8002dde:	077f      	lsls	r7, r7, #29
 8002de0:	433b      	orrs	r3, r7
 8002de2:	0f59      	lsrs	r1, r3, #29
 8002de4:	00db      	lsls	r3, r3, #3
 8002de6:	08db      	lsrs	r3, r3, #3
 8002de8:	0749      	lsls	r1, r1, #29
 8002dea:	430b      	orrs	r3, r1
 8002dec:	e670      	b.n	8002ad0 <__aeabi_dsub+0x384>
 8002dee:	08c0      	lsrs	r0, r0, #3
 8002df0:	077b      	lsls	r3, r7, #29
 8002df2:	4303      	orrs	r3, r0
 8002df4:	08fa      	lsrs	r2, r7, #3
 8002df6:	e640      	b.n	8002a7a <__aeabi_dsub+0x32e>
 8002df8:	464c      	mov	r4, r9
 8002dfa:	3920      	subs	r1, #32
 8002dfc:	40cc      	lsrs	r4, r1
 8002dfe:	4661      	mov	r1, ip
 8002e00:	2920      	cmp	r1, #32
 8002e02:	d006      	beq.n	8002e12 <__aeabi_dsub+0x6c6>
 8002e04:	4666      	mov	r6, ip
 8002e06:	2140      	movs	r1, #64	; 0x40
 8002e08:	1b89      	subs	r1, r1, r6
 8002e0a:	464e      	mov	r6, r9
 8002e0c:	408e      	lsls	r6, r1
 8002e0e:	4333      	orrs	r3, r6
 8002e10:	4698      	mov	r8, r3
 8002e12:	4643      	mov	r3, r8
 8002e14:	1e59      	subs	r1, r3, #1
 8002e16:	418b      	sbcs	r3, r1
 8002e18:	431c      	orrs	r4, r3
 8002e1a:	e5d8      	b.n	80029ce <__aeabi_dsub+0x282>
 8002e1c:	181c      	adds	r4, r3, r0
 8002e1e:	4284      	cmp	r4, r0
 8002e20:	4180      	sbcs	r0, r0
 8002e22:	444f      	add	r7, r9
 8002e24:	46ba      	mov	sl, r7
 8002e26:	4240      	negs	r0, r0
 8002e28:	4482      	add	sl, r0
 8002e2a:	e6d9      	b.n	8002be0 <__aeabi_dsub+0x494>
 8002e2c:	4653      	mov	r3, sl
 8002e2e:	4323      	orrs	r3, r4
 8002e30:	d100      	bne.n	8002e34 <__aeabi_dsub+0x6e8>
 8002e32:	e6cb      	b.n	8002bcc <__aeabi_dsub+0x480>
 8002e34:	e614      	b.n	8002a60 <__aeabi_dsub+0x314>
 8002e36:	46c0      	nop			; (mov r8, r8)
 8002e38:	000007ff 	.word	0x000007ff
 8002e3c:	ff7fffff 	.word	0xff7fffff
 8002e40:	000007fe 	.word	0x000007fe
 8002e44:	2300      	movs	r3, #0
 8002e46:	4a01      	ldr	r2, [pc, #4]	; (8002e4c <__aeabi_dsub+0x700>)
 8002e48:	001c      	movs	r4, r3
 8002e4a:	e529      	b.n	80028a0 <__aeabi_dsub+0x154>
 8002e4c:	000007ff 	.word	0x000007ff

08002e50 <__aeabi_dcmpun>:
 8002e50:	b570      	push	{r4, r5, r6, lr}
 8002e52:	0005      	movs	r5, r0
 8002e54:	480c      	ldr	r0, [pc, #48]	; (8002e88 <__aeabi_dcmpun+0x38>)
 8002e56:	031c      	lsls	r4, r3, #12
 8002e58:	0016      	movs	r6, r2
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	030a      	lsls	r2, r1, #12
 8002e5e:	0049      	lsls	r1, r1, #1
 8002e60:	0b12      	lsrs	r2, r2, #12
 8002e62:	0d49      	lsrs	r1, r1, #21
 8002e64:	0b24      	lsrs	r4, r4, #12
 8002e66:	0d5b      	lsrs	r3, r3, #21
 8002e68:	4281      	cmp	r1, r0
 8002e6a:	d008      	beq.n	8002e7e <__aeabi_dcmpun+0x2e>
 8002e6c:	4a06      	ldr	r2, [pc, #24]	; (8002e88 <__aeabi_dcmpun+0x38>)
 8002e6e:	2000      	movs	r0, #0
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d103      	bne.n	8002e7c <__aeabi_dcmpun+0x2c>
 8002e74:	0020      	movs	r0, r4
 8002e76:	4330      	orrs	r0, r6
 8002e78:	1e43      	subs	r3, r0, #1
 8002e7a:	4198      	sbcs	r0, r3
 8002e7c:	bd70      	pop	{r4, r5, r6, pc}
 8002e7e:	2001      	movs	r0, #1
 8002e80:	432a      	orrs	r2, r5
 8002e82:	d1fb      	bne.n	8002e7c <__aeabi_dcmpun+0x2c>
 8002e84:	e7f2      	b.n	8002e6c <__aeabi_dcmpun+0x1c>
 8002e86:	46c0      	nop			; (mov r8, r8)
 8002e88:	000007ff 	.word	0x000007ff

08002e8c <__aeabi_d2iz>:
 8002e8c:	000a      	movs	r2, r1
 8002e8e:	b530      	push	{r4, r5, lr}
 8002e90:	4c13      	ldr	r4, [pc, #76]	; (8002ee0 <__aeabi_d2iz+0x54>)
 8002e92:	0053      	lsls	r3, r2, #1
 8002e94:	0309      	lsls	r1, r1, #12
 8002e96:	0005      	movs	r5, r0
 8002e98:	0b09      	lsrs	r1, r1, #12
 8002e9a:	2000      	movs	r0, #0
 8002e9c:	0d5b      	lsrs	r3, r3, #21
 8002e9e:	0fd2      	lsrs	r2, r2, #31
 8002ea0:	42a3      	cmp	r3, r4
 8002ea2:	dd04      	ble.n	8002eae <__aeabi_d2iz+0x22>
 8002ea4:	480f      	ldr	r0, [pc, #60]	; (8002ee4 <__aeabi_d2iz+0x58>)
 8002ea6:	4283      	cmp	r3, r0
 8002ea8:	dd02      	ble.n	8002eb0 <__aeabi_d2iz+0x24>
 8002eaa:	4b0f      	ldr	r3, [pc, #60]	; (8002ee8 <__aeabi_d2iz+0x5c>)
 8002eac:	18d0      	adds	r0, r2, r3
 8002eae:	bd30      	pop	{r4, r5, pc}
 8002eb0:	2080      	movs	r0, #128	; 0x80
 8002eb2:	0340      	lsls	r0, r0, #13
 8002eb4:	4301      	orrs	r1, r0
 8002eb6:	480d      	ldr	r0, [pc, #52]	; (8002eec <__aeabi_d2iz+0x60>)
 8002eb8:	1ac0      	subs	r0, r0, r3
 8002eba:	281f      	cmp	r0, #31
 8002ebc:	dd08      	ble.n	8002ed0 <__aeabi_d2iz+0x44>
 8002ebe:	480c      	ldr	r0, [pc, #48]	; (8002ef0 <__aeabi_d2iz+0x64>)
 8002ec0:	1ac3      	subs	r3, r0, r3
 8002ec2:	40d9      	lsrs	r1, r3
 8002ec4:	000b      	movs	r3, r1
 8002ec6:	4258      	negs	r0, r3
 8002ec8:	2a00      	cmp	r2, #0
 8002eca:	d1f0      	bne.n	8002eae <__aeabi_d2iz+0x22>
 8002ecc:	0018      	movs	r0, r3
 8002ece:	e7ee      	b.n	8002eae <__aeabi_d2iz+0x22>
 8002ed0:	4c08      	ldr	r4, [pc, #32]	; (8002ef4 <__aeabi_d2iz+0x68>)
 8002ed2:	40c5      	lsrs	r5, r0
 8002ed4:	46a4      	mov	ip, r4
 8002ed6:	4463      	add	r3, ip
 8002ed8:	4099      	lsls	r1, r3
 8002eda:	000b      	movs	r3, r1
 8002edc:	432b      	orrs	r3, r5
 8002ede:	e7f2      	b.n	8002ec6 <__aeabi_d2iz+0x3a>
 8002ee0:	000003fe 	.word	0x000003fe
 8002ee4:	0000041d 	.word	0x0000041d
 8002ee8:	7fffffff 	.word	0x7fffffff
 8002eec:	00000433 	.word	0x00000433
 8002ef0:	00000413 	.word	0x00000413
 8002ef4:	fffffbed 	.word	0xfffffbed

08002ef8 <__aeabi_i2d>:
 8002ef8:	b570      	push	{r4, r5, r6, lr}
 8002efa:	2800      	cmp	r0, #0
 8002efc:	d016      	beq.n	8002f2c <__aeabi_i2d+0x34>
 8002efe:	17c3      	asrs	r3, r0, #31
 8002f00:	18c5      	adds	r5, r0, r3
 8002f02:	405d      	eors	r5, r3
 8002f04:	0fc4      	lsrs	r4, r0, #31
 8002f06:	0028      	movs	r0, r5
 8002f08:	f000 f91a 	bl	8003140 <__clzsi2>
 8002f0c:	4b11      	ldr	r3, [pc, #68]	; (8002f54 <__aeabi_i2d+0x5c>)
 8002f0e:	1a1b      	subs	r3, r3, r0
 8002f10:	280a      	cmp	r0, #10
 8002f12:	dc16      	bgt.n	8002f42 <__aeabi_i2d+0x4a>
 8002f14:	0002      	movs	r2, r0
 8002f16:	002e      	movs	r6, r5
 8002f18:	3215      	adds	r2, #21
 8002f1a:	4096      	lsls	r6, r2
 8002f1c:	220b      	movs	r2, #11
 8002f1e:	1a12      	subs	r2, r2, r0
 8002f20:	40d5      	lsrs	r5, r2
 8002f22:	055b      	lsls	r3, r3, #21
 8002f24:	032d      	lsls	r5, r5, #12
 8002f26:	0b2d      	lsrs	r5, r5, #12
 8002f28:	0d5b      	lsrs	r3, r3, #21
 8002f2a:	e003      	b.n	8002f34 <__aeabi_i2d+0x3c>
 8002f2c:	2400      	movs	r4, #0
 8002f2e:	2300      	movs	r3, #0
 8002f30:	2500      	movs	r5, #0
 8002f32:	2600      	movs	r6, #0
 8002f34:	051b      	lsls	r3, r3, #20
 8002f36:	432b      	orrs	r3, r5
 8002f38:	07e4      	lsls	r4, r4, #31
 8002f3a:	4323      	orrs	r3, r4
 8002f3c:	0030      	movs	r0, r6
 8002f3e:	0019      	movs	r1, r3
 8002f40:	bd70      	pop	{r4, r5, r6, pc}
 8002f42:	380b      	subs	r0, #11
 8002f44:	4085      	lsls	r5, r0
 8002f46:	055b      	lsls	r3, r3, #21
 8002f48:	032d      	lsls	r5, r5, #12
 8002f4a:	2600      	movs	r6, #0
 8002f4c:	0b2d      	lsrs	r5, r5, #12
 8002f4e:	0d5b      	lsrs	r3, r3, #21
 8002f50:	e7f0      	b.n	8002f34 <__aeabi_i2d+0x3c>
 8002f52:	46c0      	nop			; (mov r8, r8)
 8002f54:	0000041e 	.word	0x0000041e

08002f58 <__aeabi_ui2d>:
 8002f58:	b510      	push	{r4, lr}
 8002f5a:	1e04      	subs	r4, r0, #0
 8002f5c:	d010      	beq.n	8002f80 <__aeabi_ui2d+0x28>
 8002f5e:	f000 f8ef 	bl	8003140 <__clzsi2>
 8002f62:	4b0f      	ldr	r3, [pc, #60]	; (8002fa0 <__aeabi_ui2d+0x48>)
 8002f64:	1a1b      	subs	r3, r3, r0
 8002f66:	280a      	cmp	r0, #10
 8002f68:	dc11      	bgt.n	8002f8e <__aeabi_ui2d+0x36>
 8002f6a:	220b      	movs	r2, #11
 8002f6c:	0021      	movs	r1, r4
 8002f6e:	1a12      	subs	r2, r2, r0
 8002f70:	40d1      	lsrs	r1, r2
 8002f72:	3015      	adds	r0, #21
 8002f74:	030a      	lsls	r2, r1, #12
 8002f76:	055b      	lsls	r3, r3, #21
 8002f78:	4084      	lsls	r4, r0
 8002f7a:	0b12      	lsrs	r2, r2, #12
 8002f7c:	0d5b      	lsrs	r3, r3, #21
 8002f7e:	e001      	b.n	8002f84 <__aeabi_ui2d+0x2c>
 8002f80:	2300      	movs	r3, #0
 8002f82:	2200      	movs	r2, #0
 8002f84:	051b      	lsls	r3, r3, #20
 8002f86:	4313      	orrs	r3, r2
 8002f88:	0020      	movs	r0, r4
 8002f8a:	0019      	movs	r1, r3
 8002f8c:	bd10      	pop	{r4, pc}
 8002f8e:	0022      	movs	r2, r4
 8002f90:	380b      	subs	r0, #11
 8002f92:	4082      	lsls	r2, r0
 8002f94:	055b      	lsls	r3, r3, #21
 8002f96:	0312      	lsls	r2, r2, #12
 8002f98:	2400      	movs	r4, #0
 8002f9a:	0b12      	lsrs	r2, r2, #12
 8002f9c:	0d5b      	lsrs	r3, r3, #21
 8002f9e:	e7f1      	b.n	8002f84 <__aeabi_ui2d+0x2c>
 8002fa0:	0000041e 	.word	0x0000041e

08002fa4 <__aeabi_f2d>:
 8002fa4:	b570      	push	{r4, r5, r6, lr}
 8002fa6:	0242      	lsls	r2, r0, #9
 8002fa8:	0043      	lsls	r3, r0, #1
 8002faa:	0fc4      	lsrs	r4, r0, #31
 8002fac:	20fe      	movs	r0, #254	; 0xfe
 8002fae:	0e1b      	lsrs	r3, r3, #24
 8002fb0:	1c59      	adds	r1, r3, #1
 8002fb2:	0a55      	lsrs	r5, r2, #9
 8002fb4:	4208      	tst	r0, r1
 8002fb6:	d00c      	beq.n	8002fd2 <__aeabi_f2d+0x2e>
 8002fb8:	21e0      	movs	r1, #224	; 0xe0
 8002fba:	0089      	lsls	r1, r1, #2
 8002fbc:	468c      	mov	ip, r1
 8002fbe:	076d      	lsls	r5, r5, #29
 8002fc0:	0b12      	lsrs	r2, r2, #12
 8002fc2:	4463      	add	r3, ip
 8002fc4:	051b      	lsls	r3, r3, #20
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	07e4      	lsls	r4, r4, #31
 8002fca:	4323      	orrs	r3, r4
 8002fcc:	0028      	movs	r0, r5
 8002fce:	0019      	movs	r1, r3
 8002fd0:	bd70      	pop	{r4, r5, r6, pc}
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d114      	bne.n	8003000 <__aeabi_f2d+0x5c>
 8002fd6:	2d00      	cmp	r5, #0
 8002fd8:	d01b      	beq.n	8003012 <__aeabi_f2d+0x6e>
 8002fda:	0028      	movs	r0, r5
 8002fdc:	f000 f8b0 	bl	8003140 <__clzsi2>
 8002fe0:	280a      	cmp	r0, #10
 8002fe2:	dc1c      	bgt.n	800301e <__aeabi_f2d+0x7a>
 8002fe4:	230b      	movs	r3, #11
 8002fe6:	002a      	movs	r2, r5
 8002fe8:	1a1b      	subs	r3, r3, r0
 8002fea:	40da      	lsrs	r2, r3
 8002fec:	0003      	movs	r3, r0
 8002fee:	3315      	adds	r3, #21
 8002ff0:	409d      	lsls	r5, r3
 8002ff2:	4b0e      	ldr	r3, [pc, #56]	; (800302c <__aeabi_f2d+0x88>)
 8002ff4:	0312      	lsls	r2, r2, #12
 8002ff6:	1a1b      	subs	r3, r3, r0
 8002ff8:	055b      	lsls	r3, r3, #21
 8002ffa:	0b12      	lsrs	r2, r2, #12
 8002ffc:	0d5b      	lsrs	r3, r3, #21
 8002ffe:	e7e1      	b.n	8002fc4 <__aeabi_f2d+0x20>
 8003000:	2d00      	cmp	r5, #0
 8003002:	d009      	beq.n	8003018 <__aeabi_f2d+0x74>
 8003004:	0b13      	lsrs	r3, r2, #12
 8003006:	2280      	movs	r2, #128	; 0x80
 8003008:	0312      	lsls	r2, r2, #12
 800300a:	431a      	orrs	r2, r3
 800300c:	076d      	lsls	r5, r5, #29
 800300e:	4b08      	ldr	r3, [pc, #32]	; (8003030 <__aeabi_f2d+0x8c>)
 8003010:	e7d8      	b.n	8002fc4 <__aeabi_f2d+0x20>
 8003012:	2300      	movs	r3, #0
 8003014:	2200      	movs	r2, #0
 8003016:	e7d5      	b.n	8002fc4 <__aeabi_f2d+0x20>
 8003018:	2200      	movs	r2, #0
 800301a:	4b05      	ldr	r3, [pc, #20]	; (8003030 <__aeabi_f2d+0x8c>)
 800301c:	e7d2      	b.n	8002fc4 <__aeabi_f2d+0x20>
 800301e:	0003      	movs	r3, r0
 8003020:	002a      	movs	r2, r5
 8003022:	3b0b      	subs	r3, #11
 8003024:	409a      	lsls	r2, r3
 8003026:	2500      	movs	r5, #0
 8003028:	e7e3      	b.n	8002ff2 <__aeabi_f2d+0x4e>
 800302a:	46c0      	nop			; (mov r8, r8)
 800302c:	00000389 	.word	0x00000389
 8003030:	000007ff 	.word	0x000007ff

08003034 <__aeabi_d2f>:
 8003034:	0002      	movs	r2, r0
 8003036:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003038:	004b      	lsls	r3, r1, #1
 800303a:	030d      	lsls	r5, r1, #12
 800303c:	0f40      	lsrs	r0, r0, #29
 800303e:	0d5b      	lsrs	r3, r3, #21
 8003040:	0fcc      	lsrs	r4, r1, #31
 8003042:	0a6d      	lsrs	r5, r5, #9
 8003044:	493a      	ldr	r1, [pc, #232]	; (8003130 <__aeabi_d2f+0xfc>)
 8003046:	4305      	orrs	r5, r0
 8003048:	1c58      	adds	r0, r3, #1
 800304a:	00d7      	lsls	r7, r2, #3
 800304c:	4208      	tst	r0, r1
 800304e:	d00a      	beq.n	8003066 <__aeabi_d2f+0x32>
 8003050:	4938      	ldr	r1, [pc, #224]	; (8003134 <__aeabi_d2f+0x100>)
 8003052:	1859      	adds	r1, r3, r1
 8003054:	29fe      	cmp	r1, #254	; 0xfe
 8003056:	dd16      	ble.n	8003086 <__aeabi_d2f+0x52>
 8003058:	20ff      	movs	r0, #255	; 0xff
 800305a:	2200      	movs	r2, #0
 800305c:	05c0      	lsls	r0, r0, #23
 800305e:	4310      	orrs	r0, r2
 8003060:	07e4      	lsls	r4, r4, #31
 8003062:	4320      	orrs	r0, r4
 8003064:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003066:	2b00      	cmp	r3, #0
 8003068:	d106      	bne.n	8003078 <__aeabi_d2f+0x44>
 800306a:	433d      	orrs	r5, r7
 800306c:	d026      	beq.n	80030bc <__aeabi_d2f+0x88>
 800306e:	2205      	movs	r2, #5
 8003070:	0192      	lsls	r2, r2, #6
 8003072:	0a52      	lsrs	r2, r2, #9
 8003074:	b2d8      	uxtb	r0, r3
 8003076:	e7f1      	b.n	800305c <__aeabi_d2f+0x28>
 8003078:	432f      	orrs	r7, r5
 800307a:	d0ed      	beq.n	8003058 <__aeabi_d2f+0x24>
 800307c:	2280      	movs	r2, #128	; 0x80
 800307e:	03d2      	lsls	r2, r2, #15
 8003080:	20ff      	movs	r0, #255	; 0xff
 8003082:	432a      	orrs	r2, r5
 8003084:	e7ea      	b.n	800305c <__aeabi_d2f+0x28>
 8003086:	2900      	cmp	r1, #0
 8003088:	dd1b      	ble.n	80030c2 <__aeabi_d2f+0x8e>
 800308a:	0192      	lsls	r2, r2, #6
 800308c:	1e50      	subs	r0, r2, #1
 800308e:	4182      	sbcs	r2, r0
 8003090:	00ed      	lsls	r5, r5, #3
 8003092:	0f7f      	lsrs	r7, r7, #29
 8003094:	432a      	orrs	r2, r5
 8003096:	433a      	orrs	r2, r7
 8003098:	0753      	lsls	r3, r2, #29
 800309a:	d047      	beq.n	800312c <__aeabi_d2f+0xf8>
 800309c:	230f      	movs	r3, #15
 800309e:	4013      	ands	r3, r2
 80030a0:	2b04      	cmp	r3, #4
 80030a2:	d000      	beq.n	80030a6 <__aeabi_d2f+0x72>
 80030a4:	3204      	adds	r2, #4
 80030a6:	2380      	movs	r3, #128	; 0x80
 80030a8:	04db      	lsls	r3, r3, #19
 80030aa:	4013      	ands	r3, r2
 80030ac:	d03e      	beq.n	800312c <__aeabi_d2f+0xf8>
 80030ae:	1c48      	adds	r0, r1, #1
 80030b0:	29fe      	cmp	r1, #254	; 0xfe
 80030b2:	d0d1      	beq.n	8003058 <__aeabi_d2f+0x24>
 80030b4:	0192      	lsls	r2, r2, #6
 80030b6:	0a52      	lsrs	r2, r2, #9
 80030b8:	b2c0      	uxtb	r0, r0
 80030ba:	e7cf      	b.n	800305c <__aeabi_d2f+0x28>
 80030bc:	2000      	movs	r0, #0
 80030be:	2200      	movs	r2, #0
 80030c0:	e7cc      	b.n	800305c <__aeabi_d2f+0x28>
 80030c2:	000a      	movs	r2, r1
 80030c4:	3217      	adds	r2, #23
 80030c6:	db2f      	blt.n	8003128 <__aeabi_d2f+0xf4>
 80030c8:	2680      	movs	r6, #128	; 0x80
 80030ca:	0436      	lsls	r6, r6, #16
 80030cc:	432e      	orrs	r6, r5
 80030ce:	251e      	movs	r5, #30
 80030d0:	1a6d      	subs	r5, r5, r1
 80030d2:	2d1f      	cmp	r5, #31
 80030d4:	dd11      	ble.n	80030fa <__aeabi_d2f+0xc6>
 80030d6:	2202      	movs	r2, #2
 80030d8:	4252      	negs	r2, r2
 80030da:	1a52      	subs	r2, r2, r1
 80030dc:	0031      	movs	r1, r6
 80030de:	40d1      	lsrs	r1, r2
 80030e0:	2d20      	cmp	r5, #32
 80030e2:	d004      	beq.n	80030ee <__aeabi_d2f+0xba>
 80030e4:	4a14      	ldr	r2, [pc, #80]	; (8003138 <__aeabi_d2f+0x104>)
 80030e6:	4694      	mov	ip, r2
 80030e8:	4463      	add	r3, ip
 80030ea:	409e      	lsls	r6, r3
 80030ec:	4337      	orrs	r7, r6
 80030ee:	003a      	movs	r2, r7
 80030f0:	1e53      	subs	r3, r2, #1
 80030f2:	419a      	sbcs	r2, r3
 80030f4:	430a      	orrs	r2, r1
 80030f6:	2100      	movs	r1, #0
 80030f8:	e7ce      	b.n	8003098 <__aeabi_d2f+0x64>
 80030fa:	4a10      	ldr	r2, [pc, #64]	; (800313c <__aeabi_d2f+0x108>)
 80030fc:	0038      	movs	r0, r7
 80030fe:	4694      	mov	ip, r2
 8003100:	4463      	add	r3, ip
 8003102:	4098      	lsls	r0, r3
 8003104:	003a      	movs	r2, r7
 8003106:	1e41      	subs	r1, r0, #1
 8003108:	4188      	sbcs	r0, r1
 800310a:	409e      	lsls	r6, r3
 800310c:	40ea      	lsrs	r2, r5
 800310e:	4330      	orrs	r0, r6
 8003110:	4302      	orrs	r2, r0
 8003112:	2100      	movs	r1, #0
 8003114:	0753      	lsls	r3, r2, #29
 8003116:	d1c1      	bne.n	800309c <__aeabi_d2f+0x68>
 8003118:	2180      	movs	r1, #128	; 0x80
 800311a:	0013      	movs	r3, r2
 800311c:	04c9      	lsls	r1, r1, #19
 800311e:	2001      	movs	r0, #1
 8003120:	400b      	ands	r3, r1
 8003122:	420a      	tst	r2, r1
 8003124:	d1c6      	bne.n	80030b4 <__aeabi_d2f+0x80>
 8003126:	e7a3      	b.n	8003070 <__aeabi_d2f+0x3c>
 8003128:	2300      	movs	r3, #0
 800312a:	e7a0      	b.n	800306e <__aeabi_d2f+0x3a>
 800312c:	000b      	movs	r3, r1
 800312e:	e79f      	b.n	8003070 <__aeabi_d2f+0x3c>
 8003130:	000007fe 	.word	0x000007fe
 8003134:	fffffc80 	.word	0xfffffc80
 8003138:	fffffca2 	.word	0xfffffca2
 800313c:	fffffc82 	.word	0xfffffc82

08003140 <__clzsi2>:
 8003140:	211c      	movs	r1, #28
 8003142:	2301      	movs	r3, #1
 8003144:	041b      	lsls	r3, r3, #16
 8003146:	4298      	cmp	r0, r3
 8003148:	d301      	bcc.n	800314e <__clzsi2+0xe>
 800314a:	0c00      	lsrs	r0, r0, #16
 800314c:	3910      	subs	r1, #16
 800314e:	0a1b      	lsrs	r3, r3, #8
 8003150:	4298      	cmp	r0, r3
 8003152:	d301      	bcc.n	8003158 <__clzsi2+0x18>
 8003154:	0a00      	lsrs	r0, r0, #8
 8003156:	3908      	subs	r1, #8
 8003158:	091b      	lsrs	r3, r3, #4
 800315a:	4298      	cmp	r0, r3
 800315c:	d301      	bcc.n	8003162 <__clzsi2+0x22>
 800315e:	0900      	lsrs	r0, r0, #4
 8003160:	3904      	subs	r1, #4
 8003162:	a202      	add	r2, pc, #8	; (adr r2, 800316c <__clzsi2+0x2c>)
 8003164:	5c10      	ldrb	r0, [r2, r0]
 8003166:	1840      	adds	r0, r0, r1
 8003168:	4770      	bx	lr
 800316a:	46c0      	nop			; (mov r8, r8)
 800316c:	02020304 	.word	0x02020304
 8003170:	01010101 	.word	0x01010101
	...

0800317c <__clzdi2>:
 800317c:	b510      	push	{r4, lr}
 800317e:	2900      	cmp	r1, #0
 8003180:	d103      	bne.n	800318a <__clzdi2+0xe>
 8003182:	f7ff ffdd 	bl	8003140 <__clzsi2>
 8003186:	3020      	adds	r0, #32
 8003188:	e002      	b.n	8003190 <__clzdi2+0x14>
 800318a:	0008      	movs	r0, r1
 800318c:	f7ff ffd8 	bl	8003140 <__clzsi2>
 8003190:	bd10      	pop	{r4, pc}
 8003192:	46c0      	nop			; (mov r8, r8)

08003194 <cJSON_strdup>:

static internal_hooks global_hooks = { internal_malloc, internal_free,
internal_realloc };

static unsigned char* cJSON_strdup(const unsigned char *string,
		const internal_hooks *const hooks) {
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
	size_t length = 0;
 800319e:	2300      	movs	r3, #0
 80031a0:	60fb      	str	r3, [r7, #12]
	unsigned char *copy = NULL;
 80031a2:	2300      	movs	r3, #0
 80031a4:	60bb      	str	r3, [r7, #8]

	if (string == NULL) {
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d101      	bne.n	80031b0 <cJSON_strdup+0x1c>
		return NULL;
 80031ac:	2300      	movs	r3, #0
 80031ae:	e019      	b.n	80031e4 <cJSON_strdup+0x50>
	}

	length = strlen((const char*) string) + sizeof("");
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	0018      	movs	r0, r3
 80031b4:	f7fc ffa8 	bl	8000108 <strlen>
 80031b8:	0003      	movs	r3, r0
 80031ba:	3301      	adds	r3, #1
 80031bc:	60fb      	str	r3, [r7, #12]
	copy = (unsigned char*) hooks->allocate(length);
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	0010      	movs	r0, r2
 80031c6:	4798      	blx	r3
 80031c8:	0003      	movs	r3, r0
 80031ca:	60bb      	str	r3, [r7, #8]
	if (copy == NULL) {
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d101      	bne.n	80031d6 <cJSON_strdup+0x42>
		return NULL;
 80031d2:	2300      	movs	r3, #0
 80031d4:	e006      	b.n	80031e4 <cJSON_strdup+0x50>
	}
	memcpy(copy, string, length);
 80031d6:	68fa      	ldr	r2, [r7, #12]
 80031d8:	6879      	ldr	r1, [r7, #4]
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	0018      	movs	r0, r3
 80031de:	f009 fbb3 	bl	800c948 <memcpy>

	return copy;
 80031e2:	68bb      	ldr	r3, [r7, #8]
}
 80031e4:	0018      	movs	r0, r3
 80031e6:	46bd      	mov	sp, r7
 80031e8:	b004      	add	sp, #16
 80031ea:	bd80      	pop	{r7, pc}

080031ec <cJSON_New_Item>:
		global_hooks.reallocate = realloc;
	}
}

/* Internal constructor. */
static cJSON* cJSON_New_Item(const internal_hooks *const hooks) {
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
	cJSON *node = (cJSON*) hooks->allocate(sizeof(cJSON));
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2028      	movs	r0, #40	; 0x28
 80031fa:	4798      	blx	r3
 80031fc:	0003      	movs	r3, r0
 80031fe:	60fb      	str	r3, [r7, #12]
	if (node) {
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d005      	beq.n	8003212 <cJSON_New_Item+0x26>
		memset(node, '\0', sizeof(cJSON));
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2228      	movs	r2, #40	; 0x28
 800320a:	2100      	movs	r1, #0
 800320c:	0018      	movs	r0, r3
 800320e:	f009 facf 	bl	800c7b0 <memset>
	}

	return node;
 8003212:	68fb      	ldr	r3, [r7, #12]
}
 8003214:	0018      	movs	r0, r3
 8003216:	46bd      	mov	sp, r7
 8003218:	b004      	add	sp, #16
 800321a:	bd80      	pop	{r7, pc}

0800321c <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item) {
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
	cJSON *next = NULL;
 8003224:	2300      	movs	r3, #0
 8003226:	60fb      	str	r3, [r7, #12]
	while (item != NULL) {
 8003228:	e03e      	b.n	80032a8 <cJSON_Delete+0x8c>
		next = item->next;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	60fb      	str	r3, [r7, #12]
		if (!(item->type & cJSON_IsReference) && (item->child != NULL)) {
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	68da      	ldr	r2, [r3, #12]
 8003234:	2380      	movs	r3, #128	; 0x80
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	4013      	ands	r3, r2
 800323a:	d108      	bne.n	800324e <cJSON_Delete+0x32>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d004      	beq.n	800324e <cJSON_Delete+0x32>
			cJSON_Delete(item->child);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	0018      	movs	r0, r3
 800324a:	f7ff ffe7 	bl	800321c <cJSON_Delete>
		}
		if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL)) {
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	68da      	ldr	r2, [r3, #12]
 8003252:	2380      	movs	r3, #128	; 0x80
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	4013      	ands	r3, r2
 8003258:	d10c      	bne.n	8003274 <cJSON_Delete+0x58>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d008      	beq.n	8003274 <cJSON_Delete+0x58>
			global_hooks.deallocate(item->valuestring);
 8003262:	4b15      	ldr	r3, [pc, #84]	; (80032b8 <cJSON_Delete+0x9c>)
 8003264:	685a      	ldr	r2, [r3, #4]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	0018      	movs	r0, r3
 800326c:	4790      	blx	r2
			item->valuestring = NULL;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	611a      	str	r2, [r3, #16]
		}
		if (!(item->type & cJSON_StringIsConst) && (item->string != NULL)) {
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	68da      	ldr	r2, [r3, #12]
 8003278:	2380      	movs	r3, #128	; 0x80
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	4013      	ands	r3, r2
 800327e:	d10c      	bne.n	800329a <cJSON_Delete+0x7e>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a1b      	ldr	r3, [r3, #32]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d008      	beq.n	800329a <cJSON_Delete+0x7e>
			global_hooks.deallocate(item->string);
 8003288:	4b0b      	ldr	r3, [pc, #44]	; (80032b8 <cJSON_Delete+0x9c>)
 800328a:	685a      	ldr	r2, [r3, #4]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a1b      	ldr	r3, [r3, #32]
 8003290:	0018      	movs	r0, r3
 8003292:	4790      	blx	r2
			item->string = NULL;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	621a      	str	r2, [r3, #32]
		}
		global_hooks.deallocate(item);
 800329a:	4b07      	ldr	r3, [pc, #28]	; (80032b8 <cJSON_Delete+0x9c>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	0010      	movs	r0, r2
 80032a2:	4798      	blx	r3
		item = next;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	607b      	str	r3, [r7, #4]
	while (item != NULL) {
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1bd      	bne.n	800322a <cJSON_Delete+0xe>
	}
}
 80032ae:	46c0      	nop			; (mov r8, r8)
 80032b0:	46c0      	nop			; (mov r8, r8)
 80032b2:	46bd      	mov	sp, r7
 80032b4:	b004      	add	sp, #16
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	20000000 	.word	0x20000000

080032bc <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void) {
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
	return '.';
 80032c0:	232e      	movs	r3, #46	; 0x2e
#endif
}
 80032c2:	0018      	movs	r0, r3
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <ensure>:
	cJSON_bool format; /* is this print a formatted print */
	internal_hooks hooks;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char* ensure(printbuffer *const p, size_t needed) {
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
	unsigned char *newbuffer = NULL;
 80032d2:	2300      	movs	r3, #0
 80032d4:	60fb      	str	r3, [r7, #12]
	size_t newsize = 0;
 80032d6:	2300      	movs	r3, #0
 80032d8:	60bb      	str	r3, [r7, #8]

	if ((p == NULL) || (p->buffer == NULL)) {
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d003      	beq.n	80032e8 <ensure+0x20>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d101      	bne.n	80032ec <ensure+0x24>
		return NULL;
 80032e8:	2300      	movs	r3, #0
 80032ea:	e086      	b.n	80033fa <ensure+0x132>
	}

	if ((p->length > 0) && (p->offset >= p->length)) {
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d007      	beq.n	8003304 <ensure+0x3c>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	689a      	ldr	r2, [r3, #8]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d301      	bcc.n	8003304 <ensure+0x3c>
		/* make sure that offset is valid */
		return NULL;
 8003300:	2300      	movs	r3, #0
 8003302:	e07a      	b.n	80033fa <ensure+0x132>
	}

	if (needed > INT_MAX) {
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	2b00      	cmp	r3, #0
 8003308:	da01      	bge.n	800330e <ensure+0x46>
		/* sizes bigger than INT_MAX are currently not supported */
		return NULL;
 800330a:	2300      	movs	r3, #0
 800330c:	e075      	b.n	80033fa <ensure+0x132>
	}

	needed += p->offset + 1;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	689a      	ldr	r2, [r3, #8]
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	18d3      	adds	r3, r2, r3
 8003316:	3301      	adds	r3, #1
 8003318:	603b      	str	r3, [r7, #0]
	if (needed <= p->length) {
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	429a      	cmp	r2, r3
 8003322:	d805      	bhi.n	8003330 <ensure+0x68>
		return p->buffer + p->offset;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	18d3      	adds	r3, r2, r3
 800332e:	e064      	b.n	80033fa <ensure+0x132>
	}

	if (p->noalloc) {
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d001      	beq.n	800333c <ensure+0x74>
		return NULL;
 8003338:	2300      	movs	r3, #0
 800333a:	e05e      	b.n	80033fa <ensure+0x132>
	}

	/* calculate new buffer size */
	if (needed > (INT_MAX / 2)) {
 800333c:	683a      	ldr	r2, [r7, #0]
 800333e:	2380      	movs	r3, #128	; 0x80
 8003340:	05db      	lsls	r3, r3, #23
 8003342:	429a      	cmp	r2, r3
 8003344:	d307      	bcc.n	8003356 <ensure+0x8e>
		/* overflow of int, use INT_MAX if possible */
		if (needed <= INT_MAX) {
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	2b00      	cmp	r3, #0
 800334a:	db02      	blt.n	8003352 <ensure+0x8a>
			newsize = INT_MAX;
 800334c:	4b2d      	ldr	r3, [pc, #180]	; (8003404 <ensure+0x13c>)
 800334e:	60bb      	str	r3, [r7, #8]
 8003350:	e004      	b.n	800335c <ensure+0x94>
		} else {
			return NULL;
 8003352:	2300      	movs	r3, #0
 8003354:	e051      	b.n	80033fa <ensure+0x132>
		}
	} else {
		newsize = needed * 2;
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	60bb      	str	r3, [r7, #8]
	}

	if (p->hooks.reallocate != NULL) {
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a1b      	ldr	r3, [r3, #32]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d019      	beq.n	8003398 <ensure+0xd0>
		/* reallocate with realloc if available */
		newbuffer = (unsigned char*) p->hooks.reallocate(p->buffer, newsize);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a1a      	ldr	r2, [r3, #32]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68b9      	ldr	r1, [r7, #8]
 800336e:	0018      	movs	r0, r3
 8003370:	4790      	blx	r2
 8003372:	0003      	movs	r3, r0
 8003374:	60fb      	str	r3, [r7, #12]
		if (newbuffer == NULL) {
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d134      	bne.n	80033e6 <ensure+0x11e>
			p->hooks.deallocate(p->buffer);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	69da      	ldr	r2, [r3, #28]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	0018      	movs	r0, r3
 8003386:	4790      	blx	r2
			p->length = 0;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	605a      	str	r2, [r3, #4]
			p->buffer = NULL;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	601a      	str	r2, [r3, #0]

			return NULL;
 8003394:	2300      	movs	r3, #0
 8003396:	e030      	b.n	80033fa <ensure+0x132>
		}
	} else {
		/* otherwise reallocate manually */
		newbuffer = (unsigned char*) p->hooks.allocate(newsize);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	68ba      	ldr	r2, [r7, #8]
 800339e:	0010      	movs	r0, r2
 80033a0:	4798      	blx	r3
 80033a2:	0003      	movs	r3, r0
 80033a4:	60fb      	str	r3, [r7, #12]
		if (!newbuffer) {
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d10d      	bne.n	80033c8 <ensure+0x100>
			p->hooks.deallocate(p->buffer);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	69da      	ldr	r2, [r3, #28]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	0018      	movs	r0, r3
 80033b6:	4790      	blx	r2
			p->length = 0;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	605a      	str	r2, [r3, #4]
			p->buffer = NULL;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	601a      	str	r2, [r3, #0]

			return NULL;
 80033c4:	2300      	movs	r3, #0
 80033c6:	e018      	b.n	80033fa <ensure+0x132>
		}

		memcpy(newbuffer, p->buffer, p->offset + 1);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6819      	ldr	r1, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	1c5a      	adds	r2, r3, #1
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	0018      	movs	r0, r3
 80033d6:	f009 fab7 	bl	800c948 <memcpy>
		p->hooks.deallocate(p->buffer);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	69da      	ldr	r2, [r3, #28]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	0018      	movs	r0, r3
 80033e4:	4790      	blx	r2
	}
	p->length = newsize;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	68ba      	ldr	r2, [r7, #8]
 80033ea:	605a      	str	r2, [r3, #4]
	p->buffer = newbuffer;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	601a      	str	r2, [r3, #0]

	return newbuffer + p->offset;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	18d3      	adds	r3, r2, r3
}
 80033fa:	0018      	movs	r0, r3
 80033fc:	46bd      	mov	sp, r7
 80033fe:	b004      	add	sp, #16
 8003400:	bd80      	pop	{r7, pc}
 8003402:	46c0      	nop			; (mov r8, r8)
 8003404:	7fffffff 	.word	0x7fffffff

08003408 <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer *const buffer) {
 8003408:	b590      	push	{r4, r7, lr}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
	const unsigned char *buffer_pointer = NULL;
 8003410:	2300      	movs	r3, #0
 8003412:	60fb      	str	r3, [r7, #12]
	if ((buffer == NULL) || (buffer->buffer == NULL)) {
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d014      	beq.n	8003444 <update_offset+0x3c>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d010      	beq.n	8003444 <update_offset+0x3c>
		return;
	}
	buffer_pointer = buffer->buffer + buffer->offset;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	18d3      	adds	r3, r2, r3
 800342c:	60fb      	str	r3, [r7, #12]

	buffer->offset += strlen((const char*) buffer_pointer);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	689c      	ldr	r4, [r3, #8]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	0018      	movs	r0, r3
 8003436:	f7fc fe67 	bl	8000108 <strlen>
 800343a:	0003      	movs	r3, r0
 800343c:	18e2      	adds	r2, r4, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	609a      	str	r2, [r3, #8]
 8003442:	e000      	b.n	8003446 <update_offset+0x3e>
		return;
 8003444:	46c0      	nop			; (mov r8, r8)
}
 8003446:	46bd      	mov	sp, r7
 8003448:	b005      	add	sp, #20
 800344a:	bd90      	pop	{r4, r7, pc}

0800344c <compare_double>:

/* securely comparison of floating-point variables */
static cJSON_bool compare_double(double a, double b) {
 800344c:	b5b0      	push	{r4, r5, r7, lr}
 800344e:	b08c      	sub	sp, #48	; 0x30
 8003450:	af00      	add	r7, sp, #0
 8003452:	6238      	str	r0, [r7, #32]
 8003454:	6279      	str	r1, [r7, #36]	; 0x24
 8003456:	61ba      	str	r2, [r7, #24]
 8003458:	61fb      	str	r3, [r7, #28]
	double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
 800345a:	6a3b      	ldr	r3, [r7, #32]
 800345c:	613b      	str	r3, [r7, #16]
 800345e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	085b      	lsrs	r3, r3, #1
 8003464:	617b      	str	r3, [r7, #20]
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	60bb      	str	r3, [r7, #8]
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	085b      	lsrs	r3, r3, #1
 8003470:	60fb      	str	r3, [r7, #12]
 8003472:	68ba      	ldr	r2, [r7, #8]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6938      	ldr	r0, [r7, #16]
 8003478:	6979      	ldr	r1, [r7, #20]
 800347a:	f7fd f801 	bl	8000480 <__aeabi_dcmpgt>
 800347e:	1e03      	subs	r3, r0, #0
 8003480:	d005      	beq.n	800348e <compare_double+0x42>
 8003482:	6a3b      	ldr	r3, [r7, #32]
 8003484:	001c      	movs	r4, r3
 8003486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	085d      	lsrs	r5, r3, #1
 800348c:	e004      	b.n	8003498 <compare_double+0x4c>
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	001c      	movs	r4, r3
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	085d      	lsrs	r5, r3, #1
 8003498:	62bc      	str	r4, [r7, #40]	; 0x28
 800349a:	62fd      	str	r5, [r7, #44]	; 0x2c
	return (fabs(a - b) <= maxVal * DBL_EPSILON);
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	6a38      	ldr	r0, [r7, #32]
 80034a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034a4:	f7ff f952 	bl	800274c <__aeabi_dsub>
 80034a8:	0002      	movs	r2, r0
 80034aa:	000b      	movs	r3, r1
 80034ac:	0011      	movs	r1, r2
 80034ae:	6039      	str	r1, [r7, #0]
 80034b0:	005b      	lsls	r3, r3, #1
 80034b2:	085b      	lsrs	r3, r3, #1
 80034b4:	607b      	str	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	4b0a      	ldr	r3, [pc, #40]	; (80034e4 <compare_double+0x98>)
 80034ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80034be:	f7fe fe83 	bl	80021c8 <__aeabi_dmul>
 80034c2:	0002      	movs	r2, r0
 80034c4:	000b      	movs	r3, r1
 80034c6:	2101      	movs	r1, #1
 80034c8:	1c0c      	adds	r4, r1, #0
 80034ca:	6838      	ldr	r0, [r7, #0]
 80034cc:	6879      	ldr	r1, [r7, #4]
 80034ce:	f7fc ffcd 	bl	800046c <__aeabi_dcmple>
 80034d2:	1e03      	subs	r3, r0, #0
 80034d4:	d101      	bne.n	80034da <compare_double+0x8e>
 80034d6:	2300      	movs	r3, #0
 80034d8:	1c1c      	adds	r4, r3, #0
 80034da:	b2e3      	uxtb	r3, r4
}
 80034dc:	0018      	movs	r0, r3
 80034de:	46bd      	mov	sp, r7
 80034e0:	b00c      	add	sp, #48	; 0x30
 80034e2:	bdb0      	pop	{r4, r5, r7, pc}
 80034e4:	3cb00000 	.word	0x3cb00000

080034e8 <print_number>:

/* Render the number nicely from the given item into a string. */
static cJSON_bool print_number(const cJSON *const item,
		printbuffer *const output_buffer) {
 80034e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034ea:	b093      	sub	sp, #76	; 0x4c
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
	unsigned char *output_pointer = NULL;
 80034f2:	2300      	movs	r3, #0
 80034f4:	63fb      	str	r3, [r7, #60]	; 0x3c
	double d = item->valuedouble;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	699a      	ldr	r2, [r3, #24]
 80034fa:	69db      	ldr	r3, [r3, #28]
 80034fc:	633a      	str	r2, [r7, #48]	; 0x30
 80034fe:	637b      	str	r3, [r7, #52]	; 0x34
	int length = 0;
 8003500:	2300      	movs	r3, #0
 8003502:	647b      	str	r3, [r7, #68]	; 0x44
	size_t i = 0;
 8003504:	2300      	movs	r3, #0
 8003506:	643b      	str	r3, [r7, #64]	; 0x40
	unsigned char number_buffer[26] = { 0 }; /* temporary buffer to print the number into */
 8003508:	2314      	movs	r3, #20
 800350a:	18fb      	adds	r3, r7, r3
 800350c:	2200      	movs	r2, #0
 800350e:	601a      	str	r2, [r3, #0]
 8003510:	3304      	adds	r3, #4
 8003512:	2216      	movs	r2, #22
 8003514:	2100      	movs	r1, #0
 8003516:	0018      	movs	r0, r3
 8003518:	f009 f94a 	bl	800c7b0 <memset>
	unsigned char decimal_point = get_decimal_point();
 800351c:	232f      	movs	r3, #47	; 0x2f
 800351e:	18fe      	adds	r6, r7, r3
 8003520:	f7ff fecc 	bl	80032bc <get_decimal_point>
 8003524:	0003      	movs	r3, r0
 8003526:	7033      	strb	r3, [r6, #0]
	double test = 0.0;
 8003528:	2200      	movs	r2, #0
 800352a:	2300      	movs	r3, #0
 800352c:	60ba      	str	r2, [r7, #8]
 800352e:	60fb      	str	r3, [r7, #12]

	if (output_buffer == NULL) {
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <print_number+0x52>
		return false;
 8003536:	2300      	movs	r3, #0
 8003538:	e0b3      	b.n	80036a2 <print_number+0x1ba>
	}

	/* This checks for NaN and Infinity */
	if (isnan(d) || isinf(d)) {
 800353a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800353c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800353e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003540:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003542:	f7ff fc85 	bl	8002e50 <__aeabi_dcmpun>
 8003546:	1e03      	subs	r3, r0, #0
 8003548:	d120      	bne.n	800358c <print_number+0xa4>
 800354a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800354c:	001c      	movs	r4, r3
 800354e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003550:	005b      	lsls	r3, r3, #1
 8003552:	085d      	lsrs	r5, r3, #1
 8003554:	2301      	movs	r3, #1
 8003556:	1c1e      	adds	r6, r3, #0
 8003558:	2201      	movs	r2, #1
 800355a:	4252      	negs	r2, r2
 800355c:	4b53      	ldr	r3, [pc, #332]	; (80036ac <print_number+0x1c4>)
 800355e:	0020      	movs	r0, r4
 8003560:	0029      	movs	r1, r5
 8003562:	f7ff fc75 	bl	8002e50 <__aeabi_dcmpun>
 8003566:	1e03      	subs	r3, r0, #0
 8003568:	d10a      	bne.n	8003580 <print_number+0x98>
 800356a:	2201      	movs	r2, #1
 800356c:	4252      	negs	r2, r2
 800356e:	4b4f      	ldr	r3, [pc, #316]	; (80036ac <print_number+0x1c4>)
 8003570:	0020      	movs	r0, r4
 8003572:	0029      	movs	r1, r5
 8003574:	f7fc ff7a 	bl	800046c <__aeabi_dcmple>
 8003578:	1e03      	subs	r3, r0, #0
 800357a:	d101      	bne.n	8003580 <print_number+0x98>
 800357c:	2300      	movs	r3, #0
 800357e:	1c1e      	adds	r6, r3, #0
 8003580:	b2f3      	uxtb	r3, r6
 8003582:	2201      	movs	r2, #1
 8003584:	4053      	eors	r3, r2
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2b00      	cmp	r3, #0
 800358a:	d009      	beq.n	80035a0 <print_number+0xb8>
		length = sprintf((char*) number_buffer, "null");
 800358c:	4a48      	ldr	r2, [pc, #288]	; (80036b0 <print_number+0x1c8>)
 800358e:	2314      	movs	r3, #20
 8003590:	18fb      	adds	r3, r7, r3
 8003592:	0011      	movs	r1, r2
 8003594:	0018      	movs	r0, r3
 8003596:	f008 ffcf 	bl	800c538 <siprintf>
 800359a:	0003      	movs	r3, r0
 800359c:	647b      	str	r3, [r7, #68]	; 0x44
 800359e:	e03b      	b.n	8003618 <print_number+0x130>
	} else if (d == (double) item->valueint) {
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	695b      	ldr	r3, [r3, #20]
 80035a4:	0018      	movs	r0, r3
 80035a6:	f7ff fca7 	bl	8002ef8 <__aeabi_i2d>
 80035aa:	0002      	movs	r2, r0
 80035ac:	000b      	movs	r3, r1
 80035ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80035b0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80035b2:	f7fc ff4b 	bl	800044c <__aeabi_dcmpeq>
 80035b6:	1e03      	subs	r3, r0, #0
 80035b8:	d00a      	beq.n	80035d0 <print_number+0xe8>
		length = sprintf((char*) number_buffer, "%d", item->valueint);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	695a      	ldr	r2, [r3, #20]
 80035be:	493d      	ldr	r1, [pc, #244]	; (80036b4 <print_number+0x1cc>)
 80035c0:	2314      	movs	r3, #20
 80035c2:	18fb      	adds	r3, r7, r3
 80035c4:	0018      	movs	r0, r3
 80035c6:	f008 ffb7 	bl	800c538 <siprintf>
 80035ca:	0003      	movs	r3, r0
 80035cc:	647b      	str	r3, [r7, #68]	; 0x44
 80035ce:	e023      	b.n	8003618 <print_number+0x130>
	} else {
		/* Try 15 decimal places of precision to avoid nonsignificant nonzero digits */
		length = sprintf((char*) number_buffer, "%1.15g", d);
 80035d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035d4:	4938      	ldr	r1, [pc, #224]	; (80036b8 <print_number+0x1d0>)
 80035d6:	2414      	movs	r4, #20
 80035d8:	1938      	adds	r0, r7, r4
 80035da:	f008 ffad 	bl	800c538 <siprintf>
 80035de:	0003      	movs	r3, r0
 80035e0:	647b      	str	r3, [r7, #68]	; 0x44

		/* Check whether the original double can be recovered */
		if ((sscanf((char*) number_buffer, "%lg", &test) != 1)
 80035e2:	2308      	movs	r3, #8
 80035e4:	18fa      	adds	r2, r7, r3
 80035e6:	4935      	ldr	r1, [pc, #212]	; (80036bc <print_number+0x1d4>)
 80035e8:	193b      	adds	r3, r7, r4
 80035ea:	0018      	movs	r0, r3
 80035ec:	f008 ffc4 	bl	800c578 <siscanf>
 80035f0:	0003      	movs	r3, r0
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d107      	bne.n	8003606 <print_number+0x11e>
				|| !compare_double((double) test, d)) {
 80035f6:	68b8      	ldr	r0, [r7, #8]
 80035f8:	68f9      	ldr	r1, [r7, #12]
 80035fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035fe:	f7ff ff25 	bl	800344c <compare_double>
 8003602:	1e03      	subs	r3, r0, #0
 8003604:	d108      	bne.n	8003618 <print_number+0x130>
			/* If not, print with 17 decimal places of precision */
			length = sprintf((char*) number_buffer, "%1.17g", d);
 8003606:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800360a:	492d      	ldr	r1, [pc, #180]	; (80036c0 <print_number+0x1d8>)
 800360c:	2014      	movs	r0, #20
 800360e:	1838      	adds	r0, r7, r0
 8003610:	f008 ff92 	bl	800c538 <siprintf>
 8003614:	0003      	movs	r3, r0
 8003616:	647b      	str	r3, [r7, #68]	; 0x44
		}
	}

	/* sprintf failed or buffer overrun occurred */
	if ((length < 0) || (length > (int) (sizeof(number_buffer) - 1))) {
 8003618:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800361a:	2b00      	cmp	r3, #0
 800361c:	db02      	blt.n	8003624 <print_number+0x13c>
 800361e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003620:	2b19      	cmp	r3, #25
 8003622:	dd01      	ble.n	8003628 <print_number+0x140>
		return false;
 8003624:	2300      	movs	r3, #0
 8003626:	e03c      	b.n	80036a2 <print_number+0x1ba>
	}

	/* reserve appropriate space in the output */
	output_pointer = ensure(output_buffer, (size_t) length + sizeof(""));
 8003628:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800362a:	1c5a      	adds	r2, r3, #1
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	0011      	movs	r1, r2
 8003630:	0018      	movs	r0, r3
 8003632:	f7ff fe49 	bl	80032c8 <ensure>
 8003636:	0003      	movs	r3, r0
 8003638:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (output_pointer == NULL) {
 800363a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800363c:	2b00      	cmp	r3, #0
 800363e:	d101      	bne.n	8003644 <print_number+0x15c>
		return false;
 8003640:	2300      	movs	r3, #0
 8003642:	e02e      	b.n	80036a2 <print_number+0x1ba>
	}

	/* copy the printed number to the output and replace locale
	 * dependent decimal point with '.' */
	for (i = 0; i < ((size_t) length); i++) {
 8003644:	2300      	movs	r3, #0
 8003646:	643b      	str	r3, [r7, #64]	; 0x40
 8003648:	e01b      	b.n	8003682 <print_number+0x19a>
		if (number_buffer[i] == decimal_point) {
 800364a:	2314      	movs	r3, #20
 800364c:	18fa      	adds	r2, r7, r3
 800364e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003650:	18d3      	adds	r3, r2, r3
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	222f      	movs	r2, #47	; 0x2f
 8003656:	18ba      	adds	r2, r7, r2
 8003658:	7812      	ldrb	r2, [r2, #0]
 800365a:	429a      	cmp	r2, r3
 800365c:	d105      	bne.n	800366a <print_number+0x182>
			output_pointer[i] = '.';
 800365e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003660:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003662:	18d3      	adds	r3, r2, r3
 8003664:	222e      	movs	r2, #46	; 0x2e
 8003666:	701a      	strb	r2, [r3, #0]
			continue;
 8003668:	e008      	b.n	800367c <print_number+0x194>
		}

		output_pointer[i] = number_buffer[i];
 800366a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800366c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800366e:	18d3      	adds	r3, r2, r3
 8003670:	2214      	movs	r2, #20
 8003672:	18b9      	adds	r1, r7, r2
 8003674:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003676:	188a      	adds	r2, r1, r2
 8003678:	7812      	ldrb	r2, [r2, #0]
 800367a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < ((size_t) length); i++) {
 800367c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800367e:	3301      	adds	r3, #1
 8003680:	643b      	str	r3, [r7, #64]	; 0x40
 8003682:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003684:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003686:	429a      	cmp	r2, r3
 8003688:	d3df      	bcc.n	800364a <print_number+0x162>
	}
	output_pointer[i] = '\0';
 800368a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800368c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800368e:	18d3      	adds	r3, r2, r3
 8003690:	2200      	movs	r2, #0
 8003692:	701a      	strb	r2, [r3, #0]

	output_buffer->offset += (size_t) length;
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	689a      	ldr	r2, [r3, #8]
 8003698:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800369a:	18d2      	adds	r2, r2, r3
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	609a      	str	r2, [r3, #8]

	return true;
 80036a0:	2301      	movs	r3, #1
}
 80036a2:	0018      	movs	r0, r3
 80036a4:	46bd      	mov	sp, r7
 80036a6:	b013      	add	sp, #76	; 0x4c
 80036a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036aa:	46c0      	nop			; (mov r8, r8)
 80036ac:	7fefffff 	.word	0x7fefffff
 80036b0:	0800fa3c 	.word	0x0800fa3c
 80036b4:	0800fa44 	.word	0x0800fa44
 80036b8:	0800fa48 	.word	0x0800fa48
 80036bc:	0800fa50 	.word	0x0800fa50
 80036c0:	0800fa54 	.word	0x0800fa54

080036c4 <print_string_ptr>:
	return false;
}

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char *const input,
		printbuffer *const output_buffer) {
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b088      	sub	sp, #32
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
	const unsigned char *input_pointer = NULL;
 80036ce:	2300      	movs	r3, #0
 80036d0:	61fb      	str	r3, [r7, #28]
	unsigned char *output = NULL;
 80036d2:	2300      	movs	r3, #0
 80036d4:	613b      	str	r3, [r7, #16]
	unsigned char *output_pointer = NULL;
 80036d6:	2300      	movs	r3, #0
 80036d8:	61bb      	str	r3, [r7, #24]
	size_t output_length = 0;
 80036da:	2300      	movs	r3, #0
 80036dc:	60fb      	str	r3, [r7, #12]
	/* numbers of additional characters needed for escaping */
	size_t escape_characters = 0;
 80036de:	2300      	movs	r3, #0
 80036e0:	617b      	str	r3, [r7, #20]

	if (output_buffer == NULL) {
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d101      	bne.n	80036ec <print_string_ptr+0x28>
		return false;
 80036e8:	2300      	movs	r3, #0
 80036ea:	e0e0      	b.n	80038ae <print_string_ptr+0x1ea>
	}

	/* empty string */
	if (input == NULL) {
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d115      	bne.n	800371e <print_string_ptr+0x5a>
		output = ensure(output_buffer, sizeof("\"\""));
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	2103      	movs	r1, #3
 80036f6:	0018      	movs	r0, r3
 80036f8:	f7ff fde6 	bl	80032c8 <ensure>
 80036fc:	0003      	movs	r3, r0
 80036fe:	613b      	str	r3, [r7, #16]
		if (output == NULL) {
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d101      	bne.n	800370a <print_string_ptr+0x46>
			return false;
 8003706:	2300      	movs	r3, #0
 8003708:	e0d1      	b.n	80038ae <print_string_ptr+0x1ea>
		}
		strcpy((char*) output, "\"\"");
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	4b6a      	ldr	r3, [pc, #424]	; (80038b8 <print_string_ptr+0x1f4>)
 800370e:	0010      	movs	r0, r2
 8003710:	0019      	movs	r1, r3
 8003712:	2303      	movs	r3, #3
 8003714:	001a      	movs	r2, r3
 8003716:	f009 f917 	bl	800c948 <memcpy>

		return true;
 800371a:	2301      	movs	r3, #1
 800371c:	e0c7      	b.n	80038ae <print_string_ptr+0x1ea>
	}

	/* set "flag" to 1 if something needs to be escaped */
	for (input_pointer = input; *input_pointer; input_pointer++) {
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	61fb      	str	r3, [r7, #28]
 8003722:	e022      	b.n	800376a <print_string_ptr+0xa6>
		switch (*input_pointer) {
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	2b22      	cmp	r3, #34	; 0x22
 800372a:	dc0d      	bgt.n	8003748 <print_string_ptr+0x84>
 800372c:	2b08      	cmp	r3, #8
 800372e:	db11      	blt.n	8003754 <print_string_ptr+0x90>
 8003730:	3b08      	subs	r3, #8
 8003732:	4a62      	ldr	r2, [pc, #392]	; (80038bc <print_string_ptr+0x1f8>)
 8003734:	40da      	lsrs	r2, r3
 8003736:	0013      	movs	r3, r2
 8003738:	2201      	movs	r2, #1
 800373a:	4013      	ands	r3, r2
 800373c:	1e5a      	subs	r2, r3, #1
 800373e:	4193      	sbcs	r3, r2
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b00      	cmp	r3, #0
 8003744:	d102      	bne.n	800374c <print_string_ptr+0x88>
 8003746:	e005      	b.n	8003754 <print_string_ptr+0x90>
 8003748:	2b5c      	cmp	r3, #92	; 0x5c
 800374a:	d103      	bne.n	8003754 <print_string_ptr+0x90>
		case '\f':
		case '\n':
		case '\r':
		case '\t':
			/* one character escape sequence */
			escape_characters++;
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	3301      	adds	r3, #1
 8003750:	617b      	str	r3, [r7, #20]
			break;
 8003752:	e007      	b.n	8003764 <print_string_ptr+0xa0>
		default:
			if (*input_pointer < 32) {
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	2b1f      	cmp	r3, #31
 800375a:	d802      	bhi.n	8003762 <print_string_ptr+0x9e>
				/* UTF-16 escape sequence uXXXX */
				escape_characters += 5;
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	3305      	adds	r3, #5
 8003760:	617b      	str	r3, [r7, #20]
			}
			break;
 8003762:	46c0      	nop			; (mov r8, r8)
	for (input_pointer = input; *input_pointer; input_pointer++) {
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	3301      	adds	r3, #1
 8003768:	61fb      	str	r3, [r7, #28]
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d1d8      	bne.n	8003724 <print_string_ptr+0x60>
		}
	}
	output_length = (size_t) (input_pointer - input) + escape_characters;
 8003772:	69fa      	ldr	r2, [r7, #28]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	001a      	movs	r2, r3
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	189b      	adds	r3, r3, r2
 800377e:	60fb      	str	r3, [r7, #12]

	output = ensure(output_buffer, output_length + sizeof("\"\""));
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	1cda      	adds	r2, r3, #3
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	0011      	movs	r1, r2
 8003788:	0018      	movs	r0, r3
 800378a:	f7ff fd9d 	bl	80032c8 <ensure>
 800378e:	0003      	movs	r3, r0
 8003790:	613b      	str	r3, [r7, #16]
	if (output == NULL) {
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d101      	bne.n	800379c <print_string_ptr+0xd8>
		return false;
 8003798:	2300      	movs	r3, #0
 800379a:	e088      	b.n	80038ae <print_string_ptr+0x1ea>
	}

	/* no characters have to be escaped */
	if (escape_characters == 0) {
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d117      	bne.n	80037d2 <print_string_ptr+0x10e>
		output[0] = '\"';
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	2222      	movs	r2, #34	; 0x22
 80037a6:	701a      	strb	r2, [r3, #0]
		memcpy(output + 1, input, output_length);
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	3301      	adds	r3, #1
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	6879      	ldr	r1, [r7, #4]
 80037b0:	0018      	movs	r0, r3
 80037b2:	f009 f8c9 	bl	800c948 <memcpy>
		output[output_length + 1] = '\"';
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	3301      	adds	r3, #1
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	18d3      	adds	r3, r2, r3
 80037be:	2222      	movs	r2, #34	; 0x22
 80037c0:	701a      	strb	r2, [r3, #0]
		output[output_length + 2] = '\0';
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	3302      	adds	r3, #2
 80037c6:	693a      	ldr	r2, [r7, #16]
 80037c8:	18d3      	adds	r3, r2, r3
 80037ca:	2200      	movs	r2, #0
 80037cc:	701a      	strb	r2, [r3, #0]

		return true;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e06d      	b.n	80038ae <print_string_ptr+0x1ea>
	}

	output[0] = '\"';
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	2222      	movs	r2, #34	; 0x22
 80037d6:	701a      	strb	r2, [r3, #0]
	output_pointer = output + 1;
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	3301      	adds	r3, #1
 80037dc:	61bb      	str	r3, [r7, #24]
	/* copy the string */
	for (input_pointer = input; *input_pointer != '\0';
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	61fb      	str	r3, [r7, #28]
 80037e2:	e053      	b.n	800388c <print_string_ptr+0x1c8>
			(void) input_pointer++, output_pointer++) {
		if ((*input_pointer > 31) && (*input_pointer != '\"')
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	2b1f      	cmp	r3, #31
 80037ea:	d90c      	bls.n	8003806 <print_string_ptr+0x142>
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	2b22      	cmp	r3, #34	; 0x22
 80037f2:	d008      	beq.n	8003806 <print_string_ptr+0x142>
				&& (*input_pointer != '\\')) {
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	2b5c      	cmp	r3, #92	; 0x5c
 80037fa:	d004      	beq.n	8003806 <print_string_ptr+0x142>
			/* normal character, copy */
			*output_pointer = *input_pointer;
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	781a      	ldrb	r2, [r3, #0]
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	701a      	strb	r2, [r3, #0]
 8003804:	e03c      	b.n	8003880 <print_string_ptr+0x1bc>
		} else {
			/* character needs to be escaped */
			*output_pointer++ = '\\';
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	1c5a      	adds	r2, r3, #1
 800380a:	61ba      	str	r2, [r7, #24]
 800380c:	225c      	movs	r2, #92	; 0x5c
 800380e:	701a      	strb	r2, [r3, #0]
			switch (*input_pointer) {
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	2b22      	cmp	r3, #34	; 0x22
 8003816:	dc09      	bgt.n	800382c <print_string_ptr+0x168>
 8003818:	2b08      	cmp	r3, #8
 800381a:	db25      	blt.n	8003868 <print_string_ptr+0x1a4>
 800381c:	3b08      	subs	r3, #8
 800381e:	2b1a      	cmp	r3, #26
 8003820:	d822      	bhi.n	8003868 <print_string_ptr+0x1a4>
 8003822:	009a      	lsls	r2, r3, #2
 8003824:	4b26      	ldr	r3, [pc, #152]	; (80038c0 <print_string_ptr+0x1fc>)
 8003826:	18d3      	adds	r3, r2, r3
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	469f      	mov	pc, r3
 800382c:	2b5c      	cmp	r3, #92	; 0x5c
 800382e:	d11b      	bne.n	8003868 <print_string_ptr+0x1a4>
			case '\\':
				*output_pointer = '\\';
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	225c      	movs	r2, #92	; 0x5c
 8003834:	701a      	strb	r2, [r3, #0]
				break;
 8003836:	e023      	b.n	8003880 <print_string_ptr+0x1bc>
			case '\"':
				*output_pointer = '\"';
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	2222      	movs	r2, #34	; 0x22
 800383c:	701a      	strb	r2, [r3, #0]
				break;
 800383e:	e01f      	b.n	8003880 <print_string_ptr+0x1bc>
			case '\b':
				*output_pointer = 'b';
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	2262      	movs	r2, #98	; 0x62
 8003844:	701a      	strb	r2, [r3, #0]
				break;
 8003846:	e01b      	b.n	8003880 <print_string_ptr+0x1bc>
			case '\f':
				*output_pointer = 'f';
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	2266      	movs	r2, #102	; 0x66
 800384c:	701a      	strb	r2, [r3, #0]
				break;
 800384e:	e017      	b.n	8003880 <print_string_ptr+0x1bc>
			case '\n':
				*output_pointer = 'n';
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	226e      	movs	r2, #110	; 0x6e
 8003854:	701a      	strb	r2, [r3, #0]
				break;
 8003856:	e013      	b.n	8003880 <print_string_ptr+0x1bc>
			case '\r':
				*output_pointer = 'r';
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	2272      	movs	r2, #114	; 0x72
 800385c:	701a      	strb	r2, [r3, #0]
				break;
 800385e:	e00f      	b.n	8003880 <print_string_ptr+0x1bc>
			case '\t':
				*output_pointer = 't';
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	2274      	movs	r2, #116	; 0x74
 8003864:	701a      	strb	r2, [r3, #0]
				break;
 8003866:	e00b      	b.n	8003880 <print_string_ptr+0x1bc>
			default:
				/* escape and print as unicode codepoint */
				sprintf((char*) output_pointer, "u%04x", *input_pointer);
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	001a      	movs	r2, r3
 800386e:	4915      	ldr	r1, [pc, #84]	; (80038c4 <print_string_ptr+0x200>)
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	0018      	movs	r0, r3
 8003874:	f008 fe60 	bl	800c538 <siprintf>
				output_pointer += 4;
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	3304      	adds	r3, #4
 800387c:	61bb      	str	r3, [r7, #24]
				break;
 800387e:	46c0      	nop			; (mov r8, r8)
			(void) input_pointer++, output_pointer++) {
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	3301      	adds	r3, #1
 8003884:	61fb      	str	r3, [r7, #28]
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	3301      	adds	r3, #1
 800388a:	61bb      	str	r3, [r7, #24]
	for (input_pointer = input; *input_pointer != '\0';
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1a7      	bne.n	80037e4 <print_string_ptr+0x120>
			}
		}
	}
	output[output_length + 1] = '\"';
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	3301      	adds	r3, #1
 8003898:	693a      	ldr	r2, [r7, #16]
 800389a:	18d3      	adds	r3, r2, r3
 800389c:	2222      	movs	r2, #34	; 0x22
 800389e:	701a      	strb	r2, [r3, #0]
	output[output_length + 2] = '\0';
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	3302      	adds	r3, #2
 80038a4:	693a      	ldr	r2, [r7, #16]
 80038a6:	18d3      	adds	r3, r2, r3
 80038a8:	2200      	movs	r2, #0
 80038aa:	701a      	strb	r2, [r3, #0]

	return true;
 80038ac:	2301      	movs	r3, #1
}
 80038ae:	0018      	movs	r0, r3
 80038b0:	46bd      	mov	sp, r7
 80038b2:	b008      	add	sp, #32
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	46c0      	nop			; (mov r8, r8)
 80038b8:	0800fa5c 	.word	0x0800fa5c
 80038bc:	04000037 	.word	0x04000037
 80038c0:	0800fcb0 	.word	0x0800fcb0
 80038c4:	0800fa60 	.word	0x0800fa60

080038c8 <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static cJSON_bool print_string(const cJSON *const item, printbuffer *const p) {
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
	return print_string_ptr((unsigned char*) item->valuestring, p);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	683a      	ldr	r2, [r7, #0]
 80038d8:	0011      	movs	r1, r2
 80038da:	0018      	movs	r0, r3
 80038dc:	f7ff fef2 	bl	80036c4 <print_string_ptr>
 80038e0:	0003      	movs	r3, r0
}
 80038e2:	0018      	movs	r0, r3
 80038e4:	46bd      	mov	sp, r7
 80038e6:	b002      	add	sp, #8
 80038e8:	bd80      	pop	{r7, pc}
	...

080038ec <print>:
}

#define cjson_min(a, b) (((a) < (b)) ? (a) : (b))

static unsigned char* print(const cJSON *const item, cJSON_bool format,
		const internal_hooks *const hooks) {
 80038ec:	b5b0      	push	{r4, r5, r7, lr}
 80038ee:	b08e      	sub	sp, #56	; 0x38
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
	static const size_t default_buffer_size = 256;
	printbuffer buffer[1];
	unsigned char *printed = NULL;
 80038f8:	2300      	movs	r3, #0
 80038fa:	637b      	str	r3, [r7, #52]	; 0x34

	memset(buffer, 0, sizeof(buffer));
 80038fc:	2410      	movs	r4, #16
 80038fe:	193b      	adds	r3, r7, r4
 8003900:	2224      	movs	r2, #36	; 0x24
 8003902:	2100      	movs	r1, #0
 8003904:	0018      	movs	r0, r3
 8003906:	f008 ff53 	bl	800c7b0 <memset>

	/* create buffer */
	buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	4b47      	ldr	r3, [pc, #284]	; (8003a2c <print+0x140>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	0018      	movs	r0, r3
 8003914:	4790      	blx	r2
 8003916:	0002      	movs	r2, r0
 8003918:	193b      	adds	r3, r7, r4
 800391a:	601a      	str	r2, [r3, #0]
	buffer->length = default_buffer_size;
 800391c:	4b43      	ldr	r3, [pc, #268]	; (8003a2c <print+0x140>)
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	193b      	adds	r3, r7, r4
 8003922:	605a      	str	r2, [r3, #4]
	buffer->format = format;
 8003924:	0025      	movs	r5, r4
 8003926:	193b      	adds	r3, r7, r4
 8003928:	68ba      	ldr	r2, [r7, #8]
 800392a:	615a      	str	r2, [r3, #20]
	buffer->hooks = *hooks;
 800392c:	197b      	adds	r3, r7, r5
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	3318      	adds	r3, #24
 8003932:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003934:	c313      	stmia	r3!, {r0, r1, r4}
	if (buffer->buffer == NULL) {
 8003936:	002c      	movs	r4, r5
 8003938:	193b      	adds	r3, r7, r4
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d050      	beq.n	80039e2 <print+0xf6>
		goto fail;
	}

	/* print the value */
	if (!print_value(item, buffer)) {
 8003940:	193a      	adds	r2, r7, r4
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	0011      	movs	r1, r2
 8003946:	0018      	movs	r0, r3
 8003948:	f000 f884 	bl	8003a54 <print_value>
 800394c:	1e03      	subs	r3, r0, #0
 800394e:	d04a      	beq.n	80039e6 <print+0xfa>
		goto fail;
	}
	update_offset(buffer);
 8003950:	193b      	adds	r3, r7, r4
 8003952:	0018      	movs	r0, r3
 8003954:	f7ff fd58 	bl	8003408 <update_offset>

	/* check if reallocate is available */
	if (hooks->reallocate != NULL) {
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d011      	beq.n	8003984 <print+0x98>
		printed = (unsigned char*) hooks->reallocate(buffer->buffer,
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	689a      	ldr	r2, [r3, #8]
 8003964:	193b      	adds	r3, r7, r4
 8003966:	6818      	ldr	r0, [r3, #0]
				buffer->offset + 1);
 8003968:	193b      	adds	r3, r7, r4
 800396a:	689b      	ldr	r3, [r3, #8]
		printed = (unsigned char*) hooks->reallocate(buffer->buffer,
 800396c:	3301      	adds	r3, #1
 800396e:	0019      	movs	r1, r3
 8003970:	4790      	blx	r2
 8003972:	0003      	movs	r3, r0
 8003974:	637b      	str	r3, [r7, #52]	; 0x34
		if (printed == NULL) {
 8003976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003978:	2b00      	cmp	r3, #0
 800397a:	d036      	beq.n	80039ea <print+0xfe>
			goto fail;
		}
		buffer->buffer = NULL;
 800397c:	193b      	adds	r3, r7, r4
 800397e:	2200      	movs	r2, #0
 8003980:	601a      	str	r2, [r3, #0]
 8003982:	e02c      	b.n	80039de <print+0xf2>
	} else /* otherwise copy the JSON over to a new buffer */
	{
		printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	2410      	movs	r4, #16
 800398a:	193b      	adds	r3, r7, r4
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	3301      	adds	r3, #1
 8003990:	0018      	movs	r0, r3
 8003992:	4790      	blx	r2
 8003994:	0003      	movs	r3, r0
 8003996:	637b      	str	r3, [r7, #52]	; 0x34
		if (printed == NULL) {
 8003998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800399a:	2b00      	cmp	r3, #0
 800399c:	d027      	beq.n	80039ee <print+0x102>
			goto fail;
		}
		memcpy(printed, buffer->buffer,
 800399e:	193b      	adds	r3, r7, r4
 80039a0:	6819      	ldr	r1, [r3, #0]
				cjson_min(buffer->length, buffer->offset + 1));
 80039a2:	193b      	adds	r3, r7, r4
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	1c58      	adds	r0, r3, #1
 80039a8:	193b      	adds	r3, r7, r4
 80039aa:	685a      	ldr	r2, [r3, #4]
		memcpy(printed, buffer->buffer,
 80039ac:	0003      	movs	r3, r0
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d900      	bls.n	80039b4 <print+0xc8>
 80039b2:	0013      	movs	r3, r2
 80039b4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80039b6:	001a      	movs	r2, r3
 80039b8:	f008 ffc6 	bl	800c948 <memcpy>
		printed[buffer->offset] = '\0'; /* just to be sure */
 80039bc:	2110      	movs	r1, #16
 80039be:	187b      	adds	r3, r7, r1
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039c4:	18d3      	adds	r3, r2, r3
 80039c6:	2200      	movs	r2, #0
 80039c8:	701a      	strb	r2, [r3, #0]

		/* free the buffer */
		hooks->deallocate(buffer->buffer);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685a      	ldr	r2, [r3, #4]
 80039ce:	000c      	movs	r4, r1
 80039d0:	187b      	adds	r3, r7, r1
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	0018      	movs	r0, r3
 80039d6:	4790      	blx	r2
		buffer->buffer = NULL;
 80039d8:	193b      	adds	r3, r7, r4
 80039da:	2200      	movs	r2, #0
 80039dc:	601a      	str	r2, [r3, #0]
	}

	return printed;
 80039de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039e0:	e020      	b.n	8003a24 <print+0x138>
		goto fail;
 80039e2:	46c0      	nop			; (mov r8, r8)
 80039e4:	e004      	b.n	80039f0 <print+0x104>
		goto fail;
 80039e6:	46c0      	nop			; (mov r8, r8)
 80039e8:	e002      	b.n	80039f0 <print+0x104>
			goto fail;
 80039ea:	46c0      	nop			; (mov r8, r8)
 80039ec:	e000      	b.n	80039f0 <print+0x104>
			goto fail;
 80039ee:	46c0      	nop			; (mov r8, r8)

	fail: if (buffer->buffer != NULL) {
 80039f0:	2110      	movs	r1, #16
 80039f2:	187b      	adds	r3, r7, r1
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d009      	beq.n	8003a0e <print+0x122>
		hooks->deallocate(buffer->buffer);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685a      	ldr	r2, [r3, #4]
 80039fe:	000c      	movs	r4, r1
 8003a00:	187b      	adds	r3, r7, r1
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	0018      	movs	r0, r3
 8003a06:	4790      	blx	r2
		buffer->buffer = NULL;
 8003a08:	193b      	adds	r3, r7, r4
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	601a      	str	r2, [r3, #0]
	}

	if (printed != NULL) {
 8003a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d006      	beq.n	8003a22 <print+0x136>
		hooks->deallocate(printed);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a1a:	0010      	movs	r0, r2
 8003a1c:	4798      	blx	r3
		printed = NULL;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	637b      	str	r3, [r7, #52]	; 0x34
	}

	return NULL;
 8003a22:	2300      	movs	r3, #0
}
 8003a24:	0018      	movs	r0, r3
 8003a26:	46bd      	mov	sp, r7
 8003a28:	b00e      	add	sp, #56	; 0x38
 8003a2a:	bdb0      	pop	{r4, r5, r7, pc}
 8003a2c:	0800fda0 	.word	0x0800fda0

08003a30 <cJSON_Print>:

/* Render a cJSON item/entity/structure to text. */
CJSON_PUBLIC(char *) cJSON_Print(const cJSON *item) {
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
	return (char*) print(item, true, &global_hooks);
 8003a38:	4a05      	ldr	r2, [pc, #20]	; (8003a50 <cJSON_Print+0x20>)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2101      	movs	r1, #1
 8003a3e:	0018      	movs	r0, r3
 8003a40:	f7ff ff54 	bl	80038ec <print>
 8003a44:	0003      	movs	r3, r0
}
 8003a46:	0018      	movs	r0, r3
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	b002      	add	sp, #8
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	46c0      	nop			; (mov r8, r8)
 8003a50:	20000000 	.word	0x20000000

08003a54 <print_value>:
	return false;
}

/* Render a value to text. */
static cJSON_bool print_value(const cJSON *const item,
		printbuffer *const output_buffer) {
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
	unsigned char *output = NULL;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	60fb      	str	r3, [r7, #12]

	if ((item == NULL) || (output_buffer == NULL)) {
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d002      	beq.n	8003a6e <print_value+0x1a>
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d101      	bne.n	8003a72 <print_value+0x1e>
		return false;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	e0a1      	b.n	8003bb6 <print_value+0x162>
	}

	switch ((item->type) & 0xFF) {
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	22ff      	movs	r2, #255	; 0xff
 8003a78:	4013      	ands	r3, r2
 8003a7a:	2b80      	cmp	r3, #128	; 0x80
 8003a7c:	d05c      	beq.n	8003b38 <print_value+0xe4>
 8003a7e:	dd00      	ble.n	8003a82 <print_value+0x2e>
 8003a80:	e098      	b.n	8003bb4 <print_value+0x160>
 8003a82:	2b20      	cmp	r3, #32
 8003a84:	dc0a      	bgt.n	8003a9c <print_value+0x48>
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	dc00      	bgt.n	8003a8c <print_value+0x38>
 8003a8a:	e093      	b.n	8003bb4 <print_value+0x160>
 8003a8c:	2b20      	cmp	r3, #32
 8003a8e:	d900      	bls.n	8003a92 <print_value+0x3e>
 8003a90:	e090      	b.n	8003bb4 <print_value+0x160>
 8003a92:	009a      	lsls	r2, r3, #2
 8003a94:	4b4a      	ldr	r3, [pc, #296]	; (8003bc0 <print_value+0x16c>)
 8003a96:	18d3      	adds	r3, r2, r3
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	469f      	mov	pc, r3
 8003a9c:	2b40      	cmp	r3, #64	; 0x40
 8003a9e:	d100      	bne.n	8003aa2 <print_value+0x4e>
 8003aa0:	e080      	b.n	8003ba4 <print_value+0x150>
 8003aa2:	e087      	b.n	8003bb4 <print_value+0x160>
	case cJSON_NULL:
		output = ensure(output_buffer, 5);
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	2105      	movs	r1, #5
 8003aa8:	0018      	movs	r0, r3
 8003aaa:	f7ff fc0d 	bl	80032c8 <ensure>
 8003aae:	0003      	movs	r3, r0
 8003ab0:	60fb      	str	r3, [r7, #12]
		if (output == NULL) {
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d101      	bne.n	8003abc <print_value+0x68>
			return false;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	e07c      	b.n	8003bb6 <print_value+0x162>
		}
		strcpy((char*) output, "null");
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	4b41      	ldr	r3, [pc, #260]	; (8003bc4 <print_value+0x170>)
 8003ac0:	0010      	movs	r0, r2
 8003ac2:	0019      	movs	r1, r3
 8003ac4:	2305      	movs	r3, #5
 8003ac6:	001a      	movs	r2, r3
 8003ac8:	f008 ff3e 	bl	800c948 <memcpy>
		return true;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e072      	b.n	8003bb6 <print_value+0x162>

	case cJSON_False:
		output = ensure(output_buffer, 6);
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	2106      	movs	r1, #6
 8003ad4:	0018      	movs	r0, r3
 8003ad6:	f7ff fbf7 	bl	80032c8 <ensure>
 8003ada:	0003      	movs	r3, r0
 8003adc:	60fb      	str	r3, [r7, #12]
		if (output == NULL) {
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d101      	bne.n	8003ae8 <print_value+0x94>
			return false;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	e066      	b.n	8003bb6 <print_value+0x162>
		}
		strcpy((char*) output, "false");
 8003ae8:	68fa      	ldr	r2, [r7, #12]
 8003aea:	4b37      	ldr	r3, [pc, #220]	; (8003bc8 <print_value+0x174>)
 8003aec:	0010      	movs	r0, r2
 8003aee:	0019      	movs	r1, r3
 8003af0:	2306      	movs	r3, #6
 8003af2:	001a      	movs	r2, r3
 8003af4:	f008 ff28 	bl	800c948 <memcpy>
		return true;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e05c      	b.n	8003bb6 <print_value+0x162>

	case cJSON_True:
		output = ensure(output_buffer, 5);
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	2105      	movs	r1, #5
 8003b00:	0018      	movs	r0, r3
 8003b02:	f7ff fbe1 	bl	80032c8 <ensure>
 8003b06:	0003      	movs	r3, r0
 8003b08:	60fb      	str	r3, [r7, #12]
		if (output == NULL) {
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d101      	bne.n	8003b14 <print_value+0xc0>
			return false;
 8003b10:	2300      	movs	r3, #0
 8003b12:	e050      	b.n	8003bb6 <print_value+0x162>
		}
		strcpy((char*) output, "true");
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	4b2d      	ldr	r3, [pc, #180]	; (8003bcc <print_value+0x178>)
 8003b18:	0010      	movs	r0, r2
 8003b1a:	0019      	movs	r1, r3
 8003b1c:	2305      	movs	r3, #5
 8003b1e:	001a      	movs	r2, r3
 8003b20:	f008 ff12 	bl	800c948 <memcpy>
		return true;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e046      	b.n	8003bb6 <print_value+0x162>

	case cJSON_Number:
		return print_number(item, output_buffer);
 8003b28:	683a      	ldr	r2, [r7, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	0011      	movs	r1, r2
 8003b2e:	0018      	movs	r0, r3
 8003b30:	f7ff fcda 	bl	80034e8 <print_number>
 8003b34:	0003      	movs	r3, r0
 8003b36:	e03e      	b.n	8003bb6 <print_value+0x162>

	case cJSON_Raw: {
		size_t raw_length = 0;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	60bb      	str	r3, [r7, #8]
		if (item->valuestring == NULL) {
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d101      	bne.n	8003b48 <print_value+0xf4>
			return false;
 8003b44:	2300      	movs	r3, #0
 8003b46:	e036      	b.n	8003bb6 <print_value+0x162>
		}

		raw_length = strlen(item->valuestring) + sizeof("");
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	0018      	movs	r0, r3
 8003b4e:	f7fc fadb 	bl	8000108 <strlen>
 8003b52:	0003      	movs	r3, r0
 8003b54:	3301      	adds	r3, #1
 8003b56:	60bb      	str	r3, [r7, #8]
		output = ensure(output_buffer, raw_length);
 8003b58:	68ba      	ldr	r2, [r7, #8]
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	0011      	movs	r1, r2
 8003b5e:	0018      	movs	r0, r3
 8003b60:	f7ff fbb2 	bl	80032c8 <ensure>
 8003b64:	0003      	movs	r3, r0
 8003b66:	60fb      	str	r3, [r7, #12]
		if (output == NULL) {
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d101      	bne.n	8003b72 <print_value+0x11e>
			return false;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	e021      	b.n	8003bb6 <print_value+0x162>
		}
		memcpy(output, item->valuestring, raw_length);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6919      	ldr	r1, [r3, #16]
 8003b76:	68ba      	ldr	r2, [r7, #8]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	0018      	movs	r0, r3
 8003b7c:	f008 fee4 	bl	800c948 <memcpy>
		return true;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e018      	b.n	8003bb6 <print_value+0x162>
	}

	case cJSON_String:
		return print_string(item, output_buffer);
 8003b84:	683a      	ldr	r2, [r7, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	0011      	movs	r1, r2
 8003b8a:	0018      	movs	r0, r3
 8003b8c:	f7ff fe9c 	bl	80038c8 <print_string>
 8003b90:	0003      	movs	r3, r0
 8003b92:	e010      	b.n	8003bb6 <print_value+0x162>

	case cJSON_Array:
		return print_array(item, output_buffer);
 8003b94:	683a      	ldr	r2, [r7, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	0011      	movs	r1, r2
 8003b9a:	0018      	movs	r0, r3
 8003b9c:	f000 f818 	bl	8003bd0 <print_array>
 8003ba0:	0003      	movs	r3, r0
 8003ba2:	e008      	b.n	8003bb6 <print_value+0x162>

	case cJSON_Object:
		return print_object(item, output_buffer);
 8003ba4:	683a      	ldr	r2, [r7, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	0011      	movs	r1, r2
 8003baa:	0018      	movs	r0, r3
 8003bac:	f000 f89e 	bl	8003cec <print_object>
 8003bb0:	0003      	movs	r3, r0
 8003bb2:	e000      	b.n	8003bb6 <print_value+0x162>

	default:
		return false;
 8003bb4:	2300      	movs	r3, #0
	}
}
 8003bb6:	0018      	movs	r0, r3
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	b004      	add	sp, #16
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	46c0      	nop			; (mov r8, r8)
 8003bc0:	0800fd1c 	.word	0x0800fd1c
 8003bc4:	0800fa3c 	.word	0x0800fa3c
 8003bc8:	0800fa6c 	.word	0x0800fa6c
 8003bcc:	0800fa74 	.word	0x0800fa74

08003bd0 <print_array>:
	return false;
}

/* Render an array to text */
static cJSON_bool print_array(const cJSON *const item,
		printbuffer *const output_buffer) {
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b086      	sub	sp, #24
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
	unsigned char *output_pointer = NULL;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	617b      	str	r3, [r7, #20]
	size_t length = 0;
 8003bde:	2300      	movs	r3, #0
 8003be0:	60fb      	str	r3, [r7, #12]
	cJSON *current_element = item->child;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	613b      	str	r3, [r7, #16]

	if (output_buffer == NULL) {
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d101      	bne.n	8003bf2 <print_array+0x22>
		return false;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	e078      	b.n	8003ce4 <print_array+0x114>
	}

	/* Compose the output array. */
	/* opening square bracket */
	output_pointer = ensure(output_buffer, 1);
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	2101      	movs	r1, #1
 8003bf6:	0018      	movs	r0, r3
 8003bf8:	f7ff fb66 	bl	80032c8 <ensure>
 8003bfc:	0003      	movs	r3, r0
 8003bfe:	617b      	str	r3, [r7, #20]
	if (output_pointer == NULL) {
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <print_array+0x3a>
		return false;
 8003c06:	2300      	movs	r3, #0
 8003c08:	e06c      	b.n	8003ce4 <print_array+0x114>
	}

	*output_pointer = '[';
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	225b      	movs	r2, #91	; 0x5b
 8003c0e:	701a      	strb	r2, [r3, #0]
	output_buffer->offset++;
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	1c5a      	adds	r2, r3, #1
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	609a      	str	r2, [r3, #8]
	output_buffer->depth++;
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	1c5a      	adds	r2, r3, #1
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	60da      	str	r2, [r3, #12]

	while (current_element != NULL) {
 8003c24:	e041      	b.n	8003caa <print_array+0xda>
		if (!print_value(current_element, output_buffer)) {
 8003c26:	683a      	ldr	r2, [r7, #0]
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	0011      	movs	r1, r2
 8003c2c:	0018      	movs	r0, r3
 8003c2e:	f7ff ff11 	bl	8003a54 <print_value>
 8003c32:	1e03      	subs	r3, r0, #0
 8003c34:	d101      	bne.n	8003c3a <print_array+0x6a>
			return false;
 8003c36:	2300      	movs	r3, #0
 8003c38:	e054      	b.n	8003ce4 <print_array+0x114>
		}
		update_offset(output_buffer);
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	0018      	movs	r0, r3
 8003c3e:	f7ff fbe3 	bl	8003408 <update_offset>
		if (current_element->next) {
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d02c      	beq.n	8003ca4 <print_array+0xd4>
			length = (size_t) (output_buffer->format ? 2 : 1);
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d001      	beq.n	8003c56 <print_array+0x86>
 8003c52:	2302      	movs	r3, #2
 8003c54:	e000      	b.n	8003c58 <print_array+0x88>
 8003c56:	2301      	movs	r3, #1
 8003c58:	60fb      	str	r3, [r7, #12]
			output_pointer = ensure(output_buffer, length + 1);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	1c5a      	adds	r2, r3, #1
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	0011      	movs	r1, r2
 8003c62:	0018      	movs	r0, r3
 8003c64:	f7ff fb30 	bl	80032c8 <ensure>
 8003c68:	0003      	movs	r3, r0
 8003c6a:	617b      	str	r3, [r7, #20]
			if (output_pointer == NULL) {
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d101      	bne.n	8003c76 <print_array+0xa6>
				return false;
 8003c72:	2300      	movs	r3, #0
 8003c74:	e036      	b.n	8003ce4 <print_array+0x114>
			}
			*output_pointer++ = ',';
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	1c5a      	adds	r2, r3, #1
 8003c7a:	617a      	str	r2, [r7, #20]
 8003c7c:	222c      	movs	r2, #44	; 0x2c
 8003c7e:	701a      	strb	r2, [r3, #0]
			if (output_buffer->format) {
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	695b      	ldr	r3, [r3, #20]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d004      	beq.n	8003c92 <print_array+0xc2>
				*output_pointer++ = ' ';
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	1c5a      	adds	r2, r3, #1
 8003c8c:	617a      	str	r2, [r7, #20]
 8003c8e:	2220      	movs	r2, #32
 8003c90:	701a      	strb	r2, [r3, #0]
			}
			*output_pointer = '\0';
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	2200      	movs	r2, #0
 8003c96:	701a      	strb	r2, [r3, #0]
			output_buffer->offset += length;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	689a      	ldr	r2, [r3, #8]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	18d2      	adds	r2, r2, r3
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	609a      	str	r2, [r3, #8]
		}
		current_element = current_element->next;
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	613b      	str	r3, [r7, #16]
	while (current_element != NULL) {
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d1ba      	bne.n	8003c26 <print_array+0x56>
	}

	output_pointer = ensure(output_buffer, 2);
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	2102      	movs	r1, #2
 8003cb4:	0018      	movs	r0, r3
 8003cb6:	f7ff fb07 	bl	80032c8 <ensure>
 8003cba:	0003      	movs	r3, r0
 8003cbc:	617b      	str	r3, [r7, #20]
	if (output_pointer == NULL) {
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d101      	bne.n	8003cc8 <print_array+0xf8>
		return false;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	e00d      	b.n	8003ce4 <print_array+0x114>
	}
	*output_pointer++ = ']';
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	1c5a      	adds	r2, r3, #1
 8003ccc:	617a      	str	r2, [r7, #20]
 8003cce:	225d      	movs	r2, #93	; 0x5d
 8003cd0:	701a      	strb	r2, [r3, #0]
	*output_pointer = '\0';
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	701a      	strb	r2, [r3, #0]
	output_buffer->depth--;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	1e5a      	subs	r2, r3, #1
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	60da      	str	r2, [r3, #12]

	return true;
 8003ce2:	2301      	movs	r3, #1
}
 8003ce4:	0018      	movs	r0, r3
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	b006      	add	sp, #24
 8003cea:	bd80      	pop	{r7, pc}

08003cec <print_object>:
	return false;
}

/* Render an object to text. */
static cJSON_bool print_object(const cJSON *const item,
		printbuffer *const output_buffer) {
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b088      	sub	sp, #32
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
	unsigned char *output_pointer = NULL;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	61fb      	str	r3, [r7, #28]
	size_t length = 0;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	60fb      	str	r3, [r7, #12]
	cJSON *current_item = item->child;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	61bb      	str	r3, [r7, #24]

	if (output_buffer == NULL) {
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d101      	bne.n	8003d0e <print_object+0x22>
		return false;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	e116      	b.n	8003f3c <print_object+0x250>
	}

	/* Compose the output: */
	length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d001      	beq.n	8003d1a <print_object+0x2e>
 8003d16:	2302      	movs	r3, #2
 8003d18:	e000      	b.n	8003d1c <print_object+0x30>
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	60fb      	str	r3, [r7, #12]
	output_pointer = ensure(output_buffer, length + 1);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	1c5a      	adds	r2, r3, #1
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	0011      	movs	r1, r2
 8003d26:	0018      	movs	r0, r3
 8003d28:	f7ff face 	bl	80032c8 <ensure>
 8003d2c:	0003      	movs	r3, r0
 8003d2e:	61fb      	str	r3, [r7, #28]
	if (output_pointer == NULL) {
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d101      	bne.n	8003d3a <print_object+0x4e>
		return false;
 8003d36:	2300      	movs	r3, #0
 8003d38:	e100      	b.n	8003f3c <print_object+0x250>
	}

	*output_pointer++ = '{';
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	1c5a      	adds	r2, r3, #1
 8003d3e:	61fa      	str	r2, [r7, #28]
 8003d40:	227b      	movs	r2, #123	; 0x7b
 8003d42:	701a      	strb	r2, [r3, #0]
	output_buffer->depth++;
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	1c5a      	adds	r2, r3, #1
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	60da      	str	r2, [r3, #12]
	if (output_buffer->format) {
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	695b      	ldr	r3, [r3, #20]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d004      	beq.n	8003d60 <print_object+0x74>
		*output_pointer++ = '\n';
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	1c5a      	adds	r2, r3, #1
 8003d5a:	61fa      	str	r2, [r7, #28]
 8003d5c:	220a      	movs	r2, #10
 8003d5e:	701a      	strb	r2, [r3, #0]
	}
	output_buffer->offset += length;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	689a      	ldr	r2, [r3, #8]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	18d2      	adds	r2, r2, r3
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	609a      	str	r2, [r3, #8]

	while (current_item) {
 8003d6c:	e0aa      	b.n	8003ec4 <print_object+0x1d8>
		if (output_buffer->format) {
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d024      	beq.n	8003dc0 <print_object+0xd4>
			size_t i;
			output_pointer = ensure(output_buffer, output_buffer->depth);
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	68da      	ldr	r2, [r3, #12]
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	0011      	movs	r1, r2
 8003d7e:	0018      	movs	r0, r3
 8003d80:	f7ff faa2 	bl	80032c8 <ensure>
 8003d84:	0003      	movs	r3, r0
 8003d86:	61fb      	str	r3, [r7, #28]
			if (output_pointer == NULL) {
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d101      	bne.n	8003d92 <print_object+0xa6>
				return false;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	e0d4      	b.n	8003f3c <print_object+0x250>
			}
			for (i = 0; i < output_buffer->depth; i++) {
 8003d92:	2300      	movs	r3, #0
 8003d94:	617b      	str	r3, [r7, #20]
 8003d96:	e007      	b.n	8003da8 <print_object+0xbc>
				*output_pointer++ = '\t';
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	1c5a      	adds	r2, r3, #1
 8003d9c:	61fa      	str	r2, [r7, #28]
 8003d9e:	2209      	movs	r2, #9
 8003da0:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < output_buffer->depth; i++) {
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	3301      	adds	r3, #1
 8003da6:	617b      	str	r3, [r7, #20]
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	697a      	ldr	r2, [r7, #20]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d3f2      	bcc.n	8003d98 <print_object+0xac>
			}
			output_buffer->offset += output_buffer->depth;
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	689a      	ldr	r2, [r3, #8]
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	18d2      	adds	r2, r2, r3
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	609a      	str	r2, [r3, #8]
		}

		/* print key */
		if (!print_string_ptr((unsigned char*) current_item->string,
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	6a1b      	ldr	r3, [r3, #32]
 8003dc4:	683a      	ldr	r2, [r7, #0]
 8003dc6:	0011      	movs	r1, r2
 8003dc8:	0018      	movs	r0, r3
 8003dca:	f7ff fc7b 	bl	80036c4 <print_string_ptr>
 8003dce:	1e03      	subs	r3, r0, #0
 8003dd0:	d101      	bne.n	8003dd6 <print_object+0xea>
				output_buffer)) {
			return false;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	e0b2      	b.n	8003f3c <print_object+0x250>
		}
		update_offset(output_buffer);
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	0018      	movs	r0, r3
 8003dda:	f7ff fb15 	bl	8003408 <update_offset>

		length = (size_t) (output_buffer->format ? 2 : 1);
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d001      	beq.n	8003dea <print_object+0xfe>
 8003de6:	2302      	movs	r3, #2
 8003de8:	e000      	b.n	8003dec <print_object+0x100>
 8003dea:	2301      	movs	r3, #1
 8003dec:	60fb      	str	r3, [r7, #12]
		output_pointer = ensure(output_buffer, length);
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	0011      	movs	r1, r2
 8003df4:	0018      	movs	r0, r3
 8003df6:	f7ff fa67 	bl	80032c8 <ensure>
 8003dfa:	0003      	movs	r3, r0
 8003dfc:	61fb      	str	r3, [r7, #28]
		if (output_pointer == NULL) {
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d101      	bne.n	8003e08 <print_object+0x11c>
			return false;
 8003e04:	2300      	movs	r3, #0
 8003e06:	e099      	b.n	8003f3c <print_object+0x250>
		}
		*output_pointer++ = ':';
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	1c5a      	adds	r2, r3, #1
 8003e0c:	61fa      	str	r2, [r7, #28]
 8003e0e:	223a      	movs	r2, #58	; 0x3a
 8003e10:	701a      	strb	r2, [r3, #0]
		if (output_buffer->format) {
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d004      	beq.n	8003e24 <print_object+0x138>
			*output_pointer++ = '\t';
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	1c5a      	adds	r2, r3, #1
 8003e1e:	61fa      	str	r2, [r7, #28]
 8003e20:	2209      	movs	r2, #9
 8003e22:	701a      	strb	r2, [r3, #0]
		}
		output_buffer->offset += length;
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	689a      	ldr	r2, [r3, #8]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	18d2      	adds	r2, r2, r3
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	609a      	str	r2, [r3, #8]

		/* print value */
		if (!print_value(current_item, output_buffer)) {
 8003e30:	683a      	ldr	r2, [r7, #0]
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	0011      	movs	r1, r2
 8003e36:	0018      	movs	r0, r3
 8003e38:	f7ff fe0c 	bl	8003a54 <print_value>
 8003e3c:	1e03      	subs	r3, r0, #0
 8003e3e:	d101      	bne.n	8003e44 <print_object+0x158>
			return false;
 8003e40:	2300      	movs	r3, #0
 8003e42:	e07b      	b.n	8003f3c <print_object+0x250>
		}
		update_offset(output_buffer);
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	0018      	movs	r0, r3
 8003e48:	f7ff fade 	bl	8003408 <update_offset>

		/* print comma if not last */
		length = ((size_t) (output_buffer->format ? 1 : 0)
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	695b      	ldr	r3, [r3, #20]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d001      	beq.n	8003e58 <print_object+0x16c>
 8003e54:	2201      	movs	r2, #1
 8003e56:	e000      	b.n	8003e5a <print_object+0x16e>
 8003e58:	2200      	movs	r2, #0
				+ (size_t) (current_item->next ? 1 : 0));
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d001      	beq.n	8003e66 <print_object+0x17a>
 8003e62:	2301      	movs	r3, #1
 8003e64:	e000      	b.n	8003e68 <print_object+0x17c>
 8003e66:	2300      	movs	r3, #0
		length = ((size_t) (output_buffer->format ? 1 : 0)
 8003e68:	18d3      	adds	r3, r2, r3
 8003e6a:	60fb      	str	r3, [r7, #12]
		output_pointer = ensure(output_buffer, length + 1);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	1c5a      	adds	r2, r3, #1
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	0011      	movs	r1, r2
 8003e74:	0018      	movs	r0, r3
 8003e76:	f7ff fa27 	bl	80032c8 <ensure>
 8003e7a:	0003      	movs	r3, r0
 8003e7c:	61fb      	str	r3, [r7, #28]
		if (output_pointer == NULL) {
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d101      	bne.n	8003e88 <print_object+0x19c>
			return false;
 8003e84:	2300      	movs	r3, #0
 8003e86:	e059      	b.n	8003f3c <print_object+0x250>
		}
		if (current_item->next) {
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d004      	beq.n	8003e9a <print_object+0x1ae>
			*output_pointer++ = ',';
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	1c5a      	adds	r2, r3, #1
 8003e94:	61fa      	str	r2, [r7, #28]
 8003e96:	222c      	movs	r2, #44	; 0x2c
 8003e98:	701a      	strb	r2, [r3, #0]
		}

		if (output_buffer->format) {
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	695b      	ldr	r3, [r3, #20]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d004      	beq.n	8003eac <print_object+0x1c0>
			*output_pointer++ = '\n';
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	1c5a      	adds	r2, r3, #1
 8003ea6:	61fa      	str	r2, [r7, #28]
 8003ea8:	220a      	movs	r2, #10
 8003eaa:	701a      	strb	r2, [r3, #0]
		}
		*output_pointer = '\0';
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	701a      	strb	r2, [r3, #0]
		output_buffer->offset += length;
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	689a      	ldr	r2, [r3, #8]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	18d2      	adds	r2, r2, r3
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	609a      	str	r2, [r3, #8]

		current_item = current_item->next;
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	61bb      	str	r3, [r7, #24]
	while (current_item) {
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d000      	beq.n	8003ecc <print_object+0x1e0>
 8003eca:	e750      	b.n	8003d6e <print_object+0x82>
	}

	output_pointer = ensure(output_buffer,
			output_buffer->format ? (output_buffer->depth + 1) : 2);
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	695b      	ldr	r3, [r3, #20]
	output_pointer = ensure(output_buffer,
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d003      	beq.n	8003edc <print_object+0x1f0>
			output_buffer->format ? (output_buffer->depth + 1) : 2);
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	68db      	ldr	r3, [r3, #12]
	output_pointer = ensure(output_buffer,
 8003ed8:	3301      	adds	r3, #1
 8003eda:	e000      	b.n	8003ede <print_object+0x1f2>
 8003edc:	2302      	movs	r3, #2
 8003ede:	683a      	ldr	r2, [r7, #0]
 8003ee0:	0019      	movs	r1, r3
 8003ee2:	0010      	movs	r0, r2
 8003ee4:	f7ff f9f0 	bl	80032c8 <ensure>
 8003ee8:	0003      	movs	r3, r0
 8003eea:	61fb      	str	r3, [r7, #28]
	if (output_pointer == NULL) {
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d101      	bne.n	8003ef6 <print_object+0x20a>
		return false;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	e022      	b.n	8003f3c <print_object+0x250>
	}
	if (output_buffer->format) {
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d010      	beq.n	8003f20 <print_object+0x234>
		size_t i;
		for (i = 0; i < (output_buffer->depth - 1); i++) {
 8003efe:	2300      	movs	r3, #0
 8003f00:	613b      	str	r3, [r7, #16]
 8003f02:	e007      	b.n	8003f14 <print_object+0x228>
			*output_pointer++ = '\t';
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	1c5a      	adds	r2, r3, #1
 8003f08:	61fa      	str	r2, [r7, #28]
 8003f0a:	2209      	movs	r2, #9
 8003f0c:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < (output_buffer->depth - 1); i++) {
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	3301      	adds	r3, #1
 8003f12:	613b      	str	r3, [r7, #16]
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d3f1      	bcc.n	8003f04 <print_object+0x218>
		}
	}
	*output_pointer++ = '}';
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	1c5a      	adds	r2, r3, #1
 8003f24:	61fa      	str	r2, [r7, #28]
 8003f26:	227d      	movs	r2, #125	; 0x7d
 8003f28:	701a      	strb	r2, [r3, #0]
	*output_pointer = '\0';
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	701a      	strb	r2, [r3, #0]
	output_buffer->depth--;
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	1e5a      	subs	r2, r3, #1
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	60da      	str	r2, [r3, #12]

	return true;
 8003f3a:	2301      	movs	r3, #1
}
 8003f3c:	0018      	movs	r0, r3
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	b008      	add	sp, #32
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <suffix_object>:
		const char *string) {
	return cJSON_GetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(cJSON *prev, cJSON *item) {
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
	prev->next = item;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	683a      	ldr	r2, [r7, #0]
 8003f52:	601a      	str	r2, [r3, #0]
	item->prev = prev;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	605a      	str	r2, [r3, #4]
}
 8003f5a:	46c0      	nop			; (mov r8, r8)
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	b002      	add	sp, #8
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <add_item_to_array>:
	reference->type |= cJSON_IsReference;
	reference->next = reference->prev = NULL;
	return reference;
}

static cJSON_bool add_item_to_array(cJSON *array, cJSON *item) {
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b084      	sub	sp, #16
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
 8003f6a:	6039      	str	r1, [r7, #0]
	cJSON *child = NULL;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	60fb      	str	r3, [r7, #12]

	if ((item == NULL) || (array == NULL) || (array == item)) {
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d006      	beq.n	8003f84 <add_item_to_array+0x22>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d003      	beq.n	8003f84 <add_item_to_array+0x22>
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d101      	bne.n	8003f88 <add_item_to_array+0x26>
		return false;
 8003f84:	2300      	movs	r3, #0
 8003f86:	e01f      	b.n	8003fc8 <add_item_to_array+0x66>
	}

	child = array->child;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	60fb      	str	r3, [r7, #12]
	/*
	 * To find the last item in array quickly, we use prev in array
	 */
	if (child == NULL) {
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d109      	bne.n	8003fa8 <add_item_to_array+0x46>
		/* list is empty, start new one */
		array->child = item;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	683a      	ldr	r2, [r7, #0]
 8003f98:	609a      	str	r2, [r3, #8]
		item->prev = item;
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	683a      	ldr	r2, [r7, #0]
 8003f9e:	605a      	str	r2, [r3, #4]
		item->next = NULL;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	601a      	str	r2, [r3, #0]
 8003fa6:	e00e      	b.n	8003fc6 <add_item_to_array+0x64>
	} else {
		/* append to the end */
		if (child->prev) {
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00a      	beq.n	8003fc6 <add_item_to_array+0x64>
			suffix_object(child->prev, item);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	683a      	ldr	r2, [r7, #0]
 8003fb6:	0011      	movs	r1, r2
 8003fb8:	0018      	movs	r0, r3
 8003fba:	f7ff ffc3 	bl	8003f44 <suffix_object>
			array->child->prev = item;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	683a      	ldr	r2, [r7, #0]
 8003fc4:	605a      	str	r2, [r3, #4]
		}
	}

	return true;
 8003fc6:	2301      	movs	r3, #1
}
 8003fc8:	0018      	movs	r0, r3
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	b004      	add	sp, #16
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <cast_away_const>:
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void* cast_away_const(const void *string) {
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
	return (void*) string;
 8003fd8:	687b      	ldr	r3, [r7, #4]
}
 8003fda:	0018      	movs	r0, r3
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	b002      	add	sp, #8
 8003fe0:	bd80      	pop	{r7, pc}
	...

08003fe4 <add_item_to_object>:
#pragma GCC diagnostic pop
#endif

static cJSON_bool add_item_to_object(cJSON *const object,
		const char *const string, cJSON *const item,
		const internal_hooks *const hooks, const cJSON_bool constant_key) {
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b086      	sub	sp, #24
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
 8003ff0:	603b      	str	r3, [r7, #0]
	char *new_key = NULL;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	617b      	str	r3, [r7, #20]
	int new_type = cJSON_Invalid;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	613b      	str	r3, [r7, #16]

	if ((object == NULL) || (string == NULL) || (item == NULL)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d009      	beq.n	8004014 <add_item_to_object+0x30>
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d006      	beq.n	8004014 <add_item_to_object+0x30>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d003      	beq.n	8004014 <add_item_to_object+0x30>
			|| (object == item)) {
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	429a      	cmp	r2, r3
 8004012:	d101      	bne.n	8004018 <add_item_to_object+0x34>
		return false;
 8004014:	2300      	movs	r3, #0
 8004016:	e03e      	b.n	8004096 <add_item_to_object+0xb2>
	}

	if (constant_key) {
 8004018:	6a3b      	ldr	r3, [r7, #32]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00c      	beq.n	8004038 <add_item_to_object+0x54>
		new_key = (char*) cast_away_const(string);
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	0018      	movs	r0, r3
 8004022:	f7ff ffd5 	bl	8003fd0 <cast_away_const>
 8004026:	0003      	movs	r3, r0
 8004028:	617b      	str	r3, [r7, #20]
		new_type = item->type | cJSON_StringIsConst;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	2280      	movs	r2, #128	; 0x80
 8004030:	0092      	lsls	r2, r2, #2
 8004032:	4313      	orrs	r3, r2
 8004034:	613b      	str	r3, [r7, #16]
 8004036:	e011      	b.n	800405c <add_item_to_object+0x78>
	} else {
		new_key = (char*) cJSON_strdup((const unsigned char*) string, hooks);
 8004038:	683a      	ldr	r2, [r7, #0]
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	0011      	movs	r1, r2
 800403e:	0018      	movs	r0, r3
 8004040:	f7ff f8a8 	bl	8003194 <cJSON_strdup>
 8004044:	0003      	movs	r3, r0
 8004046:	617b      	str	r3, [r7, #20]
		if (new_key == NULL) {
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d101      	bne.n	8004052 <add_item_to_object+0x6e>
			return false;
 800404e:	2300      	movs	r3, #0
 8004050:	e021      	b.n	8004096 <add_item_to_object+0xb2>
		}

		new_type = item->type & ~cJSON_StringIsConst;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	4a12      	ldr	r2, [pc, #72]	; (80040a0 <add_item_to_object+0xbc>)
 8004058:	4013      	ands	r3, r2
 800405a:	613b      	str	r3, [r7, #16]
	}

	if (!(item->type & cJSON_StringIsConst) && (item->string != NULL)) {
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	68da      	ldr	r2, [r3, #12]
 8004060:	2380      	movs	r3, #128	; 0x80
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	4013      	ands	r3, r2
 8004066:	d109      	bne.n	800407c <add_item_to_object+0x98>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a1b      	ldr	r3, [r3, #32]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d005      	beq.n	800407c <add_item_to_object+0x98>
		hooks->deallocate(item->string);
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	685a      	ldr	r2, [r3, #4]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a1b      	ldr	r3, [r3, #32]
 8004078:	0018      	movs	r0, r3
 800407a:	4790      	blx	r2
	}

	item->string = new_key;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	697a      	ldr	r2, [r7, #20]
 8004080:	621a      	str	r2, [r3, #32]
	item->type = new_type;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	60da      	str	r2, [r3, #12]

	return add_item_to_array(object, item);
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	0011      	movs	r1, r2
 800408e:	0018      	movs	r0, r3
 8004090:	f7ff ff67 	bl	8003f62 <add_item_to_array>
 8004094:	0003      	movs	r3, r0
}
 8004096:	0018      	movs	r0, r3
 8004098:	46bd      	mov	sp, r7
 800409a:	b006      	add	sp, #24
 800409c:	bd80      	pop	{r7, pc}
 800409e:	46c0      	nop			; (mov r8, r8)
 80040a0:	fffffdff 	.word	0xfffffdff

080040a4 <cJSON_AddNumberToObject>:
	cJSON_Delete(bool_item);
	return NULL;
}

CJSON_PUBLIC(cJSON*) cJSON_AddNumberToObject(cJSON *const object,
		const char *const name, const double number) {
 80040a4:	b590      	push	{r4, r7, lr}
 80040a6:	b089      	sub	sp, #36	; 0x24
 80040a8:	af02      	add	r7, sp, #8
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	603a      	str	r2, [r7, #0]
 80040b0:	607b      	str	r3, [r7, #4]
	cJSON *number_item = cJSON_CreateNumber(number);
 80040b2:	683a      	ldr	r2, [r7, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	0010      	movs	r0, r2
 80040b8:	0019      	movs	r1, r3
 80040ba:	f000 f819 	bl	80040f0 <cJSON_CreateNumber>
 80040be:	0003      	movs	r3, r0
 80040c0:	617b      	str	r3, [r7, #20]
	if (add_item_to_object(object, name, number_item, &global_hooks, false)) {
 80040c2:	4b0a      	ldr	r3, [pc, #40]	; (80040ec <cJSON_AddNumberToObject+0x48>)
 80040c4:	697a      	ldr	r2, [r7, #20]
 80040c6:	68b9      	ldr	r1, [r7, #8]
 80040c8:	68f8      	ldr	r0, [r7, #12]
 80040ca:	2400      	movs	r4, #0
 80040cc:	9400      	str	r4, [sp, #0]
 80040ce:	f7ff ff89 	bl	8003fe4 <add_item_to_object>
 80040d2:	1e03      	subs	r3, r0, #0
 80040d4:	d001      	beq.n	80040da <cJSON_AddNumberToObject+0x36>
		return number_item;
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	e004      	b.n	80040e4 <cJSON_AddNumberToObject+0x40>
	}

	cJSON_Delete(number_item);
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	0018      	movs	r0, r3
 80040de:	f7ff f89d 	bl	800321c <cJSON_Delete>
	return NULL;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	0018      	movs	r0, r3
 80040e6:	46bd      	mov	sp, r7
 80040e8:	b007      	add	sp, #28
 80040ea:	bd90      	pop	{r4, r7, pc}
 80040ec:	20000000 	.word	0x20000000

080040f0 <cJSON_CreateNumber>:
	}

	return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num) {
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6038      	str	r0, [r7, #0]
 80040f8:	6079      	str	r1, [r7, #4]
	cJSON *item = cJSON_New_Item(&global_hooks);
 80040fa:	4b1b      	ldr	r3, [pc, #108]	; (8004168 <cJSON_CreateNumber+0x78>)
 80040fc:	0018      	movs	r0, r3
 80040fe:	f7ff f875 	bl	80031ec <cJSON_New_Item>
 8004102:	0003      	movs	r3, r0
 8004104:	60fb      	str	r3, [r7, #12]
	if (item) {
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d027      	beq.n	800415c <cJSON_CreateNumber+0x6c>
		item->type = cJSON_Number;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2208      	movs	r2, #8
 8004110:	60da      	str	r2, [r3, #12]
		item->valuedouble = num;
 8004112:	68f9      	ldr	r1, [r7, #12]
 8004114:	683a      	ldr	r2, [r7, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	618a      	str	r2, [r1, #24]
 800411a:	61cb      	str	r3, [r1, #28]

		/* use saturation in case of overflow */
		if (num >= INT_MAX) {
 800411c:	4a13      	ldr	r2, [pc, #76]	; (800416c <cJSON_CreateNumber+0x7c>)
 800411e:	4b14      	ldr	r3, [pc, #80]	; (8004170 <cJSON_CreateNumber+0x80>)
 8004120:	6838      	ldr	r0, [r7, #0]
 8004122:	6879      	ldr	r1, [r7, #4]
 8004124:	f7fc f9b6 	bl	8000494 <__aeabi_dcmpge>
 8004128:	1e03      	subs	r3, r0, #0
 800412a:	d003      	beq.n	8004134 <cJSON_CreateNumber+0x44>
			item->valueint = INT_MAX;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	4a11      	ldr	r2, [pc, #68]	; (8004174 <cJSON_CreateNumber+0x84>)
 8004130:	615a      	str	r2, [r3, #20]
 8004132:	e013      	b.n	800415c <cJSON_CreateNumber+0x6c>
		} else if (num <= (double) INT_MIN) {
 8004134:	2200      	movs	r2, #0
 8004136:	4b10      	ldr	r3, [pc, #64]	; (8004178 <cJSON_CreateNumber+0x88>)
 8004138:	6838      	ldr	r0, [r7, #0]
 800413a:	6879      	ldr	r1, [r7, #4]
 800413c:	f7fc f996 	bl	800046c <__aeabi_dcmple>
 8004140:	1e03      	subs	r3, r0, #0
 8004142:	d004      	beq.n	800414e <cJSON_CreateNumber+0x5e>
			item->valueint = INT_MIN;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2280      	movs	r2, #128	; 0x80
 8004148:	0612      	lsls	r2, r2, #24
 800414a:	615a      	str	r2, [r3, #20]
 800414c:	e006      	b.n	800415c <cJSON_CreateNumber+0x6c>
		} else {
			item->valueint = (int) num;
 800414e:	6838      	ldr	r0, [r7, #0]
 8004150:	6879      	ldr	r1, [r7, #4]
 8004152:	f7fe fe9b 	bl	8002e8c <__aeabi_d2iz>
 8004156:	0002      	movs	r2, r0
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	615a      	str	r2, [r3, #20]
		}
	}

	return item;
 800415c:	68fb      	ldr	r3, [r7, #12]
}
 800415e:	0018      	movs	r0, r3
 8004160:	46bd      	mov	sp, r7
 8004162:	b004      	add	sp, #16
 8004164:	bd80      	pop	{r7, pc}
 8004166:	46c0      	nop			; (mov r8, r8)
 8004168:	20000000 	.word	0x20000000
 800416c:	ffc00000 	.word	0xffc00000
 8004170:	41dfffff 	.word	0x41dfffff
 8004174:	7fffffff 	.word	0x7fffffff
 8004178:	c1e00000 	.word	0xc1e00000

0800417c <cJSON_CreateObject>:
	}

	return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void) {
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
	cJSON *item = cJSON_New_Item(&global_hooks);
 8004182:	4b08      	ldr	r3, [pc, #32]	; (80041a4 <cJSON_CreateObject+0x28>)
 8004184:	0018      	movs	r0, r3
 8004186:	f7ff f831 	bl	80031ec <cJSON_New_Item>
 800418a:	0003      	movs	r3, r0
 800418c:	607b      	str	r3, [r7, #4]
	if (item) {
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d002      	beq.n	800419a <cJSON_CreateObject+0x1e>
		item->type = cJSON_Object;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2240      	movs	r2, #64	; 0x40
 8004198:	60da      	str	r2, [r3, #12]
	}

	return item;
 800419a:	687b      	ldr	r3, [r7, #4]
}
 800419c:	0018      	movs	r0, r3
 800419e:	46bd      	mov	sp, r7
 80041a0:	b002      	add	sp, #8
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	20000000 	.word	0x20000000

080041a8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80041ac:	f3bf 8f4f 	dsb	sy
}
 80041b0:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041b2:	4b04      	ldr	r3, [pc, #16]	; (80041c4 <__NVIC_SystemReset+0x1c>)
 80041b4:	4a04      	ldr	r2, [pc, #16]	; (80041c8 <__NVIC_SystemReset+0x20>)
 80041b6:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80041b8:	f3bf 8f4f 	dsb	sy
}
 80041bc:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80041be:	46c0      	nop			; (mov r8, r8)
 80041c0:	e7fd      	b.n	80041be <__NVIC_SystemReset+0x16>
 80041c2:	46c0      	nop			; (mov r8, r8)
 80041c4:	e000ed00 	.word	0xe000ed00
 80041c8:	05fa0004 	.word	0x05fa0004

080041cc <read_niubol_7>:
	HAL_UART_Transmit(&huart4, data, 8, 2000);
}
void read_rk500_02(uint8_t *data) {
	HAL_UART_Transmit(&huart4, data, 8, 2000);
}
void read_niubol_7(uint8_t *data) {
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart4, data, 9, 2000);
 80041d4:	23fa      	movs	r3, #250	; 0xfa
 80041d6:	00db      	lsls	r3, r3, #3
 80041d8:	6879      	ldr	r1, [r7, #4]
 80041da:	4804      	ldr	r0, [pc, #16]	; (80041ec <read_niubol_7+0x20>)
 80041dc:	2209      	movs	r2, #9
 80041de:	f004 fef5 	bl	8008fcc <HAL_UART_Transmit>
}
 80041e2:	46c0      	nop			; (mov r8, r8)
 80041e4:	46bd      	mov	sp, r7
 80041e6:	b002      	add	sp, #8
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	46c0      	nop			; (mov r8, r8)
 80041ec:	20000520 	.word	0x20000520

080041f0 <sendingToSimcomA76xx>:
	HAL_UART_Transmit(&huart4, data_npk, 8, 2000);
}
void write_co2(uint8_t *data_co2) {
	HAL_UART_Transmit(&huart2, data_co2, 9, 1000);
}
void sendingToSimcomA76xx(char *cmd) {
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) cmd, strlen(cmd), 1000);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	0018      	movs	r0, r3
 80041fc:	f7fb ff84 	bl	8000108 <strlen>
 8004200:	0003      	movs	r3, r0
 8004202:	b29a      	uxth	r2, r3
 8004204:	23fa      	movs	r3, #250	; 0xfa
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	6879      	ldr	r1, [r7, #4]
 800420a:	4803      	ldr	r0, [pc, #12]	; (8004218 <sendingToSimcomA76xx+0x28>)
 800420c:	f004 fede 	bl	8008fcc <HAL_UART_Transmit>
}
 8004210:	46c0      	nop			; (mov r8, r8)
 8004212:	46bd      	mov	sp, r7
 8004214:	b002      	add	sp, #8
 8004216:	bd80      	pop	{r7, pc}
 8004218:	20000410 	.word	0x20000410

0800421c <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	000a      	movs	r2, r1
 8004226:	1cbb      	adds	r3, r7, #2
 8004228:	801a      	strh	r2, [r3, #0]
	if (huart->Instance == USART1) {
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a49      	ldr	r2, [pc, #292]	; (8004354 <HAL_UARTEx_RxEventCallback+0x138>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d105      	bne.n	8004240 <HAL_UARTEx_RxEventCallback+0x24>
		HAL_UARTEx_ReceiveToIdle_IT(huart, (uint8_t*) rxBuffer, 50);
 8004234:	4948      	ldr	r1, [pc, #288]	; (8004358 <HAL_UARTEx_RxEventCallback+0x13c>)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2232      	movs	r2, #50	; 0x32
 800423a:	0018      	movs	r0, r3
 800423c:	f006 fa00 	bl	800a640 <HAL_UARTEx_ReceiveToIdle_IT>
	}
	if (huart->Instance == USART4) {
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a45      	ldr	r2, [pc, #276]	; (800435c <HAL_UARTEx_RxEventCallback+0x140>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d000      	beq.n	800424c <HAL_UARTEx_RxEventCallback+0x30>
 800424a:	e07e      	b.n	800434a <HAL_UARTEx_RxEventCallback+0x12e>
					EC_rk520_02 = (sensorResponseData[7] << 8 | sensorResponseData[8]);
					respone_rk520_02 = true;
				}
		#endif
#if NBL_S_TMC_7
						if(sensorResponseData[0]==1)
 800424c:	4b44      	ldr	r3, [pc, #272]	; (8004360 <HAL_UARTEx_RxEventCallback+0x144>)
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	2b01      	cmp	r3, #1
 8004252:	d174      	bne.n	800433e <HAL_UARTEx_RxEventCallback+0x122>
						{
							soilTemperature_niubol_7=(sensorResponseData[3]<<8 | sensorResponseData[4])*0.1;
 8004254:	4b42      	ldr	r3, [pc, #264]	; (8004360 <HAL_UARTEx_RxEventCallback+0x144>)
 8004256:	78db      	ldrb	r3, [r3, #3]
 8004258:	021b      	lsls	r3, r3, #8
 800425a:	4a41      	ldr	r2, [pc, #260]	; (8004360 <HAL_UARTEx_RxEventCallback+0x144>)
 800425c:	7912      	ldrb	r2, [r2, #4]
 800425e:	4313      	orrs	r3, r2
 8004260:	0018      	movs	r0, r3
 8004262:	f7fe fe49 	bl	8002ef8 <__aeabi_i2d>
 8004266:	4a3f      	ldr	r2, [pc, #252]	; (8004364 <HAL_UARTEx_RxEventCallback+0x148>)
 8004268:	4b3f      	ldr	r3, [pc, #252]	; (8004368 <HAL_UARTEx_RxEventCallback+0x14c>)
 800426a:	f7fd ffad 	bl	80021c8 <__aeabi_dmul>
 800426e:	0002      	movs	r2, r0
 8004270:	000b      	movs	r3, r1
 8004272:	0010      	movs	r0, r2
 8004274:	0019      	movs	r1, r3
 8004276:	f7fe fedd 	bl	8003034 <__aeabi_d2f>
 800427a:	1c02      	adds	r2, r0, #0
 800427c:	4b3b      	ldr	r3, [pc, #236]	; (800436c <HAL_UARTEx_RxEventCallback+0x150>)
 800427e:	601a      	str	r2, [r3, #0]
							soilMoisture_niubol_7 = (sensorResponseData[5]<<8 | sensorResponseData[6])*0.1;
 8004280:	4b37      	ldr	r3, [pc, #220]	; (8004360 <HAL_UARTEx_RxEventCallback+0x144>)
 8004282:	795b      	ldrb	r3, [r3, #5]
 8004284:	021b      	lsls	r3, r3, #8
 8004286:	4a36      	ldr	r2, [pc, #216]	; (8004360 <HAL_UARTEx_RxEventCallback+0x144>)
 8004288:	7992      	ldrb	r2, [r2, #6]
 800428a:	4313      	orrs	r3, r2
 800428c:	0018      	movs	r0, r3
 800428e:	f7fe fe33 	bl	8002ef8 <__aeabi_i2d>
 8004292:	4a34      	ldr	r2, [pc, #208]	; (8004364 <HAL_UARTEx_RxEventCallback+0x148>)
 8004294:	4b34      	ldr	r3, [pc, #208]	; (8004368 <HAL_UARTEx_RxEventCallback+0x14c>)
 8004296:	f7fd ff97 	bl	80021c8 <__aeabi_dmul>
 800429a:	0002      	movs	r2, r0
 800429c:	000b      	movs	r3, r1
 800429e:	0010      	movs	r0, r2
 80042a0:	0019      	movs	r1, r3
 80042a2:	f7fe fec7 	bl	8003034 <__aeabi_d2f>
 80042a6:	1c02      	adds	r2, r0, #0
 80042a8:	4b31      	ldr	r3, [pc, #196]	; (8004370 <HAL_UARTEx_RxEventCallback+0x154>)
 80042aa:	601a      	str	r2, [r3, #0]
							soil_Conductivity_niubol_7=(sensorResponseData[7]<<8 | sensorResponseData[8]);
 80042ac:	4b2c      	ldr	r3, [pc, #176]	; (8004360 <HAL_UARTEx_RxEventCallback+0x144>)
 80042ae:	79db      	ldrb	r3, [r3, #7]
 80042b0:	021b      	lsls	r3, r3, #8
 80042b2:	4a2b      	ldr	r2, [pc, #172]	; (8004360 <HAL_UARTEx_RxEventCallback+0x144>)
 80042b4:	7a12      	ldrb	r2, [r2, #8]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	0018      	movs	r0, r3
 80042ba:	f7fc ff91 	bl	80011e0 <__aeabi_i2f>
 80042be:	1c02      	adds	r2, r0, #0
 80042c0:	4b2c      	ldr	r3, [pc, #176]	; (8004374 <HAL_UARTEx_RxEventCallback+0x158>)
 80042c2:	601a      	str	r2, [r3, #0]
							soil_pH_niubol_7=(sensorResponseData[9]<<8 | sensorResponseData[10])*0.01;
 80042c4:	4b26      	ldr	r3, [pc, #152]	; (8004360 <HAL_UARTEx_RxEventCallback+0x144>)
 80042c6:	7a5b      	ldrb	r3, [r3, #9]
 80042c8:	021b      	lsls	r3, r3, #8
 80042ca:	4a25      	ldr	r2, [pc, #148]	; (8004360 <HAL_UARTEx_RxEventCallback+0x144>)
 80042cc:	7a92      	ldrb	r2, [r2, #10]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	0018      	movs	r0, r3
 80042d2:	f7fe fe11 	bl	8002ef8 <__aeabi_i2d>
 80042d6:	4a28      	ldr	r2, [pc, #160]	; (8004378 <HAL_UARTEx_RxEventCallback+0x15c>)
 80042d8:	4b28      	ldr	r3, [pc, #160]	; (800437c <HAL_UARTEx_RxEventCallback+0x160>)
 80042da:	f7fd ff75 	bl	80021c8 <__aeabi_dmul>
 80042de:	0002      	movs	r2, r0
 80042e0:	000b      	movs	r3, r1
 80042e2:	0010      	movs	r0, r2
 80042e4:	0019      	movs	r1, r3
 80042e6:	f7fe fea5 	bl	8003034 <__aeabi_d2f>
 80042ea:	1c02      	adds	r2, r0, #0
 80042ec:	4b24      	ldr	r3, [pc, #144]	; (8004380 <HAL_UARTEx_RxEventCallback+0x164>)
 80042ee:	601a      	str	r2, [r3, #0]
							soil_Nitrogen_niubol_7=(sensorResponseData[11]<<8 | sensorResponseData[12]);
 80042f0:	4b1b      	ldr	r3, [pc, #108]	; (8004360 <HAL_UARTEx_RxEventCallback+0x144>)
 80042f2:	7adb      	ldrb	r3, [r3, #11]
 80042f4:	021b      	lsls	r3, r3, #8
 80042f6:	4a1a      	ldr	r2, [pc, #104]	; (8004360 <HAL_UARTEx_RxEventCallback+0x144>)
 80042f8:	7b12      	ldrb	r2, [r2, #12]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	0018      	movs	r0, r3
 80042fe:	f7fc ff6f 	bl	80011e0 <__aeabi_i2f>
 8004302:	1c02      	adds	r2, r0, #0
 8004304:	4b1f      	ldr	r3, [pc, #124]	; (8004384 <HAL_UARTEx_RxEventCallback+0x168>)
 8004306:	601a      	str	r2, [r3, #0]
							soil_Phospho_niubol_7=(sensorResponseData[13]<<8 | sensorResponseData[14]);
 8004308:	4b15      	ldr	r3, [pc, #84]	; (8004360 <HAL_UARTEx_RxEventCallback+0x144>)
 800430a:	7b5b      	ldrb	r3, [r3, #13]
 800430c:	021b      	lsls	r3, r3, #8
 800430e:	4a14      	ldr	r2, [pc, #80]	; (8004360 <HAL_UARTEx_RxEventCallback+0x144>)
 8004310:	7b92      	ldrb	r2, [r2, #14]
 8004312:	4313      	orrs	r3, r2
 8004314:	0018      	movs	r0, r3
 8004316:	f7fc ff63 	bl	80011e0 <__aeabi_i2f>
 800431a:	1c02      	adds	r2, r0, #0
 800431c:	4b1a      	ldr	r3, [pc, #104]	; (8004388 <HAL_UARTEx_RxEventCallback+0x16c>)
 800431e:	601a      	str	r2, [r3, #0]
							soil_Kali_niubol_7=(sensorResponseData[15]<<8 | sensorResponseData[16]);
 8004320:	4b0f      	ldr	r3, [pc, #60]	; (8004360 <HAL_UARTEx_RxEventCallback+0x144>)
 8004322:	7bdb      	ldrb	r3, [r3, #15]
 8004324:	021b      	lsls	r3, r3, #8
 8004326:	4a0e      	ldr	r2, [pc, #56]	; (8004360 <HAL_UARTEx_RxEventCallback+0x144>)
 8004328:	7c12      	ldrb	r2, [r2, #16]
 800432a:	4313      	orrs	r3, r2
 800432c:	0018      	movs	r0, r3
 800432e:	f7fc ff57 	bl	80011e0 <__aeabi_i2f>
 8004332:	1c02      	adds	r2, r0, #0
 8004334:	4b15      	ldr	r3, [pc, #84]	; (800438c <HAL_UARTEx_RxEventCallback+0x170>)
 8004336:	601a      	str	r2, [r3, #0]
							respone_NBL_S_TMC_7 = true;
 8004338:	4b15      	ldr	r3, [pc, #84]	; (8004390 <HAL_UARTEx_RxEventCallback+0x174>)
 800433a:	2201      	movs	r2, #1
 800433c:	701a      	strb	r2, [r3, #0]
			soilPH = (sensorResponseData[3] << 8 | sensorResponseData[4])
					/ 100.0;
			respone_rk500_02 = true;
		}
#endif
		HAL_UARTEx_ReceiveToIdle_IT(&huart4, (uint8_t*) sensorResponseData, 20);
 800433e:	4908      	ldr	r1, [pc, #32]	; (8004360 <HAL_UARTEx_RxEventCallback+0x144>)
 8004340:	4b14      	ldr	r3, [pc, #80]	; (8004394 <HAL_UARTEx_RxEventCallback+0x178>)
 8004342:	2214      	movs	r2, #20
 8004344:	0018      	movs	r0, r3
 8004346:	f006 f97b 	bl	800a640 <HAL_UARTEx_ReceiveToIdle_IT>
		carbonic = (rx_co2[2] * 256 + rx_co2[3]);
		HAL_UARTEx_ReceiveToIdle_IT(&huart2, (uint8_t*) rx_co2, 8);
		#endif
	}
	//HAL_UARTEx_ReceiveToIdle_IT(huart, (uint8_t *) sensorResponseData, 9);
}
 800434a:	46c0      	nop			; (mov r8, r8)
 800434c:	46bd      	mov	sp, r7
 800434e:	b002      	add	sp, #8
 8004350:	bd80      	pop	{r7, pc}
 8004352:	46c0      	nop			; (mov r8, r8)
 8004354:	40013800 	.word	0x40013800
 8004358:	200005a8 	.word	0x200005a8
 800435c:	40004c00 	.word	0x40004c00
 8004360:	200009f4 	.word	0x200009f4
 8004364:	9999999a 	.word	0x9999999a
 8004368:	3fb99999 	.word	0x3fb99999
 800436c:	20000894 	.word	0x20000894
 8004370:	20000898 	.word	0x20000898
 8004374:	2000089c 	.word	0x2000089c
 8004378:	47ae147b 	.word	0x47ae147b
 800437c:	3f847ae1 	.word	0x3f847ae1
 8004380:	200008a0 	.word	0x200008a0
 8004384:	200008a4 	.word	0x200008a4
 8004388:	200008a8 	.word	0x200008a8
 800438c:	200008ac 	.word	0x200008ac
 8004390:	200008b0 	.word	0x200008b0
 8004394:	20000520 	.word	0x20000520

08004398 <turnOnA76XX>:

void turnOnA76XX(void) {
 8004398:	b580      	push	{r7, lr}
 800439a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ENABLE_A76XX_GPIO_Port, ENABLE_A76XX_Pin, RESET);
 800439c:	2380      	movs	r3, #128	; 0x80
 800439e:	0119      	lsls	r1, r3, #4
 80043a0:	23a0      	movs	r3, #160	; 0xa0
 80043a2:	05db      	lsls	r3, r3, #23
 80043a4:	2200      	movs	r2, #0
 80043a6:	0018      	movs	r0, r3
 80043a8:	f002 fc74 	bl	8006c94 <HAL_GPIO_WritePin>
	HAL_Delay(3000);
 80043ac:	4b15      	ldr	r3, [pc, #84]	; (8004404 <turnOnA76XX+0x6c>)
 80043ae:	0018      	movs	r0, r3
 80043b0:	f001 fcda 	bl	8005d68 <HAL_Delay>
	HAL_GPIO_WritePin(ENABLE_A76XX_GPIO_Port, ENABLE_A76XX_Pin, SET);
 80043b4:	2380      	movs	r3, #128	; 0x80
 80043b6:	0119      	lsls	r1, r3, #4
 80043b8:	23a0      	movs	r3, #160	; 0xa0
 80043ba:	05db      	lsls	r3, r3, #23
 80043bc:	2201      	movs	r2, #1
 80043be:	0018      	movs	r0, r3
 80043c0:	f002 fc68 	bl	8006c94 <HAL_GPIO_WritePin>
	HAL_Delay(3000);
 80043c4:	4b0f      	ldr	r3, [pc, #60]	; (8004404 <turnOnA76XX+0x6c>)
 80043c6:	0018      	movs	r0, r3
 80043c8:	f001 fcce 	bl	8005d68 <HAL_Delay>
	HAL_GPIO_WritePin(ENABLE_A76XX_GPIO_Port, ENABLE_A76XX_Pin, RESET);
 80043cc:	2380      	movs	r3, #128	; 0x80
 80043ce:	0119      	lsls	r1, r3, #4
 80043d0:	23a0      	movs	r3, #160	; 0xa0
 80043d2:	05db      	lsls	r3, r3, #23
 80043d4:	2200      	movs	r2, #0
 80043d6:	0018      	movs	r0, r3
 80043d8:	f002 fc5c 	bl	8006c94 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80043dc:	20c8      	movs	r0, #200	; 0xc8
 80043de:	f001 fcc3 	bl	8005d68 <HAL_Delay>
	HAL_GPIO_WritePin(ENABLE_A76XX_GPIO_Port, ENABLE_A76XX_Pin, SET);
 80043e2:	2380      	movs	r3, #128	; 0x80
 80043e4:	0119      	lsls	r1, r3, #4
 80043e6:	23a0      	movs	r3, #160	; 0xa0
 80043e8:	05db      	lsls	r3, r3, #23
 80043ea:	2201      	movs	r2, #1
 80043ec:	0018      	movs	r0, r3
 80043ee:	f002 fc51 	bl	8006c94 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80043f2:	23fa      	movs	r3, #250	; 0xfa
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	0018      	movs	r0, r3
 80043f8:	f001 fcb6 	bl	8005d68 <HAL_Delay>
}
 80043fc:	46c0      	nop			; (mov r8, r8)
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	46c0      	nop			; (mov r8, r8)
 8004404:	00000bb8 	.word	0x00000bb8

08004408 <connectSimcomA76xx>:

int connectSimcomA76xx() {
 8004408:	b5b0      	push	{r4, r5, r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
	//HAL_TIM_Base_Stop_IT(&htim6);
	previousTick = HAL_GetTick();
 800440e:	f001 fca1 	bl	8005d54 <HAL_GetTick>
 8004412:	0003      	movs	r3, r0
 8004414:	001a      	movs	r2, r3
 8004416:	4b55      	ldr	r3, [pc, #340]	; (800456c <connectSimcomA76xx+0x164>)
 8004418:	601a      	str	r2, [r3, #0]
	while ((isConnectSimcomA76xx == 0)
 800441a:	e08a      	b.n	8004532 <connectSimcomA76xx+0x12a>
			&& (previousTick + timeOutConnectA76XX) > HAL_GetTick()) {
//	while(isConnectSimcomA76xx == 0){

		if (strstr((char*) rxBuffer, "PB DONE")) {
 800441c:	4a54      	ldr	r2, [pc, #336]	; (8004570 <connectSimcomA76xx+0x168>)
 800441e:	4b55      	ldr	r3, [pc, #340]	; (8004574 <connectSimcomA76xx+0x16c>)
 8004420:	0011      	movs	r1, r2
 8004422:	0018      	movs	r0, r3
 8004424:	f008 f9dd 	bl	800c7e2 <strstr>
 8004428:	1e03      	subs	r3, r0, #0
 800442a:	d007      	beq.n	800443c <connectSimcomA76xx+0x34>
			HAL_Delay(1000);
 800442c:	23fa      	movs	r3, #250	; 0xfa
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	0018      	movs	r0, r3
 8004432:	f001 fc99 	bl	8005d68 <HAL_Delay>
			isPBDONE = 1;
 8004436:	4b50      	ldr	r3, [pc, #320]	; (8004578 <connectSimcomA76xx+0x170>)
 8004438:	2201      	movs	r2, #1
 800443a:	601a      	str	r2, [r3, #0]
		}
//		if (strstr((char*) rxBuffer, "PDN ACT 1")) {
//			HAL_Delay(5000);
//			isPBDONE = 1;
//		}
		if (isPBDONE == 1) {
 800443c:	4b4e      	ldr	r3, [pc, #312]	; (8004578 <connectSimcomA76xx+0x170>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d176      	bne.n	8004532 <connectSimcomA76xx+0x12a>
			sendingToSimcomA76xx(ATE0);
 8004444:	4b4d      	ldr	r3, [pc, #308]	; (800457c <connectSimcomA76xx+0x174>)
 8004446:	0018      	movs	r0, r3
 8004448:	f7ff fed2 	bl	80041f0 <sendingToSimcomA76xx>
			HAL_Delay(200);
 800444c:	20c8      	movs	r0, #200	; 0xc8
 800444e:	f001 fc8b 	bl	8005d68 <HAL_Delay>
			sendingToSimcomA76xx(AT_SIGNAL_SIM);
 8004452:	4b4b      	ldr	r3, [pc, #300]	; (8004580 <connectSimcomA76xx+0x178>)
 8004454:	0018      	movs	r0, r3
 8004456:	f7ff fecb 	bl	80041f0 <sendingToSimcomA76xx>
			HAL_Delay(1000);
 800445a:	23fa      	movs	r3, #250	; 0xfa
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	0018      	movs	r0, r3
 8004460:	f001 fc82 	bl	8005d68 <HAL_Delay>
			uint8_t SignalStrength1;
			SignalStrength = (rxBuffer[8] - 48) * 10 + (rxBuffer[9] - 48)
 8004464:	4b43      	ldr	r3, [pc, #268]	; (8004574 <connectSimcomA76xx+0x16c>)
 8004466:	7a1b      	ldrb	r3, [r3, #8]
 8004468:	3b30      	subs	r3, #48	; 0x30
 800446a:	001a      	movs	r2, r3
 800446c:	0013      	movs	r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	189b      	adds	r3, r3, r2
 8004472:	005b      	lsls	r3, r3, #1
 8004474:	001a      	movs	r2, r3
 8004476:	4b3f      	ldr	r3, [pc, #252]	; (8004574 <connectSimcomA76xx+0x16c>)
 8004478:	7a5b      	ldrb	r3, [r3, #9]
 800447a:	3b30      	subs	r3, #48	; 0x30
 800447c:	18d3      	adds	r3, r2, r3
					+ (rxBuffer[11] - 48) * 0.1 + (rxBuffer[12] - 48) * 0.01;
 800447e:	0018      	movs	r0, r3
 8004480:	f7fe fd3a 	bl	8002ef8 <__aeabi_i2d>
 8004484:	0004      	movs	r4, r0
 8004486:	000d      	movs	r5, r1
 8004488:	4b3a      	ldr	r3, [pc, #232]	; (8004574 <connectSimcomA76xx+0x16c>)
 800448a:	7adb      	ldrb	r3, [r3, #11]
 800448c:	3b30      	subs	r3, #48	; 0x30
 800448e:	0018      	movs	r0, r3
 8004490:	f7fe fd32 	bl	8002ef8 <__aeabi_i2d>
 8004494:	4a3b      	ldr	r2, [pc, #236]	; (8004584 <connectSimcomA76xx+0x17c>)
 8004496:	4b3c      	ldr	r3, [pc, #240]	; (8004588 <connectSimcomA76xx+0x180>)
 8004498:	f7fd fe96 	bl	80021c8 <__aeabi_dmul>
 800449c:	0002      	movs	r2, r0
 800449e:	000b      	movs	r3, r1
 80044a0:	0020      	movs	r0, r4
 80044a2:	0029      	movs	r1, r5
 80044a4:	f7fc ff36 	bl	8001314 <__aeabi_dadd>
 80044a8:	0002      	movs	r2, r0
 80044aa:	000b      	movs	r3, r1
 80044ac:	0014      	movs	r4, r2
 80044ae:	001d      	movs	r5, r3
 80044b0:	4b30      	ldr	r3, [pc, #192]	; (8004574 <connectSimcomA76xx+0x16c>)
 80044b2:	7b1b      	ldrb	r3, [r3, #12]
 80044b4:	3b30      	subs	r3, #48	; 0x30
 80044b6:	0018      	movs	r0, r3
 80044b8:	f7fe fd1e 	bl	8002ef8 <__aeabi_i2d>
 80044bc:	4a33      	ldr	r2, [pc, #204]	; (800458c <connectSimcomA76xx+0x184>)
 80044be:	4b34      	ldr	r3, [pc, #208]	; (8004590 <connectSimcomA76xx+0x188>)
 80044c0:	f7fd fe82 	bl	80021c8 <__aeabi_dmul>
 80044c4:	0002      	movs	r2, r0
 80044c6:	000b      	movs	r3, r1
 80044c8:	0020      	movs	r0, r4
 80044ca:	0029      	movs	r1, r5
 80044cc:	f7fc ff22 	bl	8001314 <__aeabi_dadd>
 80044d0:	0002      	movs	r2, r0
 80044d2:	000b      	movs	r3, r1
 80044d4:	0010      	movs	r0, r2
 80044d6:	0019      	movs	r1, r3
 80044d8:	f7fe fdac 	bl	8003034 <__aeabi_d2f>
 80044dc:	1c02      	adds	r2, r0, #0
			SignalStrength = (rxBuffer[8] - 48) * 10 + (rxBuffer[9] - 48)
 80044de:	4b2d      	ldr	r3, [pc, #180]	; (8004594 <connectSimcomA76xx+0x18c>)
 80044e0:	601a      	str	r2, [r3, #0]
			SignalStrength1 = (rxBuffer[8] - 48) * 10 + (rxBuffer[9] - 48);
 80044e2:	4b24      	ldr	r3, [pc, #144]	; (8004574 <connectSimcomA76xx+0x16c>)
 80044e4:	7a1b      	ldrb	r3, [r3, #8]
 80044e6:	3b30      	subs	r3, #48	; 0x30
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	1c1a      	adds	r2, r3, #0
 80044ec:	0092      	lsls	r2, r2, #2
 80044ee:	18d3      	adds	r3, r2, r3
 80044f0:	18db      	adds	r3, r3, r3
 80044f2:	b2da      	uxtb	r2, r3
 80044f4:	4b1f      	ldr	r3, [pc, #124]	; (8004574 <connectSimcomA76xx+0x16c>)
 80044f6:	7a5b      	ldrb	r3, [r3, #9]
 80044f8:	18d3      	adds	r3, r2, r3
 80044fa:	b2da      	uxtb	r2, r3
 80044fc:	1dfb      	adds	r3, r7, #7
 80044fe:	3a30      	subs	r2, #48	; 0x30
 8004500:	701a      	strb	r2, [r3, #0]
			if(SignalStrength1>=31)
 8004502:	1dfb      	adds	r3, r7, #7
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	2b1e      	cmp	r3, #30
 8004508:	d904      	bls.n	8004514 <connectSimcomA76xx+0x10c>
			{
				rssi=-51;
 800450a:	4b23      	ldr	r3, [pc, #140]	; (8004598 <connectSimcomA76xx+0x190>)
 800450c:	2233      	movs	r2, #51	; 0x33
 800450e:	4252      	negs	r2, r2
 8004510:	601a      	str	r2, [r3, #0]
 8004512:	e006      	b.n	8004522 <connectSimcomA76xx+0x11a>
			}else rssi = SignalStrength1 * 2 - 113;
 8004514:	1dfb      	adds	r3, r7, #7
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	005b      	lsls	r3, r3, #1
 800451a:	3b71      	subs	r3, #113	; 0x71
 800451c:	001a      	movs	r2, r3
 800451e:	4b1e      	ldr	r3, [pc, #120]	; (8004598 <connectSimcomA76xx+0x190>)
 8004520:	601a      	str	r2, [r3, #0]
			isConnectSimcomA76xx = 1;
 8004522:	4b1e      	ldr	r3, [pc, #120]	; (800459c <connectSimcomA76xx+0x194>)
 8004524:	2201      	movs	r2, #1
 8004526:	601a      	str	r2, [r3, #0]
			HAL_Delay(1000);
 8004528:	23fa      	movs	r3, #250	; 0xfa
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	0018      	movs	r0, r3
 800452e:	f001 fc1b 	bl	8005d68 <HAL_Delay>
	while ((isConnectSimcomA76xx == 0)
 8004532:	4b1a      	ldr	r3, [pc, #104]	; (800459c <connectSimcomA76xx+0x194>)
 8004534:	681b      	ldr	r3, [r3, #0]
			&& (previousTick + timeOutConnectA76XX) > HAL_GetTick()) {
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10b      	bne.n	8004552 <connectSimcomA76xx+0x14a>
 800453a:	4b0c      	ldr	r3, [pc, #48]	; (800456c <connectSimcomA76xx+0x164>)
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	4b18      	ldr	r3, [pc, #96]	; (80045a0 <connectSimcomA76xx+0x198>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	18d3      	adds	r3, r2, r3
 8004544:	001c      	movs	r4, r3
 8004546:	f001 fc05 	bl	8005d54 <HAL_GetTick>
 800454a:	0003      	movs	r3, r0
 800454c:	429c      	cmp	r4, r3
 800454e:	d900      	bls.n	8004552 <connectSimcomA76xx+0x14a>
 8004550:	e764      	b.n	800441c <connectSimcomA76xx+0x14>
		}
	}
	if (isConnectSimcomA76xx == 0) {
 8004552:	4b12      	ldr	r3, [pc, #72]	; (800459c <connectSimcomA76xx+0x194>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d101      	bne.n	800455e <connectSimcomA76xx+0x156>
		NVIC_SystemReset();
 800455a:	f7ff fe25 	bl	80041a8 <__NVIC_SystemReset>
	}
	return isConnectSimcomA76xx;
 800455e:	4b0f      	ldr	r3, [pc, #60]	; (800459c <connectSimcomA76xx+0x194>)
 8004560:	681b      	ldr	r3, [r3, #0]
}
 8004562:	0018      	movs	r0, r3
 8004564:	46bd      	mov	sp, r7
 8004566:	b002      	add	sp, #8
 8004568:	bdb0      	pop	{r4, r5, r7, pc}
 800456a:	46c0      	nop			; (mov r8, r8)
 800456c:	200005dc 	.word	0x200005dc
 8004570:	0800fa7c 	.word	0x0800fa7c
 8004574:	200005a8 	.word	0x200005a8
 8004578:	200005f0 	.word	0x200005f0
 800457c:	20000014 	.word	0x20000014
 8004580:	2000001c 	.word	0x2000001c
 8004584:	9999999a 	.word	0x9999999a
 8004588:	3fb99999 	.word	0x3fb99999
 800458c:	47ae147b 	.word	0x47ae147b
 8004590:	3f847ae1 	.word	0x3f847ae1
 8004594:	200005ec 	.word	0x200005ec
 8004598:	200000d0 	.word	0x200000d0
 800459c:	200005e0 	.word	0x200005e0
 80045a0:	2000000c 	.word	0x2000000c

080045a4 <Read_BH1750>:
#if bh1750
int32_t Read_BH1750() {
 80045a4:	b590      	push	{r4, r7, lr}
 80045a6:	b085      	sub	sp, #20
 80045a8:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef result;
	result = HAL_I2C_Master_Transmit(&hi2c2, DS1307_I2C_ADDR << 1,
 80045aa:	1dfc      	adds	r4, r7, #7
 80045ac:	4a20      	ldr	r2, [pc, #128]	; (8004630 <Read_BH1750+0x8c>)
 80045ae:	4821      	ldr	r0, [pc, #132]	; (8004634 <Read_BH1750+0x90>)
 80045b0:	2396      	movs	r3, #150	; 0x96
 80045b2:	005b      	lsls	r3, r3, #1
 80045b4:	9300      	str	r3, [sp, #0]
 80045b6:	2301      	movs	r3, #1
 80045b8:	2146      	movs	r1, #70	; 0x46
 80045ba:	f002 fc1f 	bl	8006dfc <HAL_I2C_Master_Transmit>
 80045be:	0003      	movs	r3, r0
 80045c0:	7023      	strb	r3, [r4, #0]
			&address_bh1750, 1, 300);
	if (result == HAL_OK) {
 80045c2:	1dfb      	adds	r3, r7, #7
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d102      	bne.n	80045d0 <Read_BH1750+0x2c>
		response_bh1750 = true;
 80045ca:	4b1b      	ldr	r3, [pc, #108]	; (8004638 <Read_BH1750+0x94>)
 80045cc:	2201      	movs	r2, #1
 80045ce:	701a      	strb	r2, [r3, #0]
	}
	HAL_Delay(200);
 80045d0:	20c8      	movs	r0, #200	; 0xc8
 80045d2:	f001 fbc9 	bl	8005d68 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c2, DS1307_I2C_ADDR << 1, rx_bh1750, 2, 300);
 80045d6:	4a19      	ldr	r2, [pc, #100]	; (800463c <Read_BH1750+0x98>)
 80045d8:	4816      	ldr	r0, [pc, #88]	; (8004634 <Read_BH1750+0x90>)
 80045da:	2396      	movs	r3, #150	; 0x96
 80045dc:	005b      	lsls	r3, r3, #1
 80045de:	9300      	str	r3, [sp, #0]
 80045e0:	2302      	movs	r3, #2
 80045e2:	2146      	movs	r1, #70	; 0x46
 80045e4:	f002 fd12 	bl	800700c <HAL_I2C_Master_Receive>
	data_bh1750 = ((rx_bh1750[0] << 8) | rx_bh1750[1]) / 1.2;
 80045e8:	4b14      	ldr	r3, [pc, #80]	; (800463c <Read_BH1750+0x98>)
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	021b      	lsls	r3, r3, #8
 80045ee:	4a13      	ldr	r2, [pc, #76]	; (800463c <Read_BH1750+0x98>)
 80045f0:	7852      	ldrb	r2, [r2, #1]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	0018      	movs	r0, r3
 80045f6:	f7fe fc7f 	bl	8002ef8 <__aeabi_i2d>
 80045fa:	4a11      	ldr	r2, [pc, #68]	; (8004640 <Read_BH1750+0x9c>)
 80045fc:	4b11      	ldr	r3, [pc, #68]	; (8004644 <Read_BH1750+0xa0>)
 80045fe:	f7fd f9e9 	bl	80019d4 <__aeabi_ddiv>
 8004602:	0002      	movs	r2, r0
 8004604:	000b      	movs	r3, r1
 8004606:	0010      	movs	r0, r2
 8004608:	0019      	movs	r1, r3
 800460a:	f7fe fd13 	bl	8003034 <__aeabi_d2f>
 800460e:	1c02      	adds	r2, r0, #0
 8004610:	4b0d      	ldr	r3, [pc, #52]	; (8004648 <Read_BH1750+0xa4>)
 8004612:	601a      	str	r2, [r3, #0]
	HAL_Delay(200);
 8004614:	20c8      	movs	r0, #200	; 0xc8
 8004616:	f001 fba7 	bl	8005d68 <HAL_Delay>
	return data_bh1750;
 800461a:	4b0b      	ldr	r3, [pc, #44]	; (8004648 <Read_BH1750+0xa4>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	1c18      	adds	r0, r3, #0
 8004620:	f7fc fdbe 	bl	80011a0 <__aeabi_f2iz>
 8004624:	0003      	movs	r3, r0
}
 8004626:	0018      	movs	r0, r3
 8004628:	46bd      	mov	sp, r7
 800462a:	b003      	add	sp, #12
 800462c:	bd90      	pop	{r4, r7, pc}
 800462e:	46c0      	nop			; (mov r8, r8)
 8004630:	200000ce 	.word	0x200000ce
 8004634:	2000037c 	.word	0x2000037c
 8004638:	200008c4 	.word	0x200008c4
 800463c:	200008b8 	.word	0x200008b8
 8004640:	33333333 	.word	0x33333333
 8004644:	3ff33333 	.word	0x3ff33333
 8004648:	200008b4 	.word	0x200008b4

0800464c <BH1750_Init>:
#endif

void BH1750_Init(void) {
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af02      	add	r7, sp, #8
	uint8_t cmd = BH1750_POWER_ON;
 8004652:	1dfb      	adds	r3, r7, #7
 8004654:	2201      	movs	r2, #1
 8004656:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c2, BH1750_ADDRESS, &cmd, 1, HAL_MAX_DELAY);
 8004658:	1dfa      	adds	r2, r7, #7
 800465a:	4812      	ldr	r0, [pc, #72]	; (80046a4 <BH1750_Init+0x58>)
 800465c:	2301      	movs	r3, #1
 800465e:	425b      	negs	r3, r3
 8004660:	9300      	str	r3, [sp, #0]
 8004662:	2301      	movs	r3, #1
 8004664:	2146      	movs	r1, #70	; 0x46
 8004666:	f002 fbc9 	bl	8006dfc <HAL_I2C_Master_Transmit>
	cmd = BH1750_RESET;
 800466a:	1dfb      	adds	r3, r7, #7
 800466c:	2207      	movs	r2, #7
 800466e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c2, BH1750_ADDRESS, &cmd, 1, HAL_MAX_DELAY);
 8004670:	1dfa      	adds	r2, r7, #7
 8004672:	480c      	ldr	r0, [pc, #48]	; (80046a4 <BH1750_Init+0x58>)
 8004674:	2301      	movs	r3, #1
 8004676:	425b      	negs	r3, r3
 8004678:	9300      	str	r3, [sp, #0]
 800467a:	2301      	movs	r3, #1
 800467c:	2146      	movs	r1, #70	; 0x46
 800467e:	f002 fbbd 	bl	8006dfc <HAL_I2C_Master_Transmit>
	cmd = BH1750_CONTINUOUS_HIGH_RES_MODE;
 8004682:	1dfb      	adds	r3, r7, #7
 8004684:	2210      	movs	r2, #16
 8004686:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c2, BH1750_ADDRESS, &cmd, 1, HAL_MAX_DELAY);
 8004688:	1dfa      	adds	r2, r7, #7
 800468a:	4806      	ldr	r0, [pc, #24]	; (80046a4 <BH1750_Init+0x58>)
 800468c:	2301      	movs	r3, #1
 800468e:	425b      	negs	r3, r3
 8004690:	9300      	str	r3, [sp, #0]
 8004692:	2301      	movs	r3, #1
 8004694:	2146      	movs	r1, #70	; 0x46
 8004696:	f002 fbb1 	bl	8006dfc <HAL_I2C_Master_Transmit>
}
 800469a:	46c0      	nop			; (mov r8, r8)
 800469c:	46bd      	mov	sp, r7
 800469e:	b002      	add	sp, #8
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	46c0      	nop			; (mov r8, r8)
 80046a4:	2000037c 	.word	0x2000037c

080046a8 <readSensors>:
	HAL_I2C_Master_Receive(&hi2c2, BH1750_ADDRESS, buf, 2, HAL_MAX_DELAY);
	uint16_t lux = (buf[0] << 8) | buf[1];
	return lux / 1.2; // Convert to lux
}

void readSensors(void) {
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
	//rs485
	//lux = Read_BH1750();
	for (int i = 1; i <= 2; i++) {
 80046ae:	2301      	movs	r3, #1
 80046b0:	607b      	str	r3, [r7, #4]
 80046b2:	e03d      	b.n	8004730 <readSensors+0x88>
#if sht30
		sht3x_read_temperature_and_humidity(&handle, &temperature, &humidity);
 80046b4:	4a25      	ldr	r2, [pc, #148]	; (800474c <readSensors+0xa4>)
 80046b6:	4926      	ldr	r1, [pc, #152]	; (8004750 <readSensors+0xa8>)
 80046b8:	4b26      	ldr	r3, [pc, #152]	; (8004754 <readSensors+0xac>)
 80046ba:	0018      	movs	r0, r3
 80046bc:	f000 ff2c 	bl	8005518 <sht3x_read_temperature_and_humidity>
		//printf("Initial temperature: %.2fC, humidity: %.2f%%RH\n\r", temperature, humidity);
		// Enable heater for two seconds.
		sht3x_set_header_enable(&handle, true);
 80046c0:	4b24      	ldr	r3, [pc, #144]	; (8004754 <readSensors+0xac>)
 80046c2:	2101      	movs	r1, #1
 80046c4:	0018      	movs	r0, r3
 80046c6:	f000 ffbf 	bl	8005648 <sht3x_set_header_enable>
		HAL_Delay(1000);
 80046ca:	23fa      	movs	r3, #250	; 0xfa
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	0018      	movs	r0, r3
 80046d0:	f001 fb4a 	bl	8005d68 <HAL_Delay>
		sht3x_set_header_enable(&handle, false);
 80046d4:	4b1f      	ldr	r3, [pc, #124]	; (8004754 <readSensors+0xac>)
 80046d6:	2100      	movs	r1, #0
 80046d8:	0018      	movs	r0, r3
 80046da:	f000 ffb5 	bl	8005648 <sht3x_set_header_enable>
		// Read temperature and humidity again.
		respone_sht30 = sht3x_read_temperature_and_humidity(&handle,
 80046de:	4a1b      	ldr	r2, [pc, #108]	; (800474c <readSensors+0xa4>)
 80046e0:	491b      	ldr	r1, [pc, #108]	; (8004750 <readSensors+0xa8>)
 80046e2:	4b1c      	ldr	r3, [pc, #112]	; (8004754 <readSensors+0xac>)
 80046e4:	0018      	movs	r0, r3
 80046e6:	f000 ff17 	bl	8005518 <sht3x_read_temperature_and_humidity>
 80046ea:	0003      	movs	r3, r0
 80046ec:	001a      	movs	r2, r3
 80046ee:	4b1a      	ldr	r3, [pc, #104]	; (8004758 <readSensors+0xb0>)
 80046f0:	701a      	strb	r2, [r3, #0]
				&temperature, &humidity);
		HAL_Delay(1000);
 80046f2:	23fa      	movs	r3, #250	; 0xfa
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	0018      	movs	r0, r3
 80046f8:	f001 fb36 	bl	8005d68 <HAL_Delay>
#endif
#if bh1750
		lux = Read_BH1750();
 80046fc:	f7ff ff52 	bl	80045a4 <Read_BH1750>
 8004700:	0003      	movs	r3, r0
 8004702:	0018      	movs	r0, r3
 8004704:	f7fc fd6c 	bl	80011e0 <__aeabi_i2f>
 8004708:	1c02      	adds	r2, r0, #0
 800470a:	4b14      	ldr	r3, [pc, #80]	; (800475c <readSensors+0xb4>)
 800470c:	601a      	str	r2, [r3, #0]
		HAL_Delay(1000);
 800470e:	23fa      	movs	r3, #250	; 0xfa
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	0018      	movs	r0, r3
 8004714:	f001 fb28 	bl	8005d68 <HAL_Delay>
#if rk500_02
		read_rk500_02(rika500_02);
		HAL_Delay(1000);
#endif
#if NBL_S_TMC_7
				read_niubol_7(niubol_7);
 8004718:	4b11      	ldr	r3, [pc, #68]	; (8004760 <readSensors+0xb8>)
 800471a:	0018      	movs	r0, r3
 800471c:	f7ff fd56 	bl	80041cc <read_niubol_7>
				HAL_Delay(1000);
 8004720:	23fa      	movs	r3, #250	; 0xfa
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	0018      	movs	r0, r3
 8004726:	f001 fb1f 	bl	8005d68 <HAL_Delay>
	for (int i = 1; i <= 2; i++) {
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	3301      	adds	r3, #1
 800472e:	607b      	str	r3, [r7, #4]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2b02      	cmp	r3, #2
 8004734:	ddbe      	ble.n	80046b4 <readSensors+0xc>
				write_co2(data_co2);
				HAL_Delay(1000);
		#endif
	}
	//HAL_GPIO_WritePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(ENABLE_SENSOR_GPIO_Port, ENABLE_SENSOR_Pin, GPIO_PIN_RESET);
 8004736:	2380      	movs	r3, #128	; 0x80
 8004738:	005b      	lsls	r3, r3, #1
 800473a:	480a      	ldr	r0, [pc, #40]	; (8004764 <readSensors+0xbc>)
 800473c:	2200      	movs	r2, #0
 800473e:	0019      	movs	r1, r3
 8004740:	f002 faa8 	bl	8006c94 <HAL_GPIO_WritePin>
}
 8004744:	46c0      	nop			; (mov r8, r8)
 8004746:	46bd      	mov	sp, r7
 8004748:	b002      	add	sp, #8
 800474a:	bd80      	pop	{r7, pc}
 800474c:	20000600 	.word	0x20000600
 8004750:	200005fc 	.word	0x200005fc
 8004754:	200000d4 	.word	0x200000d4
 8004758:	200008c5 	.word	0x200008c5
 800475c:	200008c0 	.word	0x200008c0
 8004760:	200000c4 	.word	0x200000c4
 8004764:	50000400 	.word	0x50000400

08004768 <connectMQTT>:

int connectMQTT(void) {
 8004768:	b590      	push	{r4, r7, lr}
 800476a:	b083      	sub	sp, #12
 800476c:	af02      	add	r7, sp, #8
	//readSensors();
	sendingToSimcomA76xx(ATE0);
 800476e:	4b54      	ldr	r3, [pc, #336]	; (80048c0 <connectMQTT+0x158>)
 8004770:	0018      	movs	r0, r3
 8004772:	f7ff fd3d 	bl	80041f0 <sendingToSimcomA76xx>
	HAL_Delay(200);
 8004776:	20c8      	movs	r0, #200	; 0xc8
 8004778:	f001 faf6 	bl	8005d68 <HAL_Delay>
	sendingToSimcomA76xx(AT_START_MQTT);
 800477c:	4b51      	ldr	r3, [pc, #324]	; (80048c4 <connectMQTT+0x15c>)
 800477e:	0018      	movs	r0, r3
 8004780:	f7ff fd36 	bl	80041f0 <sendingToSimcomA76xx>
	HAL_Delay(500);
 8004784:	23fa      	movs	r3, #250	; 0xfa
 8004786:	005b      	lsls	r3, r3, #1
 8004788:	0018      	movs	r0, r3
 800478a:	f001 faed 	bl	8005d68 <HAL_Delay>
	sprintf(AT_COMMAND, AT_ACQUIRE_CLIENT, MQTT_CLIENT_ID);
 800478e:	4a4e      	ldr	r2, [pc, #312]	; (80048c8 <connectMQTT+0x160>)
 8004790:	494e      	ldr	r1, [pc, #312]	; (80048cc <connectMQTT+0x164>)
 8004792:	4b4f      	ldr	r3, [pc, #316]	; (80048d0 <connectMQTT+0x168>)
 8004794:	0018      	movs	r0, r3
 8004796:	f007 fecf 	bl	800c538 <siprintf>
	sendingToSimcomA76xx(AT_COMMAND);
 800479a:	4b4d      	ldr	r3, [pc, #308]	; (80048d0 <connectMQTT+0x168>)
 800479c:	0018      	movs	r0, r3
 800479e:	f7ff fd27 	bl	80041f0 <sendingToSimcomA76xx>
	HAL_Delay(500);
 80047a2:	23fa      	movs	r3, #250	; 0xfa
 80047a4:	005b      	lsls	r3, r3, #1
 80047a6:	0018      	movs	r0, r3
 80047a8:	f001 fade 	bl	8005d68 <HAL_Delay>
	sprintf(AT_COMMAND, AT_CONNECT_MQTT, MQTT_HOST, MQTT_PORT, MQTT_USER,
 80047ac:	4c49      	ldr	r4, [pc, #292]	; (80048d4 <connectMQTT+0x16c>)
 80047ae:	4a4a      	ldr	r2, [pc, #296]	; (80048d8 <connectMQTT+0x170>)
 80047b0:	494a      	ldr	r1, [pc, #296]	; (80048dc <connectMQTT+0x174>)
 80047b2:	4847      	ldr	r0, [pc, #284]	; (80048d0 <connectMQTT+0x168>)
 80047b4:	4b4a      	ldr	r3, [pc, #296]	; (80048e0 <connectMQTT+0x178>)
 80047b6:	9301      	str	r3, [sp, #4]
 80047b8:	4b4a      	ldr	r3, [pc, #296]	; (80048e4 <connectMQTT+0x17c>)
 80047ba:	9300      	str	r3, [sp, #0]
 80047bc:	0023      	movs	r3, r4
 80047be:	f007 febb 	bl	800c538 <siprintf>
	MQTT_PASS);
	sendingToSimcomA76xx(AT_COMMAND);
 80047c2:	4b43      	ldr	r3, [pc, #268]	; (80048d0 <connectMQTT+0x168>)
 80047c4:	0018      	movs	r0, r3
 80047c6:	f7ff fd13 	bl	80041f0 <sendingToSimcomA76xx>
	HAL_Delay(700);
 80047ca:	23af      	movs	r3, #175	; 0xaf
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	0018      	movs	r0, r3
 80047d0:	f001 faca 	bl	8005d68 <HAL_Delay>
	// Start Sensor
	sprintf(BUFFER_TOPPIC_MQTT, "%s/sn/%s", FARM, MQTT_CLIENT_ID);
 80047d4:	4b3c      	ldr	r3, [pc, #240]	; (80048c8 <connectMQTT+0x160>)
 80047d6:	4a44      	ldr	r2, [pc, #272]	; (80048e8 <connectMQTT+0x180>)
 80047d8:	4944      	ldr	r1, [pc, #272]	; (80048ec <connectMQTT+0x184>)
 80047da:	4845      	ldr	r0, [pc, #276]	; (80048f0 <connectMQTT+0x188>)
 80047dc:	f007 feac 	bl	800c538 <siprintf>
	sprintf(AT_COMMAND, AT_SET_PUBLISH_TOPIC, (int) strlen(BUFFER_TOPPIC_MQTT));
 80047e0:	4b43      	ldr	r3, [pc, #268]	; (80048f0 <connectMQTT+0x188>)
 80047e2:	0018      	movs	r0, r3
 80047e4:	f7fb fc90 	bl	8000108 <strlen>
 80047e8:	0003      	movs	r3, r0
 80047ea:	001a      	movs	r2, r3
 80047ec:	4941      	ldr	r1, [pc, #260]	; (80048f4 <connectMQTT+0x18c>)
 80047ee:	4b38      	ldr	r3, [pc, #224]	; (80048d0 <connectMQTT+0x168>)
 80047f0:	0018      	movs	r0, r3
 80047f2:	f007 fea1 	bl	800c538 <siprintf>
	sendingToSimcomA76xx(AT_COMMAND);
 80047f6:	4b36      	ldr	r3, [pc, #216]	; (80048d0 <connectMQTT+0x168>)
 80047f8:	0018      	movs	r0, r3
 80047fa:	f7ff fcf9 	bl	80041f0 <sendingToSimcomA76xx>
	HAL_Delay(500);
 80047fe:	23fa      	movs	r3, #250	; 0xfa
 8004800:	005b      	lsls	r3, r3, #1
 8004802:	0018      	movs	r0, r3
 8004804:	f001 fab0 	bl	8005d68 <HAL_Delay>
	sendingToSimcomA76xx(BUFFER_TOPPIC_MQTT);
 8004808:	4b39      	ldr	r3, [pc, #228]	; (80048f0 <connectMQTT+0x188>)
 800480a:	0018      	movs	r0, r3
 800480c:	f7ff fcf0 	bl	80041f0 <sendingToSimcomA76xx>
	HAL_Delay(500);
 8004810:	23fa      	movs	r3, #250	; 0xfa
 8004812:	005b      	lsls	r3, r3, #1
 8004814:	0018      	movs	r0, r3
 8004816:	f001 faa7 	bl	8005d68 <HAL_Delay>
	// test json
	sprintf(BUFFER_TOPPIC_MQTT, "%s/sn/%s", FARM, MQTT_CLIENT_ID);
 800481a:	4b2b      	ldr	r3, [pc, #172]	; (80048c8 <connectMQTT+0x160>)
 800481c:	4a32      	ldr	r2, [pc, #200]	; (80048e8 <connectMQTT+0x180>)
 800481e:	4933      	ldr	r1, [pc, #204]	; (80048ec <connectMQTT+0x184>)
 8004820:	4833      	ldr	r0, [pc, #204]	; (80048f0 <connectMQTT+0x188>)
 8004822:	f007 fe89 	bl	800c538 <siprintf>
	sprintf(AT_COMMAND, AT_SET_PUBLISH_TOPIC, (int) strlen(BUFFER_TOPPIC_MQTT));
 8004826:	4b32      	ldr	r3, [pc, #200]	; (80048f0 <connectMQTT+0x188>)
 8004828:	0018      	movs	r0, r3
 800482a:	f7fb fc6d 	bl	8000108 <strlen>
 800482e:	0003      	movs	r3, r0
 8004830:	001a      	movs	r2, r3
 8004832:	4930      	ldr	r1, [pc, #192]	; (80048f4 <connectMQTT+0x18c>)
 8004834:	4b26      	ldr	r3, [pc, #152]	; (80048d0 <connectMQTT+0x168>)
 8004836:	0018      	movs	r0, r3
 8004838:	f007 fe7e 	bl	800c538 <siprintf>
	sendingToSimcomA76xx(AT_COMMAND);
 800483c:	4b24      	ldr	r3, [pc, #144]	; (80048d0 <connectMQTT+0x168>)
 800483e:	0018      	movs	r0, r3
 8004840:	f7ff fcd6 	bl	80041f0 <sendingToSimcomA76xx>
	HAL_Delay(500);
 8004844:	23fa      	movs	r3, #250	; 0xfa
 8004846:	005b      	lsls	r3, r3, #1
 8004848:	0018      	movs	r0, r3
 800484a:	f001 fa8d 	bl	8005d68 <HAL_Delay>
	sendingToSimcomA76xx(BUFFER_TOPPIC_MQTT);
 800484e:	4b28      	ldr	r3, [pc, #160]	; (80048f0 <connectMQTT+0x188>)
 8004850:	0018      	movs	r0, r3
 8004852:	f7ff fccd 	bl	80041f0 <sendingToSimcomA76xx>
	HAL_Delay(500);
 8004856:	23fa      	movs	r3, #250	; 0xfa
 8004858:	005b      	lsls	r3, r3, #1
 800485a:	0018      	movs	r0, r3
 800485c:	f001 fa84 	bl	8005d68 <HAL_Delay>
	sprintf(AT_COMMAND, AT_SET_PUBLISH_PAYLOAD, (int) strlen(testjson));
 8004860:	4b25      	ldr	r3, [pc, #148]	; (80048f8 <connectMQTT+0x190>)
 8004862:	0018      	movs	r0, r3
 8004864:	f7fb fc50 	bl	8000108 <strlen>
 8004868:	0003      	movs	r3, r0
 800486a:	001a      	movs	r2, r3
 800486c:	4923      	ldr	r1, [pc, #140]	; (80048fc <connectMQTT+0x194>)
 800486e:	4b18      	ldr	r3, [pc, #96]	; (80048d0 <connectMQTT+0x168>)
 8004870:	0018      	movs	r0, r3
 8004872:	f007 fe61 	bl	800c538 <siprintf>
	sendingToSimcomA76xx(AT_COMMAND);
 8004876:	4b16      	ldr	r3, [pc, #88]	; (80048d0 <connectMQTT+0x168>)
 8004878:	0018      	movs	r0, r3
 800487a:	f7ff fcb9 	bl	80041f0 <sendingToSimcomA76xx>
	HAL_Delay(500);
 800487e:	23fa      	movs	r3, #250	; 0xfa
 8004880:	005b      	lsls	r3, r3, #1
 8004882:	0018      	movs	r0, r3
 8004884:	f001 fa70 	bl	8005d68 <HAL_Delay>
	sendingToSimcomA76xx(testjson);
 8004888:	4b1b      	ldr	r3, [pc, #108]	; (80048f8 <connectMQTT+0x190>)
 800488a:	0018      	movs	r0, r3
 800488c:	f7ff fcb0 	bl	80041f0 <sendingToSimcomA76xx>
	HAL_Delay(500);
 8004890:	23fa      	movs	r3, #250	; 0xfa
 8004892:	005b      	lsls	r3, r3, #1
 8004894:	0018      	movs	r0, r3
 8004896:	f001 fa67 	bl	8005d68 <HAL_Delay>
	sendingToSimcomA76xx(AT_PUBLISH);
 800489a:	4b19      	ldr	r3, [pc, #100]	; (8004900 <connectMQTT+0x198>)
 800489c:	0018      	movs	r0, r3
 800489e:	f7ff fca7 	bl	80041f0 <sendingToSimcomA76xx>
	HAL_Delay(500);
 80048a2:	23fa      	movs	r3, #250	; 0xfa
 80048a4:	005b      	lsls	r3, r3, #1
 80048a6:	0018      	movs	r0, r3
 80048a8:	f001 fa5e 	bl	8005d68 <HAL_Delay>

	isConnectMQTT = 1;
 80048ac:	4b15      	ldr	r3, [pc, #84]	; (8004904 <connectMQTT+0x19c>)
 80048ae:	2201      	movs	r2, #1
 80048b0:	601a      	str	r2, [r3, #0]
	return isConnectMQTT;
 80048b2:	4b14      	ldr	r3, [pc, #80]	; (8004904 <connectMQTT+0x19c>)
 80048b4:	681b      	ldr	r3, [r3, #0]
}
 80048b6:	0018      	movs	r0, r3
 80048b8:	46bd      	mov	sp, r7
 80048ba:	b001      	add	sp, #4
 80048bc:	bd90      	pop	{r4, r7, pc}
 80048be:	46c0      	nop			; (mov r8, r8)
 80048c0:	20000014 	.word	0x20000014
 80048c4:	20000028 	.word	0x20000028
 80048c8:	0800fa84 	.word	0x0800fa84
 80048cc:	20000038 	.word	0x20000038
 80048d0:	2000063c 	.word	0x2000063c
 80048d4:	0000075b 	.word	0x0000075b
 80048d8:	0800fa90 	.word	0x0800fa90
 80048dc:	20000050 	.word	0x20000050
 80048e0:	0800faac 	.word	0x0800faac
 80048e4:	0800fab4 	.word	0x0800fab4
 80048e8:	0800fac0 	.word	0x0800fac0
 80048ec:	0800fad4 	.word	0x0800fad4
 80048f0:	20000768 	.word	0x20000768
 80048f4:	2000007c 	.word	0x2000007c
 80048f8:	200008c8 	.word	0x200008c8
 80048fc:	20000094 	.word	0x20000094
 8004900:	200000ac 	.word	0x200000ac
 8004904:	200005e4 	.word	0x200005e4

08004908 <Sleep_Stm32_A7672S>:

int Sleep_Stm32_A7672S() {
 8004908:	b580      	push	{r7, lr}
 800490a:	af00      	add	r7, sp, #0
	//Sleep Simcom A7672S

	HAL_GPIO_WritePin(ENABLE_A76XX_GPIO_Port, ENABLE_A76XX_Pin, GPIO_PIN_RESET);
 800490c:	2380      	movs	r3, #128	; 0x80
 800490e:	0119      	lsls	r1, r3, #4
 8004910:	23a0      	movs	r3, #160	; 0xa0
 8004912:	05db      	lsls	r3, r3, #23
 8004914:	2200      	movs	r2, #0
 8004916:	0018      	movs	r0, r3
 8004918:	f002 f9bc 	bl	8006c94 <HAL_GPIO_WritePin>
	HAL_Delay(5000);
 800491c:	4b11      	ldr	r3, [pc, #68]	; (8004964 <Sleep_Stm32_A7672S+0x5c>)
 800491e:	0018      	movs	r0, r3
 8004920:	f001 fa22 	bl	8005d68 <HAL_Delay>
	//sendingToSimcomA76xx("AT+CPOF");
	HAL_GPIO_WritePin(ENABLE_A76XX_GPIO_Port, ENABLE_A76XX_Pin, GPIO_PIN_SET);
 8004924:	2380      	movs	r3, #128	; 0x80
 8004926:	0119      	lsls	r1, r3, #4
 8004928:	23a0      	movs	r3, #160	; 0xa0
 800492a:	05db      	lsls	r3, r3, #23
 800492c:	2201      	movs	r2, #1
 800492e:	0018      	movs	r0, r3
 8004930:	f002 f9b0 	bl	8006c94 <HAL_GPIO_WritePin>
	HAL_Delay(6000);
 8004934:	4b0c      	ldr	r3, [pc, #48]	; (8004968 <Sleep_Stm32_A7672S+0x60>)
 8004936:	0018      	movs	r0, r3
 8004938:	f001 fa16 	bl	8005d68 <HAL_Delay>
	//CLose sensor
	HAL_GPIO_WritePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin, GPIO_PIN_RESET);
 800493c:	4b0b      	ldr	r3, [pc, #44]	; (800496c <Sleep_Stm32_A7672S+0x64>)
 800493e:	2200      	movs	r2, #0
 8004940:	2104      	movs	r1, #4
 8004942:	0018      	movs	r0, r3
 8004944:	f002 f9a6 	bl	8006c94 <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start_IT(&htim6);
 8004948:	4b09      	ldr	r3, [pc, #36]	; (8004970 <Sleep_Stm32_A7672S+0x68>)
 800494a:	0018      	movs	r0, r3
 800494c:	f004 f8cc 	bl	8008ae8 <HAL_TIM_Base_Start_IT>
	HAL_SuspendTick();
 8004950:	f001 fa2e 	bl	8005db0 <HAL_SuspendTick>
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFE);
 8004954:	2102      	movs	r1, #2
 8004956:	2000      	movs	r0, #0
 8004958:	f003 f944 	bl	8007be4 <HAL_PWR_EnterSLEEPMode>
	HAL_ResumeTick();
 800495c:	f001 fa36 	bl	8005dcc <HAL_ResumeTick>
	NVIC_SystemReset();
 8004960:	f7ff fc22 	bl	80041a8 <__NVIC_SystemReset>
 8004964:	00001388 	.word	0x00001388
 8004968:	00001770 	.word	0x00001770
 800496c:	50000400 	.word	0x50000400
 8004970:	200003d0 	.word	0x200003d0

08004974 <Filter_Baterry_Values>:
	isSleepMode = 1;

	return isSleepMode;
}
int Filter_Baterry_Values(){
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
	for(int i=0;i<times;i++)
 800497a:	2300      	movs	r3, #0
 800497c:	607b      	str	r3, [r7, #4]
 800497e:	e019      	b.n	80049b4 <Filter_Baterry_Values+0x40>
	{
		HAL_ADC_Start(&hadc);
 8004980:	4b3d      	ldr	r3, [pc, #244]	; (8004a78 <Filter_Baterry_Values+0x104>)
 8004982:	0018      	movs	r0, r3
 8004984:	f001 fba4 	bl	80060d0 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc,HAL_MAX_DELAY);
 8004988:	2301      	movs	r3, #1
 800498a:	425a      	negs	r2, r3
 800498c:	4b3a      	ldr	r3, [pc, #232]	; (8004a78 <Filter_Baterry_Values+0x104>)
 800498e:	0011      	movs	r1, r2
 8004990:	0018      	movs	r0, r3
 8004992:	f001 fc31 	bl	80061f8 <HAL_ADC_PollForConversion>
		HAL_Delay(100);
 8004996:	2064      	movs	r0, #100	; 0x64
 8004998:	f001 f9e6 	bl	8005d68 <HAL_Delay>
		arrayBattery[i]=HAL_ADC_GetValue(&hadc);
 800499c:	4b36      	ldr	r3, [pc, #216]	; (8004a78 <Filter_Baterry_Values+0x104>)
 800499e:	0018      	movs	r0, r3
 80049a0:	f001 fcc6 	bl	8006330 <HAL_ADC_GetValue>
 80049a4:	0001      	movs	r1, r0
 80049a6:	4b35      	ldr	r3, [pc, #212]	; (8004a7c <Filter_Baterry_Values+0x108>)
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	0092      	lsls	r2, r2, #2
 80049ac:	50d1      	str	r1, [r2, r3]
	for(int i=0;i<times;i++)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	3301      	adds	r3, #1
 80049b2:	607b      	str	r3, [r7, #4]
 80049b4:	4b32      	ldr	r3, [pc, #200]	; (8004a80 <Filter_Baterry_Values+0x10c>)
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	001a      	movs	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4293      	cmp	r3, r2
 80049be:	dbdf      	blt.n	8004980 <Filter_Baterry_Values+0xc>
	}
	adcValue=MediumBattery();
 80049c0:	f000 f874 	bl	8004aac <MediumBattery>
 80049c4:	0003      	movs	r3, r0
 80049c6:	001a      	movs	r2, r3
 80049c8:	4b2e      	ldr	r3, [pc, #184]	; (8004a84 <Filter_Baterry_Values+0x110>)
 80049ca:	601a      	str	r2, [r3, #0]
	BatteryLevel=((adcValue/4095.0)*3.3);
 80049cc:	4b2d      	ldr	r3, [pc, #180]	; (8004a84 <Filter_Baterry_Values+0x110>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	0018      	movs	r0, r3
 80049d2:	f7fe fac1 	bl	8002f58 <__aeabi_ui2d>
 80049d6:	2200      	movs	r2, #0
 80049d8:	4b2b      	ldr	r3, [pc, #172]	; (8004a88 <Filter_Baterry_Values+0x114>)
 80049da:	f7fc fffb 	bl	80019d4 <__aeabi_ddiv>
 80049de:	0002      	movs	r2, r0
 80049e0:	000b      	movs	r3, r1
 80049e2:	0010      	movs	r0, r2
 80049e4:	0019      	movs	r1, r3
 80049e6:	4a29      	ldr	r2, [pc, #164]	; (8004a8c <Filter_Baterry_Values+0x118>)
 80049e8:	4b29      	ldr	r3, [pc, #164]	; (8004a90 <Filter_Baterry_Values+0x11c>)
 80049ea:	f7fd fbed 	bl	80021c8 <__aeabi_dmul>
 80049ee:	0002      	movs	r2, r0
 80049f0:	000b      	movs	r3, r1
 80049f2:	0010      	movs	r0, r2
 80049f4:	0019      	movs	r1, r3
 80049f6:	f7fe fb1d 	bl	8003034 <__aeabi_d2f>
 80049fa:	1c02      	adds	r2, r0, #0
 80049fc:	4b25      	ldr	r3, [pc, #148]	; (8004a94 <Filter_Baterry_Values+0x120>)
 80049fe:	601a      	str	r2, [r3, #0]
	PercentageBattery=((BatteryLevel-2.5)/0.5)*100;
 8004a00:	4b24      	ldr	r3, [pc, #144]	; (8004a94 <Filter_Baterry_Values+0x120>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	1c18      	adds	r0, r3, #0
 8004a06:	f7fe facd 	bl	8002fa4 <__aeabi_f2d>
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	4b22      	ldr	r3, [pc, #136]	; (8004a98 <Filter_Baterry_Values+0x124>)
 8004a0e:	f7fd fe9d 	bl	800274c <__aeabi_dsub>
 8004a12:	0002      	movs	r2, r0
 8004a14:	000b      	movs	r3, r1
 8004a16:	0010      	movs	r0, r2
 8004a18:	0019      	movs	r1, r3
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	4b1f      	ldr	r3, [pc, #124]	; (8004a9c <Filter_Baterry_Values+0x128>)
 8004a1e:	f7fc ffd9 	bl	80019d4 <__aeabi_ddiv>
 8004a22:	0002      	movs	r2, r0
 8004a24:	000b      	movs	r3, r1
 8004a26:	0010      	movs	r0, r2
 8004a28:	0019      	movs	r1, r3
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	4b1c      	ldr	r3, [pc, #112]	; (8004aa0 <Filter_Baterry_Values+0x12c>)
 8004a2e:	f7fd fbcb 	bl	80021c8 <__aeabi_dmul>
 8004a32:	0002      	movs	r2, r0
 8004a34:	000b      	movs	r3, r1
 8004a36:	0010      	movs	r0, r2
 8004a38:	0019      	movs	r1, r3
 8004a3a:	f7fe fafb 	bl	8003034 <__aeabi_d2f>
 8004a3e:	1c02      	adds	r2, r0, #0
 8004a40:	4b18      	ldr	r3, [pc, #96]	; (8004aa4 <Filter_Baterry_Values+0x130>)
 8004a42:	601a      	str	r2, [r3, #0]
	if(PercentageBattery>100)
 8004a44:	4b17      	ldr	r3, [pc, #92]	; (8004aa4 <Filter_Baterry_Values+0x130>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4917      	ldr	r1, [pc, #92]	; (8004aa8 <Filter_Baterry_Values+0x134>)
 8004a4a:	1c18      	adds	r0, r3, #0
 8004a4c:	f7fb fd52 	bl	80004f4 <__aeabi_fcmpgt>
 8004a50:	1e03      	subs	r3, r0, #0
 8004a52:	d002      	beq.n	8004a5a <Filter_Baterry_Values+0xe6>
	{
		PercentageBattery=100;
 8004a54:	4b13      	ldr	r3, [pc, #76]	; (8004aa4 <Filter_Baterry_Values+0x130>)
 8004a56:	4a14      	ldr	r2, [pc, #80]	; (8004aa8 <Filter_Baterry_Values+0x134>)
 8004a58:	601a      	str	r2, [r3, #0]
	}
	HAL_ADC_Stop(&hadc);
 8004a5a:	4b07      	ldr	r3, [pc, #28]	; (8004a78 <Filter_Baterry_Values+0x104>)
 8004a5c:	0018      	movs	r0, r3
 8004a5e:	f001 fb8b 	bl	8006178 <HAL_ADC_Stop>
	return PercentageBattery ;
 8004a62:	4b10      	ldr	r3, [pc, #64]	; (8004aa4 <Filter_Baterry_Values+0x130>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	1c18      	adds	r0, r3, #0
 8004a68:	f7fc fb9a 	bl	80011a0 <__aeabi_f2iz>
 8004a6c:	0003      	movs	r3, r0
}
 8004a6e:	0018      	movs	r0, r3
 8004a70:	46bd      	mov	sp, r7
 8004a72:	b002      	add	sp, #8
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	46c0      	nop			; (mov r8, r8)
 8004a78:	200002cc 	.word	0x200002cc
 8004a7c:	20000610 	.word	0x20000610
 8004a80:	20000010 	.word	0x20000010
 8004a84:	20000604 	.word	0x20000604
 8004a88:	40affe00 	.word	0x40affe00
 8004a8c:	66666666 	.word	0x66666666
 8004a90:	400a6666 	.word	0x400a6666
 8004a94:	20000608 	.word	0x20000608
 8004a98:	40040000 	.word	0x40040000
 8004a9c:	3fe00000 	.word	0x3fe00000
 8004aa0:	40590000 	.word	0x40590000
 8004aa4:	2000060c 	.word	0x2000060c
 8004aa8:	42c80000 	.word	0x42c80000

08004aac <MediumBattery>:
int MediumBattery(){
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
	for(int i=0; i<times-1; i++)
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	607b      	str	r3, [r7, #4]
 8004ab6:	e02d      	b.n	8004b14 <MediumBattery+0x68>
	{
		for(int j=i+1;j<times;j++)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	3301      	adds	r3, #1
 8004abc:	603b      	str	r3, [r7, #0]
 8004abe:	e020      	b.n	8004b02 <MediumBattery+0x56>
		{
			if(arrayBattery[i]>arrayBattery[j])
 8004ac0:	4b1d      	ldr	r3, [pc, #116]	; (8004b38 <MediumBattery+0x8c>)
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	0092      	lsls	r2, r2, #2
 8004ac6:	58d2      	ldr	r2, [r2, r3]
 8004ac8:	4b1b      	ldr	r3, [pc, #108]	; (8004b38 <MediumBattery+0x8c>)
 8004aca:	6839      	ldr	r1, [r7, #0]
 8004acc:	0089      	lsls	r1, r1, #2
 8004ace:	58cb      	ldr	r3, [r1, r3]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d913      	bls.n	8004afc <MediumBattery+0x50>
			{

			  temp=arrayBattery[i];
 8004ad4:	4b18      	ldr	r3, [pc, #96]	; (8004b38 <MediumBattery+0x8c>)
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	0092      	lsls	r2, r2, #2
 8004ada:	58d2      	ldr	r2, [r2, r3]
 8004adc:	4b17      	ldr	r3, [pc, #92]	; (8004b3c <MediumBattery+0x90>)
 8004ade:	601a      	str	r2, [r3, #0]

			  arrayBattery[i]=arrayBattery[j];
 8004ae0:	4b15      	ldr	r3, [pc, #84]	; (8004b38 <MediumBattery+0x8c>)
 8004ae2:	683a      	ldr	r2, [r7, #0]
 8004ae4:	0092      	lsls	r2, r2, #2
 8004ae6:	58d1      	ldr	r1, [r2, r3]
 8004ae8:	4b13      	ldr	r3, [pc, #76]	; (8004b38 <MediumBattery+0x8c>)
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	0092      	lsls	r2, r2, #2
 8004aee:	50d1      	str	r1, [r2, r3]

			  arrayBattery[j]=temp;
 8004af0:	4b12      	ldr	r3, [pc, #72]	; (8004b3c <MediumBattery+0x90>)
 8004af2:	6819      	ldr	r1, [r3, #0]
 8004af4:	4b10      	ldr	r3, [pc, #64]	; (8004b38 <MediumBattery+0x8c>)
 8004af6:	683a      	ldr	r2, [r7, #0]
 8004af8:	0092      	lsls	r2, r2, #2
 8004afa:	50d1      	str	r1, [r2, r3]
		for(int j=i+1;j<times;j++)
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	3301      	adds	r3, #1
 8004b00:	603b      	str	r3, [r7, #0]
 8004b02:	4b0f      	ldr	r3, [pc, #60]	; (8004b40 <MediumBattery+0x94>)
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	001a      	movs	r2, r3
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	dbd8      	blt.n	8004ac0 <MediumBattery+0x14>
	for(int i=0; i<times-1; i++)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	3301      	adds	r3, #1
 8004b12:	607b      	str	r3, [r7, #4]
 8004b14:	4b0a      	ldr	r3, [pc, #40]	; (8004b40 <MediumBattery+0x94>)
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	3b01      	subs	r3, #1
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	dbcb      	blt.n	8004ab8 <MediumBattery+0xc>

			}
		}
	}
	return arrayBattery[times/2];
 8004b20:	4b07      	ldr	r3, [pc, #28]	; (8004b40 <MediumBattery+0x94>)
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	085b      	lsrs	r3, r3, #1
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	001a      	movs	r2, r3
 8004b2a:	4b03      	ldr	r3, [pc, #12]	; (8004b38 <MediumBattery+0x8c>)
 8004b2c:	0092      	lsls	r2, r2, #2
 8004b2e:	58d3      	ldr	r3, [r2, r3]
}
 8004b30:	0018      	movs	r0, r3
 8004b32:	46bd      	mov	sp, r7
 8004b34:	b002      	add	sp, #8
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	20000610 	.word	0x20000610
 8004b3c:	20000638 	.word	0x20000638
 8004b40:	20000010 	.word	0x20000010

08004b44 <exampleFunction>:
void exampleFunction(void) {
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
//    int age = 30;
//    double score = 85.5;
//    const char *hobbies[] = {"reading", "swimming", "coding"};
//    int hobbies_count = sizeof(hobbies) / sizeof(hobbies[0]);
	// Tạo một đối tượng JSON
	cJSON *json = cJSON_CreateObject();
 8004b4a:	f7ff fb17 	bl	800417c <cJSON_CreateObject>
 8004b4e:	0003      	movs	r3, r0
 8004b50:	607b      	str	r3, [r7, #4]
	// Thêm các giá trị vào đối tượng JSON
#if sht30
	if (respone_sht30 == true) {
 8004b52:	4b6c      	ldr	r3, [pc, #432]	; (8004d04 <exampleFunction+0x1c0>)
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d133      	bne.n	8004bc2 <exampleFunction+0x7e>
		airT = (temperature * 100) / 100;
 8004b5a:	4b6b      	ldr	r3, [pc, #428]	; (8004d08 <exampleFunction+0x1c4>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	496b      	ldr	r1, [pc, #428]	; (8004d0c <exampleFunction+0x1c8>)
 8004b60:	1c18      	adds	r0, r3, #0
 8004b62:	f7fc f82f 	bl	8000bc4 <__aeabi_fmul>
 8004b66:	1c03      	adds	r3, r0, #0
 8004b68:	4968      	ldr	r1, [pc, #416]	; (8004d0c <exampleFunction+0x1c8>)
 8004b6a:	1c18      	adds	r0, r3, #0
 8004b6c:	f7fb fe60 	bl	8000830 <__aeabi_fdiv>
 8004b70:	1c03      	adds	r3, r0, #0
 8004b72:	1c1a      	adds	r2, r3, #0
 8004b74:	4b66      	ldr	r3, [pc, #408]	; (8004d10 <exampleFunction+0x1cc>)
 8004b76:	601a      	str	r2, [r3, #0]
		airH = (humidity * 100) / 100;
 8004b78:	4b66      	ldr	r3, [pc, #408]	; (8004d14 <exampleFunction+0x1d0>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4963      	ldr	r1, [pc, #396]	; (8004d0c <exampleFunction+0x1c8>)
 8004b7e:	1c18      	adds	r0, r3, #0
 8004b80:	f7fc f820 	bl	8000bc4 <__aeabi_fmul>
 8004b84:	1c03      	adds	r3, r0, #0
 8004b86:	4961      	ldr	r1, [pc, #388]	; (8004d0c <exampleFunction+0x1c8>)
 8004b88:	1c18      	adds	r0, r3, #0
 8004b8a:	f7fb fe51 	bl	8000830 <__aeabi_fdiv>
 8004b8e:	1c03      	adds	r3, r0, #0
 8004b90:	1c1a      	adds	r2, r3, #0
 8004b92:	4b61      	ldr	r3, [pc, #388]	; (8004d18 <exampleFunction+0x1d4>)
 8004b94:	601a      	str	r2, [r3, #0]
		cJSON_AddNumberToObject(json, "airT", airT);
 8004b96:	4b5e      	ldr	r3, [pc, #376]	; (8004d10 <exampleFunction+0x1cc>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	1c18      	adds	r0, r3, #0
 8004b9c:	f7fe fa02 	bl	8002fa4 <__aeabi_f2d>
 8004ba0:	0002      	movs	r2, r0
 8004ba2:	000b      	movs	r3, r1
 8004ba4:	495d      	ldr	r1, [pc, #372]	; (8004d1c <exampleFunction+0x1d8>)
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f7ff fa7c 	bl	80040a4 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(json, "airRH", airH);
 8004bac:	4b5a      	ldr	r3, [pc, #360]	; (8004d18 <exampleFunction+0x1d4>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	1c18      	adds	r0, r3, #0
 8004bb2:	f7fe f9f7 	bl	8002fa4 <__aeabi_f2d>
 8004bb6:	0002      	movs	r2, r0
 8004bb8:	000b      	movs	r3, r1
 8004bba:	4959      	ldr	r1, [pc, #356]	; (8004d20 <exampleFunction+0x1dc>)
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f7ff fa71 	bl	80040a4 <cJSON_AddNumberToObject>
		respone_nbl_s_npk = false;
	}

#endif
#if NBL_S_TMC_7
	if (respone_NBL_S_TMC_7 == true) {
 8004bc2:	4b58      	ldr	r3, [pc, #352]	; (8004d24 <exampleFunction+0x1e0>)
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d14f      	bne.n	8004c6a <exampleFunction+0x126>
	    cJSON_AddNumberToObject(json, "soilT", soilTemperature_niubol_7);
 8004bca:	4b57      	ldr	r3, [pc, #348]	; (8004d28 <exampleFunction+0x1e4>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	1c18      	adds	r0, r3, #0
 8004bd0:	f7fe f9e8 	bl	8002fa4 <__aeabi_f2d>
 8004bd4:	0002      	movs	r2, r0
 8004bd6:	000b      	movs	r3, r1
 8004bd8:	4954      	ldr	r1, [pc, #336]	; (8004d2c <exampleFunction+0x1e8>)
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f7ff fa62 	bl	80040a4 <cJSON_AddNumberToObject>
	    cJSON_AddNumberToObject(json, "soilMC", soilMoisture_niubol_7);
 8004be0:	4b53      	ldr	r3, [pc, #332]	; (8004d30 <exampleFunction+0x1ec>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	1c18      	adds	r0, r3, #0
 8004be6:	f7fe f9dd 	bl	8002fa4 <__aeabi_f2d>
 8004bea:	0002      	movs	r2, r0
 8004bec:	000b      	movs	r3, r1
 8004bee:	4951      	ldr	r1, [pc, #324]	; (8004d34 <exampleFunction+0x1f0>)
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f7ff fa57 	bl	80040a4 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(json, "soilEC", soil_Conductivity_niubol_7);
 8004bf6:	4b50      	ldr	r3, [pc, #320]	; (8004d38 <exampleFunction+0x1f4>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	1c18      	adds	r0, r3, #0
 8004bfc:	f7fe f9d2 	bl	8002fa4 <__aeabi_f2d>
 8004c00:	0002      	movs	r2, r0
 8004c02:	000b      	movs	r3, r1
 8004c04:	494d      	ldr	r1, [pc, #308]	; (8004d3c <exampleFunction+0x1f8>)
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f7ff fa4c 	bl	80040a4 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(json, "soilPH", soil_pH_niubol_7);
 8004c0c:	4b4c      	ldr	r3, [pc, #304]	; (8004d40 <exampleFunction+0x1fc>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	1c18      	adds	r0, r3, #0
 8004c12:	f7fe f9c7 	bl	8002fa4 <__aeabi_f2d>
 8004c16:	0002      	movs	r2, r0
 8004c18:	000b      	movs	r3, r1
 8004c1a:	494a      	ldr	r1, [pc, #296]	; (8004d44 <exampleFunction+0x200>)
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f7ff fa41 	bl	80040a4 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(json, "fertN", soil_Nitrogen_niubol_7);
 8004c22:	4b49      	ldr	r3, [pc, #292]	; (8004d48 <exampleFunction+0x204>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	1c18      	adds	r0, r3, #0
 8004c28:	f7fe f9bc 	bl	8002fa4 <__aeabi_f2d>
 8004c2c:	0002      	movs	r2, r0
 8004c2e:	000b      	movs	r3, r1
 8004c30:	4946      	ldr	r1, [pc, #280]	; (8004d4c <exampleFunction+0x208>)
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f7ff fa36 	bl	80040a4 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(json, "fertP", soil_Phospho_niubol_7);
 8004c38:	4b45      	ldr	r3, [pc, #276]	; (8004d50 <exampleFunction+0x20c>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	1c18      	adds	r0, r3, #0
 8004c3e:	f7fe f9b1 	bl	8002fa4 <__aeabi_f2d>
 8004c42:	0002      	movs	r2, r0
 8004c44:	000b      	movs	r3, r1
 8004c46:	4943      	ldr	r1, [pc, #268]	; (8004d54 <exampleFunction+0x210>)
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f7ff fa2b 	bl	80040a4 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(json, "fertK", soil_Kali_niubol_7);
 8004c4e:	4b42      	ldr	r3, [pc, #264]	; (8004d58 <exampleFunction+0x214>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	1c18      	adds	r0, r3, #0
 8004c54:	f7fe f9a6 	bl	8002fa4 <__aeabi_f2d>
 8004c58:	0002      	movs	r2, r0
 8004c5a:	000b      	movs	r3, r1
 8004c5c:	493f      	ldr	r1, [pc, #252]	; (8004d5c <exampleFunction+0x218>)
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f7ff fa20 	bl	80040a4 <cJSON_AddNumberToObject>
		respone_NBL_S_TMC_7 = false;
 8004c64:	4b2f      	ldr	r3, [pc, #188]	; (8004d24 <exampleFunction+0x1e0>)
 8004c66:	2200      	movs	r2, #0
 8004c68:	701a      	strb	r2, [r3, #0]
	}

#endif
#if bh1750
	if (response_bh1750) {
 8004c6a:	4b3d      	ldr	r3, [pc, #244]	; (8004d60 <exampleFunction+0x21c>)
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00a      	beq.n	8004c88 <exampleFunction+0x144>
		cJSON_AddNumberToObject(json, "Light", lux);
 8004c72:	4b3c      	ldr	r3, [pc, #240]	; (8004d64 <exampleFunction+0x220>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	1c18      	adds	r0, r3, #0
 8004c78:	f7fe f994 	bl	8002fa4 <__aeabi_f2d>
 8004c7c:	0002      	movs	r2, r0
 8004c7e:	000b      	movs	r3, r1
 8004c80:	4939      	ldr	r1, [pc, #228]	; (8004d68 <exampleFunction+0x224>)
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f7ff fa0e 	bl	80040a4 <cJSON_AddNumberToObject>
	}
#endif
#if co2
	cJSON_AddNumberToObject(json, "Carbonic", carbonic);
#endif
	cJSON_AddNumberToObject(json, "_gsm_signal_strength", rssi);
 8004c88:	4b38      	ldr	r3, [pc, #224]	; (8004d6c <exampleFunction+0x228>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	0018      	movs	r0, r3
 8004c8e:	f7fe f933 	bl	8002ef8 <__aeabi_i2d>
 8004c92:	0002      	movs	r2, r0
 8004c94:	000b      	movs	r3, r1
 8004c96:	4936      	ldr	r1, [pc, #216]	; (8004d70 <exampleFunction+0x22c>)
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f7ff fa03 	bl	80040a4 <cJSON_AddNumberToObject>
	cJSON_AddNumberToObject(json, "_battery_level", PercentageBattery);
 8004c9e:	4b35      	ldr	r3, [pc, #212]	; (8004d74 <exampleFunction+0x230>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	1c18      	adds	r0, r3, #0
 8004ca4:	f7fe f97e 	bl	8002fa4 <__aeabi_f2d>
 8004ca8:	0002      	movs	r2, r0
 8004caa:	000b      	movs	r3, r1
 8004cac:	4932      	ldr	r1, [pc, #200]	; (8004d78 <exampleFunction+0x234>)
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f7ff f9f8 	bl	80040a4 <cJSON_AddNumberToObject>
//        cJSON_AddItemToArray(json_hobbies, cJSON_CreateString(hobbies[i]));
//    }
//    cJSON_AddItemToObject(json, "hobbies", json_hobbies);

	// Chuyển đổi đối tượng JSON thành chuỗi
	char *json_string = cJSON_Print(json);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	0018      	movs	r0, r3
 8004cb8:	f7fe feba 	bl	8003a30 <cJSON_Print>
 8004cbc:	0003      	movs	r3, r0
 8004cbe:	603b      	str	r3, [r7, #0]
	if (json_string == NULL) {
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d108      	bne.n	8004cd8 <exampleFunction+0x194>
		printf("Lỗi tạo chuỗi JSON\n");
 8004cc6:	4b2d      	ldr	r3, [pc, #180]	; (8004d7c <exampleFunction+0x238>)
 8004cc8:	0018      	movs	r0, r3
 8004cca:	f007 fc2b 	bl	800c524 <puts>
		cJSON_Delete(json);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	0018      	movs	r0, r3
 8004cd2:	f7fe faa3 	bl	800321c <cJSON_Delete>
		return;
 8004cd6:	e011      	b.n	8004cfc <exampleFunction+0x1b8>
	}

	// In chuỗi JSON
	printf("%s\n", json_string);
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	0018      	movs	r0, r3
 8004cdc:	f007 fc22 	bl	800c524 <puts>
	sprintf(testjson, "%s", json_string);
 8004ce0:	683a      	ldr	r2, [r7, #0]
 8004ce2:	4927      	ldr	r1, [pc, #156]	; (8004d80 <exampleFunction+0x23c>)
 8004ce4:	4b27      	ldr	r3, [pc, #156]	; (8004d84 <exampleFunction+0x240>)
 8004ce6:	0018      	movs	r0, r3
 8004ce8:	f007 fc26 	bl	800c538 <siprintf>

	// Giải phóng bộ nhớ
	free(json_string);
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	0018      	movs	r0, r3
 8004cf0:	f005 fd36 	bl	800a760 <free>
	cJSON_Delete(json);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	0018      	movs	r0, r3
 8004cf8:	f7fe fa90 	bl	800321c <cJSON_Delete>
}
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	b002      	add	sp, #8
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	46c0      	nop			; (mov r8, r8)
 8004d04:	200008c5 	.word	0x200008c5
 8004d08:	200005fc 	.word	0x200005fc
 8004d0c:	42c80000 	.word	0x42c80000
 8004d10:	200005f4 	.word	0x200005f4
 8004d14:	20000600 	.word	0x20000600
 8004d18:	200005f8 	.word	0x200005f8
 8004d1c:	0800fae0 	.word	0x0800fae0
 8004d20:	0800fae8 	.word	0x0800fae8
 8004d24:	200008b0 	.word	0x200008b0
 8004d28:	20000894 	.word	0x20000894
 8004d2c:	0800faf0 	.word	0x0800faf0
 8004d30:	20000898 	.word	0x20000898
 8004d34:	0800faf8 	.word	0x0800faf8
 8004d38:	2000089c 	.word	0x2000089c
 8004d3c:	0800fb00 	.word	0x0800fb00
 8004d40:	200008a0 	.word	0x200008a0
 8004d44:	0800fb08 	.word	0x0800fb08
 8004d48:	200008a4 	.word	0x200008a4
 8004d4c:	0800fb10 	.word	0x0800fb10
 8004d50:	200008a8 	.word	0x200008a8
 8004d54:	0800fb18 	.word	0x0800fb18
 8004d58:	200008ac 	.word	0x200008ac
 8004d5c:	0800fb20 	.word	0x0800fb20
 8004d60:	200008c4 	.word	0x200008c4
 8004d64:	200008c0 	.word	0x200008c0
 8004d68:	0800fb28 	.word	0x0800fb28
 8004d6c:	200000d0 	.word	0x200000d0
 8004d70:	0800fb30 	.word	0x0800fb30
 8004d74:	2000060c 	.word	0x2000060c
 8004d78:	0800fb48 	.word	0x0800fb48
 8004d7c:	0800fb58 	.word	0x0800fb58
 8004d80:	0800fb74 	.word	0x0800fb74
 8004d84:	200008c8 	.word	0x200008c8

08004d88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004d8c:	f000 ff7c 	bl	8005c88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004d90:	f000 f86c 	bl	8004e6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004d94:	f000 fa86 	bl	80052a4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8004d98:	f000 f9f4 	bl	8005184 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8004d9c:	f000 f938 	bl	8005010 <MX_I2C1_Init>
  MX_TIM6_Init();
 8004da0:	f000 f9b2 	bl	8005108 <MX_TIM6_Init>
  MX_I2C2_Init();
 8004da4:	f000 f972 	bl	800508c <MX_I2C2_Init>
  MX_USART4_UART_Init();
 8004da8:	f000 fa4c 	bl	8005244 <MX_USART4_UART_Init>
  MX_USART2_UART_Init();
 8004dac:	f000 fa1a 	bl	80051e4 <MX_USART2_UART_Init>
  MX_ADC_Init();
 8004db0:	f000 f8c8 	bl	8004f44 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */

	HAL_UARTEx_ReceiveToIdle_IT(&huart1, (uint8_t*) rxBuffer, 50);
 8004db4:	4923      	ldr	r1, [pc, #140]	; (8004e44 <main+0xbc>)
 8004db6:	4b24      	ldr	r3, [pc, #144]	; (8004e48 <main+0xc0>)
 8004db8:	2232      	movs	r2, #50	; 0x32
 8004dba:	0018      	movs	r0, r3
 8004dbc:	f005 fc40 	bl	800a640 <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_UARTEx_ReceiveToIdle_IT(&huart4, (uint8_t*) sensorResponseData, 20);
 8004dc0:	4922      	ldr	r1, [pc, #136]	; (8004e4c <main+0xc4>)
 8004dc2:	4b23      	ldr	r3, [pc, #140]	; (8004e50 <main+0xc8>)
 8004dc4:	2214      	movs	r2, #20
 8004dc6:	0018      	movs	r0, r3
 8004dc8:	f005 fc3a 	bl	800a640 <HAL_UARTEx_ReceiveToIdle_IT>
#if co2
		HAL_UARTEx_ReceiveToIdle_IT(&huart2, (uint8_t*) rx_co2, 8);
	#endif

	HAL_GPIO_WritePin(ENABLE_SENSOR_GPIO_Port, ENABLE_SENSOR_Pin, SET);
 8004dcc:	2380      	movs	r3, #128	; 0x80
 8004dce:	005b      	lsls	r3, r3, #1
 8004dd0:	4820      	ldr	r0, [pc, #128]	; (8004e54 <main+0xcc>)
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	0019      	movs	r1, r3
 8004dd6:	f001 ff5d 	bl	8006c94 <HAL_GPIO_WritePin>
	turnOnA76XX();
 8004dda:	f7ff fadd 	bl	8004398 <turnOnA76XX>
	BH1750_Init();
 8004dde:	f7ff fc35 	bl	800464c <BH1750_Init>
#if sht30
	if (!sht3x_init(&handle)) {
 8004de2:	4b1d      	ldr	r3, [pc, #116]	; (8004e58 <main+0xd0>)
 8004de4:	0018      	movs	r0, r3
 8004de6:	f000 fb53 	bl	8005490 <sht3x_init>
 8004dea:	0003      	movs	r3, r0
 8004dec:	001a      	movs	r2, r3
 8004dee:	2301      	movs	r3, #1
 8004df0:	4053      	eors	r3, r2
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d003      	beq.n	8004e00 <main+0x78>
		printf("SHT3x access failed.\n\r");
 8004df8:	4b18      	ldr	r3, [pc, #96]	; (8004e5c <main+0xd4>)
 8004dfa:	0018      	movs	r0, r3
 8004dfc:	f007 fb2c 	bl	800c458 <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		if (!isConnectSimcomA76xx) {
 8004e00:	4b17      	ldr	r3, [pc, #92]	; (8004e60 <main+0xd8>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d104      	bne.n	8004e12 <main+0x8a>
			isConnectSimcomA76xx = connectSimcomA76xx();
 8004e08:	f7ff fafe 	bl	8004408 <connectSimcomA76xx>
 8004e0c:	0002      	movs	r2, r0
 8004e0e:	4b14      	ldr	r3, [pc, #80]	; (8004e60 <main+0xd8>)
 8004e10:	601a      	str	r2, [r3, #0]
		}
		readSensors();
 8004e12:	f7ff fc49 	bl	80046a8 <readSensors>
		Filter_Baterry_Values();
 8004e16:	f7ff fdad 	bl	8004974 <Filter_Baterry_Values>
		exampleFunction();
 8004e1a:	f7ff fe93 	bl	8004b44 <exampleFunction>
		if (!isConnectMQTT) {
 8004e1e:	4b11      	ldr	r3, [pc, #68]	; (8004e64 <main+0xdc>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d104      	bne.n	8004e30 <main+0xa8>
			isConnectMQTT = connectMQTT();
 8004e26:	f7ff fc9f 	bl	8004768 <connectMQTT>
 8004e2a:	0002      	movs	r2, r0
 8004e2c:	4b0d      	ldr	r3, [pc, #52]	; (8004e64 <main+0xdc>)
 8004e2e:	601a      	str	r2, [r3, #0]
		}
		if (!isSleepMode) {
 8004e30:	4b0d      	ldr	r3, [pc, #52]	; (8004e68 <main+0xe0>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d1e3      	bne.n	8004e00 <main+0x78>
			isSleepMode = Sleep_Stm32_A7672S();
 8004e38:	f7ff fd66 	bl	8004908 <Sleep_Stm32_A7672S>
 8004e3c:	0002      	movs	r2, r0
 8004e3e:	4b0a      	ldr	r3, [pc, #40]	; (8004e68 <main+0xe0>)
 8004e40:	601a      	str	r2, [r3, #0]
		if (!isConnectSimcomA76xx) {
 8004e42:	e7dd      	b.n	8004e00 <main+0x78>
 8004e44:	200005a8 	.word	0x200005a8
 8004e48:	20000410 	.word	0x20000410
 8004e4c:	200009f4 	.word	0x200009f4
 8004e50:	20000520 	.word	0x20000520
 8004e54:	50000400 	.word	0x50000400
 8004e58:	200000d4 	.word	0x200000d4
 8004e5c:	0800fb78 	.word	0x0800fb78
 8004e60:	200005e0 	.word	0x200005e0
 8004e64:	200005e4 	.word	0x200005e4
 8004e68:	200005e8 	.word	0x200005e8

08004e6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004e6c:	b590      	push	{r4, r7, lr}
 8004e6e:	b09b      	sub	sp, #108	; 0x6c
 8004e70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004e72:	2434      	movs	r4, #52	; 0x34
 8004e74:	193b      	adds	r3, r7, r4
 8004e76:	0018      	movs	r0, r3
 8004e78:	2334      	movs	r3, #52	; 0x34
 8004e7a:	001a      	movs	r2, r3
 8004e7c:	2100      	movs	r1, #0
 8004e7e:	f007 fc97 	bl	800c7b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004e82:	2320      	movs	r3, #32
 8004e84:	18fb      	adds	r3, r7, r3
 8004e86:	0018      	movs	r0, r3
 8004e88:	2314      	movs	r3, #20
 8004e8a:	001a      	movs	r2, r3
 8004e8c:	2100      	movs	r1, #0
 8004e8e:	f007 fc8f 	bl	800c7b0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004e92:	003b      	movs	r3, r7
 8004e94:	0018      	movs	r0, r3
 8004e96:	2320      	movs	r3, #32
 8004e98:	001a      	movs	r2, r3
 8004e9a:	2100      	movs	r1, #0
 8004e9c:	f007 fc88 	bl	800c7b0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ea0:	4b26      	ldr	r3, [pc, #152]	; (8004f3c <SystemClock_Config+0xd0>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a26      	ldr	r2, [pc, #152]	; (8004f40 <SystemClock_Config+0xd4>)
 8004ea6:	401a      	ands	r2, r3
 8004ea8:	4b24      	ldr	r3, [pc, #144]	; (8004f3c <SystemClock_Config+0xd0>)
 8004eaa:	2180      	movs	r1, #128	; 0x80
 8004eac:	0109      	lsls	r1, r1, #4
 8004eae:	430a      	orrs	r2, r1
 8004eb0:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004eb2:	193b      	adds	r3, r7, r4
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004eb8:	193b      	adds	r3, r7, r4
 8004eba:	2280      	movs	r2, #128	; 0x80
 8004ebc:	0252      	lsls	r2, r2, #9
 8004ebe:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004ec0:	193b      	adds	r3, r7, r4
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004ec6:	193b      	adds	r3, r7, r4
 8004ec8:	0018      	movs	r0, r3
 8004eca:	f002 fee3 	bl	8007c94 <HAL_RCC_OscConfig>
 8004ece:	1e03      	subs	r3, r0, #0
 8004ed0:	d001      	beq.n	8004ed6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8004ed2:	f000 fa55 	bl	8005380 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004ed6:	2120      	movs	r1, #32
 8004ed8:	187b      	adds	r3, r7, r1
 8004eda:	220f      	movs	r2, #15
 8004edc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8004ede:	187b      	adds	r3, r7, r1
 8004ee0:	2202      	movs	r2, #2
 8004ee2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004ee4:	187b      	adds	r3, r7, r1
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8004eea:	187b      	adds	r3, r7, r1
 8004eec:	22e0      	movs	r2, #224	; 0xe0
 8004eee:	00d2      	lsls	r2, r2, #3
 8004ef0:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004ef2:	187b      	adds	r3, r7, r1
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004ef8:	187b      	adds	r3, r7, r1
 8004efa:	2100      	movs	r1, #0
 8004efc:	0018      	movs	r0, r3
 8004efe:	f003 fa45 	bl	800838c <HAL_RCC_ClockConfig>
 8004f02:	1e03      	subs	r3, r0, #0
 8004f04:	d001      	beq.n	8004f0a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8004f06:	f000 fa3b 	bl	8005380 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8004f0a:	003b      	movs	r3, r7
 8004f0c:	220b      	movs	r2, #11
 8004f0e:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004f10:	003b      	movs	r3, r7
 8004f12:	2200      	movs	r2, #0
 8004f14:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004f16:	003b      	movs	r3, r7
 8004f18:	2200      	movs	r2, #0
 8004f1a:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004f1c:	003b      	movs	r3, r7
 8004f1e:	2200      	movs	r2, #0
 8004f20:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004f22:	003b      	movs	r3, r7
 8004f24:	0018      	movs	r0, r3
 8004f26:	f003 fc55 	bl	80087d4 <HAL_RCCEx_PeriphCLKConfig>
 8004f2a:	1e03      	subs	r3, r0, #0
 8004f2c:	d001      	beq.n	8004f32 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8004f2e:	f000 fa27 	bl	8005380 <Error_Handler>
  }
}
 8004f32:	46c0      	nop			; (mov r8, r8)
 8004f34:	46bd      	mov	sp, r7
 8004f36:	b01b      	add	sp, #108	; 0x6c
 8004f38:	bd90      	pop	{r4, r7, pc}
 8004f3a:	46c0      	nop			; (mov r8, r8)
 8004f3c:	40007000 	.word	0x40007000
 8004f40:	ffffe7ff 	.word	0xffffe7ff

08004f44 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004f4a:	003b      	movs	r3, r7
 8004f4c:	0018      	movs	r0, r3
 8004f4e:	2308      	movs	r3, #8
 8004f50:	001a      	movs	r2, r3
 8004f52:	2100      	movs	r1, #0
 8004f54:	f007 fc2c 	bl	800c7b0 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8004f58:	4b2a      	ldr	r3, [pc, #168]	; (8005004 <MX_ADC_Init+0xc0>)
 8004f5a:	4a2b      	ldr	r2, [pc, #172]	; (8005008 <MX_ADC_Init+0xc4>)
 8004f5c:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8004f5e:	4b29      	ldr	r3, [pc, #164]	; (8005004 <MX_ADC_Init+0xc0>)
 8004f60:	2200      	movs	r2, #0
 8004f62:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004f64:	4b27      	ldr	r3, [pc, #156]	; (8005004 <MX_ADC_Init+0xc0>)
 8004f66:	2280      	movs	r2, #128	; 0x80
 8004f68:	0612      	lsls	r2, r2, #24
 8004f6a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8004f6c:	4b25      	ldr	r3, [pc, #148]	; (8005004 <MX_ADC_Init+0xc0>)
 8004f6e:	2200      	movs	r2, #0
 8004f70:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8004f72:	4b24      	ldr	r3, [pc, #144]	; (8005004 <MX_ADC_Init+0xc0>)
 8004f74:	2200      	movs	r2, #0
 8004f76:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8004f78:	4b22      	ldr	r3, [pc, #136]	; (8005004 <MX_ADC_Init+0xc0>)
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004f7e:	4b21      	ldr	r3, [pc, #132]	; (8005004 <MX_ADC_Init+0xc0>)
 8004f80:	2200      	movs	r2, #0
 8004f82:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 8004f84:	4b1f      	ldr	r3, [pc, #124]	; (8005004 <MX_ADC_Init+0xc0>)
 8004f86:	2220      	movs	r2, #32
 8004f88:	2101      	movs	r1, #1
 8004f8a:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8004f8c:	4b1d      	ldr	r3, [pc, #116]	; (8005004 <MX_ADC_Init+0xc0>)
 8004f8e:	2221      	movs	r2, #33	; 0x21
 8004f90:	2100      	movs	r1, #0
 8004f92:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004f94:	4b1b      	ldr	r3, [pc, #108]	; (8005004 <MX_ADC_Init+0xc0>)
 8004f96:	2200      	movs	r2, #0
 8004f98:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004f9a:	4b1a      	ldr	r3, [pc, #104]	; (8005004 <MX_ADC_Init+0xc0>)
 8004f9c:	22c2      	movs	r2, #194	; 0xc2
 8004f9e:	32ff      	adds	r2, #255	; 0xff
 8004fa0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8004fa2:	4b18      	ldr	r3, [pc, #96]	; (8005004 <MX_ADC_Init+0xc0>)
 8004fa4:	222c      	movs	r2, #44	; 0x2c
 8004fa6:	2100      	movs	r1, #0
 8004fa8:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004faa:	4b16      	ldr	r3, [pc, #88]	; (8005004 <MX_ADC_Init+0xc0>)
 8004fac:	2204      	movs	r2, #4
 8004fae:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004fb0:	4b14      	ldr	r3, [pc, #80]	; (8005004 <MX_ADC_Init+0xc0>)
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8004fb6:	4b13      	ldr	r3, [pc, #76]	; (8005004 <MX_ADC_Init+0xc0>)
 8004fb8:	2200      	movs	r2, #0
 8004fba:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 8004fbc:	4b11      	ldr	r3, [pc, #68]	; (8005004 <MX_ADC_Init+0xc0>)
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8004fc2:	4b10      	ldr	r3, [pc, #64]	; (8005004 <MX_ADC_Init+0xc0>)
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8004fc8:	4b0e      	ldr	r3, [pc, #56]	; (8005004 <MX_ADC_Init+0xc0>)
 8004fca:	0018      	movs	r0, r3
 8004fcc:	f000 ff0c 	bl	8005de8 <HAL_ADC_Init>
 8004fd0:	1e03      	subs	r3, r0, #0
 8004fd2:	d001      	beq.n	8004fd8 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8004fd4:	f000 f9d4 	bl	8005380 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8004fd8:	003b      	movs	r3, r7
 8004fda:	4a0c      	ldr	r2, [pc, #48]	; (800500c <MX_ADC_Init+0xc8>)
 8004fdc:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8004fde:	003b      	movs	r3, r7
 8004fe0:	2280      	movs	r2, #128	; 0x80
 8004fe2:	0152      	lsls	r2, r2, #5
 8004fe4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004fe6:	003a      	movs	r2, r7
 8004fe8:	4b06      	ldr	r3, [pc, #24]	; (8005004 <MX_ADC_Init+0xc0>)
 8004fea:	0011      	movs	r1, r2
 8004fec:	0018      	movs	r0, r3
 8004fee:	f001 f9ab 	bl	8006348 <HAL_ADC_ConfigChannel>
 8004ff2:	1e03      	subs	r3, r0, #0
 8004ff4:	d001      	beq.n	8004ffa <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8004ff6:	f000 f9c3 	bl	8005380 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8004ffa:	46c0      	nop			; (mov r8, r8)
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	b002      	add	sp, #8
 8005000:	bd80      	pop	{r7, pc}
 8005002:	46c0      	nop			; (mov r8, r8)
 8005004:	200002cc 	.word	0x200002cc
 8005008:	40012400 	.word	0x40012400
 800500c:	10000010 	.word	0x10000010

08005010 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005014:	4b1b      	ldr	r3, [pc, #108]	; (8005084 <MX_I2C1_Init+0x74>)
 8005016:	4a1c      	ldr	r2, [pc, #112]	; (8005088 <MX_I2C1_Init+0x78>)
 8005018:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000000;
 800501a:	4b1a      	ldr	r3, [pc, #104]	; (8005084 <MX_I2C1_Init+0x74>)
 800501c:	2200      	movs	r2, #0
 800501e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8005020:	4b18      	ldr	r3, [pc, #96]	; (8005084 <MX_I2C1_Init+0x74>)
 8005022:	2200      	movs	r2, #0
 8005024:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005026:	4b17      	ldr	r3, [pc, #92]	; (8005084 <MX_I2C1_Init+0x74>)
 8005028:	2201      	movs	r2, #1
 800502a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800502c:	4b15      	ldr	r3, [pc, #84]	; (8005084 <MX_I2C1_Init+0x74>)
 800502e:	2200      	movs	r2, #0
 8005030:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8005032:	4b14      	ldr	r3, [pc, #80]	; (8005084 <MX_I2C1_Init+0x74>)
 8005034:	2200      	movs	r2, #0
 8005036:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005038:	4b12      	ldr	r3, [pc, #72]	; (8005084 <MX_I2C1_Init+0x74>)
 800503a:	2200      	movs	r2, #0
 800503c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800503e:	4b11      	ldr	r3, [pc, #68]	; (8005084 <MX_I2C1_Init+0x74>)
 8005040:	2200      	movs	r2, #0
 8005042:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005044:	4b0f      	ldr	r3, [pc, #60]	; (8005084 <MX_I2C1_Init+0x74>)
 8005046:	2200      	movs	r2, #0
 8005048:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800504a:	4b0e      	ldr	r3, [pc, #56]	; (8005084 <MX_I2C1_Init+0x74>)
 800504c:	0018      	movs	r0, r3
 800504e:	f001 fe3f 	bl	8006cd0 <HAL_I2C_Init>
 8005052:	1e03      	subs	r3, r0, #0
 8005054:	d001      	beq.n	800505a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8005056:	f000 f993 	bl	8005380 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800505a:	4b0a      	ldr	r3, [pc, #40]	; (8005084 <MX_I2C1_Init+0x74>)
 800505c:	2100      	movs	r1, #0
 800505e:	0018      	movs	r0, r3
 8005060:	f002 fd28 	bl	8007ab4 <HAL_I2CEx_ConfigAnalogFilter>
 8005064:	1e03      	subs	r3, r0, #0
 8005066:	d001      	beq.n	800506c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8005068:	f000 f98a 	bl	8005380 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800506c:	4b05      	ldr	r3, [pc, #20]	; (8005084 <MX_I2C1_Init+0x74>)
 800506e:	2100      	movs	r1, #0
 8005070:	0018      	movs	r0, r3
 8005072:	f002 fd6b 	bl	8007b4c <HAL_I2CEx_ConfigDigitalFilter>
 8005076:	1e03      	subs	r3, r0, #0
 8005078:	d001      	beq.n	800507e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800507a:	f000 f981 	bl	8005380 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800507e:	46c0      	nop			; (mov r8, r8)
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}
 8005084:	20000328 	.word	0x20000328
 8005088:	40005400 	.word	0x40005400

0800508c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8005090:	4b1b      	ldr	r3, [pc, #108]	; (8005100 <MX_I2C2_Init+0x74>)
 8005092:	4a1c      	ldr	r2, [pc, #112]	; (8005104 <MX_I2C2_Init+0x78>)
 8005094:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000000;
 8005096:	4b1a      	ldr	r3, [pc, #104]	; (8005100 <MX_I2C2_Init+0x74>)
 8005098:	2200      	movs	r2, #0
 800509a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800509c:	4b18      	ldr	r3, [pc, #96]	; (8005100 <MX_I2C2_Init+0x74>)
 800509e:	2200      	movs	r2, #0
 80050a0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80050a2:	4b17      	ldr	r3, [pc, #92]	; (8005100 <MX_I2C2_Init+0x74>)
 80050a4:	2201      	movs	r2, #1
 80050a6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80050a8:	4b15      	ldr	r3, [pc, #84]	; (8005100 <MX_I2C2_Init+0x74>)
 80050aa:	2200      	movs	r2, #0
 80050ac:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80050ae:	4b14      	ldr	r3, [pc, #80]	; (8005100 <MX_I2C2_Init+0x74>)
 80050b0:	2200      	movs	r2, #0
 80050b2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80050b4:	4b12      	ldr	r3, [pc, #72]	; (8005100 <MX_I2C2_Init+0x74>)
 80050b6:	2200      	movs	r2, #0
 80050b8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80050ba:	4b11      	ldr	r3, [pc, #68]	; (8005100 <MX_I2C2_Init+0x74>)
 80050bc:	2200      	movs	r2, #0
 80050be:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80050c0:	4b0f      	ldr	r3, [pc, #60]	; (8005100 <MX_I2C2_Init+0x74>)
 80050c2:	2200      	movs	r2, #0
 80050c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80050c6:	4b0e      	ldr	r3, [pc, #56]	; (8005100 <MX_I2C2_Init+0x74>)
 80050c8:	0018      	movs	r0, r3
 80050ca:	f001 fe01 	bl	8006cd0 <HAL_I2C_Init>
 80050ce:	1e03      	subs	r3, r0, #0
 80050d0:	d001      	beq.n	80050d6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80050d2:	f000 f955 	bl	8005380 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80050d6:	4b0a      	ldr	r3, [pc, #40]	; (8005100 <MX_I2C2_Init+0x74>)
 80050d8:	2100      	movs	r1, #0
 80050da:	0018      	movs	r0, r3
 80050dc:	f002 fcea 	bl	8007ab4 <HAL_I2CEx_ConfigAnalogFilter>
 80050e0:	1e03      	subs	r3, r0, #0
 80050e2:	d001      	beq.n	80050e8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80050e4:	f000 f94c 	bl	8005380 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80050e8:	4b05      	ldr	r3, [pc, #20]	; (8005100 <MX_I2C2_Init+0x74>)
 80050ea:	2100      	movs	r1, #0
 80050ec:	0018      	movs	r0, r3
 80050ee:	f002 fd2d 	bl	8007b4c <HAL_I2CEx_ConfigDigitalFilter>
 80050f2:	1e03      	subs	r3, r0, #0
 80050f4:	d001      	beq.n	80050fa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80050f6:	f000 f943 	bl	8005380 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80050fa:	46c0      	nop			; (mov r8, r8)
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	2000037c 	.word	0x2000037c
 8005104:	40005800 	.word	0x40005800

08005108 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800510e:	003b      	movs	r3, r7
 8005110:	0018      	movs	r0, r3
 8005112:	2308      	movs	r3, #8
 8005114:	001a      	movs	r2, r3
 8005116:	2100      	movs	r1, #0
 8005118:	f007 fb4a 	bl	800c7b0 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800511c:	4b15      	ldr	r3, [pc, #84]	; (8005174 <MX_TIM6_Init+0x6c>)
 800511e:	4a16      	ldr	r2, [pc, #88]	; (8005178 <MX_TIM6_Init+0x70>)
 8005120:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 59999;
 8005122:	4b14      	ldr	r3, [pc, #80]	; (8005174 <MX_TIM6_Init+0x6c>)
 8005124:	4a15      	ldr	r2, [pc, #84]	; (800517c <MX_TIM6_Init+0x74>)
 8005126:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005128:	4b12      	ldr	r3, [pc, #72]	; (8005174 <MX_TIM6_Init+0x6c>)
 800512a:	2200      	movs	r2, #0
 800512c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = time_Period;
 800512e:	4b11      	ldr	r3, [pc, #68]	; (8005174 <MX_TIM6_Init+0x6c>)
 8005130:	4a13      	ldr	r2, [pc, #76]	; (8005180 <MX_TIM6_Init+0x78>)
 8005132:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005134:	4b0f      	ldr	r3, [pc, #60]	; (8005174 <MX_TIM6_Init+0x6c>)
 8005136:	2200      	movs	r2, #0
 8005138:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800513a:	4b0e      	ldr	r3, [pc, #56]	; (8005174 <MX_TIM6_Init+0x6c>)
 800513c:	0018      	movs	r0, r3
 800513e:	f003 fc93 	bl	8008a68 <HAL_TIM_Base_Init>
 8005142:	1e03      	subs	r3, r0, #0
 8005144:	d001      	beq.n	800514a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8005146:	f000 f91b 	bl	8005380 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800514a:	003b      	movs	r3, r7
 800514c:	2200      	movs	r2, #0
 800514e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005150:	003b      	movs	r3, r7
 8005152:	2200      	movs	r2, #0
 8005154:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005156:	003a      	movs	r2, r7
 8005158:	4b06      	ldr	r3, [pc, #24]	; (8005174 <MX_TIM6_Init+0x6c>)
 800515a:	0011      	movs	r1, r2
 800515c:	0018      	movs	r0, r3
 800515e:	f003 fe83 	bl	8008e68 <HAL_TIMEx_MasterConfigSynchronization>
 8005162:	1e03      	subs	r3, r0, #0
 8005164:	d001      	beq.n	800516a <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8005166:	f000 f90b 	bl	8005380 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800516a:	46c0      	nop			; (mov r8, r8)
 800516c:	46bd      	mov	sp, r7
 800516e:	b002      	add	sp, #8
 8005170:	bd80      	pop	{r7, pc}
 8005172:	46c0      	nop			; (mov r8, r8)
 8005174:	200003d0 	.word	0x200003d0
 8005178:	40001000 	.word	0x40001000
 800517c:	0000ea5f 	.word	0x0000ea5f
 8005180:	00000bb7 	.word	0x00000bb7

08005184 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005188:	4b14      	ldr	r3, [pc, #80]	; (80051dc <MX_USART1_UART_Init+0x58>)
 800518a:	4a15      	ldr	r2, [pc, #84]	; (80051e0 <MX_USART1_UART_Init+0x5c>)
 800518c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800518e:	4b13      	ldr	r3, [pc, #76]	; (80051dc <MX_USART1_UART_Init+0x58>)
 8005190:	22e1      	movs	r2, #225	; 0xe1
 8005192:	0252      	lsls	r2, r2, #9
 8005194:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005196:	4b11      	ldr	r3, [pc, #68]	; (80051dc <MX_USART1_UART_Init+0x58>)
 8005198:	2200      	movs	r2, #0
 800519a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800519c:	4b0f      	ldr	r3, [pc, #60]	; (80051dc <MX_USART1_UART_Init+0x58>)
 800519e:	2200      	movs	r2, #0
 80051a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80051a2:	4b0e      	ldr	r3, [pc, #56]	; (80051dc <MX_USART1_UART_Init+0x58>)
 80051a4:	2200      	movs	r2, #0
 80051a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80051a8:	4b0c      	ldr	r3, [pc, #48]	; (80051dc <MX_USART1_UART_Init+0x58>)
 80051aa:	220c      	movs	r2, #12
 80051ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80051ae:	4b0b      	ldr	r3, [pc, #44]	; (80051dc <MX_USART1_UART_Init+0x58>)
 80051b0:	2200      	movs	r2, #0
 80051b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80051b4:	4b09      	ldr	r3, [pc, #36]	; (80051dc <MX_USART1_UART_Init+0x58>)
 80051b6:	2200      	movs	r2, #0
 80051b8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80051ba:	4b08      	ldr	r3, [pc, #32]	; (80051dc <MX_USART1_UART_Init+0x58>)
 80051bc:	2200      	movs	r2, #0
 80051be:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80051c0:	4b06      	ldr	r3, [pc, #24]	; (80051dc <MX_USART1_UART_Init+0x58>)
 80051c2:	2200      	movs	r2, #0
 80051c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80051c6:	4b05      	ldr	r3, [pc, #20]	; (80051dc <MX_USART1_UART_Init+0x58>)
 80051c8:	0018      	movs	r0, r3
 80051ca:	f003 feab 	bl	8008f24 <HAL_UART_Init>
 80051ce:	1e03      	subs	r3, r0, #0
 80051d0:	d001      	beq.n	80051d6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80051d2:	f000 f8d5 	bl	8005380 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80051d6:	46c0      	nop			; (mov r8, r8)
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	20000410 	.word	0x20000410
 80051e0:	40013800 	.word	0x40013800

080051e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80051e8:	4b14      	ldr	r3, [pc, #80]	; (800523c <MX_USART2_UART_Init+0x58>)
 80051ea:	4a15      	ldr	r2, [pc, #84]	; (8005240 <MX_USART2_UART_Init+0x5c>)
 80051ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80051ee:	4b13      	ldr	r3, [pc, #76]	; (800523c <MX_USART2_UART_Init+0x58>)
 80051f0:	2296      	movs	r2, #150	; 0x96
 80051f2:	0192      	lsls	r2, r2, #6
 80051f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80051f6:	4b11      	ldr	r3, [pc, #68]	; (800523c <MX_USART2_UART_Init+0x58>)
 80051f8:	2200      	movs	r2, #0
 80051fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80051fc:	4b0f      	ldr	r3, [pc, #60]	; (800523c <MX_USART2_UART_Init+0x58>)
 80051fe:	2200      	movs	r2, #0
 8005200:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005202:	4b0e      	ldr	r3, [pc, #56]	; (800523c <MX_USART2_UART_Init+0x58>)
 8005204:	2200      	movs	r2, #0
 8005206:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005208:	4b0c      	ldr	r3, [pc, #48]	; (800523c <MX_USART2_UART_Init+0x58>)
 800520a:	220c      	movs	r2, #12
 800520c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800520e:	4b0b      	ldr	r3, [pc, #44]	; (800523c <MX_USART2_UART_Init+0x58>)
 8005210:	2200      	movs	r2, #0
 8005212:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005214:	4b09      	ldr	r3, [pc, #36]	; (800523c <MX_USART2_UART_Init+0x58>)
 8005216:	2200      	movs	r2, #0
 8005218:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800521a:	4b08      	ldr	r3, [pc, #32]	; (800523c <MX_USART2_UART_Init+0x58>)
 800521c:	2200      	movs	r2, #0
 800521e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005220:	4b06      	ldr	r3, [pc, #24]	; (800523c <MX_USART2_UART_Init+0x58>)
 8005222:	2200      	movs	r2, #0
 8005224:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005226:	4b05      	ldr	r3, [pc, #20]	; (800523c <MX_USART2_UART_Init+0x58>)
 8005228:	0018      	movs	r0, r3
 800522a:	f003 fe7b 	bl	8008f24 <HAL_UART_Init>
 800522e:	1e03      	subs	r3, r0, #0
 8005230:	d001      	beq.n	8005236 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8005232:	f000 f8a5 	bl	8005380 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005236:	46c0      	nop			; (mov r8, r8)
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}
 800523c:	20000498 	.word	0x20000498
 8005240:	40004400 	.word	0x40004400

08005244 <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8005248:	4b14      	ldr	r3, [pc, #80]	; (800529c <MX_USART4_UART_Init+0x58>)
 800524a:	4a15      	ldr	r2, [pc, #84]	; (80052a0 <MX_USART4_UART_Init+0x5c>)
 800524c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800524e:	4b13      	ldr	r3, [pc, #76]	; (800529c <MX_USART4_UART_Init+0x58>)
 8005250:	2296      	movs	r2, #150	; 0x96
 8005252:	0192      	lsls	r2, r2, #6
 8005254:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8005256:	4b11      	ldr	r3, [pc, #68]	; (800529c <MX_USART4_UART_Init+0x58>)
 8005258:	2200      	movs	r2, #0
 800525a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800525c:	4b0f      	ldr	r3, [pc, #60]	; (800529c <MX_USART4_UART_Init+0x58>)
 800525e:	2200      	movs	r2, #0
 8005260:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8005262:	4b0e      	ldr	r3, [pc, #56]	; (800529c <MX_USART4_UART_Init+0x58>)
 8005264:	2200      	movs	r2, #0
 8005266:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8005268:	4b0c      	ldr	r3, [pc, #48]	; (800529c <MX_USART4_UART_Init+0x58>)
 800526a:	220c      	movs	r2, #12
 800526c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800526e:	4b0b      	ldr	r3, [pc, #44]	; (800529c <MX_USART4_UART_Init+0x58>)
 8005270:	2200      	movs	r2, #0
 8005272:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8005274:	4b09      	ldr	r3, [pc, #36]	; (800529c <MX_USART4_UART_Init+0x58>)
 8005276:	2200      	movs	r2, #0
 8005278:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800527a:	4b08      	ldr	r3, [pc, #32]	; (800529c <MX_USART4_UART_Init+0x58>)
 800527c:	2200      	movs	r2, #0
 800527e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005280:	4b06      	ldr	r3, [pc, #24]	; (800529c <MX_USART4_UART_Init+0x58>)
 8005282:	2200      	movs	r2, #0
 8005284:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8005286:	4b05      	ldr	r3, [pc, #20]	; (800529c <MX_USART4_UART_Init+0x58>)
 8005288:	0018      	movs	r0, r3
 800528a:	f003 fe4b 	bl	8008f24 <HAL_UART_Init>
 800528e:	1e03      	subs	r3, r0, #0
 8005290:	d001      	beq.n	8005296 <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 8005292:	f000 f875 	bl	8005380 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8005296:	46c0      	nop			; (mov r8, r8)
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}
 800529c:	20000520 	.word	0x20000520
 80052a0:	40004c00 	.word	0x40004c00

080052a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80052a4:	b590      	push	{r4, r7, lr}
 80052a6:	b089      	sub	sp, #36	; 0x24
 80052a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052aa:	240c      	movs	r4, #12
 80052ac:	193b      	adds	r3, r7, r4
 80052ae:	0018      	movs	r0, r3
 80052b0:	2314      	movs	r3, #20
 80052b2:	001a      	movs	r2, r3
 80052b4:	2100      	movs	r1, #0
 80052b6:	f007 fa7b 	bl	800c7b0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80052ba:	4b2f      	ldr	r3, [pc, #188]	; (8005378 <MX_GPIO_Init+0xd4>)
 80052bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052be:	4b2e      	ldr	r3, [pc, #184]	; (8005378 <MX_GPIO_Init+0xd4>)
 80052c0:	2180      	movs	r1, #128	; 0x80
 80052c2:	430a      	orrs	r2, r1
 80052c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80052c6:	4b2c      	ldr	r3, [pc, #176]	; (8005378 <MX_GPIO_Init+0xd4>)
 80052c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ca:	2280      	movs	r2, #128	; 0x80
 80052cc:	4013      	ands	r3, r2
 80052ce:	60bb      	str	r3, [r7, #8]
 80052d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80052d2:	4b29      	ldr	r3, [pc, #164]	; (8005378 <MX_GPIO_Init+0xd4>)
 80052d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052d6:	4b28      	ldr	r3, [pc, #160]	; (8005378 <MX_GPIO_Init+0xd4>)
 80052d8:	2101      	movs	r1, #1
 80052da:	430a      	orrs	r2, r1
 80052dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80052de:	4b26      	ldr	r3, [pc, #152]	; (8005378 <MX_GPIO_Init+0xd4>)
 80052e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e2:	2201      	movs	r2, #1
 80052e4:	4013      	ands	r3, r2
 80052e6:	607b      	str	r3, [r7, #4]
 80052e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80052ea:	4b23      	ldr	r3, [pc, #140]	; (8005378 <MX_GPIO_Init+0xd4>)
 80052ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052ee:	4b22      	ldr	r3, [pc, #136]	; (8005378 <MX_GPIO_Init+0xd4>)
 80052f0:	2102      	movs	r1, #2
 80052f2:	430a      	orrs	r2, r1
 80052f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80052f6:	4b20      	ldr	r3, [pc, #128]	; (8005378 <MX_GPIO_Init+0xd4>)
 80052f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052fa:	2202      	movs	r2, #2
 80052fc:	4013      	ands	r3, r2
 80052fe:	603b      	str	r3, [r7, #0]
 8005300:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_STATUS_Pin|ENABLE_SENSOR_Pin, GPIO_PIN_RESET);
 8005302:	2382      	movs	r3, #130	; 0x82
 8005304:	005b      	lsls	r3, r3, #1
 8005306:	481d      	ldr	r0, [pc, #116]	; (800537c <MX_GPIO_Init+0xd8>)
 8005308:	2200      	movs	r2, #0
 800530a:	0019      	movs	r1, r3
 800530c:	f001 fcc2 	bl	8006c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENABLE_A76XX_GPIO_Port, ENABLE_A76XX_Pin, GPIO_PIN_RESET);
 8005310:	2380      	movs	r3, #128	; 0x80
 8005312:	0119      	lsls	r1, r3, #4
 8005314:	23a0      	movs	r3, #160	; 0xa0
 8005316:	05db      	lsls	r3, r3, #23
 8005318:	2200      	movs	r2, #0
 800531a:	0018      	movs	r0, r3
 800531c:	f001 fcba 	bl	8006c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_STATUS_Pin ENABLE_SENSOR_Pin */
  GPIO_InitStruct.Pin = LED_STATUS_Pin|ENABLE_SENSOR_Pin;
 8005320:	193b      	adds	r3, r7, r4
 8005322:	2282      	movs	r2, #130	; 0x82
 8005324:	0052      	lsls	r2, r2, #1
 8005326:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005328:	193b      	adds	r3, r7, r4
 800532a:	2201      	movs	r2, #1
 800532c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800532e:	193b      	adds	r3, r7, r4
 8005330:	2200      	movs	r2, #0
 8005332:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005334:	193b      	adds	r3, r7, r4
 8005336:	2200      	movs	r2, #0
 8005338:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800533a:	193b      	adds	r3, r7, r4
 800533c:	4a0f      	ldr	r2, [pc, #60]	; (800537c <MX_GPIO_Init+0xd8>)
 800533e:	0019      	movs	r1, r3
 8005340:	0010      	movs	r0, r2
 8005342:	f001 fb29 	bl	8006998 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_A76XX_Pin */
  GPIO_InitStruct.Pin = ENABLE_A76XX_Pin;
 8005346:	0021      	movs	r1, r4
 8005348:	187b      	adds	r3, r7, r1
 800534a:	2280      	movs	r2, #128	; 0x80
 800534c:	0112      	lsls	r2, r2, #4
 800534e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005350:	187b      	adds	r3, r7, r1
 8005352:	2201      	movs	r2, #1
 8005354:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005356:	187b      	adds	r3, r7, r1
 8005358:	2200      	movs	r2, #0
 800535a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800535c:	187b      	adds	r3, r7, r1
 800535e:	2200      	movs	r2, #0
 8005360:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ENABLE_A76XX_GPIO_Port, &GPIO_InitStruct);
 8005362:	187a      	adds	r2, r7, r1
 8005364:	23a0      	movs	r3, #160	; 0xa0
 8005366:	05db      	lsls	r3, r3, #23
 8005368:	0011      	movs	r1, r2
 800536a:	0018      	movs	r0, r3
 800536c:	f001 fb14 	bl	8006998 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8005370:	46c0      	nop			; (mov r8, r8)
 8005372:	46bd      	mov	sp, r7
 8005374:	b009      	add	sp, #36	; 0x24
 8005376:	bd90      	pop	{r4, r7, pc}
 8005378:	40021000 	.word	0x40021000
 800537c:	50000400 	.word	0x50000400

08005380 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005384:	b672      	cpsid	i
}
 8005386:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8005388:	e7fe      	b.n	8005388 <Error_Handler+0x8>

0800538a <calculate_crc>:
	SHT3X_COMMAND_MEASURE_HIGHREP_10HZ = 0x2737,
	SHT3X_COMMAND_MEASURE_LOWREP_10HZ = 0x272a
} sht3x_command_t;

static uint8_t calculate_crc(const uint8_t *data, size_t length)
{
 800538a:	b580      	push	{r7, lr}
 800538c:	b086      	sub	sp, #24
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
 8005392:	6039      	str	r1, [r7, #0]
	uint8_t crc = 0xff;
 8005394:	2317      	movs	r3, #23
 8005396:	18fb      	adds	r3, r7, r3
 8005398:	22ff      	movs	r2, #255	; 0xff
 800539a:	701a      	strb	r2, [r3, #0]
	for (size_t i = 0; i < length; i++) {
 800539c:	2300      	movs	r3, #0
 800539e:	613b      	str	r3, [r7, #16]
 80053a0:	e02a      	b.n	80053f8 <calculate_crc+0x6e>
		crc ^= data[i];
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	18d3      	adds	r3, r2, r3
 80053a8:	7819      	ldrb	r1, [r3, #0]
 80053aa:	2217      	movs	r2, #23
 80053ac:	18bb      	adds	r3, r7, r2
 80053ae:	18ba      	adds	r2, r7, r2
 80053b0:	7812      	ldrb	r2, [r2, #0]
 80053b2:	404a      	eors	r2, r1
 80053b4:	701a      	strb	r2, [r3, #0]
		for (size_t j = 0; j < 8; j++) {
 80053b6:	2300      	movs	r3, #0
 80053b8:	60fb      	str	r3, [r7, #12]
 80053ba:	e017      	b.n	80053ec <calculate_crc+0x62>
			if ((crc & 0x80u) != 0) {
 80053bc:	2117      	movs	r1, #23
 80053be:	187b      	adds	r3, r7, r1
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	b25b      	sxtb	r3, r3
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	da08      	bge.n	80053da <calculate_crc+0x50>
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
 80053c8:	187b      	adds	r3, r7, r1
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	18db      	adds	r3, r3, r3
 80053ce:	b2da      	uxtb	r2, r3
 80053d0:	187b      	adds	r3, r7, r1
 80053d2:	2131      	movs	r1, #49	; 0x31
 80053d4:	404a      	eors	r2, r1
 80053d6:	701a      	strb	r2, [r3, #0]
 80053d8:	e005      	b.n	80053e6 <calculate_crc+0x5c>
			} else {
				crc <<= 1u;
 80053da:	2317      	movs	r3, #23
 80053dc:	18fa      	adds	r2, r7, r3
 80053de:	18fb      	adds	r3, r7, r3
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	18db      	adds	r3, r3, r3
 80053e4:	7013      	strb	r3, [r2, #0]
		for (size_t j = 0; j < 8; j++) {
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	3301      	adds	r3, #1
 80053ea:	60fb      	str	r3, [r7, #12]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2b07      	cmp	r3, #7
 80053f0:	d9e4      	bls.n	80053bc <calculate_crc+0x32>
	for (size_t i = 0; i < length; i++) {
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	3301      	adds	r3, #1
 80053f6:	613b      	str	r3, [r7, #16]
 80053f8:	693a      	ldr	r2, [r7, #16]
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d3d0      	bcc.n	80053a2 <calculate_crc+0x18>
			}
		}
	}
	return crc;
 8005400:	2317      	movs	r3, #23
 8005402:	18fb      	adds	r3, r7, r3
 8005404:	781b      	ldrb	r3, [r3, #0]
}
 8005406:	0018      	movs	r0, r3
 8005408:	46bd      	mov	sp, r7
 800540a:	b006      	add	sp, #24
 800540c:	bd80      	pop	{r7, pc}

0800540e <sht3x_send_command>:

static bool sht3x_send_command(sht3x_handle_t *handle, sht3x_command_t command)
{
 800540e:	b590      	push	{r4, r7, lr}
 8005410:	b087      	sub	sp, #28
 8005412:	af02      	add	r7, sp, #8
 8005414:	6078      	str	r0, [r7, #4]
 8005416:	000a      	movs	r2, r1
 8005418:	1cbb      	adds	r3, r7, #2
 800541a:	801a      	strh	r2, [r3, #0]
	uint8_t command_buffer[2] = {(command & 0xff00u) >> 8u, command & 0xffu};
 800541c:	1cbb      	adds	r3, r7, #2
 800541e:	881b      	ldrh	r3, [r3, #0]
 8005420:	0a1b      	lsrs	r3, r3, #8
 8005422:	b29b      	uxth	r3, r3
 8005424:	b2da      	uxtb	r2, r3
 8005426:	240c      	movs	r4, #12
 8005428:	193b      	adds	r3, r7, r4
 800542a:	701a      	strb	r2, [r3, #0]
 800542c:	1cbb      	adds	r3, r7, #2
 800542e:	881b      	ldrh	r3, [r3, #0]
 8005430:	b2da      	uxtb	r2, r3
 8005432:	193b      	adds	r3, r7, r4
 8005434:	705a      	strb	r2, [r3, #1]

	if (HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address << 1u, command_buffer, sizeof(command_buffer),
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6818      	ldr	r0, [r3, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	889b      	ldrh	r3, [r3, #4]
 800543e:	18db      	adds	r3, r3, r3
 8005440:	b299      	uxth	r1, r3
 8005442:	193a      	adds	r2, r7, r4
 8005444:	231e      	movs	r3, #30
 8005446:	9300      	str	r3, [sp, #0]
 8005448:	2302      	movs	r3, #2
 800544a:	f001 fcd7 	bl	8006dfc <HAL_I2C_Master_Transmit>
 800544e:	1e03      	subs	r3, r0, #0
 8005450:	d001      	beq.n	8005456 <sht3x_send_command+0x48>
	                            SHT3X_I2C_TIMEOUT) != HAL_OK) {
		return false;
 8005452:	2300      	movs	r3, #0
 8005454:	e000      	b.n	8005458 <sht3x_send_command+0x4a>
	}

	return true;
 8005456:	2301      	movs	r3, #1
}
 8005458:	0018      	movs	r0, r3
 800545a:	46bd      	mov	sp, r7
 800545c:	b005      	add	sp, #20
 800545e:	bd90      	pop	{r4, r7, pc}

08005460 <uint8_to_uint16>:

static uint16_t uint8_to_uint16(uint8_t msb, uint8_t lsb)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b082      	sub	sp, #8
 8005464:	af00      	add	r7, sp, #0
 8005466:	0002      	movs	r2, r0
 8005468:	1dfb      	adds	r3, r7, #7
 800546a:	701a      	strb	r2, [r3, #0]
 800546c:	1dbb      	adds	r3, r7, #6
 800546e:	1c0a      	adds	r2, r1, #0
 8005470:	701a      	strb	r2, [r3, #0]
	return (uint16_t)((uint16_t)msb << 8u) | lsb;
 8005472:	1dfb      	adds	r3, r7, #7
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	b29b      	uxth	r3, r3
 8005478:	021b      	lsls	r3, r3, #8
 800547a:	b29a      	uxth	r2, r3
 800547c:	1dbb      	adds	r3, r7, #6
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	b29b      	uxth	r3, r3
 8005482:	4313      	orrs	r3, r2
 8005484:	b29b      	uxth	r3, r3
}
 8005486:	0018      	movs	r0, r3
 8005488:	46bd      	mov	sp, r7
 800548a:	b002      	add	sp, #8
 800548c:	bd80      	pop	{r7, pc}
	...

08005490 <sht3x_init>:

bool sht3x_init(sht3x_handle_t *handle)
{
 8005490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005492:	b089      	sub	sp, #36	; 0x24
 8005494:	af04      	add	r7, sp, #16
 8005496:	6078      	str	r0, [r7, #4]
	assert(handle->i2c_handle->Init.NoStretchMode == I2C_NOSTRETCH_DISABLE);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	6a1b      	ldr	r3, [r3, #32]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d005      	beq.n	80054ae <sht3x_init+0x1e>
 80054a2:	4b19      	ldr	r3, [pc, #100]	; (8005508 <sht3x_init+0x78>)
 80054a4:	4a19      	ldr	r2, [pc, #100]	; (800550c <sht3x_init+0x7c>)
 80054a6:	481a      	ldr	r0, [pc, #104]	; (8005510 <sht3x_init+0x80>)
 80054a8:	2137      	movs	r1, #55	; 0x37
 80054aa:	f005 f931 	bl	800a710 <__assert_func>
	// TODO: Assert i2c frequency is not too high

	uint8_t status_reg_and_checksum[3];
	if (HAL_I2C_Mem_Read(handle->i2c_handle, handle->device_address << 1u, SHT3X_COMMAND_READ_STATUS, 2, (uint8_t*)&status_reg_and_checksum,
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6818      	ldr	r0, [r3, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	889b      	ldrh	r3, [r3, #4]
 80054b6:	18db      	adds	r3, r3, r3
 80054b8:	b299      	uxth	r1, r3
 80054ba:	4a16      	ldr	r2, [pc, #88]	; (8005514 <sht3x_init+0x84>)
 80054bc:	231e      	movs	r3, #30
 80054be:	9302      	str	r3, [sp, #8]
 80054c0:	2303      	movs	r3, #3
 80054c2:	9301      	str	r3, [sp, #4]
 80054c4:	230c      	movs	r3, #12
 80054c6:	18fb      	adds	r3, r7, r3
 80054c8:	9300      	str	r3, [sp, #0]
 80054ca:	2302      	movs	r3, #2
 80054cc:	f001 fea6 	bl	800721c <HAL_I2C_Mem_Read>
 80054d0:	1e03      	subs	r3, r0, #0
 80054d2:	d001      	beq.n	80054d8 <sht3x_init+0x48>
					  sizeof(status_reg_and_checksum), SHT3X_I2C_TIMEOUT) != HAL_OK) {
		return false;
 80054d4:	2300      	movs	r3, #0
 80054d6:	e012      	b.n	80054fe <sht3x_init+0x6e>
	}

	uint8_t calculated_crc = calculate_crc(status_reg_and_checksum, 2);
 80054d8:	250f      	movs	r5, #15
 80054da:	197c      	adds	r4, r7, r5
 80054dc:	260c      	movs	r6, #12
 80054de:	19bb      	adds	r3, r7, r6
 80054e0:	2102      	movs	r1, #2
 80054e2:	0018      	movs	r0, r3
 80054e4:	f7ff ff51 	bl	800538a <calculate_crc>
 80054e8:	0003      	movs	r3, r0
 80054ea:	7023      	strb	r3, [r4, #0]

	if (calculated_crc != status_reg_and_checksum[2]) {
 80054ec:	19bb      	adds	r3, r7, r6
 80054ee:	789b      	ldrb	r3, [r3, #2]
 80054f0:	197a      	adds	r2, r7, r5
 80054f2:	7812      	ldrb	r2, [r2, #0]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d001      	beq.n	80054fc <sht3x_init+0x6c>
		return false;
 80054f8:	2300      	movs	r3, #0
 80054fa:	e000      	b.n	80054fe <sht3x_init+0x6e>
	}

	return true;
 80054fc:	2301      	movs	r3, #1
}
 80054fe:	0018      	movs	r0, r3
 8005500:	46bd      	mov	sp, r7
 8005502:	b005      	add	sp, #20
 8005504:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005506:	46c0      	nop			; (mov r8, r8)
 8005508:	0800fb90 	.word	0x0800fb90
 800550c:	0800fda4 	.word	0x0800fda4
 8005510:	0800fbd0 	.word	0x0800fbd0
 8005514:	0000f32d 	.word	0x0000f32d

08005518 <sht3x_read_temperature_and_humidity>:

bool sht3x_read_temperature_and_humidity(sht3x_handle_t *handle, float *temperature, float *humidity)
{
 8005518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800551a:	b08b      	sub	sp, #44	; 0x2c
 800551c:	af02      	add	r7, sp, #8
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	60b9      	str	r1, [r7, #8]
 8005522:	607a      	str	r2, [r7, #4]
	sht3x_send_command(handle, SHT3X_COMMAND_MEASURE_HIGHREP_STRETCH);
 8005524:	4a43      	ldr	r2, [pc, #268]	; (8005634 <sht3x_read_temperature_and_humidity+0x11c>)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	0011      	movs	r1, r2
 800552a:	0018      	movs	r0, r3
 800552c:	f7ff ff6f 	bl	800540e <sht3x_send_command>

	HAL_Delay(1);
 8005530:	2001      	movs	r0, #1
 8005532:	f000 fc19 	bl	8005d68 <HAL_Delay>

	uint8_t buffer[6];
	if (HAL_I2C_Master_Receive(handle->i2c_handle, handle->device_address << 1u, buffer, sizeof(buffer), SHT3X_I2C_TIMEOUT) != HAL_OK) {
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6818      	ldr	r0, [r3, #0]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	889b      	ldrh	r3, [r3, #4]
 800553e:	18db      	adds	r3, r3, r3
 8005540:	b299      	uxth	r1, r3
 8005542:	2314      	movs	r3, #20
 8005544:	18fa      	adds	r2, r7, r3
 8005546:	231e      	movs	r3, #30
 8005548:	9300      	str	r3, [sp, #0]
 800554a:	2306      	movs	r3, #6
 800554c:	f001 fd5e 	bl	800700c <HAL_I2C_Master_Receive>
 8005550:	1e03      	subs	r3, r0, #0
 8005552:	d001      	beq.n	8005558 <sht3x_read_temperature_and_humidity+0x40>
		return false;
 8005554:	2300      	movs	r3, #0
 8005556:	e068      	b.n	800562a <sht3x_read_temperature_and_humidity+0x112>
	}

	uint8_t temperature_crc = calculate_crc(buffer, 2);
 8005558:	261f      	movs	r6, #31
 800555a:	19bc      	adds	r4, r7, r6
 800555c:	2514      	movs	r5, #20
 800555e:	197b      	adds	r3, r7, r5
 8005560:	2102      	movs	r1, #2
 8005562:	0018      	movs	r0, r3
 8005564:	f7ff ff11 	bl	800538a <calculate_crc>
 8005568:	0003      	movs	r3, r0
 800556a:	7023      	strb	r3, [r4, #0]
	uint8_t humidity_crc = calculate_crc(buffer + 3, 2);
 800556c:	197b      	adds	r3, r7, r5
 800556e:	3303      	adds	r3, #3
 8005570:	221e      	movs	r2, #30
 8005572:	18bc      	adds	r4, r7, r2
 8005574:	2102      	movs	r1, #2
 8005576:	0018      	movs	r0, r3
 8005578:	f7ff ff07 	bl	800538a <calculate_crc>
 800557c:	0003      	movs	r3, r0
 800557e:	7023      	strb	r3, [r4, #0]
	if (temperature_crc != buffer[2] || humidity_crc != buffer[5]) {
 8005580:	0029      	movs	r1, r5
 8005582:	187b      	adds	r3, r7, r1
 8005584:	789b      	ldrb	r3, [r3, #2]
 8005586:	19ba      	adds	r2, r7, r6
 8005588:	7812      	ldrb	r2, [r2, #0]
 800558a:	429a      	cmp	r2, r3
 800558c:	d106      	bne.n	800559c <sht3x_read_temperature_and_humidity+0x84>
 800558e:	187b      	adds	r3, r7, r1
 8005590:	795b      	ldrb	r3, [r3, #5]
 8005592:	221e      	movs	r2, #30
 8005594:	18ba      	adds	r2, r7, r2
 8005596:	7812      	ldrb	r2, [r2, #0]
 8005598:	429a      	cmp	r2, r3
 800559a:	d001      	beq.n	80055a0 <sht3x_read_temperature_and_humidity+0x88>
		return false;
 800559c:	2300      	movs	r3, #0
 800559e:	e044      	b.n	800562a <sht3x_read_temperature_and_humidity+0x112>
	}

	uint16_t temperature_raw = uint8_to_uint16(buffer[0], buffer[1]);
 80055a0:	2514      	movs	r5, #20
 80055a2:	197b      	adds	r3, r7, r5
 80055a4:	781a      	ldrb	r2, [r3, #0]
 80055a6:	197b      	adds	r3, r7, r5
 80055a8:	785b      	ldrb	r3, [r3, #1]
 80055aa:	261c      	movs	r6, #28
 80055ac:	19bc      	adds	r4, r7, r6
 80055ae:	0019      	movs	r1, r3
 80055b0:	0010      	movs	r0, r2
 80055b2:	f7ff ff55 	bl	8005460 <uint8_to_uint16>
 80055b6:	0003      	movs	r3, r0
 80055b8:	8023      	strh	r3, [r4, #0]
	uint16_t humidity_raw = uint8_to_uint16(buffer[3], buffer[4]);
 80055ba:	197b      	adds	r3, r7, r5
 80055bc:	78da      	ldrb	r2, [r3, #3]
 80055be:	197b      	adds	r3, r7, r5
 80055c0:	791b      	ldrb	r3, [r3, #4]
 80055c2:	251a      	movs	r5, #26
 80055c4:	197c      	adds	r4, r7, r5
 80055c6:	0019      	movs	r1, r3
 80055c8:	0010      	movs	r0, r2
 80055ca:	f7ff ff49 	bl	8005460 <uint8_to_uint16>
 80055ce:	0003      	movs	r3, r0
 80055d0:	8023      	strh	r3, [r4, #0]

	*temperature = -45.0f + 175.0f * (float)temperature_raw / 65535.0f;
 80055d2:	19bb      	adds	r3, r7, r6
 80055d4:	881b      	ldrh	r3, [r3, #0]
 80055d6:	0018      	movs	r0, r3
 80055d8:	f7fb fe54 	bl	8001284 <__aeabi_ui2f>
 80055dc:	1c03      	adds	r3, r0, #0
 80055de:	4916      	ldr	r1, [pc, #88]	; (8005638 <sht3x_read_temperature_and_humidity+0x120>)
 80055e0:	1c18      	adds	r0, r3, #0
 80055e2:	f7fb faef 	bl	8000bc4 <__aeabi_fmul>
 80055e6:	1c03      	adds	r3, r0, #0
 80055e8:	4914      	ldr	r1, [pc, #80]	; (800563c <sht3x_read_temperature_and_humidity+0x124>)
 80055ea:	1c18      	adds	r0, r3, #0
 80055ec:	f7fb f920 	bl	8000830 <__aeabi_fdiv>
 80055f0:	1c03      	adds	r3, r0, #0
 80055f2:	4913      	ldr	r1, [pc, #76]	; (8005640 <sht3x_read_temperature_and_humidity+0x128>)
 80055f4:	1c18      	adds	r0, r3, #0
 80055f6:	f7fb fc33 	bl	8000e60 <__aeabi_fsub>
 80055fa:	1c03      	adds	r3, r0, #0
 80055fc:	1c1a      	adds	r2, r3, #0
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	601a      	str	r2, [r3, #0]
	*humidity = 100.0f * (float)humidity_raw / 65535.0f;
 8005602:	197b      	adds	r3, r7, r5
 8005604:	881b      	ldrh	r3, [r3, #0]
 8005606:	0018      	movs	r0, r3
 8005608:	f7fb fe3c 	bl	8001284 <__aeabi_ui2f>
 800560c:	1c03      	adds	r3, r0, #0
 800560e:	490d      	ldr	r1, [pc, #52]	; (8005644 <sht3x_read_temperature_and_humidity+0x12c>)
 8005610:	1c18      	adds	r0, r3, #0
 8005612:	f7fb fad7 	bl	8000bc4 <__aeabi_fmul>
 8005616:	1c03      	adds	r3, r0, #0
 8005618:	4908      	ldr	r1, [pc, #32]	; (800563c <sht3x_read_temperature_and_humidity+0x124>)
 800561a:	1c18      	adds	r0, r3, #0
 800561c:	f7fb f908 	bl	8000830 <__aeabi_fdiv>
 8005620:	1c03      	adds	r3, r0, #0
 8005622:	1c1a      	adds	r2, r3, #0
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	601a      	str	r2, [r3, #0]

	return true;
 8005628:	2301      	movs	r3, #1
}
 800562a:	0018      	movs	r0, r3
 800562c:	46bd      	mov	sp, r7
 800562e:	b009      	add	sp, #36	; 0x24
 8005630:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005632:	46c0      	nop			; (mov r8, r8)
 8005634:	00002c06 	.word	0x00002c06
 8005638:	432f0000 	.word	0x432f0000
 800563c:	477fff00 	.word	0x477fff00
 8005640:	42340000 	.word	0x42340000
 8005644:	42c80000 	.word	0x42c80000

08005648 <sht3x_set_header_enable>:

bool sht3x_set_header_enable(sht3x_handle_t *handle, bool enable)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b082      	sub	sp, #8
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	000a      	movs	r2, r1
 8005652:	1cfb      	adds	r3, r7, #3
 8005654:	701a      	strb	r2, [r3, #0]
	if (enable) {
 8005656:	1cfb      	adds	r3, r7, #3
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d007      	beq.n	800566e <sht3x_set_header_enable+0x26>
		return sht3x_send_command(handle, SHT3X_COMMAND_HEATER_ENABLE);
 800565e:	4a09      	ldr	r2, [pc, #36]	; (8005684 <sht3x_set_header_enable+0x3c>)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	0011      	movs	r1, r2
 8005664:	0018      	movs	r0, r3
 8005666:	f7ff fed2 	bl	800540e <sht3x_send_command>
 800566a:	0003      	movs	r3, r0
 800566c:	e006      	b.n	800567c <sht3x_set_header_enable+0x34>
	} else {
		return sht3x_send_command(handle, SHT3X_COMMAND_HEATER_DISABLE);
 800566e:	4a06      	ldr	r2, [pc, #24]	; (8005688 <sht3x_set_header_enable+0x40>)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	0011      	movs	r1, r2
 8005674:	0018      	movs	r0, r3
 8005676:	f7ff feca 	bl	800540e <sht3x_send_command>
 800567a:	0003      	movs	r3, r0
	}
}
 800567c:	0018      	movs	r0, r3
 800567e:	46bd      	mov	sp, r7
 8005680:	b002      	add	sp, #8
 8005682:	bd80      	pop	{r7, pc}
 8005684:	0000306d 	.word	0x0000306d
 8005688:	00003066 	.word	0x00003066

0800568c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005690:	4b07      	ldr	r3, [pc, #28]	; (80056b0 <HAL_MspInit+0x24>)
 8005692:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005694:	4b06      	ldr	r3, [pc, #24]	; (80056b0 <HAL_MspInit+0x24>)
 8005696:	2101      	movs	r1, #1
 8005698:	430a      	orrs	r2, r1
 800569a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800569c:	4b04      	ldr	r3, [pc, #16]	; (80056b0 <HAL_MspInit+0x24>)
 800569e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056a0:	4b03      	ldr	r3, [pc, #12]	; (80056b0 <HAL_MspInit+0x24>)
 80056a2:	2180      	movs	r1, #128	; 0x80
 80056a4:	0549      	lsls	r1, r1, #21
 80056a6:	430a      	orrs	r2, r1
 80056a8:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80056aa:	46c0      	nop			; (mov r8, r8)
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	40021000 	.word	0x40021000

080056b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80056b4:	b590      	push	{r4, r7, lr}
 80056b6:	b089      	sub	sp, #36	; 0x24
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056bc:	240c      	movs	r4, #12
 80056be:	193b      	adds	r3, r7, r4
 80056c0:	0018      	movs	r0, r3
 80056c2:	2314      	movs	r3, #20
 80056c4:	001a      	movs	r2, r3
 80056c6:	2100      	movs	r1, #0
 80056c8:	f007 f872 	bl	800c7b0 <memset>
  if(hadc->Instance==ADC1)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a14      	ldr	r2, [pc, #80]	; (8005724 <HAL_ADC_MspInit+0x70>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d122      	bne.n	800571c <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80056d6:	4b14      	ldr	r3, [pc, #80]	; (8005728 <HAL_ADC_MspInit+0x74>)
 80056d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056da:	4b13      	ldr	r3, [pc, #76]	; (8005728 <HAL_ADC_MspInit+0x74>)
 80056dc:	2180      	movs	r1, #128	; 0x80
 80056de:	0089      	lsls	r1, r1, #2
 80056e0:	430a      	orrs	r2, r1
 80056e2:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80056e4:	4b10      	ldr	r3, [pc, #64]	; (8005728 <HAL_ADC_MspInit+0x74>)
 80056e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056e8:	4b0f      	ldr	r3, [pc, #60]	; (8005728 <HAL_ADC_MspInit+0x74>)
 80056ea:	2101      	movs	r1, #1
 80056ec:	430a      	orrs	r2, r1
 80056ee:	62da      	str	r2, [r3, #44]	; 0x2c
 80056f0:	4b0d      	ldr	r3, [pc, #52]	; (8005728 <HAL_ADC_MspInit+0x74>)
 80056f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f4:	2201      	movs	r2, #1
 80056f6:	4013      	ands	r3, r2
 80056f8:	60bb      	str	r3, [r7, #8]
 80056fa:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA4     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80056fc:	193b      	adds	r3, r7, r4
 80056fe:	2210      	movs	r2, #16
 8005700:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005702:	193b      	adds	r3, r7, r4
 8005704:	2203      	movs	r2, #3
 8005706:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005708:	193b      	adds	r3, r7, r4
 800570a:	2200      	movs	r2, #0
 800570c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800570e:	193a      	adds	r2, r7, r4
 8005710:	23a0      	movs	r3, #160	; 0xa0
 8005712:	05db      	lsls	r3, r3, #23
 8005714:	0011      	movs	r1, r2
 8005716:	0018      	movs	r0, r3
 8005718:	f001 f93e 	bl	8006998 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800571c:	46c0      	nop			; (mov r8, r8)
 800571e:	46bd      	mov	sp, r7
 8005720:	b009      	add	sp, #36	; 0x24
 8005722:	bd90      	pop	{r4, r7, pc}
 8005724:	40012400 	.word	0x40012400
 8005728:	40021000 	.word	0x40021000

0800572c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800572c:	b590      	push	{r4, r7, lr}
 800572e:	b08b      	sub	sp, #44	; 0x2c
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005734:	2414      	movs	r4, #20
 8005736:	193b      	adds	r3, r7, r4
 8005738:	0018      	movs	r0, r3
 800573a:	2314      	movs	r3, #20
 800573c:	001a      	movs	r2, r3
 800573e:	2100      	movs	r1, #0
 8005740:	f007 f836 	bl	800c7b0 <memset>
  if(hi2c->Instance==I2C1)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a2f      	ldr	r2, [pc, #188]	; (8005808 <HAL_I2C_MspInit+0xdc>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d129      	bne.n	80057a2 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800574e:	4b2f      	ldr	r3, [pc, #188]	; (800580c <HAL_I2C_MspInit+0xe0>)
 8005750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005752:	4b2e      	ldr	r3, [pc, #184]	; (800580c <HAL_I2C_MspInit+0xe0>)
 8005754:	2102      	movs	r1, #2
 8005756:	430a      	orrs	r2, r1
 8005758:	62da      	str	r2, [r3, #44]	; 0x2c
 800575a:	4b2c      	ldr	r3, [pc, #176]	; (800580c <HAL_I2C_MspInit+0xe0>)
 800575c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575e:	2202      	movs	r2, #2
 8005760:	4013      	ands	r3, r2
 8005762:	613b      	str	r3, [r7, #16]
 8005764:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005766:	0021      	movs	r1, r4
 8005768:	187b      	adds	r3, r7, r1
 800576a:	22c0      	movs	r2, #192	; 0xc0
 800576c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800576e:	187b      	adds	r3, r7, r1
 8005770:	2212      	movs	r2, #18
 8005772:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005774:	187b      	adds	r3, r7, r1
 8005776:	2200      	movs	r2, #0
 8005778:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800577a:	187b      	adds	r3, r7, r1
 800577c:	2203      	movs	r2, #3
 800577e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8005780:	187b      	adds	r3, r7, r1
 8005782:	2201      	movs	r2, #1
 8005784:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005786:	187b      	adds	r3, r7, r1
 8005788:	4a21      	ldr	r2, [pc, #132]	; (8005810 <HAL_I2C_MspInit+0xe4>)
 800578a:	0019      	movs	r1, r3
 800578c:	0010      	movs	r0, r2
 800578e:	f001 f903 	bl	8006998 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005792:	4b1e      	ldr	r3, [pc, #120]	; (800580c <HAL_I2C_MspInit+0xe0>)
 8005794:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005796:	4b1d      	ldr	r3, [pc, #116]	; (800580c <HAL_I2C_MspInit+0xe0>)
 8005798:	2180      	movs	r1, #128	; 0x80
 800579a:	0389      	lsls	r1, r1, #14
 800579c:	430a      	orrs	r2, r1
 800579e:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80057a0:	e02e      	b.n	8005800 <HAL_I2C_MspInit+0xd4>
  else if(hi2c->Instance==I2C2)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a1b      	ldr	r2, [pc, #108]	; (8005814 <HAL_I2C_MspInit+0xe8>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d129      	bne.n	8005800 <HAL_I2C_MspInit+0xd4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057ac:	4b17      	ldr	r3, [pc, #92]	; (800580c <HAL_I2C_MspInit+0xe0>)
 80057ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057b0:	4b16      	ldr	r3, [pc, #88]	; (800580c <HAL_I2C_MspInit+0xe0>)
 80057b2:	2102      	movs	r1, #2
 80057b4:	430a      	orrs	r2, r1
 80057b6:	62da      	str	r2, [r3, #44]	; 0x2c
 80057b8:	4b14      	ldr	r3, [pc, #80]	; (800580c <HAL_I2C_MspInit+0xe0>)
 80057ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057bc:	2202      	movs	r2, #2
 80057be:	4013      	ands	r3, r2
 80057c0:	60fb      	str	r3, [r7, #12]
 80057c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80057c4:	2114      	movs	r1, #20
 80057c6:	187b      	adds	r3, r7, r1
 80057c8:	22c0      	movs	r2, #192	; 0xc0
 80057ca:	0112      	lsls	r2, r2, #4
 80057cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80057ce:	187b      	adds	r3, r7, r1
 80057d0:	2212      	movs	r2, #18
 80057d2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057d4:	187b      	adds	r3, r7, r1
 80057d6:	2200      	movs	r2, #0
 80057d8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057da:	187b      	adds	r3, r7, r1
 80057dc:	2203      	movs	r2, #3
 80057de:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80057e0:	187b      	adds	r3, r7, r1
 80057e2:	2206      	movs	r2, #6
 80057e4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057e6:	187b      	adds	r3, r7, r1
 80057e8:	4a09      	ldr	r2, [pc, #36]	; (8005810 <HAL_I2C_MspInit+0xe4>)
 80057ea:	0019      	movs	r1, r3
 80057ec:	0010      	movs	r0, r2
 80057ee:	f001 f8d3 	bl	8006998 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80057f2:	4b06      	ldr	r3, [pc, #24]	; (800580c <HAL_I2C_MspInit+0xe0>)
 80057f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057f6:	4b05      	ldr	r3, [pc, #20]	; (800580c <HAL_I2C_MspInit+0xe0>)
 80057f8:	2180      	movs	r1, #128	; 0x80
 80057fa:	03c9      	lsls	r1, r1, #15
 80057fc:	430a      	orrs	r2, r1
 80057fe:	639a      	str	r2, [r3, #56]	; 0x38
}
 8005800:	46c0      	nop			; (mov r8, r8)
 8005802:	46bd      	mov	sp, r7
 8005804:	b00b      	add	sp, #44	; 0x2c
 8005806:	bd90      	pop	{r4, r7, pc}
 8005808:	40005400 	.word	0x40005400
 800580c:	40021000 	.word	0x40021000
 8005810:	50000400 	.word	0x50000400
 8005814:	40005800 	.word	0x40005800

08005818 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b082      	sub	sp, #8
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a0a      	ldr	r2, [pc, #40]	; (8005850 <HAL_TIM_Base_MspInit+0x38>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d10d      	bne.n	8005846 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800582a:	4b0a      	ldr	r3, [pc, #40]	; (8005854 <HAL_TIM_Base_MspInit+0x3c>)
 800582c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800582e:	4b09      	ldr	r3, [pc, #36]	; (8005854 <HAL_TIM_Base_MspInit+0x3c>)
 8005830:	2110      	movs	r1, #16
 8005832:	430a      	orrs	r2, r1
 8005834:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 2, 0);
 8005836:	2200      	movs	r2, #0
 8005838:	2102      	movs	r1, #2
 800583a:	2011      	movs	r0, #17
 800583c:	f000 fff2 	bl	8006824 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8005840:	2011      	movs	r0, #17
 8005842:	f001 f804 	bl	800684e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8005846:	46c0      	nop			; (mov r8, r8)
 8005848:	46bd      	mov	sp, r7
 800584a:	b002      	add	sp, #8
 800584c:	bd80      	pop	{r7, pc}
 800584e:	46c0      	nop			; (mov r8, r8)
 8005850:	40001000 	.word	0x40001000
 8005854:	40021000 	.word	0x40021000

08005858 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005858:	b590      	push	{r4, r7, lr}
 800585a:	b08b      	sub	sp, #44	; 0x2c
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005860:	2414      	movs	r4, #20
 8005862:	193b      	adds	r3, r7, r4
 8005864:	0018      	movs	r0, r3
 8005866:	2314      	movs	r3, #20
 8005868:	001a      	movs	r2, r3
 800586a:	2100      	movs	r1, #0
 800586c:	f006 ffa0 	bl	800c7b0 <memset>
  if(huart->Instance==USART1)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a54      	ldr	r2, [pc, #336]	; (80059c8 <HAL_UART_MspInit+0x170>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d133      	bne.n	80058e2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800587a:	4b54      	ldr	r3, [pc, #336]	; (80059cc <HAL_UART_MspInit+0x174>)
 800587c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800587e:	4b53      	ldr	r3, [pc, #332]	; (80059cc <HAL_UART_MspInit+0x174>)
 8005880:	2180      	movs	r1, #128	; 0x80
 8005882:	01c9      	lsls	r1, r1, #7
 8005884:	430a      	orrs	r2, r1
 8005886:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005888:	4b50      	ldr	r3, [pc, #320]	; (80059cc <HAL_UART_MspInit+0x174>)
 800588a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800588c:	4b4f      	ldr	r3, [pc, #316]	; (80059cc <HAL_UART_MspInit+0x174>)
 800588e:	2101      	movs	r1, #1
 8005890:	430a      	orrs	r2, r1
 8005892:	62da      	str	r2, [r3, #44]	; 0x2c
 8005894:	4b4d      	ldr	r3, [pc, #308]	; (80059cc <HAL_UART_MspInit+0x174>)
 8005896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005898:	2201      	movs	r2, #1
 800589a:	4013      	ands	r3, r2
 800589c:	613b      	str	r3, [r7, #16]
 800589e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80058a0:	193b      	adds	r3, r7, r4
 80058a2:	22c0      	movs	r2, #192	; 0xc0
 80058a4:	00d2      	lsls	r2, r2, #3
 80058a6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058a8:	0021      	movs	r1, r4
 80058aa:	187b      	adds	r3, r7, r1
 80058ac:	2202      	movs	r2, #2
 80058ae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058b0:	187b      	adds	r3, r7, r1
 80058b2:	2200      	movs	r2, #0
 80058b4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058b6:	187b      	adds	r3, r7, r1
 80058b8:	2203      	movs	r2, #3
 80058ba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80058bc:	187b      	adds	r3, r7, r1
 80058be:	2204      	movs	r2, #4
 80058c0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058c2:	187a      	adds	r2, r7, r1
 80058c4:	23a0      	movs	r3, #160	; 0xa0
 80058c6:	05db      	lsls	r3, r3, #23
 80058c8:	0011      	movs	r1, r2
 80058ca:	0018      	movs	r0, r3
 80058cc:	f001 f864 	bl	8006998 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80058d0:	2200      	movs	r2, #0
 80058d2:	2101      	movs	r1, #1
 80058d4:	201b      	movs	r0, #27
 80058d6:	f000 ffa5 	bl	8006824 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80058da:	201b      	movs	r0, #27
 80058dc:	f000 ffb7 	bl	800684e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }

}
 80058e0:	e06e      	b.n	80059c0 <HAL_UART_MspInit+0x168>
  else if(huart->Instance==USART2)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a3a      	ldr	r2, [pc, #232]	; (80059d0 <HAL_UART_MspInit+0x178>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d132      	bne.n	8005952 <HAL_UART_MspInit+0xfa>
    __HAL_RCC_USART2_CLK_ENABLE();
 80058ec:	4b37      	ldr	r3, [pc, #220]	; (80059cc <HAL_UART_MspInit+0x174>)
 80058ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058f0:	4b36      	ldr	r3, [pc, #216]	; (80059cc <HAL_UART_MspInit+0x174>)
 80058f2:	2180      	movs	r1, #128	; 0x80
 80058f4:	0289      	lsls	r1, r1, #10
 80058f6:	430a      	orrs	r2, r1
 80058f8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80058fa:	4b34      	ldr	r3, [pc, #208]	; (80059cc <HAL_UART_MspInit+0x174>)
 80058fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058fe:	4b33      	ldr	r3, [pc, #204]	; (80059cc <HAL_UART_MspInit+0x174>)
 8005900:	2101      	movs	r1, #1
 8005902:	430a      	orrs	r2, r1
 8005904:	62da      	str	r2, [r3, #44]	; 0x2c
 8005906:	4b31      	ldr	r3, [pc, #196]	; (80059cc <HAL_UART_MspInit+0x174>)
 8005908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800590a:	2201      	movs	r2, #1
 800590c:	4013      	ands	r3, r2
 800590e:	60fb      	str	r3, [r7, #12]
 8005910:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005912:	2114      	movs	r1, #20
 8005914:	187b      	adds	r3, r7, r1
 8005916:	220c      	movs	r2, #12
 8005918:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800591a:	187b      	adds	r3, r7, r1
 800591c:	2202      	movs	r2, #2
 800591e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005920:	187b      	adds	r3, r7, r1
 8005922:	2200      	movs	r2, #0
 8005924:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005926:	187b      	adds	r3, r7, r1
 8005928:	2203      	movs	r2, #3
 800592a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800592c:	187b      	adds	r3, r7, r1
 800592e:	2204      	movs	r2, #4
 8005930:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005932:	187a      	adds	r2, r7, r1
 8005934:	23a0      	movs	r3, #160	; 0xa0
 8005936:	05db      	lsls	r3, r3, #23
 8005938:	0011      	movs	r1, r2
 800593a:	0018      	movs	r0, r3
 800593c:	f001 f82c 	bl	8006998 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8005940:	2200      	movs	r2, #0
 8005942:	2101      	movs	r1, #1
 8005944:	201c      	movs	r0, #28
 8005946:	f000 ff6d 	bl	8006824 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800594a:	201c      	movs	r0, #28
 800594c:	f000 ff7f 	bl	800684e <HAL_NVIC_EnableIRQ>
}
 8005950:	e036      	b.n	80059c0 <HAL_UART_MspInit+0x168>
  else if(huart->Instance==USART4)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a1f      	ldr	r2, [pc, #124]	; (80059d4 <HAL_UART_MspInit+0x17c>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d131      	bne.n	80059c0 <HAL_UART_MspInit+0x168>
    __HAL_RCC_USART4_CLK_ENABLE();
 800595c:	4b1b      	ldr	r3, [pc, #108]	; (80059cc <HAL_UART_MspInit+0x174>)
 800595e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005960:	4b1a      	ldr	r3, [pc, #104]	; (80059cc <HAL_UART_MspInit+0x174>)
 8005962:	2180      	movs	r1, #128	; 0x80
 8005964:	0309      	lsls	r1, r1, #12
 8005966:	430a      	orrs	r2, r1
 8005968:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800596a:	4b18      	ldr	r3, [pc, #96]	; (80059cc <HAL_UART_MspInit+0x174>)
 800596c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800596e:	4b17      	ldr	r3, [pc, #92]	; (80059cc <HAL_UART_MspInit+0x174>)
 8005970:	2101      	movs	r1, #1
 8005972:	430a      	orrs	r2, r1
 8005974:	62da      	str	r2, [r3, #44]	; 0x2c
 8005976:	4b15      	ldr	r3, [pc, #84]	; (80059cc <HAL_UART_MspInit+0x174>)
 8005978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800597a:	2201      	movs	r2, #1
 800597c:	4013      	ands	r3, r2
 800597e:	60bb      	str	r3, [r7, #8]
 8005980:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005982:	2114      	movs	r1, #20
 8005984:	187b      	adds	r3, r7, r1
 8005986:	2203      	movs	r2, #3
 8005988:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800598a:	187b      	adds	r3, r7, r1
 800598c:	2202      	movs	r2, #2
 800598e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005990:	187b      	adds	r3, r7, r1
 8005992:	2200      	movs	r2, #0
 8005994:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005996:	187b      	adds	r3, r7, r1
 8005998:	2203      	movs	r2, #3
 800599a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800599c:	187b      	adds	r3, r7, r1
 800599e:	2206      	movs	r2, #6
 80059a0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059a2:	187a      	adds	r2, r7, r1
 80059a4:	23a0      	movs	r3, #160	; 0xa0
 80059a6:	05db      	lsls	r3, r3, #23
 80059a8:	0011      	movs	r1, r2
 80059aa:	0018      	movs	r0, r3
 80059ac:	f000 fff4 	bl	8006998 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART4_5_IRQn, 1, 0);
 80059b0:	2200      	movs	r2, #0
 80059b2:	2101      	movs	r1, #1
 80059b4:	200e      	movs	r0, #14
 80059b6:	f000 ff35 	bl	8006824 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 80059ba:	200e      	movs	r0, #14
 80059bc:	f000 ff47 	bl	800684e <HAL_NVIC_EnableIRQ>
}
 80059c0:	46c0      	nop			; (mov r8, r8)
 80059c2:	46bd      	mov	sp, r7
 80059c4:	b00b      	add	sp, #44	; 0x2c
 80059c6:	bd90      	pop	{r4, r7, pc}
 80059c8:	40013800 	.word	0x40013800
 80059cc:	40021000 	.word	0x40021000
 80059d0:	40004400 	.word	0x40004400
 80059d4:	40004c00 	.word	0x40004c00

080059d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80059dc:	e7fe      	b.n	80059dc <NMI_Handler+0x4>

080059de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80059de:	b580      	push	{r7, lr}
 80059e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80059e2:	e7fe      	b.n	80059e2 <HardFault_Handler+0x4>

080059e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80059e8:	46c0      	nop			; (mov r8, r8)
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}

080059ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80059ee:	b580      	push	{r7, lr}
 80059f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80059f2:	46c0      	nop			; (mov r8, r8)
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80059fc:	f000 f998 	bl	8005d30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  countSystick++;
 8005a00:	4b10      	ldr	r3, [pc, #64]	; (8005a44 <SysTick_Handler+0x4c>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	1c5a      	adds	r2, r3, #1
 8005a06:	4b0f      	ldr	r3, [pc, #60]	; (8005a44 <SysTick_Handler+0x4c>)
 8005a08:	601a      	str	r2, [r3, #0]
  if(countSystick>TIME_SYSTICK){
 8005a0a:	4b0e      	ldr	r3, [pc, #56]	; (8005a44 <SysTick_Handler+0x4c>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2bc8      	cmp	r3, #200	; 0xc8
 8005a10:	dd05      	ble.n	8005a1e <SysTick_Handler+0x26>
  	HAL_GPIO_WritePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin, SET);
 8005a12:	4b0d      	ldr	r3, [pc, #52]	; (8005a48 <SysTick_Handler+0x50>)
 8005a14:	2201      	movs	r2, #1
 8005a16:	2104      	movs	r1, #4
 8005a18:	0018      	movs	r0, r3
 8005a1a:	f001 f93b 	bl	8006c94 <HAL_GPIO_WritePin>
  }
  if(countSystick>TIME_SYSTICK*2){
 8005a1e:	4b09      	ldr	r3, [pc, #36]	; (8005a44 <SysTick_Handler+0x4c>)
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	23c8      	movs	r3, #200	; 0xc8
 8005a24:	005b      	lsls	r3, r3, #1
 8005a26:	429a      	cmp	r2, r3
 8005a28:	dd08      	ble.n	8005a3c <SysTick_Handler+0x44>
  	HAL_GPIO_WritePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin, RESET);
 8005a2a:	4b07      	ldr	r3, [pc, #28]	; (8005a48 <SysTick_Handler+0x50>)
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	2104      	movs	r1, #4
 8005a30:	0018      	movs	r0, r3
 8005a32:	f001 f92f 	bl	8006c94 <HAL_GPIO_WritePin>
  	countSystick=0;
 8005a36:	4b03      	ldr	r3, [pc, #12]	; (8005a44 <SysTick_Handler+0x4c>)
 8005a38:	2200      	movs	r2, #0
 8005a3a:	601a      	str	r2, [r3, #0]
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 8005a3c:	46c0      	nop			; (mov r8, r8)
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	46c0      	nop			; (mov r8, r8)
 8005a44:	20000a08 	.word	0x20000a08
 8005a48:	50000400 	.word	0x50000400

08005a4c <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8005a50:	4b03      	ldr	r3, [pc, #12]	; (8005a60 <USART4_5_IRQHandler+0x14>)
 8005a52:	0018      	movs	r0, r3
 8005a54:	f003 fb5a 	bl	800910c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 8005a58:	46c0      	nop			; (mov r8, r8)
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	46c0      	nop			; (mov r8, r8)
 8005a60:	20000520 	.word	0x20000520

08005a64 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005a68:	4b03      	ldr	r3, [pc, #12]	; (8005a78 <TIM6_IRQHandler+0x14>)
 8005a6a:	0018      	movs	r0, r3
 8005a6c:	f003 f88e 	bl	8008b8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8005a70:	46c0      	nop			; (mov r8, r8)
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
 8005a76:	46c0      	nop			; (mov r8, r8)
 8005a78:	200003d0 	.word	0x200003d0

08005a7c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005a80:	4b03      	ldr	r3, [pc, #12]	; (8005a90 <USART1_IRQHandler+0x14>)
 8005a82:	0018      	movs	r0, r3
 8005a84:	f003 fb42 	bl	800910c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005a88:	46c0      	nop			; (mov r8, r8)
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	46c0      	nop			; (mov r8, r8)
 8005a90:	20000410 	.word	0x20000410

08005a94 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005a98:	4b03      	ldr	r3, [pc, #12]	; (8005aa8 <USART2_IRQHandler+0x14>)
 8005a9a:	0018      	movs	r0, r3
 8005a9c:	f003 fb36 	bl	800910c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005aa0:	46c0      	nop			; (mov r8, r8)
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	46c0      	nop			; (mov r8, r8)
 8005aa8:	20000498 	.word	0x20000498

08005aac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	af00      	add	r7, sp, #0
  return 1;
 8005ab0:	2301      	movs	r3, #1
}
 8005ab2:	0018      	movs	r0, r3
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <_kill>:

int _kill(int pid, int sig)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005ac2:	f006 ff09 	bl	800c8d8 <__errno>
 8005ac6:	0003      	movs	r3, r0
 8005ac8:	2216      	movs	r2, #22
 8005aca:	601a      	str	r2, [r3, #0]
  return -1;
 8005acc:	2301      	movs	r3, #1
 8005ace:	425b      	negs	r3, r3
}
 8005ad0:	0018      	movs	r0, r3
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	b002      	add	sp, #8
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <_exit>:

void _exit (int status)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b082      	sub	sp, #8
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	425a      	negs	r2, r3
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	0011      	movs	r1, r2
 8005ae8:	0018      	movs	r0, r3
 8005aea:	f7ff ffe5 	bl	8005ab8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005aee:	e7fe      	b.n	8005aee <_exit+0x16>

08005af0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b086      	sub	sp, #24
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005afc:	2300      	movs	r3, #0
 8005afe:	617b      	str	r3, [r7, #20]
 8005b00:	e00a      	b.n	8005b18 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005b02:	e000      	b.n	8005b06 <_read+0x16>
 8005b04:	bf00      	nop
 8005b06:	0001      	movs	r1, r0
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	1c5a      	adds	r2, r3, #1
 8005b0c:	60ba      	str	r2, [r7, #8]
 8005b0e:	b2ca      	uxtb	r2, r1
 8005b10:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	3301      	adds	r3, #1
 8005b16:	617b      	str	r3, [r7, #20]
 8005b18:	697a      	ldr	r2, [r7, #20]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	dbf0      	blt.n	8005b02 <_read+0x12>
  }

  return len;
 8005b20:	687b      	ldr	r3, [r7, #4]
}
 8005b22:	0018      	movs	r0, r3
 8005b24:	46bd      	mov	sp, r7
 8005b26:	b006      	add	sp, #24
 8005b28:	bd80      	pop	{r7, pc}

08005b2a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005b2a:	b580      	push	{r7, lr}
 8005b2c:	b086      	sub	sp, #24
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	60f8      	str	r0, [r7, #12]
 8005b32:	60b9      	str	r1, [r7, #8]
 8005b34:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b36:	2300      	movs	r3, #0
 8005b38:	617b      	str	r3, [r7, #20]
 8005b3a:	e009      	b.n	8005b50 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	1c5a      	adds	r2, r3, #1
 8005b40:	60ba      	str	r2, [r7, #8]
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	0018      	movs	r0, r3
 8005b46:	e000      	b.n	8005b4a <_write+0x20>
 8005b48:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	617b      	str	r3, [r7, #20]
 8005b50:	697a      	ldr	r2, [r7, #20]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	dbf1      	blt.n	8005b3c <_write+0x12>
  }
  return len;
 8005b58:	687b      	ldr	r3, [r7, #4]
}
 8005b5a:	0018      	movs	r0, r3
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	b006      	add	sp, #24
 8005b60:	bd80      	pop	{r7, pc}

08005b62 <_close>:

int _close(int file)
{
 8005b62:	b580      	push	{r7, lr}
 8005b64:	b082      	sub	sp, #8
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	425b      	negs	r3, r3
}
 8005b6e:	0018      	movs	r0, r3
 8005b70:	46bd      	mov	sp, r7
 8005b72:	b002      	add	sp, #8
 8005b74:	bd80      	pop	{r7, pc}

08005b76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005b76:	b580      	push	{r7, lr}
 8005b78:	b082      	sub	sp, #8
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
 8005b7e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	2280      	movs	r2, #128	; 0x80
 8005b84:	0192      	lsls	r2, r2, #6
 8005b86:	605a      	str	r2, [r3, #4]
  return 0;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	0018      	movs	r0, r3
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	b002      	add	sp, #8
 8005b90:	bd80      	pop	{r7, pc}

08005b92 <_isatty>:

int _isatty(int file)
{
 8005b92:	b580      	push	{r7, lr}
 8005b94:	b082      	sub	sp, #8
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005b9a:	2301      	movs	r3, #1
}
 8005b9c:	0018      	movs	r0, r3
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	b002      	add	sp, #8
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	0018      	movs	r0, r3
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	b004      	add	sp, #16
 8005bb8:	bd80      	pop	{r7, pc}
	...

08005bbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b086      	sub	sp, #24
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005bc4:	4a14      	ldr	r2, [pc, #80]	; (8005c18 <_sbrk+0x5c>)
 8005bc6:	4b15      	ldr	r3, [pc, #84]	; (8005c1c <_sbrk+0x60>)
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005bd0:	4b13      	ldr	r3, [pc, #76]	; (8005c20 <_sbrk+0x64>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d102      	bne.n	8005bde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005bd8:	4b11      	ldr	r3, [pc, #68]	; (8005c20 <_sbrk+0x64>)
 8005bda:	4a12      	ldr	r2, [pc, #72]	; (8005c24 <_sbrk+0x68>)
 8005bdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005bde:	4b10      	ldr	r3, [pc, #64]	; (8005c20 <_sbrk+0x64>)
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	18d3      	adds	r3, r2, r3
 8005be6:	693a      	ldr	r2, [r7, #16]
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d207      	bcs.n	8005bfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005bec:	f006 fe74 	bl	800c8d8 <__errno>
 8005bf0:	0003      	movs	r3, r0
 8005bf2:	220c      	movs	r2, #12
 8005bf4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	425b      	negs	r3, r3
 8005bfa:	e009      	b.n	8005c10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005bfc:	4b08      	ldr	r3, [pc, #32]	; (8005c20 <_sbrk+0x64>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005c02:	4b07      	ldr	r3, [pc, #28]	; (8005c20 <_sbrk+0x64>)
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	18d2      	adds	r2, r2, r3
 8005c0a:	4b05      	ldr	r3, [pc, #20]	; (8005c20 <_sbrk+0x64>)
 8005c0c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
}
 8005c10:	0018      	movs	r0, r3
 8005c12:	46bd      	mov	sp, r7
 8005c14:	b006      	add	sp, #24
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	20005000 	.word	0x20005000
 8005c1c:	00000400 	.word	0x00000400
 8005c20:	20000a0c 	.word	0x20000a0c
 8005c24:	20000b60 	.word	0x20000b60

08005c28 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005c2c:	46c0      	nop			; (mov r8, r8)
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
	...

08005c34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8005c34:	480d      	ldr	r0, [pc, #52]	; (8005c6c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8005c36:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8005c38:	f7ff fff6 	bl	8005c28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005c3c:	480c      	ldr	r0, [pc, #48]	; (8005c70 <LoopForever+0x6>)
  ldr r1, =_edata
 8005c3e:	490d      	ldr	r1, [pc, #52]	; (8005c74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005c40:	4a0d      	ldr	r2, [pc, #52]	; (8005c78 <LoopForever+0xe>)
  movs r3, #0
 8005c42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005c44:	e002      	b.n	8005c4c <LoopCopyDataInit>

08005c46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005c46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005c48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005c4a:	3304      	adds	r3, #4

08005c4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005c4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005c4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005c50:	d3f9      	bcc.n	8005c46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005c52:	4a0a      	ldr	r2, [pc, #40]	; (8005c7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8005c54:	4c0a      	ldr	r4, [pc, #40]	; (8005c80 <LoopForever+0x16>)
  movs r3, #0
 8005c56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005c58:	e001      	b.n	8005c5e <LoopFillZerobss>

08005c5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005c5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005c5c:	3204      	adds	r2, #4

08005c5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005c5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005c60:	d3fb      	bcc.n	8005c5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005c62:	f006 fe3f 	bl	800c8e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005c66:	f7ff f88f 	bl	8004d88 <main>

08005c6a <LoopForever>:

LoopForever:
    b LoopForever
 8005c6a:	e7fe      	b.n	8005c6a <LoopForever>
   ldr   r0, =_estack
 8005c6c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8005c70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005c74:	200002b0 	.word	0x200002b0
  ldr r2, =_sidata
 8005c78:	08010270 	.word	0x08010270
  ldr r2, =_sbss
 8005c7c:	200002b0 	.word	0x200002b0
  ldr r4, =_ebss
 8005c80:	20000b60 	.word	0x20000b60

08005c84 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005c84:	e7fe      	b.n	8005c84 <ADC1_COMP_IRQHandler>
	...

08005c88 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b082      	sub	sp, #8
 8005c8c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005c8e:	1dfb      	adds	r3, r7, #7
 8005c90:	2200      	movs	r2, #0
 8005c92:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8005c94:	4b0b      	ldr	r3, [pc, #44]	; (8005cc4 <HAL_Init+0x3c>)
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	4b0a      	ldr	r3, [pc, #40]	; (8005cc4 <HAL_Init+0x3c>)
 8005c9a:	2140      	movs	r1, #64	; 0x40
 8005c9c:	430a      	orrs	r2, r1
 8005c9e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005ca0:	2003      	movs	r0, #3
 8005ca2:	f000 f811 	bl	8005cc8 <HAL_InitTick>
 8005ca6:	1e03      	subs	r3, r0, #0
 8005ca8:	d003      	beq.n	8005cb2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8005caa:	1dfb      	adds	r3, r7, #7
 8005cac:	2201      	movs	r2, #1
 8005cae:	701a      	strb	r2, [r3, #0]
 8005cb0:	e001      	b.n	8005cb6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005cb2:	f7ff fceb 	bl	800568c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005cb6:	1dfb      	adds	r3, r7, #7
 8005cb8:	781b      	ldrb	r3, [r3, #0]
}
 8005cba:	0018      	movs	r0, r3
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	b002      	add	sp, #8
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	46c0      	nop			; (mov r8, r8)
 8005cc4:	40022000 	.word	0x40022000

08005cc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005cc8:	b590      	push	{r4, r7, lr}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005cd0:	4b14      	ldr	r3, [pc, #80]	; (8005d24 <HAL_InitTick+0x5c>)
 8005cd2:	681c      	ldr	r4, [r3, #0]
 8005cd4:	4b14      	ldr	r3, [pc, #80]	; (8005d28 <HAL_InitTick+0x60>)
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	0019      	movs	r1, r3
 8005cda:	23fa      	movs	r3, #250	; 0xfa
 8005cdc:	0098      	lsls	r0, r3, #2
 8005cde:	f7fa fa2f 	bl	8000140 <__udivsi3>
 8005ce2:	0003      	movs	r3, r0
 8005ce4:	0019      	movs	r1, r3
 8005ce6:	0020      	movs	r0, r4
 8005ce8:	f7fa fa2a 	bl	8000140 <__udivsi3>
 8005cec:	0003      	movs	r3, r0
 8005cee:	0018      	movs	r0, r3
 8005cf0:	f000 fdbd 	bl	800686e <HAL_SYSTICK_Config>
 8005cf4:	1e03      	subs	r3, r0, #0
 8005cf6:	d001      	beq.n	8005cfc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e00f      	b.n	8005d1c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2b03      	cmp	r3, #3
 8005d00:	d80b      	bhi.n	8005d1a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005d02:	6879      	ldr	r1, [r7, #4]
 8005d04:	2301      	movs	r3, #1
 8005d06:	425b      	negs	r3, r3
 8005d08:	2200      	movs	r2, #0
 8005d0a:	0018      	movs	r0, r3
 8005d0c:	f000 fd8a 	bl	8006824 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005d10:	4b06      	ldr	r3, [pc, #24]	; (8005d2c <HAL_InitTick+0x64>)
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005d16:	2300      	movs	r3, #0
 8005d18:	e000      	b.n	8005d1c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
}
 8005d1c:	0018      	movs	r0, r3
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	b003      	add	sp, #12
 8005d22:	bd90      	pop	{r4, r7, pc}
 8005d24:	200000dc 	.word	0x200000dc
 8005d28:	200000e4 	.word	0x200000e4
 8005d2c:	200000e0 	.word	0x200000e0

08005d30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005d34:	4b05      	ldr	r3, [pc, #20]	; (8005d4c <HAL_IncTick+0x1c>)
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	001a      	movs	r2, r3
 8005d3a:	4b05      	ldr	r3, [pc, #20]	; (8005d50 <HAL_IncTick+0x20>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	18d2      	adds	r2, r2, r3
 8005d40:	4b03      	ldr	r3, [pc, #12]	; (8005d50 <HAL_IncTick+0x20>)
 8005d42:	601a      	str	r2, [r3, #0]
}
 8005d44:	46c0      	nop			; (mov r8, r8)
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	46c0      	nop			; (mov r8, r8)
 8005d4c:	200000e4 	.word	0x200000e4
 8005d50:	20000a10 	.word	0x20000a10

08005d54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	af00      	add	r7, sp, #0
  return uwTick;
 8005d58:	4b02      	ldr	r3, [pc, #8]	; (8005d64 <HAL_GetTick+0x10>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
}
 8005d5c:	0018      	movs	r0, r3
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	46c0      	nop			; (mov r8, r8)
 8005d64:	20000a10 	.word	0x20000a10

08005d68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005d70:	f7ff fff0 	bl	8005d54 <HAL_GetTick>
 8005d74:	0003      	movs	r3, r0
 8005d76:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	3301      	adds	r3, #1
 8005d80:	d005      	beq.n	8005d8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005d82:	4b0a      	ldr	r3, [pc, #40]	; (8005dac <HAL_Delay+0x44>)
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	001a      	movs	r2, r3
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	189b      	adds	r3, r3, r2
 8005d8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005d8e:	46c0      	nop			; (mov r8, r8)
 8005d90:	f7ff ffe0 	bl	8005d54 <HAL_GetTick>
 8005d94:	0002      	movs	r2, r0
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	1ad3      	subs	r3, r2, r3
 8005d9a:	68fa      	ldr	r2, [r7, #12]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d8f7      	bhi.n	8005d90 <HAL_Delay+0x28>
  {
  }
}
 8005da0:	46c0      	nop			; (mov r8, r8)
 8005da2:	46c0      	nop			; (mov r8, r8)
 8005da4:	46bd      	mov	sp, r7
 8005da6:	b004      	add	sp, #16
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	46c0      	nop			; (mov r8, r8)
 8005dac:	200000e4 	.word	0x200000e4

08005db0 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8005db4:	4b04      	ldr	r3, [pc, #16]	; (8005dc8 <HAL_SuspendTick+0x18>)
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	4b03      	ldr	r3, [pc, #12]	; (8005dc8 <HAL_SuspendTick+0x18>)
 8005dba:	2102      	movs	r1, #2
 8005dbc:	438a      	bics	r2, r1
 8005dbe:	601a      	str	r2, [r3, #0]
}
 8005dc0:	46c0      	nop			; (mov r8, r8)
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	46c0      	nop			; (mov r8, r8)
 8005dc8:	e000e010 	.word	0xe000e010

08005dcc <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8005dd0:	4b04      	ldr	r3, [pc, #16]	; (8005de4 <HAL_ResumeTick+0x18>)
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	4b03      	ldr	r3, [pc, #12]	; (8005de4 <HAL_ResumeTick+0x18>)
 8005dd6:	2102      	movs	r1, #2
 8005dd8:	430a      	orrs	r2, r1
 8005dda:	601a      	str	r2, [r3, #0]
}
 8005ddc:	46c0      	nop			; (mov r8, r8)
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	46c0      	nop			; (mov r8, r8)
 8005de4:	e000e010 	.word	0xe000e010

08005de8 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b082      	sub	sp, #8
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d101      	bne.n	8005dfa <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e159      	b.n	80060ae <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d10a      	bne.n	8005e18 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	659a      	str	r2, [r3, #88]	; 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2250      	movs	r2, #80	; 0x50
 8005e0c:	2100      	movs	r1, #0
 8005e0e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	0018      	movs	r0, r3
 8005e14:	f7ff fc4e 	bl	80056b4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e1c:	2210      	movs	r2, #16
 8005e1e:	4013      	ands	r3, r2
 8005e20:	2b10      	cmp	r3, #16
 8005e22:	d005      	beq.n	8005e30 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	2204      	movs	r2, #4
 8005e2c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8005e2e:	d00b      	beq.n	8005e48 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e34:	2210      	movs	r2, #16
 8005e36:	431a      	orrs	r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2250      	movs	r2, #80	; 0x50
 8005e40:	2100      	movs	r1, #0
 8005e42:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e132      	b.n	80060ae <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e4c:	4a9a      	ldr	r2, [pc, #616]	; (80060b8 <HAL_ADC_Init+0x2d0>)
 8005e4e:	4013      	ands	r3, r2
 8005e50:	2202      	movs	r2, #2
 8005e52:	431a      	orrs	r2, r3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	2203      	movs	r2, #3
 8005e60:	4013      	ands	r3, r2
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d108      	bne.n	8005e78 <HAL_ADC_Init+0x90>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	4013      	ands	r3, r2
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d101      	bne.n	8005e78 <HAL_ADC_Init+0x90>
 8005e74:	2301      	movs	r3, #1
 8005e76:	e000      	b.n	8005e7a <HAL_ADC_Init+0x92>
 8005e78:	2300      	movs	r3, #0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d149      	bne.n	8005f12 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	685a      	ldr	r2, [r3, #4]
 8005e82:	23c0      	movs	r3, #192	; 0xc0
 8005e84:	061b      	lsls	r3, r3, #24
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d00b      	beq.n	8005ea2 <HAL_ADC_Init+0xba>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	685a      	ldr	r2, [r3, #4]
 8005e8e:	2380      	movs	r3, #128	; 0x80
 8005e90:	05db      	lsls	r3, r3, #23
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d005      	beq.n	8005ea2 <HAL_ADC_Init+0xba>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	685a      	ldr	r2, [r3, #4]
 8005e9a:	2380      	movs	r3, #128	; 0x80
 8005e9c:	061b      	lsls	r3, r3, #24
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d111      	bne.n	8005ec6 <HAL_ADC_Init+0xde>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	691a      	ldr	r2, [r3, #16]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	0092      	lsls	r2, r2, #2
 8005eae:	0892      	lsrs	r2, r2, #2
 8005eb0:	611a      	str	r2, [r3, #16]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	6919      	ldr	r1, [r3, #16]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	685a      	ldr	r2, [r3, #4]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	430a      	orrs	r2, r1
 8005ec2:	611a      	str	r2, [r3, #16]
 8005ec4:	e014      	b.n	8005ef0 <HAL_ADC_Init+0x108>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	691a      	ldr	r2, [r3, #16]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	0092      	lsls	r2, r2, #2
 8005ed2:	0892      	lsrs	r2, r2, #2
 8005ed4:	611a      	str	r2, [r3, #16]
 8005ed6:	4b79      	ldr	r3, [pc, #484]	; (80060bc <HAL_ADC_Init+0x2d4>)
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	4b78      	ldr	r3, [pc, #480]	; (80060bc <HAL_ADC_Init+0x2d4>)
 8005edc:	4978      	ldr	r1, [pc, #480]	; (80060c0 <HAL_ADC_Init+0x2d8>)
 8005ede:	400a      	ands	r2, r1
 8005ee0:	601a      	str	r2, [r3, #0]
 8005ee2:	4b76      	ldr	r3, [pc, #472]	; (80060bc <HAL_ADC_Init+0x2d4>)
 8005ee4:	6819      	ldr	r1, [r3, #0]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	685a      	ldr	r2, [r3, #4]
 8005eea:	4b74      	ldr	r3, [pc, #464]	; (80060bc <HAL_ADC_Init+0x2d4>)
 8005eec:	430a      	orrs	r2, r1
 8005eee:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68da      	ldr	r2, [r3, #12]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2118      	movs	r1, #24
 8005efc:	438a      	bics	r2, r1
 8005efe:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	68d9      	ldr	r1, [r3, #12]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	689a      	ldr	r2, [r3, #8]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	430a      	orrs	r2, r1
 8005f10:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8005f12:	4b6a      	ldr	r3, [pc, #424]	; (80060bc <HAL_ADC_Init+0x2d4>)
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	4b69      	ldr	r3, [pc, #420]	; (80060bc <HAL_ADC_Init+0x2d4>)
 8005f18:	496a      	ldr	r1, [pc, #424]	; (80060c4 <HAL_ADC_Init+0x2dc>)
 8005f1a:	400a      	ands	r2, r1
 8005f1c:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8005f1e:	4b67      	ldr	r3, [pc, #412]	; (80060bc <HAL_ADC_Init+0x2d4>)
 8005f20:	6819      	ldr	r1, [r3, #0]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f26:	065a      	lsls	r2, r3, #25
 8005f28:	4b64      	ldr	r3, [pc, #400]	; (80060bc <HAL_ADC_Init+0x2d4>)
 8005f2a:	430a      	orrs	r2, r1
 8005f2c:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	689a      	ldr	r2, [r3, #8]
 8005f34:	2380      	movs	r3, #128	; 0x80
 8005f36:	055b      	lsls	r3, r3, #21
 8005f38:	4013      	ands	r3, r2
 8005f3a:	d108      	bne.n	8005f4e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	689a      	ldr	r2, [r3, #8]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	2180      	movs	r1, #128	; 0x80
 8005f48:	0549      	lsls	r1, r1, #21
 8005f4a:	430a      	orrs	r2, r1
 8005f4c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68da      	ldr	r2, [r3, #12]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	495b      	ldr	r1, [pc, #364]	; (80060c8 <HAL_ADC_Init+0x2e0>)
 8005f5a:	400a      	ands	r2, r1
 8005f5c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68d9      	ldr	r1, [r3, #12]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	2b02      	cmp	r3, #2
 8005f6e:	d101      	bne.n	8005f74 <HAL_ADC_Init+0x18c>
 8005f70:	2304      	movs	r3, #4
 8005f72:	e000      	b.n	8005f76 <HAL_ADC_Init+0x18e>
 8005f74:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8005f76:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2020      	movs	r0, #32
 8005f7c:	5c1b      	ldrb	r3, [r3, r0]
 8005f7e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8005f80:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	202c      	movs	r0, #44	; 0x2c
 8005f86:	5c1b      	ldrb	r3, [r3, r0]
 8005f88:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8005f8a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8005f90:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	699b      	ldr	r3, [r3, #24]
 8005f96:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8005f98:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	69db      	ldr	r3, [r3, #28]
 8005f9e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8005fa0:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	430a      	orrs	r2, r1
 8005fa8:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005fae:	23c2      	movs	r3, #194	; 0xc2
 8005fb0:	33ff      	adds	r3, #255	; 0xff
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d00b      	beq.n	8005fce <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	68d9      	ldr	r1, [r3, #12]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8005fc4:	431a      	orrs	r2, r3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	430a      	orrs	r2, r1
 8005fcc:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2221      	movs	r2, #33	; 0x21
 8005fd2:	5c9b      	ldrb	r3, [r3, r2]
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d11a      	bne.n	800600e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2220      	movs	r2, #32
 8005fdc:	5c9b      	ldrb	r3, [r3, r2]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d109      	bne.n	8005ff6 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	68da      	ldr	r2, [r3, #12]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	2180      	movs	r1, #128	; 0x80
 8005fee:	0249      	lsls	r1, r1, #9
 8005ff0:	430a      	orrs	r2, r1
 8005ff2:	60da      	str	r2, [r3, #12]
 8005ff4:	e00b      	b.n	800600e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ffa:	2220      	movs	r2, #32
 8005ffc:	431a      	orrs	r2, r3
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006006:	2201      	movs	r2, #1
 8006008:	431a      	orrs	r2, r3
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006012:	2b01      	cmp	r3, #1
 8006014:	d11f      	bne.n	8006056 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	691a      	ldr	r2, [r3, #16]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	492a      	ldr	r1, [pc, #168]	; (80060cc <HAL_ADC_Init+0x2e4>)
 8006022:	400a      	ands	r2, r1
 8006024:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	6919      	ldr	r1, [r3, #16]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8006034:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800603a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	430a      	orrs	r2, r1
 8006042:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	691a      	ldr	r2, [r3, #16]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	2101      	movs	r1, #1
 8006050:	430a      	orrs	r2, r1
 8006052:	611a      	str	r2, [r3, #16]
 8006054:	e00e      	b.n	8006074 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	691b      	ldr	r3, [r3, #16]
 800605c:	2201      	movs	r2, #1
 800605e:	4013      	ands	r3, r2
 8006060:	2b01      	cmp	r3, #1
 8006062:	d107      	bne.n	8006074 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	691a      	ldr	r2, [r3, #16]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	2101      	movs	r1, #1
 8006070:	438a      	bics	r2, r1
 8006072:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	695a      	ldr	r2, [r3, #20]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	2107      	movs	r1, #7
 8006080:	438a      	bics	r2, r1
 8006082:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	6959      	ldr	r1, [r3, #20]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	430a      	orrs	r2, r1
 8006094:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060a0:	2203      	movs	r2, #3
 80060a2:	4393      	bics	r3, r2
 80060a4:	2201      	movs	r2, #1
 80060a6:	431a      	orrs	r2, r3
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 80060ac:	2300      	movs	r3, #0
}
 80060ae:	0018      	movs	r0, r3
 80060b0:	46bd      	mov	sp, r7
 80060b2:	b002      	add	sp, #8
 80060b4:	bd80      	pop	{r7, pc}
 80060b6:	46c0      	nop			; (mov r8, r8)
 80060b8:	fffffefd 	.word	0xfffffefd
 80060bc:	40012708 	.word	0x40012708
 80060c0:	ffc3ffff 	.word	0xffc3ffff
 80060c4:	fdffffff 	.word	0xfdffffff
 80060c8:	fffe0219 	.word	0xfffe0219
 80060cc:	fffffc03 	.word	0xfffffc03

080060d0 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80060d0:	b590      	push	{r4, r7, lr}
 80060d2:	b085      	sub	sp, #20
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80060d8:	230f      	movs	r3, #15
 80060da:	18fb      	adds	r3, r7, r3
 80060dc:	2200      	movs	r2, #0
 80060de:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	2204      	movs	r2, #4
 80060e8:	4013      	ands	r3, r2
 80060ea:	d138      	bne.n	800615e <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2250      	movs	r2, #80	; 0x50
 80060f0:	5c9b      	ldrb	r3, [r3, r2]
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d101      	bne.n	80060fa <HAL_ADC_Start+0x2a>
 80060f6:	2302      	movs	r3, #2
 80060f8:	e038      	b.n	800616c <HAL_ADC_Start+0x9c>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2250      	movs	r2, #80	; 0x50
 80060fe:	2101      	movs	r1, #1
 8006100:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	69db      	ldr	r3, [r3, #28]
 8006106:	2b01      	cmp	r3, #1
 8006108:	d007      	beq.n	800611a <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800610a:	230f      	movs	r3, #15
 800610c:	18fc      	adds	r4, r7, r3
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	0018      	movs	r0, r3
 8006112:	f000 f99f 	bl	8006454 <ADC_Enable>
 8006116:	0003      	movs	r3, r0
 8006118:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800611a:	230f      	movs	r3, #15
 800611c:	18fb      	adds	r3, r7, r3
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d120      	bne.n	8006166 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006128:	4a12      	ldr	r2, [pc, #72]	; (8006174 <HAL_ADC_Start+0xa4>)
 800612a:	4013      	ands	r3, r2
 800612c:	2280      	movs	r2, #128	; 0x80
 800612e:	0052      	lsls	r2, r2, #1
 8006130:	431a      	orrs	r2, r3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	659a      	str	r2, [r3, #88]	; 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2250      	movs	r2, #80	; 0x50
 8006140:	2100      	movs	r1, #0
 8006142:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	221c      	movs	r2, #28
 800614a:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	689a      	ldr	r2, [r3, #8]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	2104      	movs	r1, #4
 8006158:	430a      	orrs	r2, r1
 800615a:	609a      	str	r2, [r3, #8]
 800615c:	e003      	b.n	8006166 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800615e:	230f      	movs	r3, #15
 8006160:	18fb      	adds	r3, r7, r3
 8006162:	2202      	movs	r2, #2
 8006164:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8006166:	230f      	movs	r3, #15
 8006168:	18fb      	adds	r3, r7, r3
 800616a:	781b      	ldrb	r3, [r3, #0]
}
 800616c:	0018      	movs	r0, r3
 800616e:	46bd      	mov	sp, r7
 8006170:	b005      	add	sp, #20
 8006172:	bd90      	pop	{r4, r7, pc}
 8006174:	fffff0fe 	.word	0xfffff0fe

08006178 <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8006178:	b5b0      	push	{r4, r5, r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006180:	230f      	movs	r3, #15
 8006182:	18fb      	adds	r3, r7, r3
 8006184:	2200      	movs	r2, #0
 8006186:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2250      	movs	r2, #80	; 0x50
 800618c:	5c9b      	ldrb	r3, [r3, r2]
 800618e:	2b01      	cmp	r3, #1
 8006190:	d101      	bne.n	8006196 <HAL_ADC_Stop+0x1e>
 8006192:	2302      	movs	r3, #2
 8006194:	e029      	b.n	80061ea <HAL_ADC_Stop+0x72>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2250      	movs	r2, #80	; 0x50
 800619a:	2101      	movs	r1, #1
 800619c:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800619e:	250f      	movs	r5, #15
 80061a0:	197c      	adds	r4, r7, r5
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	0018      	movs	r0, r3
 80061a6:	f000 fa24 	bl	80065f2 <ADC_ConversionStop>
 80061aa:	0003      	movs	r3, r0
 80061ac:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80061ae:	197b      	adds	r3, r7, r5
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d112      	bne.n	80061dc <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80061b6:	197c      	adds	r4, r7, r5
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	0018      	movs	r0, r3
 80061bc:	f000 f9b2 	bl	8006524 <ADC_Disable>
 80061c0:	0003      	movs	r3, r0
 80061c2:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80061c4:	197b      	adds	r3, r7, r5
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d107      	bne.n	80061dc <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061d0:	4a08      	ldr	r2, [pc, #32]	; (80061f4 <HAL_ADC_Stop+0x7c>)
 80061d2:	4013      	ands	r3, r2
 80061d4:	2201      	movs	r2, #1
 80061d6:	431a      	orrs	r2, r3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2250      	movs	r2, #80	; 0x50
 80061e0:	2100      	movs	r1, #0
 80061e2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 80061e4:	230f      	movs	r3, #15
 80061e6:	18fb      	adds	r3, r7, r3
 80061e8:	781b      	ldrb	r3, [r3, #0]
}
 80061ea:	0018      	movs	r0, r3
 80061ec:	46bd      	mov	sp, r7
 80061ee:	b004      	add	sp, #16
 80061f0:	bdb0      	pop	{r4, r5, r7, pc}
 80061f2:	46c0      	nop			; (mov r8, r8)
 80061f4:	fffffefe 	.word	0xfffffefe

080061f8 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006202:	2300      	movs	r3, #0
 8006204:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8006206:	2300      	movs	r3, #0
 8006208:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	695b      	ldr	r3, [r3, #20]
 800620e:	2b08      	cmp	r3, #8
 8006210:	d102      	bne.n	8006218 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8006212:	2308      	movs	r3, #8
 8006214:	60fb      	str	r3, [r7, #12]
 8006216:	e014      	b.n	8006242 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	2201      	movs	r2, #1
 8006220:	4013      	ands	r3, r2
 8006222:	2b01      	cmp	r3, #1
 8006224:	d10b      	bne.n	800623e <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800622a:	2220      	movs	r2, #32
 800622c:	431a      	orrs	r2, r3
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2250      	movs	r2, #80	; 0x50
 8006236:	2100      	movs	r1, #0
 8006238:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e072      	b.n	8006324 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800623e:	230c      	movs	r3, #12
 8006240:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8006242:	f7ff fd87 	bl	8005d54 <HAL_GetTick>
 8006246:	0003      	movs	r3, r0
 8006248:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800624a:	e01f      	b.n	800628c <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	3301      	adds	r3, #1
 8006250:	d01c      	beq.n	800628c <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d007      	beq.n	8006268 <HAL_ADC_PollForConversion+0x70>
 8006258:	f7ff fd7c 	bl	8005d54 <HAL_GetTick>
 800625c:	0002      	movs	r2, r0
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	1ad3      	subs	r3, r2, r3
 8006262:	683a      	ldr	r2, [r7, #0]
 8006264:	429a      	cmp	r2, r3
 8006266:	d211      	bcs.n	800628c <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	4013      	ands	r3, r2
 8006272:	d10b      	bne.n	800628c <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006278:	2204      	movs	r2, #4
 800627a:	431a      	orrs	r2, r3
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2250      	movs	r2, #80	; 0x50
 8006284:	2100      	movs	r1, #0
 8006286:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006288:	2303      	movs	r3, #3
 800628a:	e04b      	b.n	8006324 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	4013      	ands	r3, r2
 8006296:	d0d9      	beq.n	800624c <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800629c:	2280      	movs	r2, #128	; 0x80
 800629e:	0092      	lsls	r2, r2, #2
 80062a0:	431a      	orrs	r2, r3
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68da      	ldr	r2, [r3, #12]
 80062ac:	23c0      	movs	r3, #192	; 0xc0
 80062ae:	011b      	lsls	r3, r3, #4
 80062b0:	4013      	ands	r3, r2
 80062b2:	d12e      	bne.n	8006312 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2220      	movs	r2, #32
 80062b8:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d129      	bne.n	8006312 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2208      	movs	r2, #8
 80062c6:	4013      	ands	r3, r2
 80062c8:	2b08      	cmp	r3, #8
 80062ca:	d122      	bne.n	8006312 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	2204      	movs	r2, #4
 80062d4:	4013      	ands	r3, r2
 80062d6:	d110      	bne.n	80062fa <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	685a      	ldr	r2, [r3, #4]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	210c      	movs	r1, #12
 80062e4:	438a      	bics	r2, r1
 80062e6:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ec:	4a0f      	ldr	r2, [pc, #60]	; (800632c <HAL_ADC_PollForConversion+0x134>)
 80062ee:	4013      	ands	r3, r2
 80062f0:	2201      	movs	r2, #1
 80062f2:	431a      	orrs	r2, r3
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	655a      	str	r2, [r3, #84]	; 0x54
 80062f8:	e00b      	b.n	8006312 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062fe:	2220      	movs	r2, #32
 8006300:	431a      	orrs	r2, r3
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800630a:	2201      	movs	r2, #1
 800630c:	431a      	orrs	r2, r3
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	699b      	ldr	r3, [r3, #24]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d103      	bne.n	8006322 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	220c      	movs	r2, #12
 8006320:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006322:	2300      	movs	r3, #0
}
 8006324:	0018      	movs	r0, r3
 8006326:	46bd      	mov	sp, r7
 8006328:	b004      	add	sp, #16
 800632a:	bd80      	pop	{r7, pc}
 800632c:	fffffefe 	.word	0xfffffefe

08006330 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b082      	sub	sp, #8
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800633e:	0018      	movs	r0, r3
 8006340:	46bd      	mov	sp, r7
 8006342:	b002      	add	sp, #8
 8006344:	bd80      	pop	{r7, pc}
	...

08006348 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2250      	movs	r2, #80	; 0x50
 8006356:	5c9b      	ldrb	r3, [r3, r2]
 8006358:	2b01      	cmp	r3, #1
 800635a:	d101      	bne.n	8006360 <HAL_ADC_ConfigChannel+0x18>
 800635c:	2302      	movs	r3, #2
 800635e:	e06c      	b.n	800643a <HAL_ADC_ConfigChannel+0xf2>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2250      	movs	r2, #80	; 0x50
 8006364:	2101      	movs	r1, #1
 8006366:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	2204      	movs	r2, #4
 8006370:	4013      	ands	r3, r2
 8006372:	d00b      	beq.n	800638c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006378:	2220      	movs	r2, #32
 800637a:	431a      	orrs	r2, r3
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2250      	movs	r2, #80	; 0x50
 8006384:	2100      	movs	r1, #0
 8006386:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8006388:	2301      	movs	r3, #1
 800638a:	e056      	b.n	800643a <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	4a2c      	ldr	r2, [pc, #176]	; (8006444 <HAL_ADC_ConfigChannel+0xfc>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d028      	beq.n	80063e8 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	035b      	lsls	r3, r3, #13
 80063a2:	0b5a      	lsrs	r2, r3, #13
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	430a      	orrs	r2, r1
 80063aa:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	2380      	movs	r3, #128	; 0x80
 80063b2:	02db      	lsls	r3, r3, #11
 80063b4:	4013      	ands	r3, r2
 80063b6:	d009      	beq.n	80063cc <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 80063b8:	4b23      	ldr	r3, [pc, #140]	; (8006448 <HAL_ADC_ConfigChannel+0x100>)
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	4b22      	ldr	r3, [pc, #136]	; (8006448 <HAL_ADC_ConfigChannel+0x100>)
 80063be:	2180      	movs	r1, #128	; 0x80
 80063c0:	0409      	lsls	r1, r1, #16
 80063c2:	430a      	orrs	r2, r1
 80063c4:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80063c6:	200a      	movs	r0, #10
 80063c8:	f000 f960 	bl	800668c <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	2380      	movs	r3, #128	; 0x80
 80063d2:	029b      	lsls	r3, r3, #10
 80063d4:	4013      	ands	r3, r2
 80063d6:	d02b      	beq.n	8006430 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 80063d8:	4b1b      	ldr	r3, [pc, #108]	; (8006448 <HAL_ADC_ConfigChannel+0x100>)
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	4b1a      	ldr	r3, [pc, #104]	; (8006448 <HAL_ADC_ConfigChannel+0x100>)
 80063de:	2180      	movs	r1, #128	; 0x80
 80063e0:	03c9      	lsls	r1, r1, #15
 80063e2:	430a      	orrs	r2, r1
 80063e4:	601a      	str	r2, [r3, #0]
 80063e6:	e023      	b.n	8006430 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	035b      	lsls	r3, r3, #13
 80063f4:	0b5b      	lsrs	r3, r3, #13
 80063f6:	43d9      	mvns	r1, r3
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	400a      	ands	r2, r1
 80063fe:	629a      	str	r2, [r3, #40]	; 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	2380      	movs	r3, #128	; 0x80
 8006406:	02db      	lsls	r3, r3, #11
 8006408:	4013      	ands	r3, r2
 800640a:	d005      	beq.n	8006418 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 800640c:	4b0e      	ldr	r3, [pc, #56]	; (8006448 <HAL_ADC_ConfigChannel+0x100>)
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	4b0d      	ldr	r3, [pc, #52]	; (8006448 <HAL_ADC_ConfigChannel+0x100>)
 8006412:	490e      	ldr	r1, [pc, #56]	; (800644c <HAL_ADC_ConfigChannel+0x104>)
 8006414:	400a      	ands	r2, r1
 8006416:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	2380      	movs	r3, #128	; 0x80
 800641e:	029b      	lsls	r3, r3, #10
 8006420:	4013      	ands	r3, r2
 8006422:	d005      	beq.n	8006430 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8006424:	4b08      	ldr	r3, [pc, #32]	; (8006448 <HAL_ADC_ConfigChannel+0x100>)
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	4b07      	ldr	r3, [pc, #28]	; (8006448 <HAL_ADC_ConfigChannel+0x100>)
 800642a:	4909      	ldr	r1, [pc, #36]	; (8006450 <HAL_ADC_ConfigChannel+0x108>)
 800642c:	400a      	ands	r2, r1
 800642e:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2250      	movs	r2, #80	; 0x50
 8006434:	2100      	movs	r1, #0
 8006436:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8006438:	2300      	movs	r3, #0
}
 800643a:	0018      	movs	r0, r3
 800643c:	46bd      	mov	sp, r7
 800643e:	b002      	add	sp, #8
 8006440:	bd80      	pop	{r7, pc}
 8006442:	46c0      	nop			; (mov r8, r8)
 8006444:	00001001 	.word	0x00001001
 8006448:	40012708 	.word	0x40012708
 800644c:	ff7fffff 	.word	0xff7fffff
 8006450:	ffbfffff 	.word	0xffbfffff

08006454 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800645c:	2300      	movs	r3, #0
 800645e:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	2203      	movs	r2, #3
 8006468:	4013      	ands	r3, r2
 800646a:	2b01      	cmp	r3, #1
 800646c:	d108      	bne.n	8006480 <ADC_Enable+0x2c>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	2201      	movs	r2, #1
 8006476:	4013      	ands	r3, r2
 8006478:	2b01      	cmp	r3, #1
 800647a:	d101      	bne.n	8006480 <ADC_Enable+0x2c>
 800647c:	2301      	movs	r3, #1
 800647e:	e000      	b.n	8006482 <ADC_Enable+0x2e>
 8006480:	2300      	movs	r3, #0
 8006482:	2b00      	cmp	r3, #0
 8006484:	d146      	bne.n	8006514 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	4a24      	ldr	r2, [pc, #144]	; (8006520 <ADC_Enable+0xcc>)
 800648e:	4013      	ands	r3, r2
 8006490:	d00d      	beq.n	80064ae <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006496:	2210      	movs	r2, #16
 8006498:	431a      	orrs	r2, r3
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064a2:	2201      	movs	r2, #1
 80064a4:	431a      	orrs	r2, r3
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	e033      	b.n	8006516 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	689a      	ldr	r2, [r3, #8]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	2101      	movs	r1, #1
 80064ba:	430a      	orrs	r2, r1
 80064bc:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80064be:	2001      	movs	r0, #1
 80064c0:	f000 f8e4 	bl	800668c <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 80064c4:	f7ff fc46 	bl	8005d54 <HAL_GetTick>
 80064c8:	0003      	movs	r3, r0
 80064ca:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80064cc:	e01b      	b.n	8006506 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80064ce:	f7ff fc41 	bl	8005d54 <HAL_GetTick>
 80064d2:	0002      	movs	r2, r0
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	1ad3      	subs	r3, r2, r3
 80064d8:	2b0a      	cmp	r3, #10
 80064da:	d914      	bls.n	8006506 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	2201      	movs	r2, #1
 80064e4:	4013      	ands	r3, r2
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d00d      	beq.n	8006506 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064ee:	2210      	movs	r2, #16
 80064f0:	431a      	orrs	r2, r3
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064fa:	2201      	movs	r2, #1
 80064fc:	431a      	orrs	r2, r3
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e007      	b.n	8006516 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	2201      	movs	r2, #1
 800650e:	4013      	ands	r3, r2
 8006510:	2b01      	cmp	r3, #1
 8006512:	d1dc      	bne.n	80064ce <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006514:	2300      	movs	r3, #0
}
 8006516:	0018      	movs	r0, r3
 8006518:	46bd      	mov	sp, r7
 800651a:	b004      	add	sp, #16
 800651c:	bd80      	pop	{r7, pc}
 800651e:	46c0      	nop			; (mov r8, r8)
 8006520:	80000017 	.word	0x80000017

08006524 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b084      	sub	sp, #16
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800652c:	2300      	movs	r3, #0
 800652e:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	2203      	movs	r2, #3
 8006538:	4013      	ands	r3, r2
 800653a:	2b01      	cmp	r3, #1
 800653c:	d108      	bne.n	8006550 <ADC_Disable+0x2c>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2201      	movs	r2, #1
 8006546:	4013      	ands	r3, r2
 8006548:	2b01      	cmp	r3, #1
 800654a:	d101      	bne.n	8006550 <ADC_Disable+0x2c>
 800654c:	2301      	movs	r3, #1
 800654e:	e000      	b.n	8006552 <ADC_Disable+0x2e>
 8006550:	2300      	movs	r3, #0
 8006552:	2b00      	cmp	r3, #0
 8006554:	d048      	beq.n	80065e8 <ADC_Disable+0xc4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	2205      	movs	r2, #5
 800655e:	4013      	ands	r3, r2
 8006560:	2b01      	cmp	r3, #1
 8006562:	d110      	bne.n	8006586 <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	689a      	ldr	r2, [r3, #8]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2102      	movs	r1, #2
 8006570:	430a      	orrs	r2, r1
 8006572:	609a      	str	r2, [r3, #8]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2203      	movs	r2, #3
 800657a:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800657c:	f7ff fbea 	bl	8005d54 <HAL_GetTick>
 8006580:	0003      	movs	r3, r0
 8006582:	60fb      	str	r3, [r7, #12]

    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8006584:	e029      	b.n	80065da <ADC_Disable+0xb6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800658a:	2210      	movs	r2, #16
 800658c:	431a      	orrs	r2, r3
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006596:	2201      	movs	r2, #1
 8006598:	431a      	orrs	r2, r3
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e023      	b.n	80065ea <ADC_Disable+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80065a2:	f7ff fbd7 	bl	8005d54 <HAL_GetTick>
 80065a6:	0002      	movs	r2, r0
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	1ad3      	subs	r3, r2, r3
 80065ac:	2b0a      	cmp	r3, #10
 80065ae:	d914      	bls.n	80065da <ADC_Disable+0xb6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	2201      	movs	r2, #1
 80065b8:	4013      	ands	r3, r2
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d10d      	bne.n	80065da <ADC_Disable+0xb6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065c2:	2210      	movs	r2, #16
 80065c4:	431a      	orrs	r2, r3
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065ce:	2201      	movs	r2, #1
 80065d0:	431a      	orrs	r2, r3
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	e007      	b.n	80065ea <ADC_Disable+0xc6>
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	2201      	movs	r2, #1
 80065e2:	4013      	ands	r3, r2
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d0dc      	beq.n	80065a2 <ADC_Disable+0x7e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	0018      	movs	r0, r3
 80065ec:	46bd      	mov	sp, r7
 80065ee:	b004      	add	sp, #16
 80065f0:	bd80      	pop	{r7, pc}

080065f2 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 80065f2:	b580      	push	{r7, lr}
 80065f4:	b084      	sub	sp, #16
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80065fa:	2300      	movs	r3, #0
 80065fc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	2204      	movs	r2, #4
 8006606:	4013      	ands	r3, r2
 8006608:	d03a      	beq.n	8006680 <ADC_ConversionStop+0x8e>
  {

    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	2204      	movs	r2, #4
 8006612:	4013      	ands	r3, r2
 8006614:	2b04      	cmp	r3, #4
 8006616:	d10d      	bne.n	8006634 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS))
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	2202      	movs	r2, #2
 8006620:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 8006622:	d107      	bne.n	8006634 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	689a      	ldr	r2, [r3, #8]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	2110      	movs	r1, #16
 8006630:	430a      	orrs	r2, r1
 8006632:	609a      	str	r2, [r3, #8]
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006634:	f7ff fb8e 	bl	8005d54 <HAL_GetTick>
 8006638:	0003      	movs	r3, r0
 800663a:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800663c:	e01a      	b.n	8006674 <ADC_ConversionStop+0x82>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800663e:	f7ff fb89 	bl	8005d54 <HAL_GetTick>
 8006642:	0002      	movs	r2, r0
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	1ad3      	subs	r3, r2, r3
 8006648:	2b0a      	cmp	r3, #10
 800664a:	d913      	bls.n	8006674 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	2204      	movs	r2, #4
 8006654:	4013      	ands	r3, r2
 8006656:	d00d      	beq.n	8006674 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800665c:	2210      	movs	r2, #16
 800665e:	431a      	orrs	r2, r3
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006668:	2201      	movs	r2, #1
 800666a:	431a      	orrs	r2, r3
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	e006      	b.n	8006682 <ADC_ConversionStop+0x90>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	2204      	movs	r2, #4
 800667c:	4013      	ands	r3, r2
 800667e:	d1de      	bne.n	800663e <ADC_ConversionStop+0x4c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006680:	2300      	movs	r3, #0
}
 8006682:	0018      	movs	r0, r3
 8006684:	46bd      	mov	sp, r7
 8006686:	b004      	add	sp, #16
 8006688:	bd80      	pop	{r7, pc}
	...

0800668c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8006694:	4b0b      	ldr	r3, [pc, #44]	; (80066c4 <ADC_DelayMicroSecond+0x38>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	490b      	ldr	r1, [pc, #44]	; (80066c8 <ADC_DelayMicroSecond+0x3c>)
 800669a:	0018      	movs	r0, r3
 800669c:	f7f9 fd50 	bl	8000140 <__udivsi3>
 80066a0:	0003      	movs	r3, r0
 80066a2:	001a      	movs	r2, r3
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4353      	muls	r3, r2
 80066a8:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 80066aa:	e002      	b.n	80066b2 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	3b01      	subs	r3, #1
 80066b0:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d1f9      	bne.n	80066ac <ADC_DelayMicroSecond+0x20>
  }
}
 80066b8:	46c0      	nop			; (mov r8, r8)
 80066ba:	46c0      	nop			; (mov r8, r8)
 80066bc:	46bd      	mov	sp, r7
 80066be:	b004      	add	sp, #16
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	46c0      	nop			; (mov r8, r8)
 80066c4:	200000dc 	.word	0x200000dc
 80066c8:	000f4240 	.word	0x000f4240

080066cc <__NVIC_EnableIRQ>:
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b082      	sub	sp, #8
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	0002      	movs	r2, r0
 80066d4:	1dfb      	adds	r3, r7, #7
 80066d6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80066d8:	1dfb      	adds	r3, r7, #7
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	2b7f      	cmp	r3, #127	; 0x7f
 80066de:	d809      	bhi.n	80066f4 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80066e0:	1dfb      	adds	r3, r7, #7
 80066e2:	781b      	ldrb	r3, [r3, #0]
 80066e4:	001a      	movs	r2, r3
 80066e6:	231f      	movs	r3, #31
 80066e8:	401a      	ands	r2, r3
 80066ea:	4b04      	ldr	r3, [pc, #16]	; (80066fc <__NVIC_EnableIRQ+0x30>)
 80066ec:	2101      	movs	r1, #1
 80066ee:	4091      	lsls	r1, r2
 80066f0:	000a      	movs	r2, r1
 80066f2:	601a      	str	r2, [r3, #0]
}
 80066f4:	46c0      	nop			; (mov r8, r8)
 80066f6:	46bd      	mov	sp, r7
 80066f8:	b002      	add	sp, #8
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	e000e100 	.word	0xe000e100

08006700 <__NVIC_SetPriority>:
{
 8006700:	b590      	push	{r4, r7, lr}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	0002      	movs	r2, r0
 8006708:	6039      	str	r1, [r7, #0]
 800670a:	1dfb      	adds	r3, r7, #7
 800670c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800670e:	1dfb      	adds	r3, r7, #7
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	2b7f      	cmp	r3, #127	; 0x7f
 8006714:	d828      	bhi.n	8006768 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006716:	4a2f      	ldr	r2, [pc, #188]	; (80067d4 <__NVIC_SetPriority+0xd4>)
 8006718:	1dfb      	adds	r3, r7, #7
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	b25b      	sxtb	r3, r3
 800671e:	089b      	lsrs	r3, r3, #2
 8006720:	33c0      	adds	r3, #192	; 0xc0
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	589b      	ldr	r3, [r3, r2]
 8006726:	1dfa      	adds	r2, r7, #7
 8006728:	7812      	ldrb	r2, [r2, #0]
 800672a:	0011      	movs	r1, r2
 800672c:	2203      	movs	r2, #3
 800672e:	400a      	ands	r2, r1
 8006730:	00d2      	lsls	r2, r2, #3
 8006732:	21ff      	movs	r1, #255	; 0xff
 8006734:	4091      	lsls	r1, r2
 8006736:	000a      	movs	r2, r1
 8006738:	43d2      	mvns	r2, r2
 800673a:	401a      	ands	r2, r3
 800673c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	019b      	lsls	r3, r3, #6
 8006742:	22ff      	movs	r2, #255	; 0xff
 8006744:	401a      	ands	r2, r3
 8006746:	1dfb      	adds	r3, r7, #7
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	0018      	movs	r0, r3
 800674c:	2303      	movs	r3, #3
 800674e:	4003      	ands	r3, r0
 8006750:	00db      	lsls	r3, r3, #3
 8006752:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006754:	481f      	ldr	r0, [pc, #124]	; (80067d4 <__NVIC_SetPriority+0xd4>)
 8006756:	1dfb      	adds	r3, r7, #7
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	b25b      	sxtb	r3, r3
 800675c:	089b      	lsrs	r3, r3, #2
 800675e:	430a      	orrs	r2, r1
 8006760:	33c0      	adds	r3, #192	; 0xc0
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	501a      	str	r2, [r3, r0]
}
 8006766:	e031      	b.n	80067cc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006768:	4a1b      	ldr	r2, [pc, #108]	; (80067d8 <__NVIC_SetPriority+0xd8>)
 800676a:	1dfb      	adds	r3, r7, #7
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	0019      	movs	r1, r3
 8006770:	230f      	movs	r3, #15
 8006772:	400b      	ands	r3, r1
 8006774:	3b08      	subs	r3, #8
 8006776:	089b      	lsrs	r3, r3, #2
 8006778:	3306      	adds	r3, #6
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	18d3      	adds	r3, r2, r3
 800677e:	3304      	adds	r3, #4
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	1dfa      	adds	r2, r7, #7
 8006784:	7812      	ldrb	r2, [r2, #0]
 8006786:	0011      	movs	r1, r2
 8006788:	2203      	movs	r2, #3
 800678a:	400a      	ands	r2, r1
 800678c:	00d2      	lsls	r2, r2, #3
 800678e:	21ff      	movs	r1, #255	; 0xff
 8006790:	4091      	lsls	r1, r2
 8006792:	000a      	movs	r2, r1
 8006794:	43d2      	mvns	r2, r2
 8006796:	401a      	ands	r2, r3
 8006798:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	019b      	lsls	r3, r3, #6
 800679e:	22ff      	movs	r2, #255	; 0xff
 80067a0:	401a      	ands	r2, r3
 80067a2:	1dfb      	adds	r3, r7, #7
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	0018      	movs	r0, r3
 80067a8:	2303      	movs	r3, #3
 80067aa:	4003      	ands	r3, r0
 80067ac:	00db      	lsls	r3, r3, #3
 80067ae:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80067b0:	4809      	ldr	r0, [pc, #36]	; (80067d8 <__NVIC_SetPriority+0xd8>)
 80067b2:	1dfb      	adds	r3, r7, #7
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	001c      	movs	r4, r3
 80067b8:	230f      	movs	r3, #15
 80067ba:	4023      	ands	r3, r4
 80067bc:	3b08      	subs	r3, #8
 80067be:	089b      	lsrs	r3, r3, #2
 80067c0:	430a      	orrs	r2, r1
 80067c2:	3306      	adds	r3, #6
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	18c3      	adds	r3, r0, r3
 80067c8:	3304      	adds	r3, #4
 80067ca:	601a      	str	r2, [r3, #0]
}
 80067cc:	46c0      	nop			; (mov r8, r8)
 80067ce:	46bd      	mov	sp, r7
 80067d0:	b003      	add	sp, #12
 80067d2:	bd90      	pop	{r4, r7, pc}
 80067d4:	e000e100 	.word	0xe000e100
 80067d8:	e000ed00 	.word	0xe000ed00

080067dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b082      	sub	sp, #8
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	1e5a      	subs	r2, r3, #1
 80067e8:	2380      	movs	r3, #128	; 0x80
 80067ea:	045b      	lsls	r3, r3, #17
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d301      	bcc.n	80067f4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80067f0:	2301      	movs	r3, #1
 80067f2:	e010      	b.n	8006816 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80067f4:	4b0a      	ldr	r3, [pc, #40]	; (8006820 <SysTick_Config+0x44>)
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	3a01      	subs	r2, #1
 80067fa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80067fc:	2301      	movs	r3, #1
 80067fe:	425b      	negs	r3, r3
 8006800:	2103      	movs	r1, #3
 8006802:	0018      	movs	r0, r3
 8006804:	f7ff ff7c 	bl	8006700 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006808:	4b05      	ldr	r3, [pc, #20]	; (8006820 <SysTick_Config+0x44>)
 800680a:	2200      	movs	r2, #0
 800680c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800680e:	4b04      	ldr	r3, [pc, #16]	; (8006820 <SysTick_Config+0x44>)
 8006810:	2207      	movs	r2, #7
 8006812:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006814:	2300      	movs	r3, #0
}
 8006816:	0018      	movs	r0, r3
 8006818:	46bd      	mov	sp, r7
 800681a:	b002      	add	sp, #8
 800681c:	bd80      	pop	{r7, pc}
 800681e:	46c0      	nop			; (mov r8, r8)
 8006820:	e000e010 	.word	0xe000e010

08006824 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	60b9      	str	r1, [r7, #8]
 800682c:	607a      	str	r2, [r7, #4]
 800682e:	210f      	movs	r1, #15
 8006830:	187b      	adds	r3, r7, r1
 8006832:	1c02      	adds	r2, r0, #0
 8006834:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8006836:	68ba      	ldr	r2, [r7, #8]
 8006838:	187b      	adds	r3, r7, r1
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	b25b      	sxtb	r3, r3
 800683e:	0011      	movs	r1, r2
 8006840:	0018      	movs	r0, r3
 8006842:	f7ff ff5d 	bl	8006700 <__NVIC_SetPriority>
}
 8006846:	46c0      	nop			; (mov r8, r8)
 8006848:	46bd      	mov	sp, r7
 800684a:	b004      	add	sp, #16
 800684c:	bd80      	pop	{r7, pc}

0800684e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800684e:	b580      	push	{r7, lr}
 8006850:	b082      	sub	sp, #8
 8006852:	af00      	add	r7, sp, #0
 8006854:	0002      	movs	r2, r0
 8006856:	1dfb      	adds	r3, r7, #7
 8006858:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800685a:	1dfb      	adds	r3, r7, #7
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	b25b      	sxtb	r3, r3
 8006860:	0018      	movs	r0, r3
 8006862:	f7ff ff33 	bl	80066cc <__NVIC_EnableIRQ>
}
 8006866:	46c0      	nop			; (mov r8, r8)
 8006868:	46bd      	mov	sp, r7
 800686a:	b002      	add	sp, #8
 800686c:	bd80      	pop	{r7, pc}

0800686e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800686e:	b580      	push	{r7, lr}
 8006870:	b082      	sub	sp, #8
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	0018      	movs	r0, r3
 800687a:	f7ff ffaf 	bl	80067dc <SysTick_Config>
 800687e:	0003      	movs	r3, r0
}
 8006880:	0018      	movs	r0, r3
 8006882:	46bd      	mov	sp, r7
 8006884:	b002      	add	sp, #8
 8006886:	bd80      	pop	{r7, pc}

08006888 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006890:	230f      	movs	r3, #15
 8006892:	18fb      	adds	r3, r7, r3
 8006894:	2200      	movs	r2, #0
 8006896:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2225      	movs	r2, #37	; 0x25
 800689c:	5c9b      	ldrb	r3, [r3, r2]
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	2b02      	cmp	r3, #2
 80068a2:	d008      	beq.n	80068b6 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2204      	movs	r2, #4
 80068a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2224      	movs	r2, #36	; 0x24
 80068ae:	2100      	movs	r1, #0
 80068b0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	e024      	b.n	8006900 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	210e      	movs	r1, #14
 80068c2:	438a      	bics	r2, r1
 80068c4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	2101      	movs	r1, #1
 80068d2:	438a      	bics	r2, r1
 80068d4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068da:	221c      	movs	r2, #28
 80068dc:	401a      	ands	r2, r3
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e2:	2101      	movs	r1, #1
 80068e4:	4091      	lsls	r1, r2
 80068e6:	000a      	movs	r2, r1
 80068e8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2225      	movs	r2, #37	; 0x25
 80068ee:	2101      	movs	r1, #1
 80068f0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2224      	movs	r2, #36	; 0x24
 80068f6:	2100      	movs	r1, #0
 80068f8:	5499      	strb	r1, [r3, r2]

    return status;
 80068fa:	230f      	movs	r3, #15
 80068fc:	18fb      	adds	r3, r7, r3
 80068fe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006900:	0018      	movs	r0, r3
 8006902:	46bd      	mov	sp, r7
 8006904:	b004      	add	sp, #16
 8006906:	bd80      	pop	{r7, pc}

08006908 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006910:	210f      	movs	r1, #15
 8006912:	187b      	adds	r3, r7, r1
 8006914:	2200      	movs	r2, #0
 8006916:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2225      	movs	r2, #37	; 0x25
 800691c:	5c9b      	ldrb	r3, [r3, r2]
 800691e:	b2db      	uxtb	r3, r3
 8006920:	2b02      	cmp	r3, #2
 8006922:	d006      	beq.n	8006932 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2204      	movs	r2, #4
 8006928:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800692a:	187b      	adds	r3, r7, r1
 800692c:	2201      	movs	r2, #1
 800692e:	701a      	strb	r2, [r3, #0]
 8006930:	e02a      	b.n	8006988 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	210e      	movs	r1, #14
 800693e:	438a      	bics	r2, r1
 8006940:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	2101      	movs	r1, #1
 800694e:	438a      	bics	r2, r1
 8006950:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006956:	221c      	movs	r2, #28
 8006958:	401a      	ands	r2, r3
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800695e:	2101      	movs	r1, #1
 8006960:	4091      	lsls	r1, r2
 8006962:	000a      	movs	r2, r1
 8006964:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2225      	movs	r2, #37	; 0x25
 800696a:	2101      	movs	r1, #1
 800696c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2224      	movs	r2, #36	; 0x24
 8006972:	2100      	movs	r1, #0
 8006974:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800697a:	2b00      	cmp	r3, #0
 800697c:	d004      	beq.n	8006988 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	0010      	movs	r0, r2
 8006986:	4798      	blx	r3
    }
  }
  return status;
 8006988:	230f      	movs	r3, #15
 800698a:	18fb      	adds	r3, r7, r3
 800698c:	781b      	ldrb	r3, [r3, #0]
}
 800698e:	0018      	movs	r0, r3
 8006990:	46bd      	mov	sp, r7
 8006992:	b004      	add	sp, #16
 8006994:	bd80      	pop	{r7, pc}
	...

08006998 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b086      	sub	sp, #24
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80069a2:	2300      	movs	r3, #0
 80069a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80069a6:	2300      	movs	r3, #0
 80069a8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80069aa:	2300      	movs	r3, #0
 80069ac:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80069ae:	e155      	b.n	8006c5c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	2101      	movs	r1, #1
 80069b6:	697a      	ldr	r2, [r7, #20]
 80069b8:	4091      	lsls	r1, r2
 80069ba:	000a      	movs	r2, r1
 80069bc:	4013      	ands	r3, r2
 80069be:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d100      	bne.n	80069c8 <HAL_GPIO_Init+0x30>
 80069c6:	e146      	b.n	8006c56 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	2203      	movs	r2, #3
 80069ce:	4013      	ands	r3, r2
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d005      	beq.n	80069e0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	2203      	movs	r2, #3
 80069da:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80069dc:	2b02      	cmp	r3, #2
 80069de:	d130      	bne.n	8006a42 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	689b      	ldr	r3, [r3, #8]
 80069e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	005b      	lsls	r3, r3, #1
 80069ea:	2203      	movs	r2, #3
 80069ec:	409a      	lsls	r2, r3
 80069ee:	0013      	movs	r3, r2
 80069f0:	43da      	mvns	r2, r3
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	4013      	ands	r3, r2
 80069f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	68da      	ldr	r2, [r3, #12]
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	005b      	lsls	r3, r3, #1
 8006a00:	409a      	lsls	r2, r3
 8006a02:	0013      	movs	r3, r2
 8006a04:	693a      	ldr	r2, [r7, #16]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	693a      	ldr	r2, [r7, #16]
 8006a0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006a16:	2201      	movs	r2, #1
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	409a      	lsls	r2, r3
 8006a1c:	0013      	movs	r3, r2
 8006a1e:	43da      	mvns	r2, r3
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	4013      	ands	r3, r2
 8006a24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	091b      	lsrs	r3, r3, #4
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	401a      	ands	r2, r3
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	409a      	lsls	r2, r3
 8006a34:	0013      	movs	r3, r2
 8006a36:	693a      	ldr	r2, [r7, #16]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	693a      	ldr	r2, [r7, #16]
 8006a40:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	2203      	movs	r2, #3
 8006a48:	4013      	ands	r3, r2
 8006a4a:	2b03      	cmp	r3, #3
 8006a4c:	d017      	beq.n	8006a7e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	68db      	ldr	r3, [r3, #12]
 8006a52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	005b      	lsls	r3, r3, #1
 8006a58:	2203      	movs	r2, #3
 8006a5a:	409a      	lsls	r2, r3
 8006a5c:	0013      	movs	r3, r2
 8006a5e:	43da      	mvns	r2, r3
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	4013      	ands	r3, r2
 8006a64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	689a      	ldr	r2, [r3, #8]
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	005b      	lsls	r3, r3, #1
 8006a6e:	409a      	lsls	r2, r3
 8006a70:	0013      	movs	r3, r2
 8006a72:	693a      	ldr	r2, [r7, #16]
 8006a74:	4313      	orrs	r3, r2
 8006a76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	693a      	ldr	r2, [r7, #16]
 8006a7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	2203      	movs	r2, #3
 8006a84:	4013      	ands	r3, r2
 8006a86:	2b02      	cmp	r3, #2
 8006a88:	d123      	bne.n	8006ad2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	08da      	lsrs	r2, r3, #3
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	3208      	adds	r2, #8
 8006a92:	0092      	lsls	r2, r2, #2
 8006a94:	58d3      	ldr	r3, [r2, r3]
 8006a96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	2207      	movs	r2, #7
 8006a9c:	4013      	ands	r3, r2
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	220f      	movs	r2, #15
 8006aa2:	409a      	lsls	r2, r3
 8006aa4:	0013      	movs	r3, r2
 8006aa6:	43da      	mvns	r2, r3
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	4013      	ands	r3, r2
 8006aac:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	691a      	ldr	r2, [r3, #16]
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	2107      	movs	r1, #7
 8006ab6:	400b      	ands	r3, r1
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	409a      	lsls	r2, r3
 8006abc:	0013      	movs	r3, r2
 8006abe:	693a      	ldr	r2, [r7, #16]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	08da      	lsrs	r2, r3, #3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	3208      	adds	r2, #8
 8006acc:	0092      	lsls	r2, r2, #2
 8006ace:	6939      	ldr	r1, [r7, #16]
 8006ad0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	005b      	lsls	r3, r3, #1
 8006adc:	2203      	movs	r2, #3
 8006ade:	409a      	lsls	r2, r3
 8006ae0:	0013      	movs	r3, r2
 8006ae2:	43da      	mvns	r2, r3
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	4013      	ands	r3, r2
 8006ae8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	2203      	movs	r2, #3
 8006af0:	401a      	ands	r2, r3
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	005b      	lsls	r3, r3, #1
 8006af6:	409a      	lsls	r2, r3
 8006af8:	0013      	movs	r3, r2
 8006afa:	693a      	ldr	r2, [r7, #16]
 8006afc:	4313      	orrs	r3, r2
 8006afe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	693a      	ldr	r2, [r7, #16]
 8006b04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	685a      	ldr	r2, [r3, #4]
 8006b0a:	23c0      	movs	r3, #192	; 0xc0
 8006b0c:	029b      	lsls	r3, r3, #10
 8006b0e:	4013      	ands	r3, r2
 8006b10:	d100      	bne.n	8006b14 <HAL_GPIO_Init+0x17c>
 8006b12:	e0a0      	b.n	8006c56 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b14:	4b57      	ldr	r3, [pc, #348]	; (8006c74 <HAL_GPIO_Init+0x2dc>)
 8006b16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b18:	4b56      	ldr	r3, [pc, #344]	; (8006c74 <HAL_GPIO_Init+0x2dc>)
 8006b1a:	2101      	movs	r1, #1
 8006b1c:	430a      	orrs	r2, r1
 8006b1e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8006b20:	4a55      	ldr	r2, [pc, #340]	; (8006c78 <HAL_GPIO_Init+0x2e0>)
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	089b      	lsrs	r3, r3, #2
 8006b26:	3302      	adds	r3, #2
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	589b      	ldr	r3, [r3, r2]
 8006b2c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	2203      	movs	r2, #3
 8006b32:	4013      	ands	r3, r2
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	220f      	movs	r2, #15
 8006b38:	409a      	lsls	r2, r3
 8006b3a:	0013      	movs	r3, r2
 8006b3c:	43da      	mvns	r2, r3
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	4013      	ands	r3, r2
 8006b42:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	23a0      	movs	r3, #160	; 0xa0
 8006b48:	05db      	lsls	r3, r3, #23
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d01f      	beq.n	8006b8e <HAL_GPIO_Init+0x1f6>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a4a      	ldr	r2, [pc, #296]	; (8006c7c <HAL_GPIO_Init+0x2e4>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d019      	beq.n	8006b8a <HAL_GPIO_Init+0x1f2>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a49      	ldr	r2, [pc, #292]	; (8006c80 <HAL_GPIO_Init+0x2e8>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d013      	beq.n	8006b86 <HAL_GPIO_Init+0x1ee>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a48      	ldr	r2, [pc, #288]	; (8006c84 <HAL_GPIO_Init+0x2ec>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d00d      	beq.n	8006b82 <HAL_GPIO_Init+0x1ea>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4a47      	ldr	r2, [pc, #284]	; (8006c88 <HAL_GPIO_Init+0x2f0>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d007      	beq.n	8006b7e <HAL_GPIO_Init+0x1e6>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4a46      	ldr	r2, [pc, #280]	; (8006c8c <HAL_GPIO_Init+0x2f4>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d101      	bne.n	8006b7a <HAL_GPIO_Init+0x1e2>
 8006b76:	2305      	movs	r3, #5
 8006b78:	e00a      	b.n	8006b90 <HAL_GPIO_Init+0x1f8>
 8006b7a:	2306      	movs	r3, #6
 8006b7c:	e008      	b.n	8006b90 <HAL_GPIO_Init+0x1f8>
 8006b7e:	2304      	movs	r3, #4
 8006b80:	e006      	b.n	8006b90 <HAL_GPIO_Init+0x1f8>
 8006b82:	2303      	movs	r3, #3
 8006b84:	e004      	b.n	8006b90 <HAL_GPIO_Init+0x1f8>
 8006b86:	2302      	movs	r3, #2
 8006b88:	e002      	b.n	8006b90 <HAL_GPIO_Init+0x1f8>
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e000      	b.n	8006b90 <HAL_GPIO_Init+0x1f8>
 8006b8e:	2300      	movs	r3, #0
 8006b90:	697a      	ldr	r2, [r7, #20]
 8006b92:	2103      	movs	r1, #3
 8006b94:	400a      	ands	r2, r1
 8006b96:	0092      	lsls	r2, r2, #2
 8006b98:	4093      	lsls	r3, r2
 8006b9a:	693a      	ldr	r2, [r7, #16]
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006ba0:	4935      	ldr	r1, [pc, #212]	; (8006c78 <HAL_GPIO_Init+0x2e0>)
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	089b      	lsrs	r3, r3, #2
 8006ba6:	3302      	adds	r3, #2
 8006ba8:	009b      	lsls	r3, r3, #2
 8006baa:	693a      	ldr	r2, [r7, #16]
 8006bac:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006bae:	4b38      	ldr	r3, [pc, #224]	; (8006c90 <HAL_GPIO_Init+0x2f8>)
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	43da      	mvns	r2, r3
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	4013      	ands	r3, r2
 8006bbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	685a      	ldr	r2, [r3, #4]
 8006bc2:	2380      	movs	r3, #128	; 0x80
 8006bc4:	035b      	lsls	r3, r3, #13
 8006bc6:	4013      	ands	r3, r2
 8006bc8:	d003      	beq.n	8006bd2 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8006bca:	693a      	ldr	r2, [r7, #16]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8006bd2:	4b2f      	ldr	r3, [pc, #188]	; (8006c90 <HAL_GPIO_Init+0x2f8>)
 8006bd4:	693a      	ldr	r2, [r7, #16]
 8006bd6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8006bd8:	4b2d      	ldr	r3, [pc, #180]	; (8006c90 <HAL_GPIO_Init+0x2f8>)
 8006bda:	68db      	ldr	r3, [r3, #12]
 8006bdc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	43da      	mvns	r2, r3
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	4013      	ands	r3, r2
 8006be6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	685a      	ldr	r2, [r3, #4]
 8006bec:	2380      	movs	r3, #128	; 0x80
 8006bee:	039b      	lsls	r3, r3, #14
 8006bf0:	4013      	ands	r3, r2
 8006bf2:	d003      	beq.n	8006bfc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8006bf4:	693a      	ldr	r2, [r7, #16]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8006bfc:	4b24      	ldr	r3, [pc, #144]	; (8006c90 <HAL_GPIO_Init+0x2f8>)
 8006bfe:	693a      	ldr	r2, [r7, #16]
 8006c00:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8006c02:	4b23      	ldr	r3, [pc, #140]	; (8006c90 <HAL_GPIO_Init+0x2f8>)
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	43da      	mvns	r2, r3
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	4013      	ands	r3, r2
 8006c10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	685a      	ldr	r2, [r3, #4]
 8006c16:	2380      	movs	r3, #128	; 0x80
 8006c18:	029b      	lsls	r3, r3, #10
 8006c1a:	4013      	ands	r3, r2
 8006c1c:	d003      	beq.n	8006c26 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8006c1e:	693a      	ldr	r2, [r7, #16]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	4313      	orrs	r3, r2
 8006c24:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8006c26:	4b1a      	ldr	r3, [pc, #104]	; (8006c90 <HAL_GPIO_Init+0x2f8>)
 8006c28:	693a      	ldr	r2, [r7, #16]
 8006c2a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006c2c:	4b18      	ldr	r3, [pc, #96]	; (8006c90 <HAL_GPIO_Init+0x2f8>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	43da      	mvns	r2, r3
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	4013      	ands	r3, r2
 8006c3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	685a      	ldr	r2, [r3, #4]
 8006c40:	2380      	movs	r3, #128	; 0x80
 8006c42:	025b      	lsls	r3, r3, #9
 8006c44:	4013      	ands	r3, r2
 8006c46:	d003      	beq.n	8006c50 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8006c48:	693a      	ldr	r2, [r7, #16]
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8006c50:	4b0f      	ldr	r3, [pc, #60]	; (8006c90 <HAL_GPIO_Init+0x2f8>)
 8006c52:	693a      	ldr	r2, [r7, #16]
 8006c54:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	3301      	adds	r3, #1
 8006c5a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	40da      	lsrs	r2, r3
 8006c64:	1e13      	subs	r3, r2, #0
 8006c66:	d000      	beq.n	8006c6a <HAL_GPIO_Init+0x2d2>
 8006c68:	e6a2      	b.n	80069b0 <HAL_GPIO_Init+0x18>
  }
}
 8006c6a:	46c0      	nop			; (mov r8, r8)
 8006c6c:	46c0      	nop			; (mov r8, r8)
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	b006      	add	sp, #24
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	40021000 	.word	0x40021000
 8006c78:	40010000 	.word	0x40010000
 8006c7c:	50000400 	.word	0x50000400
 8006c80:	50000800 	.word	0x50000800
 8006c84:	50000c00 	.word	0x50000c00
 8006c88:	50001000 	.word	0x50001000
 8006c8c:	50001c00 	.word	0x50001c00
 8006c90:	40010400 	.word	0x40010400

08006c94 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b082      	sub	sp, #8
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	0008      	movs	r0, r1
 8006c9e:	0011      	movs	r1, r2
 8006ca0:	1cbb      	adds	r3, r7, #2
 8006ca2:	1c02      	adds	r2, r0, #0
 8006ca4:	801a      	strh	r2, [r3, #0]
 8006ca6:	1c7b      	adds	r3, r7, #1
 8006ca8:	1c0a      	adds	r2, r1, #0
 8006caa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006cac:	1c7b      	adds	r3, r7, #1
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d004      	beq.n	8006cbe <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006cb4:	1cbb      	adds	r3, r7, #2
 8006cb6:	881a      	ldrh	r2, [r3, #0]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8006cbc:	e003      	b.n	8006cc6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8006cbe:	1cbb      	adds	r3, r7, #2
 8006cc0:	881a      	ldrh	r2, [r3, #0]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006cc6:	46c0      	nop			; (mov r8, r8)
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	b002      	add	sp, #8
 8006ccc:	bd80      	pop	{r7, pc}
	...

08006cd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b082      	sub	sp, #8
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d101      	bne.n	8006ce2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e082      	b.n	8006de8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2241      	movs	r2, #65	; 0x41
 8006ce6:	5c9b      	ldrb	r3, [r3, r2]
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d107      	bne.n	8006cfe <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2240      	movs	r2, #64	; 0x40
 8006cf2:	2100      	movs	r1, #0
 8006cf4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	0018      	movs	r0, r3
 8006cfa:	f7fe fd17 	bl	800572c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2241      	movs	r2, #65	; 0x41
 8006d02:	2124      	movs	r1, #36	; 0x24
 8006d04:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	2101      	movs	r1, #1
 8006d12:	438a      	bics	r2, r1
 8006d14:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	685a      	ldr	r2, [r3, #4]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4934      	ldr	r1, [pc, #208]	; (8006df0 <HAL_I2C_Init+0x120>)
 8006d20:	400a      	ands	r2, r1
 8006d22:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	689a      	ldr	r2, [r3, #8]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4931      	ldr	r1, [pc, #196]	; (8006df4 <HAL_I2C_Init+0x124>)
 8006d30:	400a      	ands	r2, r1
 8006d32:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	68db      	ldr	r3, [r3, #12]
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d108      	bne.n	8006d4e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	689a      	ldr	r2, [r3, #8]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	2180      	movs	r1, #128	; 0x80
 8006d46:	0209      	lsls	r1, r1, #8
 8006d48:	430a      	orrs	r2, r1
 8006d4a:	609a      	str	r2, [r3, #8]
 8006d4c:	e007      	b.n	8006d5e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	689a      	ldr	r2, [r3, #8]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	2184      	movs	r1, #132	; 0x84
 8006d58:	0209      	lsls	r1, r1, #8
 8006d5a:	430a      	orrs	r2, r1
 8006d5c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	68db      	ldr	r3, [r3, #12]
 8006d62:	2b02      	cmp	r3, #2
 8006d64:	d104      	bne.n	8006d70 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	2280      	movs	r2, #128	; 0x80
 8006d6c:	0112      	lsls	r2, r2, #4
 8006d6e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	685a      	ldr	r2, [r3, #4]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	491f      	ldr	r1, [pc, #124]	; (8006df8 <HAL_I2C_Init+0x128>)
 8006d7c:	430a      	orrs	r2, r1
 8006d7e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	68da      	ldr	r2, [r3, #12]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	491a      	ldr	r1, [pc, #104]	; (8006df4 <HAL_I2C_Init+0x124>)
 8006d8c:	400a      	ands	r2, r1
 8006d8e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	691a      	ldr	r2, [r3, #16]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	695b      	ldr	r3, [r3, #20]
 8006d98:	431a      	orrs	r2, r3
 8006d9a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	699b      	ldr	r3, [r3, #24]
 8006da0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	430a      	orrs	r2, r1
 8006da8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	69d9      	ldr	r1, [r3, #28]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6a1a      	ldr	r2, [r3, #32]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	430a      	orrs	r2, r1
 8006db8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	2101      	movs	r1, #1
 8006dc6:	430a      	orrs	r2, r1
 8006dc8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2241      	movs	r2, #65	; 0x41
 8006dd4:	2120      	movs	r1, #32
 8006dd6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2242      	movs	r2, #66	; 0x42
 8006de2:	2100      	movs	r1, #0
 8006de4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006de6:	2300      	movs	r3, #0
}
 8006de8:	0018      	movs	r0, r3
 8006dea:	46bd      	mov	sp, r7
 8006dec:	b002      	add	sp, #8
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	f0ffffff 	.word	0xf0ffffff
 8006df4:	ffff7fff 	.word	0xffff7fff
 8006df8:	02008000 	.word	0x02008000

08006dfc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006dfc:	b590      	push	{r4, r7, lr}
 8006dfe:	b089      	sub	sp, #36	; 0x24
 8006e00:	af02      	add	r7, sp, #8
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	0008      	movs	r0, r1
 8006e06:	607a      	str	r2, [r7, #4]
 8006e08:	0019      	movs	r1, r3
 8006e0a:	230a      	movs	r3, #10
 8006e0c:	18fb      	adds	r3, r7, r3
 8006e0e:	1c02      	adds	r2, r0, #0
 8006e10:	801a      	strh	r2, [r3, #0]
 8006e12:	2308      	movs	r3, #8
 8006e14:	18fb      	adds	r3, r7, r3
 8006e16:	1c0a      	adds	r2, r1, #0
 8006e18:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2241      	movs	r2, #65	; 0x41
 8006e1e:	5c9b      	ldrb	r3, [r3, r2]
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	2b20      	cmp	r3, #32
 8006e24:	d000      	beq.n	8006e28 <HAL_I2C_Master_Transmit+0x2c>
 8006e26:	e0e7      	b.n	8006ff8 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2240      	movs	r2, #64	; 0x40
 8006e2c:	5c9b      	ldrb	r3, [r3, r2]
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d101      	bne.n	8006e36 <HAL_I2C_Master_Transmit+0x3a>
 8006e32:	2302      	movs	r3, #2
 8006e34:	e0e1      	b.n	8006ffa <HAL_I2C_Master_Transmit+0x1fe>
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2240      	movs	r2, #64	; 0x40
 8006e3a:	2101      	movs	r1, #1
 8006e3c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006e3e:	f7fe ff89 	bl	8005d54 <HAL_GetTick>
 8006e42:	0003      	movs	r3, r0
 8006e44:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006e46:	2380      	movs	r3, #128	; 0x80
 8006e48:	0219      	lsls	r1, r3, #8
 8006e4a:	68f8      	ldr	r0, [r7, #12]
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	9300      	str	r3, [sp, #0]
 8006e50:	2319      	movs	r3, #25
 8006e52:	2201      	movs	r2, #1
 8006e54:	f000 fb9a 	bl	800758c <I2C_WaitOnFlagUntilTimeout>
 8006e58:	1e03      	subs	r3, r0, #0
 8006e5a:	d001      	beq.n	8006e60 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e0cc      	b.n	8006ffa <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2241      	movs	r2, #65	; 0x41
 8006e64:	2121      	movs	r1, #33	; 0x21
 8006e66:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2242      	movs	r2, #66	; 0x42
 8006e6c:	2110      	movs	r1, #16
 8006e6e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2200      	movs	r2, #0
 8006e74:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2208      	movs	r2, #8
 8006e80:	18ba      	adds	r2, r7, r2
 8006e82:	8812      	ldrh	r2, [r2, #0]
 8006e84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	2bff      	cmp	r3, #255	; 0xff
 8006e94:	d911      	bls.n	8006eba <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	22ff      	movs	r2, #255	; 0xff
 8006e9a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ea0:	b2da      	uxtb	r2, r3
 8006ea2:	2380      	movs	r3, #128	; 0x80
 8006ea4:	045c      	lsls	r4, r3, #17
 8006ea6:	230a      	movs	r3, #10
 8006ea8:	18fb      	adds	r3, r7, r3
 8006eaa:	8819      	ldrh	r1, [r3, #0]
 8006eac:	68f8      	ldr	r0, [r7, #12]
 8006eae:	4b55      	ldr	r3, [pc, #340]	; (8007004 <HAL_I2C_Master_Transmit+0x208>)
 8006eb0:	9300      	str	r3, [sp, #0]
 8006eb2:	0023      	movs	r3, r4
 8006eb4:	f000 fdc4 	bl	8007a40 <I2C_TransferConfig>
 8006eb8:	e075      	b.n	8006fa6 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ebe:	b29a      	uxth	r2, r3
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ec8:	b2da      	uxtb	r2, r3
 8006eca:	2380      	movs	r3, #128	; 0x80
 8006ecc:	049c      	lsls	r4, r3, #18
 8006ece:	230a      	movs	r3, #10
 8006ed0:	18fb      	adds	r3, r7, r3
 8006ed2:	8819      	ldrh	r1, [r3, #0]
 8006ed4:	68f8      	ldr	r0, [r7, #12]
 8006ed6:	4b4b      	ldr	r3, [pc, #300]	; (8007004 <HAL_I2C_Master_Transmit+0x208>)
 8006ed8:	9300      	str	r3, [sp, #0]
 8006eda:	0023      	movs	r3, r4
 8006edc:	f000 fdb0 	bl	8007a40 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006ee0:	e061      	b.n	8006fa6 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ee2:	697a      	ldr	r2, [r7, #20]
 8006ee4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	0018      	movs	r0, r3
 8006eea:	f000 fb9d 	bl	8007628 <I2C_WaitOnTXISFlagUntilTimeout>
 8006eee:	1e03      	subs	r3, r0, #0
 8006ef0:	d001      	beq.n	8006ef6 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e081      	b.n	8006ffa <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efa:	781a      	ldrb	r2, [r3, #0]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f06:	1c5a      	adds	r2, r3, #1
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	3b01      	subs	r3, #1
 8006f14:	b29a      	uxth	r2, r3
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f1e:	3b01      	subs	r3, #1
 8006f20:	b29a      	uxth	r2, r3
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d03a      	beq.n	8006fa6 <HAL_I2C_Master_Transmit+0x1aa>
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d136      	bne.n	8006fa6 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006f38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f3a:	68f8      	ldr	r0, [r7, #12]
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	9300      	str	r3, [sp, #0]
 8006f40:	0013      	movs	r3, r2
 8006f42:	2200      	movs	r2, #0
 8006f44:	2180      	movs	r1, #128	; 0x80
 8006f46:	f000 fb21 	bl	800758c <I2C_WaitOnFlagUntilTimeout>
 8006f4a:	1e03      	subs	r3, r0, #0
 8006f4c:	d001      	beq.n	8006f52 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e053      	b.n	8006ffa <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	2bff      	cmp	r3, #255	; 0xff
 8006f5a:	d911      	bls.n	8006f80 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	22ff      	movs	r2, #255	; 0xff
 8006f60:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f66:	b2da      	uxtb	r2, r3
 8006f68:	2380      	movs	r3, #128	; 0x80
 8006f6a:	045c      	lsls	r4, r3, #17
 8006f6c:	230a      	movs	r3, #10
 8006f6e:	18fb      	adds	r3, r7, r3
 8006f70:	8819      	ldrh	r1, [r3, #0]
 8006f72:	68f8      	ldr	r0, [r7, #12]
 8006f74:	2300      	movs	r3, #0
 8006f76:	9300      	str	r3, [sp, #0]
 8006f78:	0023      	movs	r3, r4
 8006f7a:	f000 fd61 	bl	8007a40 <I2C_TransferConfig>
 8006f7e:	e012      	b.n	8006fa6 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f84:	b29a      	uxth	r2, r3
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f8e:	b2da      	uxtb	r2, r3
 8006f90:	2380      	movs	r3, #128	; 0x80
 8006f92:	049c      	lsls	r4, r3, #18
 8006f94:	230a      	movs	r3, #10
 8006f96:	18fb      	adds	r3, r7, r3
 8006f98:	8819      	ldrh	r1, [r3, #0]
 8006f9a:	68f8      	ldr	r0, [r7, #12]
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	9300      	str	r3, [sp, #0]
 8006fa0:	0023      	movs	r3, r4
 8006fa2:	f000 fd4d 	bl	8007a40 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d198      	bne.n	8006ee2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006fb0:	697a      	ldr	r2, [r7, #20]
 8006fb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	0018      	movs	r0, r3
 8006fb8:	f000 fb7c 	bl	80076b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006fbc:	1e03      	subs	r3, r0, #0
 8006fbe:	d001      	beq.n	8006fc4 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e01a      	b.n	8006ffa <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	2220      	movs	r2, #32
 8006fca:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	685a      	ldr	r2, [r3, #4]
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	490c      	ldr	r1, [pc, #48]	; (8007008 <HAL_I2C_Master_Transmit+0x20c>)
 8006fd8:	400a      	ands	r2, r1
 8006fda:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2241      	movs	r2, #65	; 0x41
 8006fe0:	2120      	movs	r1, #32
 8006fe2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2242      	movs	r2, #66	; 0x42
 8006fe8:	2100      	movs	r1, #0
 8006fea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2240      	movs	r2, #64	; 0x40
 8006ff0:	2100      	movs	r1, #0
 8006ff2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	e000      	b.n	8006ffa <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8006ff8:	2302      	movs	r3, #2
  }
}
 8006ffa:	0018      	movs	r0, r3
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	b007      	add	sp, #28
 8007000:	bd90      	pop	{r4, r7, pc}
 8007002:	46c0      	nop			; (mov r8, r8)
 8007004:	80002000 	.word	0x80002000
 8007008:	fe00e800 	.word	0xfe00e800

0800700c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800700c:	b590      	push	{r4, r7, lr}
 800700e:	b089      	sub	sp, #36	; 0x24
 8007010:	af02      	add	r7, sp, #8
 8007012:	60f8      	str	r0, [r7, #12]
 8007014:	0008      	movs	r0, r1
 8007016:	607a      	str	r2, [r7, #4]
 8007018:	0019      	movs	r1, r3
 800701a:	230a      	movs	r3, #10
 800701c:	18fb      	adds	r3, r7, r3
 800701e:	1c02      	adds	r2, r0, #0
 8007020:	801a      	strh	r2, [r3, #0]
 8007022:	2308      	movs	r3, #8
 8007024:	18fb      	adds	r3, r7, r3
 8007026:	1c0a      	adds	r2, r1, #0
 8007028:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2241      	movs	r2, #65	; 0x41
 800702e:	5c9b      	ldrb	r3, [r3, r2]
 8007030:	b2db      	uxtb	r3, r3
 8007032:	2b20      	cmp	r3, #32
 8007034:	d000      	beq.n	8007038 <HAL_I2C_Master_Receive+0x2c>
 8007036:	e0e8      	b.n	800720a <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2240      	movs	r2, #64	; 0x40
 800703c:	5c9b      	ldrb	r3, [r3, r2]
 800703e:	2b01      	cmp	r3, #1
 8007040:	d101      	bne.n	8007046 <HAL_I2C_Master_Receive+0x3a>
 8007042:	2302      	movs	r3, #2
 8007044:	e0e2      	b.n	800720c <HAL_I2C_Master_Receive+0x200>
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2240      	movs	r2, #64	; 0x40
 800704a:	2101      	movs	r1, #1
 800704c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800704e:	f7fe fe81 	bl	8005d54 <HAL_GetTick>
 8007052:	0003      	movs	r3, r0
 8007054:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007056:	2380      	movs	r3, #128	; 0x80
 8007058:	0219      	lsls	r1, r3, #8
 800705a:	68f8      	ldr	r0, [r7, #12]
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	9300      	str	r3, [sp, #0]
 8007060:	2319      	movs	r3, #25
 8007062:	2201      	movs	r2, #1
 8007064:	f000 fa92 	bl	800758c <I2C_WaitOnFlagUntilTimeout>
 8007068:	1e03      	subs	r3, r0, #0
 800706a:	d001      	beq.n	8007070 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 800706c:	2301      	movs	r3, #1
 800706e:	e0cd      	b.n	800720c <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2241      	movs	r2, #65	; 0x41
 8007074:	2122      	movs	r1, #34	; 0x22
 8007076:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2242      	movs	r2, #66	; 0x42
 800707c:	2110      	movs	r1, #16
 800707e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2200      	movs	r2, #0
 8007084:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2208      	movs	r2, #8
 8007090:	18ba      	adds	r2, r7, r2
 8007092:	8812      	ldrh	r2, [r2, #0]
 8007094:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2200      	movs	r2, #0
 800709a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	2bff      	cmp	r3, #255	; 0xff
 80070a4:	d911      	bls.n	80070ca <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	22ff      	movs	r2, #255	; 0xff
 80070aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070b0:	b2da      	uxtb	r2, r3
 80070b2:	2380      	movs	r3, #128	; 0x80
 80070b4:	045c      	lsls	r4, r3, #17
 80070b6:	230a      	movs	r3, #10
 80070b8:	18fb      	adds	r3, r7, r3
 80070ba:	8819      	ldrh	r1, [r3, #0]
 80070bc:	68f8      	ldr	r0, [r7, #12]
 80070be:	4b55      	ldr	r3, [pc, #340]	; (8007214 <HAL_I2C_Master_Receive+0x208>)
 80070c0:	9300      	str	r3, [sp, #0]
 80070c2:	0023      	movs	r3, r4
 80070c4:	f000 fcbc 	bl	8007a40 <I2C_TransferConfig>
 80070c8:	e076      	b.n	80071b8 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070ce:	b29a      	uxth	r2, r3
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070d8:	b2da      	uxtb	r2, r3
 80070da:	2380      	movs	r3, #128	; 0x80
 80070dc:	049c      	lsls	r4, r3, #18
 80070de:	230a      	movs	r3, #10
 80070e0:	18fb      	adds	r3, r7, r3
 80070e2:	8819      	ldrh	r1, [r3, #0]
 80070e4:	68f8      	ldr	r0, [r7, #12]
 80070e6:	4b4b      	ldr	r3, [pc, #300]	; (8007214 <HAL_I2C_Master_Receive+0x208>)
 80070e8:	9300      	str	r3, [sp, #0]
 80070ea:	0023      	movs	r3, r4
 80070ec:	f000 fca8 	bl	8007a40 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80070f0:	e062      	b.n	80071b8 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80070f2:	697a      	ldr	r2, [r7, #20]
 80070f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	0018      	movs	r0, r3
 80070fa:	f000 fb1f 	bl	800773c <I2C_WaitOnRXNEFlagUntilTimeout>
 80070fe:	1e03      	subs	r3, r0, #0
 8007100:	d001      	beq.n	8007106 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	e082      	b.n	800720c <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007110:	b2d2      	uxtb	r2, r2
 8007112:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007118:	1c5a      	adds	r2, r3, #1
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007122:	3b01      	subs	r3, #1
 8007124:	b29a      	uxth	r2, r3
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800712e:	b29b      	uxth	r3, r3
 8007130:	3b01      	subs	r3, #1
 8007132:	b29a      	uxth	r2, r3
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800713c:	b29b      	uxth	r3, r3
 800713e:	2b00      	cmp	r3, #0
 8007140:	d03a      	beq.n	80071b8 <HAL_I2C_Master_Receive+0x1ac>
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007146:	2b00      	cmp	r3, #0
 8007148:	d136      	bne.n	80071b8 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800714a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800714c:	68f8      	ldr	r0, [r7, #12]
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	9300      	str	r3, [sp, #0]
 8007152:	0013      	movs	r3, r2
 8007154:	2200      	movs	r2, #0
 8007156:	2180      	movs	r1, #128	; 0x80
 8007158:	f000 fa18 	bl	800758c <I2C_WaitOnFlagUntilTimeout>
 800715c:	1e03      	subs	r3, r0, #0
 800715e:	d001      	beq.n	8007164 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8007160:	2301      	movs	r3, #1
 8007162:	e053      	b.n	800720c <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007168:	b29b      	uxth	r3, r3
 800716a:	2bff      	cmp	r3, #255	; 0xff
 800716c:	d911      	bls.n	8007192 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	22ff      	movs	r2, #255	; 0xff
 8007172:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007178:	b2da      	uxtb	r2, r3
 800717a:	2380      	movs	r3, #128	; 0x80
 800717c:	045c      	lsls	r4, r3, #17
 800717e:	230a      	movs	r3, #10
 8007180:	18fb      	adds	r3, r7, r3
 8007182:	8819      	ldrh	r1, [r3, #0]
 8007184:	68f8      	ldr	r0, [r7, #12]
 8007186:	2300      	movs	r3, #0
 8007188:	9300      	str	r3, [sp, #0]
 800718a:	0023      	movs	r3, r4
 800718c:	f000 fc58 	bl	8007a40 <I2C_TransferConfig>
 8007190:	e012      	b.n	80071b8 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007196:	b29a      	uxth	r2, r3
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071a0:	b2da      	uxtb	r2, r3
 80071a2:	2380      	movs	r3, #128	; 0x80
 80071a4:	049c      	lsls	r4, r3, #18
 80071a6:	230a      	movs	r3, #10
 80071a8:	18fb      	adds	r3, r7, r3
 80071aa:	8819      	ldrh	r1, [r3, #0]
 80071ac:	68f8      	ldr	r0, [r7, #12]
 80071ae:	2300      	movs	r3, #0
 80071b0:	9300      	str	r3, [sp, #0]
 80071b2:	0023      	movs	r3, r4
 80071b4:	f000 fc44 	bl	8007a40 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071bc:	b29b      	uxth	r3, r3
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d197      	bne.n	80070f2 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80071c2:	697a      	ldr	r2, [r7, #20]
 80071c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	0018      	movs	r0, r3
 80071ca:	f000 fa73 	bl	80076b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80071ce:	1e03      	subs	r3, r0, #0
 80071d0:	d001      	beq.n	80071d6 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80071d2:	2301      	movs	r3, #1
 80071d4:	e01a      	b.n	800720c <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	2220      	movs	r2, #32
 80071dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	685a      	ldr	r2, [r3, #4]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	490b      	ldr	r1, [pc, #44]	; (8007218 <HAL_I2C_Master_Receive+0x20c>)
 80071ea:	400a      	ands	r2, r1
 80071ec:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2241      	movs	r2, #65	; 0x41
 80071f2:	2120      	movs	r1, #32
 80071f4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2242      	movs	r2, #66	; 0x42
 80071fa:	2100      	movs	r1, #0
 80071fc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2240      	movs	r2, #64	; 0x40
 8007202:	2100      	movs	r1, #0
 8007204:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007206:	2300      	movs	r3, #0
 8007208:	e000      	b.n	800720c <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800720a:	2302      	movs	r3, #2
  }
}
 800720c:	0018      	movs	r0, r3
 800720e:	46bd      	mov	sp, r7
 8007210:	b007      	add	sp, #28
 8007212:	bd90      	pop	{r4, r7, pc}
 8007214:	80002400 	.word	0x80002400
 8007218:	fe00e800 	.word	0xfe00e800

0800721c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800721c:	b590      	push	{r4, r7, lr}
 800721e:	b089      	sub	sp, #36	; 0x24
 8007220:	af02      	add	r7, sp, #8
 8007222:	60f8      	str	r0, [r7, #12]
 8007224:	000c      	movs	r4, r1
 8007226:	0010      	movs	r0, r2
 8007228:	0019      	movs	r1, r3
 800722a:	230a      	movs	r3, #10
 800722c:	18fb      	adds	r3, r7, r3
 800722e:	1c22      	adds	r2, r4, #0
 8007230:	801a      	strh	r2, [r3, #0]
 8007232:	2308      	movs	r3, #8
 8007234:	18fb      	adds	r3, r7, r3
 8007236:	1c02      	adds	r2, r0, #0
 8007238:	801a      	strh	r2, [r3, #0]
 800723a:	1dbb      	adds	r3, r7, #6
 800723c:	1c0a      	adds	r2, r1, #0
 800723e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2241      	movs	r2, #65	; 0x41
 8007244:	5c9b      	ldrb	r3, [r3, r2]
 8007246:	b2db      	uxtb	r3, r3
 8007248:	2b20      	cmp	r3, #32
 800724a:	d000      	beq.n	800724e <HAL_I2C_Mem_Read+0x32>
 800724c:	e110      	b.n	8007470 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800724e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007250:	2b00      	cmp	r3, #0
 8007252:	d004      	beq.n	800725e <HAL_I2C_Mem_Read+0x42>
 8007254:	232c      	movs	r3, #44	; 0x2c
 8007256:	18fb      	adds	r3, r7, r3
 8007258:	881b      	ldrh	r3, [r3, #0]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d105      	bne.n	800726a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2280      	movs	r2, #128	; 0x80
 8007262:	0092      	lsls	r2, r2, #2
 8007264:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007266:	2301      	movs	r3, #1
 8007268:	e103      	b.n	8007472 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2240      	movs	r2, #64	; 0x40
 800726e:	5c9b      	ldrb	r3, [r3, r2]
 8007270:	2b01      	cmp	r3, #1
 8007272:	d101      	bne.n	8007278 <HAL_I2C_Mem_Read+0x5c>
 8007274:	2302      	movs	r3, #2
 8007276:	e0fc      	b.n	8007472 <HAL_I2C_Mem_Read+0x256>
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2240      	movs	r2, #64	; 0x40
 800727c:	2101      	movs	r1, #1
 800727e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007280:	f7fe fd68 	bl	8005d54 <HAL_GetTick>
 8007284:	0003      	movs	r3, r0
 8007286:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007288:	2380      	movs	r3, #128	; 0x80
 800728a:	0219      	lsls	r1, r3, #8
 800728c:	68f8      	ldr	r0, [r7, #12]
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	9300      	str	r3, [sp, #0]
 8007292:	2319      	movs	r3, #25
 8007294:	2201      	movs	r2, #1
 8007296:	f000 f979 	bl	800758c <I2C_WaitOnFlagUntilTimeout>
 800729a:	1e03      	subs	r3, r0, #0
 800729c:	d001      	beq.n	80072a2 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800729e:	2301      	movs	r3, #1
 80072a0:	e0e7      	b.n	8007472 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2241      	movs	r2, #65	; 0x41
 80072a6:	2122      	movs	r1, #34	; 0x22
 80072a8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2242      	movs	r2, #66	; 0x42
 80072ae:	2140      	movs	r1, #64	; 0x40
 80072b0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2200      	movs	r2, #0
 80072b6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	222c      	movs	r2, #44	; 0x2c
 80072c2:	18ba      	adds	r2, r7, r2
 80072c4:	8812      	ldrh	r2, [r2, #0]
 80072c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2200      	movs	r2, #0
 80072cc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80072ce:	1dbb      	adds	r3, r7, #6
 80072d0:	881c      	ldrh	r4, [r3, #0]
 80072d2:	2308      	movs	r3, #8
 80072d4:	18fb      	adds	r3, r7, r3
 80072d6:	881a      	ldrh	r2, [r3, #0]
 80072d8:	230a      	movs	r3, #10
 80072da:	18fb      	adds	r3, r7, r3
 80072dc:	8819      	ldrh	r1, [r3, #0]
 80072de:	68f8      	ldr	r0, [r7, #12]
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	9301      	str	r3, [sp, #4]
 80072e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e6:	9300      	str	r3, [sp, #0]
 80072e8:	0023      	movs	r3, r4
 80072ea:	f000 f8cb 	bl	8007484 <I2C_RequestMemoryRead>
 80072ee:	1e03      	subs	r3, r0, #0
 80072f0:	d005      	beq.n	80072fe <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2240      	movs	r2, #64	; 0x40
 80072f6:	2100      	movs	r1, #0
 80072f8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80072fa:	2301      	movs	r3, #1
 80072fc:	e0b9      	b.n	8007472 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007302:	b29b      	uxth	r3, r3
 8007304:	2bff      	cmp	r3, #255	; 0xff
 8007306:	d911      	bls.n	800732c <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	22ff      	movs	r2, #255	; 0xff
 800730c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007312:	b2da      	uxtb	r2, r3
 8007314:	2380      	movs	r3, #128	; 0x80
 8007316:	045c      	lsls	r4, r3, #17
 8007318:	230a      	movs	r3, #10
 800731a:	18fb      	adds	r3, r7, r3
 800731c:	8819      	ldrh	r1, [r3, #0]
 800731e:	68f8      	ldr	r0, [r7, #12]
 8007320:	4b56      	ldr	r3, [pc, #344]	; (800747c <HAL_I2C_Mem_Read+0x260>)
 8007322:	9300      	str	r3, [sp, #0]
 8007324:	0023      	movs	r3, r4
 8007326:	f000 fb8b 	bl	8007a40 <I2C_TransferConfig>
 800732a:	e012      	b.n	8007352 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007330:	b29a      	uxth	r2, r3
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800733a:	b2da      	uxtb	r2, r3
 800733c:	2380      	movs	r3, #128	; 0x80
 800733e:	049c      	lsls	r4, r3, #18
 8007340:	230a      	movs	r3, #10
 8007342:	18fb      	adds	r3, r7, r3
 8007344:	8819      	ldrh	r1, [r3, #0]
 8007346:	68f8      	ldr	r0, [r7, #12]
 8007348:	4b4c      	ldr	r3, [pc, #304]	; (800747c <HAL_I2C_Mem_Read+0x260>)
 800734a:	9300      	str	r3, [sp, #0]
 800734c:	0023      	movs	r3, r4
 800734e:	f000 fb77 	bl	8007a40 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007352:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007354:	68f8      	ldr	r0, [r7, #12]
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	9300      	str	r3, [sp, #0]
 800735a:	0013      	movs	r3, r2
 800735c:	2200      	movs	r2, #0
 800735e:	2104      	movs	r1, #4
 8007360:	f000 f914 	bl	800758c <I2C_WaitOnFlagUntilTimeout>
 8007364:	1e03      	subs	r3, r0, #0
 8007366:	d001      	beq.n	800736c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8007368:	2301      	movs	r3, #1
 800736a:	e082      	b.n	8007472 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007376:	b2d2      	uxtb	r2, r2
 8007378:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800737e:	1c5a      	adds	r2, r3, #1
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007388:	3b01      	subs	r3, #1
 800738a:	b29a      	uxth	r2, r3
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007394:	b29b      	uxth	r3, r3
 8007396:	3b01      	subs	r3, #1
 8007398:	b29a      	uxth	r2, r3
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d03a      	beq.n	800741e <HAL_I2C_Mem_Read+0x202>
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d136      	bne.n	800741e <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80073b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073b2:	68f8      	ldr	r0, [r7, #12]
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	9300      	str	r3, [sp, #0]
 80073b8:	0013      	movs	r3, r2
 80073ba:	2200      	movs	r2, #0
 80073bc:	2180      	movs	r1, #128	; 0x80
 80073be:	f000 f8e5 	bl	800758c <I2C_WaitOnFlagUntilTimeout>
 80073c2:	1e03      	subs	r3, r0, #0
 80073c4:	d001      	beq.n	80073ca <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	e053      	b.n	8007472 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	2bff      	cmp	r3, #255	; 0xff
 80073d2:	d911      	bls.n	80073f8 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	22ff      	movs	r2, #255	; 0xff
 80073d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073de:	b2da      	uxtb	r2, r3
 80073e0:	2380      	movs	r3, #128	; 0x80
 80073e2:	045c      	lsls	r4, r3, #17
 80073e4:	230a      	movs	r3, #10
 80073e6:	18fb      	adds	r3, r7, r3
 80073e8:	8819      	ldrh	r1, [r3, #0]
 80073ea:	68f8      	ldr	r0, [r7, #12]
 80073ec:	2300      	movs	r3, #0
 80073ee:	9300      	str	r3, [sp, #0]
 80073f0:	0023      	movs	r3, r4
 80073f2:	f000 fb25 	bl	8007a40 <I2C_TransferConfig>
 80073f6:	e012      	b.n	800741e <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073fc:	b29a      	uxth	r2, r3
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007406:	b2da      	uxtb	r2, r3
 8007408:	2380      	movs	r3, #128	; 0x80
 800740a:	049c      	lsls	r4, r3, #18
 800740c:	230a      	movs	r3, #10
 800740e:	18fb      	adds	r3, r7, r3
 8007410:	8819      	ldrh	r1, [r3, #0]
 8007412:	68f8      	ldr	r0, [r7, #12]
 8007414:	2300      	movs	r3, #0
 8007416:	9300      	str	r3, [sp, #0]
 8007418:	0023      	movs	r3, r4
 800741a:	f000 fb11 	bl	8007a40 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007422:	b29b      	uxth	r3, r3
 8007424:	2b00      	cmp	r3, #0
 8007426:	d194      	bne.n	8007352 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007428:	697a      	ldr	r2, [r7, #20]
 800742a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	0018      	movs	r0, r3
 8007430:	f000 f940 	bl	80076b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007434:	1e03      	subs	r3, r0, #0
 8007436:	d001      	beq.n	800743c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8007438:	2301      	movs	r3, #1
 800743a:	e01a      	b.n	8007472 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	2220      	movs	r2, #32
 8007442:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	685a      	ldr	r2, [r3, #4]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	490c      	ldr	r1, [pc, #48]	; (8007480 <HAL_I2C_Mem_Read+0x264>)
 8007450:	400a      	ands	r2, r1
 8007452:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2241      	movs	r2, #65	; 0x41
 8007458:	2120      	movs	r1, #32
 800745a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2242      	movs	r2, #66	; 0x42
 8007460:	2100      	movs	r1, #0
 8007462:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2240      	movs	r2, #64	; 0x40
 8007468:	2100      	movs	r1, #0
 800746a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800746c:	2300      	movs	r3, #0
 800746e:	e000      	b.n	8007472 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8007470:	2302      	movs	r3, #2
  }
}
 8007472:	0018      	movs	r0, r3
 8007474:	46bd      	mov	sp, r7
 8007476:	b007      	add	sp, #28
 8007478:	bd90      	pop	{r4, r7, pc}
 800747a:	46c0      	nop			; (mov r8, r8)
 800747c:	80002400 	.word	0x80002400
 8007480:	fe00e800 	.word	0xfe00e800

08007484 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007484:	b5b0      	push	{r4, r5, r7, lr}
 8007486:	b086      	sub	sp, #24
 8007488:	af02      	add	r7, sp, #8
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	000c      	movs	r4, r1
 800748e:	0010      	movs	r0, r2
 8007490:	0019      	movs	r1, r3
 8007492:	250a      	movs	r5, #10
 8007494:	197b      	adds	r3, r7, r5
 8007496:	1c22      	adds	r2, r4, #0
 8007498:	801a      	strh	r2, [r3, #0]
 800749a:	2308      	movs	r3, #8
 800749c:	18fb      	adds	r3, r7, r3
 800749e:	1c02      	adds	r2, r0, #0
 80074a0:	801a      	strh	r2, [r3, #0]
 80074a2:	1dbb      	adds	r3, r7, #6
 80074a4:	1c0a      	adds	r2, r1, #0
 80074a6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80074a8:	1dbb      	adds	r3, r7, #6
 80074aa:	881b      	ldrh	r3, [r3, #0]
 80074ac:	b2da      	uxtb	r2, r3
 80074ae:	197b      	adds	r3, r7, r5
 80074b0:	8819      	ldrh	r1, [r3, #0]
 80074b2:	68f8      	ldr	r0, [r7, #12]
 80074b4:	4b23      	ldr	r3, [pc, #140]	; (8007544 <I2C_RequestMemoryRead+0xc0>)
 80074b6:	9300      	str	r3, [sp, #0]
 80074b8:	2300      	movs	r3, #0
 80074ba:	f000 fac1 	bl	8007a40 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80074be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074c0:	6a39      	ldr	r1, [r7, #32]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	0018      	movs	r0, r3
 80074c6:	f000 f8af 	bl	8007628 <I2C_WaitOnTXISFlagUntilTimeout>
 80074ca:	1e03      	subs	r3, r0, #0
 80074cc:	d001      	beq.n	80074d2 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80074ce:	2301      	movs	r3, #1
 80074d0:	e033      	b.n	800753a <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80074d2:	1dbb      	adds	r3, r7, #6
 80074d4:	881b      	ldrh	r3, [r3, #0]
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d107      	bne.n	80074ea <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80074da:	2308      	movs	r3, #8
 80074dc:	18fb      	adds	r3, r7, r3
 80074de:	881b      	ldrh	r3, [r3, #0]
 80074e0:	b2da      	uxtb	r2, r3
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	629a      	str	r2, [r3, #40]	; 0x28
 80074e8:	e019      	b.n	800751e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80074ea:	2308      	movs	r3, #8
 80074ec:	18fb      	adds	r3, r7, r3
 80074ee:	881b      	ldrh	r3, [r3, #0]
 80074f0:	0a1b      	lsrs	r3, r3, #8
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	b2da      	uxtb	r2, r3
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80074fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074fe:	6a39      	ldr	r1, [r7, #32]
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	0018      	movs	r0, r3
 8007504:	f000 f890 	bl	8007628 <I2C_WaitOnTXISFlagUntilTimeout>
 8007508:	1e03      	subs	r3, r0, #0
 800750a:	d001      	beq.n	8007510 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 800750c:	2301      	movs	r3, #1
 800750e:	e014      	b.n	800753a <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007510:	2308      	movs	r3, #8
 8007512:	18fb      	adds	r3, r7, r3
 8007514:	881b      	ldrh	r3, [r3, #0]
 8007516:	b2da      	uxtb	r2, r3
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800751e:	6a3a      	ldr	r2, [r7, #32]
 8007520:	68f8      	ldr	r0, [r7, #12]
 8007522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007524:	9300      	str	r3, [sp, #0]
 8007526:	0013      	movs	r3, r2
 8007528:	2200      	movs	r2, #0
 800752a:	2140      	movs	r1, #64	; 0x40
 800752c:	f000 f82e 	bl	800758c <I2C_WaitOnFlagUntilTimeout>
 8007530:	1e03      	subs	r3, r0, #0
 8007532:	d001      	beq.n	8007538 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8007534:	2301      	movs	r3, #1
 8007536:	e000      	b.n	800753a <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	0018      	movs	r0, r3
 800753c:	46bd      	mov	sp, r7
 800753e:	b004      	add	sp, #16
 8007540:	bdb0      	pop	{r4, r5, r7, pc}
 8007542:	46c0      	nop			; (mov r8, r8)
 8007544:	80002000 	.word	0x80002000

08007548 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b082      	sub	sp, #8
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	699b      	ldr	r3, [r3, #24]
 8007556:	2202      	movs	r2, #2
 8007558:	4013      	ands	r3, r2
 800755a:	2b02      	cmp	r3, #2
 800755c:	d103      	bne.n	8007566 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	2200      	movs	r2, #0
 8007564:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	699b      	ldr	r3, [r3, #24]
 800756c:	2201      	movs	r2, #1
 800756e:	4013      	ands	r3, r2
 8007570:	2b01      	cmp	r3, #1
 8007572:	d007      	beq.n	8007584 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	699a      	ldr	r2, [r3, #24]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	2101      	movs	r1, #1
 8007580:	430a      	orrs	r2, r1
 8007582:	619a      	str	r2, [r3, #24]
  }
}
 8007584:	46c0      	nop			; (mov r8, r8)
 8007586:	46bd      	mov	sp, r7
 8007588:	b002      	add	sp, #8
 800758a:	bd80      	pop	{r7, pc}

0800758c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b084      	sub	sp, #16
 8007590:	af00      	add	r7, sp, #0
 8007592:	60f8      	str	r0, [r7, #12]
 8007594:	60b9      	str	r1, [r7, #8]
 8007596:	603b      	str	r3, [r7, #0]
 8007598:	1dfb      	adds	r3, r7, #7
 800759a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800759c:	e030      	b.n	8007600 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	3301      	adds	r3, #1
 80075a2:	d02d      	beq.n	8007600 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075a4:	f7fe fbd6 	bl	8005d54 <HAL_GetTick>
 80075a8:	0002      	movs	r2, r0
 80075aa:	69bb      	ldr	r3, [r7, #24]
 80075ac:	1ad3      	subs	r3, r2, r3
 80075ae:	683a      	ldr	r2, [r7, #0]
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d302      	bcc.n	80075ba <I2C_WaitOnFlagUntilTimeout+0x2e>
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d122      	bne.n	8007600 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	699b      	ldr	r3, [r3, #24]
 80075c0:	68ba      	ldr	r2, [r7, #8]
 80075c2:	4013      	ands	r3, r2
 80075c4:	68ba      	ldr	r2, [r7, #8]
 80075c6:	1ad3      	subs	r3, r2, r3
 80075c8:	425a      	negs	r2, r3
 80075ca:	4153      	adcs	r3, r2
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	001a      	movs	r2, r3
 80075d0:	1dfb      	adds	r3, r7, #7
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d113      	bne.n	8007600 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075dc:	2220      	movs	r2, #32
 80075de:	431a      	orrs	r2, r3
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2241      	movs	r2, #65	; 0x41
 80075e8:	2120      	movs	r1, #32
 80075ea:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2242      	movs	r2, #66	; 0x42
 80075f0:	2100      	movs	r1, #0
 80075f2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2240      	movs	r2, #64	; 0x40
 80075f8:	2100      	movs	r1, #0
 80075fa:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80075fc:	2301      	movs	r3, #1
 80075fe:	e00f      	b.n	8007620 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	699b      	ldr	r3, [r3, #24]
 8007606:	68ba      	ldr	r2, [r7, #8]
 8007608:	4013      	ands	r3, r2
 800760a:	68ba      	ldr	r2, [r7, #8]
 800760c:	1ad3      	subs	r3, r2, r3
 800760e:	425a      	negs	r2, r3
 8007610:	4153      	adcs	r3, r2
 8007612:	b2db      	uxtb	r3, r3
 8007614:	001a      	movs	r2, r3
 8007616:	1dfb      	adds	r3, r7, #7
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	429a      	cmp	r2, r3
 800761c:	d0bf      	beq.n	800759e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800761e:	2300      	movs	r3, #0
}
 8007620:	0018      	movs	r0, r3
 8007622:	46bd      	mov	sp, r7
 8007624:	b004      	add	sp, #16
 8007626:	bd80      	pop	{r7, pc}

08007628 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af00      	add	r7, sp, #0
 800762e:	60f8      	str	r0, [r7, #12]
 8007630:	60b9      	str	r1, [r7, #8]
 8007632:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007634:	e032      	b.n	800769c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007636:	687a      	ldr	r2, [r7, #4]
 8007638:	68b9      	ldr	r1, [r7, #8]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	0018      	movs	r0, r3
 800763e:	f000 f8ff 	bl	8007840 <I2C_IsErrorOccurred>
 8007642:	1e03      	subs	r3, r0, #0
 8007644:	d001      	beq.n	800764a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	e030      	b.n	80076ac <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	3301      	adds	r3, #1
 800764e:	d025      	beq.n	800769c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007650:	f7fe fb80 	bl	8005d54 <HAL_GetTick>
 8007654:	0002      	movs	r2, r0
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	1ad3      	subs	r3, r2, r3
 800765a:	68ba      	ldr	r2, [r7, #8]
 800765c:	429a      	cmp	r2, r3
 800765e:	d302      	bcc.n	8007666 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d11a      	bne.n	800769c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	699b      	ldr	r3, [r3, #24]
 800766c:	2202      	movs	r2, #2
 800766e:	4013      	ands	r3, r2
 8007670:	2b02      	cmp	r3, #2
 8007672:	d013      	beq.n	800769c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007678:	2220      	movs	r2, #32
 800767a:	431a      	orrs	r2, r3
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2241      	movs	r2, #65	; 0x41
 8007684:	2120      	movs	r1, #32
 8007686:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2242      	movs	r2, #66	; 0x42
 800768c:	2100      	movs	r1, #0
 800768e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2240      	movs	r2, #64	; 0x40
 8007694:	2100      	movs	r1, #0
 8007696:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007698:	2301      	movs	r3, #1
 800769a:	e007      	b.n	80076ac <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	699b      	ldr	r3, [r3, #24]
 80076a2:	2202      	movs	r2, #2
 80076a4:	4013      	ands	r3, r2
 80076a6:	2b02      	cmp	r3, #2
 80076a8:	d1c5      	bne.n	8007636 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80076aa:	2300      	movs	r3, #0
}
 80076ac:	0018      	movs	r0, r3
 80076ae:	46bd      	mov	sp, r7
 80076b0:	b004      	add	sp, #16
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b084      	sub	sp, #16
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	60f8      	str	r0, [r7, #12]
 80076bc:	60b9      	str	r1, [r7, #8]
 80076be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80076c0:	e02f      	b.n	8007722 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	68b9      	ldr	r1, [r7, #8]
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	0018      	movs	r0, r3
 80076ca:	f000 f8b9 	bl	8007840 <I2C_IsErrorOccurred>
 80076ce:	1e03      	subs	r3, r0, #0
 80076d0:	d001      	beq.n	80076d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	e02d      	b.n	8007732 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076d6:	f7fe fb3d 	bl	8005d54 <HAL_GetTick>
 80076da:	0002      	movs	r2, r0
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	1ad3      	subs	r3, r2, r3
 80076e0:	68ba      	ldr	r2, [r7, #8]
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d302      	bcc.n	80076ec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d11a      	bne.n	8007722 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	699b      	ldr	r3, [r3, #24]
 80076f2:	2220      	movs	r2, #32
 80076f4:	4013      	ands	r3, r2
 80076f6:	2b20      	cmp	r3, #32
 80076f8:	d013      	beq.n	8007722 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076fe:	2220      	movs	r2, #32
 8007700:	431a      	orrs	r2, r3
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2241      	movs	r2, #65	; 0x41
 800770a:	2120      	movs	r1, #32
 800770c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2242      	movs	r2, #66	; 0x42
 8007712:	2100      	movs	r1, #0
 8007714:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2240      	movs	r2, #64	; 0x40
 800771a:	2100      	movs	r1, #0
 800771c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800771e:	2301      	movs	r3, #1
 8007720:	e007      	b.n	8007732 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	699b      	ldr	r3, [r3, #24]
 8007728:	2220      	movs	r2, #32
 800772a:	4013      	ands	r3, r2
 800772c:	2b20      	cmp	r3, #32
 800772e:	d1c8      	bne.n	80076c2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007730:	2300      	movs	r3, #0
}
 8007732:	0018      	movs	r0, r3
 8007734:	46bd      	mov	sp, r7
 8007736:	b004      	add	sp, #16
 8007738:	bd80      	pop	{r7, pc}
	...

0800773c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b084      	sub	sp, #16
 8007740:	af00      	add	r7, sp, #0
 8007742:	60f8      	str	r0, [r7, #12]
 8007744:	60b9      	str	r1, [r7, #8]
 8007746:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007748:	e06b      	b.n	8007822 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800774a:	687a      	ldr	r2, [r7, #4]
 800774c:	68b9      	ldr	r1, [r7, #8]
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	0018      	movs	r0, r3
 8007752:	f000 f875 	bl	8007840 <I2C_IsErrorOccurred>
 8007756:	1e03      	subs	r3, r0, #0
 8007758:	d001      	beq.n	800775e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800775a:	2301      	movs	r3, #1
 800775c:	e069      	b.n	8007832 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	699b      	ldr	r3, [r3, #24]
 8007764:	2220      	movs	r2, #32
 8007766:	4013      	ands	r3, r2
 8007768:	2b20      	cmp	r3, #32
 800776a:	d138      	bne.n	80077de <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	699b      	ldr	r3, [r3, #24]
 8007772:	2204      	movs	r2, #4
 8007774:	4013      	ands	r3, r2
 8007776:	2b04      	cmp	r3, #4
 8007778:	d105      	bne.n	8007786 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800777e:	2b00      	cmp	r3, #0
 8007780:	d001      	beq.n	8007786 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8007782:	2300      	movs	r3, #0
 8007784:	e055      	b.n	8007832 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	699b      	ldr	r3, [r3, #24]
 800778c:	2210      	movs	r2, #16
 800778e:	4013      	ands	r3, r2
 8007790:	2b10      	cmp	r3, #16
 8007792:	d107      	bne.n	80077a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	2210      	movs	r2, #16
 800779a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2204      	movs	r2, #4
 80077a0:	645a      	str	r2, [r3, #68]	; 0x44
 80077a2:	e002      	b.n	80077aa <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2200      	movs	r2, #0
 80077a8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	2220      	movs	r2, #32
 80077b0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	685a      	ldr	r2, [r3, #4]
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	491f      	ldr	r1, [pc, #124]	; (800783c <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80077be:	400a      	ands	r2, r1
 80077c0:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2241      	movs	r2, #65	; 0x41
 80077c6:	2120      	movs	r1, #32
 80077c8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2242      	movs	r2, #66	; 0x42
 80077ce:	2100      	movs	r1, #0
 80077d0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2240      	movs	r2, #64	; 0x40
 80077d6:	2100      	movs	r1, #0
 80077d8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	e029      	b.n	8007832 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077de:	f7fe fab9 	bl	8005d54 <HAL_GetTick>
 80077e2:	0002      	movs	r2, r0
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	1ad3      	subs	r3, r2, r3
 80077e8:	68ba      	ldr	r2, [r7, #8]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d302      	bcc.n	80077f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d116      	bne.n	8007822 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	699b      	ldr	r3, [r3, #24]
 80077fa:	2204      	movs	r2, #4
 80077fc:	4013      	ands	r3, r2
 80077fe:	2b04      	cmp	r3, #4
 8007800:	d00f      	beq.n	8007822 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007806:	2220      	movs	r2, #32
 8007808:	431a      	orrs	r2, r3
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2241      	movs	r2, #65	; 0x41
 8007812:	2120      	movs	r1, #32
 8007814:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2240      	movs	r2, #64	; 0x40
 800781a:	2100      	movs	r1, #0
 800781c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	e007      	b.n	8007832 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	699b      	ldr	r3, [r3, #24]
 8007828:	2204      	movs	r2, #4
 800782a:	4013      	ands	r3, r2
 800782c:	2b04      	cmp	r3, #4
 800782e:	d18c      	bne.n	800774a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007830:	2300      	movs	r3, #0
}
 8007832:	0018      	movs	r0, r3
 8007834:	46bd      	mov	sp, r7
 8007836:	b004      	add	sp, #16
 8007838:	bd80      	pop	{r7, pc}
 800783a:	46c0      	nop			; (mov r8, r8)
 800783c:	fe00e800 	.word	0xfe00e800

08007840 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007840:	b590      	push	{r4, r7, lr}
 8007842:	b08b      	sub	sp, #44	; 0x2c
 8007844:	af00      	add	r7, sp, #0
 8007846:	60f8      	str	r0, [r7, #12]
 8007848:	60b9      	str	r1, [r7, #8]
 800784a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800784c:	2327      	movs	r3, #39	; 0x27
 800784e:	18fb      	adds	r3, r7, r3
 8007850:	2200      	movs	r2, #0
 8007852:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	699b      	ldr	r3, [r3, #24]
 800785a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800785c:	2300      	movs	r3, #0
 800785e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007864:	69bb      	ldr	r3, [r7, #24]
 8007866:	2210      	movs	r2, #16
 8007868:	4013      	ands	r3, r2
 800786a:	d100      	bne.n	800786e <I2C_IsErrorOccurred+0x2e>
 800786c:	e082      	b.n	8007974 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	2210      	movs	r2, #16
 8007874:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007876:	e060      	b.n	800793a <I2C_IsErrorOccurred+0xfa>
 8007878:	2427      	movs	r4, #39	; 0x27
 800787a:	193b      	adds	r3, r7, r4
 800787c:	193a      	adds	r2, r7, r4
 800787e:	7812      	ldrb	r2, [r2, #0]
 8007880:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	3301      	adds	r3, #1
 8007886:	d058      	beq.n	800793a <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007888:	f7fe fa64 	bl	8005d54 <HAL_GetTick>
 800788c:	0002      	movs	r2, r0
 800788e:	69fb      	ldr	r3, [r7, #28]
 8007890:	1ad3      	subs	r3, r2, r3
 8007892:	68ba      	ldr	r2, [r7, #8]
 8007894:	429a      	cmp	r2, r3
 8007896:	d306      	bcc.n	80078a6 <I2C_IsErrorOccurred+0x66>
 8007898:	193b      	adds	r3, r7, r4
 800789a:	193a      	adds	r2, r7, r4
 800789c:	7812      	ldrb	r2, [r2, #0]
 800789e:	701a      	strb	r2, [r3, #0]
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d149      	bne.n	800793a <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	685a      	ldr	r2, [r3, #4]
 80078ac:	2380      	movs	r3, #128	; 0x80
 80078ae:	01db      	lsls	r3, r3, #7
 80078b0:	4013      	ands	r3, r2
 80078b2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80078b4:	2013      	movs	r0, #19
 80078b6:	183b      	adds	r3, r7, r0
 80078b8:	68fa      	ldr	r2, [r7, #12]
 80078ba:	2142      	movs	r1, #66	; 0x42
 80078bc:	5c52      	ldrb	r2, [r2, r1]
 80078be:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	699a      	ldr	r2, [r3, #24]
 80078c6:	2380      	movs	r3, #128	; 0x80
 80078c8:	021b      	lsls	r3, r3, #8
 80078ca:	401a      	ands	r2, r3
 80078cc:	2380      	movs	r3, #128	; 0x80
 80078ce:	021b      	lsls	r3, r3, #8
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d126      	bne.n	8007922 <I2C_IsErrorOccurred+0xe2>
 80078d4:	697a      	ldr	r2, [r7, #20]
 80078d6:	2380      	movs	r3, #128	; 0x80
 80078d8:	01db      	lsls	r3, r3, #7
 80078da:	429a      	cmp	r2, r3
 80078dc:	d021      	beq.n	8007922 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 80078de:	183b      	adds	r3, r7, r0
 80078e0:	781b      	ldrb	r3, [r3, #0]
 80078e2:	2b20      	cmp	r3, #32
 80078e4:	d01d      	beq.n	8007922 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	685a      	ldr	r2, [r3, #4]
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	2180      	movs	r1, #128	; 0x80
 80078f2:	01c9      	lsls	r1, r1, #7
 80078f4:	430a      	orrs	r2, r1
 80078f6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80078f8:	f7fe fa2c 	bl	8005d54 <HAL_GetTick>
 80078fc:	0003      	movs	r3, r0
 80078fe:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007900:	e00f      	b.n	8007922 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007902:	f7fe fa27 	bl	8005d54 <HAL_GetTick>
 8007906:	0002      	movs	r2, r0
 8007908:	69fb      	ldr	r3, [r7, #28]
 800790a:	1ad3      	subs	r3, r2, r3
 800790c:	2b19      	cmp	r3, #25
 800790e:	d908      	bls.n	8007922 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007910:	6a3b      	ldr	r3, [r7, #32]
 8007912:	2220      	movs	r2, #32
 8007914:	4313      	orrs	r3, r2
 8007916:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007918:	2327      	movs	r3, #39	; 0x27
 800791a:	18fb      	adds	r3, r7, r3
 800791c:	2201      	movs	r2, #1
 800791e:	701a      	strb	r2, [r3, #0]

              break;
 8007920:	e00b      	b.n	800793a <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	699b      	ldr	r3, [r3, #24]
 8007928:	2220      	movs	r2, #32
 800792a:	4013      	ands	r3, r2
 800792c:	2127      	movs	r1, #39	; 0x27
 800792e:	187a      	adds	r2, r7, r1
 8007930:	1879      	adds	r1, r7, r1
 8007932:	7809      	ldrb	r1, [r1, #0]
 8007934:	7011      	strb	r1, [r2, #0]
 8007936:	2b20      	cmp	r3, #32
 8007938:	d1e3      	bne.n	8007902 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	699b      	ldr	r3, [r3, #24]
 8007940:	2220      	movs	r2, #32
 8007942:	4013      	ands	r3, r2
 8007944:	2b20      	cmp	r3, #32
 8007946:	d004      	beq.n	8007952 <I2C_IsErrorOccurred+0x112>
 8007948:	2327      	movs	r3, #39	; 0x27
 800794a:	18fb      	adds	r3, r7, r3
 800794c:	781b      	ldrb	r3, [r3, #0]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d092      	beq.n	8007878 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007952:	2327      	movs	r3, #39	; 0x27
 8007954:	18fb      	adds	r3, r7, r3
 8007956:	781b      	ldrb	r3, [r3, #0]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d103      	bne.n	8007964 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	2220      	movs	r2, #32
 8007962:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007964:	6a3b      	ldr	r3, [r7, #32]
 8007966:	2204      	movs	r2, #4
 8007968:	4313      	orrs	r3, r2
 800796a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800796c:	2327      	movs	r3, #39	; 0x27
 800796e:	18fb      	adds	r3, r7, r3
 8007970:	2201      	movs	r2, #1
 8007972:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	699b      	ldr	r3, [r3, #24]
 800797a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800797c:	69ba      	ldr	r2, [r7, #24]
 800797e:	2380      	movs	r3, #128	; 0x80
 8007980:	005b      	lsls	r3, r3, #1
 8007982:	4013      	ands	r3, r2
 8007984:	d00c      	beq.n	80079a0 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007986:	6a3b      	ldr	r3, [r7, #32]
 8007988:	2201      	movs	r2, #1
 800798a:	4313      	orrs	r3, r2
 800798c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	2280      	movs	r2, #128	; 0x80
 8007994:	0052      	lsls	r2, r2, #1
 8007996:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007998:	2327      	movs	r3, #39	; 0x27
 800799a:	18fb      	adds	r3, r7, r3
 800799c:	2201      	movs	r2, #1
 800799e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80079a0:	69ba      	ldr	r2, [r7, #24]
 80079a2:	2380      	movs	r3, #128	; 0x80
 80079a4:	00db      	lsls	r3, r3, #3
 80079a6:	4013      	ands	r3, r2
 80079a8:	d00c      	beq.n	80079c4 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80079aa:	6a3b      	ldr	r3, [r7, #32]
 80079ac:	2208      	movs	r2, #8
 80079ae:	4313      	orrs	r3, r2
 80079b0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	2280      	movs	r2, #128	; 0x80
 80079b8:	00d2      	lsls	r2, r2, #3
 80079ba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80079bc:	2327      	movs	r3, #39	; 0x27
 80079be:	18fb      	adds	r3, r7, r3
 80079c0:	2201      	movs	r2, #1
 80079c2:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80079c4:	69ba      	ldr	r2, [r7, #24]
 80079c6:	2380      	movs	r3, #128	; 0x80
 80079c8:	009b      	lsls	r3, r3, #2
 80079ca:	4013      	ands	r3, r2
 80079cc:	d00c      	beq.n	80079e8 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80079ce:	6a3b      	ldr	r3, [r7, #32]
 80079d0:	2202      	movs	r2, #2
 80079d2:	4313      	orrs	r3, r2
 80079d4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	2280      	movs	r2, #128	; 0x80
 80079dc:	0092      	lsls	r2, r2, #2
 80079de:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80079e0:	2327      	movs	r3, #39	; 0x27
 80079e2:	18fb      	adds	r3, r7, r3
 80079e4:	2201      	movs	r2, #1
 80079e6:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80079e8:	2327      	movs	r3, #39	; 0x27
 80079ea:	18fb      	adds	r3, r7, r3
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d01d      	beq.n	8007a2e <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	0018      	movs	r0, r3
 80079f6:	f7ff fda7 	bl	8007548 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	685a      	ldr	r2, [r3, #4]
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	490d      	ldr	r1, [pc, #52]	; (8007a3c <I2C_IsErrorOccurred+0x1fc>)
 8007a06:	400a      	ands	r2, r1
 8007a08:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a0e:	6a3b      	ldr	r3, [r7, #32]
 8007a10:	431a      	orrs	r2, r3
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2241      	movs	r2, #65	; 0x41
 8007a1a:	2120      	movs	r1, #32
 8007a1c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2242      	movs	r2, #66	; 0x42
 8007a22:	2100      	movs	r1, #0
 8007a24:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2240      	movs	r2, #64	; 0x40
 8007a2a:	2100      	movs	r1, #0
 8007a2c:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8007a2e:	2327      	movs	r3, #39	; 0x27
 8007a30:	18fb      	adds	r3, r7, r3
 8007a32:	781b      	ldrb	r3, [r3, #0]
}
 8007a34:	0018      	movs	r0, r3
 8007a36:	46bd      	mov	sp, r7
 8007a38:	b00b      	add	sp, #44	; 0x2c
 8007a3a:	bd90      	pop	{r4, r7, pc}
 8007a3c:	fe00e800 	.word	0xfe00e800

08007a40 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007a40:	b590      	push	{r4, r7, lr}
 8007a42:	b087      	sub	sp, #28
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	60f8      	str	r0, [r7, #12]
 8007a48:	0008      	movs	r0, r1
 8007a4a:	0011      	movs	r1, r2
 8007a4c:	607b      	str	r3, [r7, #4]
 8007a4e:	240a      	movs	r4, #10
 8007a50:	193b      	adds	r3, r7, r4
 8007a52:	1c02      	adds	r2, r0, #0
 8007a54:	801a      	strh	r2, [r3, #0]
 8007a56:	2009      	movs	r0, #9
 8007a58:	183b      	adds	r3, r7, r0
 8007a5a:	1c0a      	adds	r2, r1, #0
 8007a5c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007a5e:	193b      	adds	r3, r7, r4
 8007a60:	881b      	ldrh	r3, [r3, #0]
 8007a62:	059b      	lsls	r3, r3, #22
 8007a64:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007a66:	183b      	adds	r3, r7, r0
 8007a68:	781b      	ldrb	r3, [r3, #0]
 8007a6a:	0419      	lsls	r1, r3, #16
 8007a6c:	23ff      	movs	r3, #255	; 0xff
 8007a6e:	041b      	lsls	r3, r3, #16
 8007a70:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007a72:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	005b      	lsls	r3, r3, #1
 8007a7e:	085b      	lsrs	r3, r3, #1
 8007a80:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a8a:	0d51      	lsrs	r1, r2, #21
 8007a8c:	2280      	movs	r2, #128	; 0x80
 8007a8e:	00d2      	lsls	r2, r2, #3
 8007a90:	400a      	ands	r2, r1
 8007a92:	4907      	ldr	r1, [pc, #28]	; (8007ab0 <I2C_TransferConfig+0x70>)
 8007a94:	430a      	orrs	r2, r1
 8007a96:	43d2      	mvns	r2, r2
 8007a98:	401a      	ands	r2, r3
 8007a9a:	0011      	movs	r1, r2
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	697a      	ldr	r2, [r7, #20]
 8007aa2:	430a      	orrs	r2, r1
 8007aa4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007aa6:	46c0      	nop			; (mov r8, r8)
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	b007      	add	sp, #28
 8007aac:	bd90      	pop	{r4, r7, pc}
 8007aae:	46c0      	nop			; (mov r8, r8)
 8007ab0:	03ff63ff 	.word	0x03ff63ff

08007ab4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b082      	sub	sp, #8
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2241      	movs	r2, #65	; 0x41
 8007ac2:	5c9b      	ldrb	r3, [r3, r2]
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	2b20      	cmp	r3, #32
 8007ac8:	d138      	bne.n	8007b3c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2240      	movs	r2, #64	; 0x40
 8007ace:	5c9b      	ldrb	r3, [r3, r2]
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d101      	bne.n	8007ad8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007ad4:	2302      	movs	r3, #2
 8007ad6:	e032      	b.n	8007b3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2240      	movs	r2, #64	; 0x40
 8007adc:	2101      	movs	r1, #1
 8007ade:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2241      	movs	r2, #65	; 0x41
 8007ae4:	2124      	movs	r1, #36	; 0x24
 8007ae6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	681a      	ldr	r2, [r3, #0]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	2101      	movs	r1, #1
 8007af4:	438a      	bics	r2, r1
 8007af6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	681a      	ldr	r2, [r3, #0]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4911      	ldr	r1, [pc, #68]	; (8007b48 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8007b04:	400a      	ands	r2, r1
 8007b06:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	6819      	ldr	r1, [r3, #0]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	683a      	ldr	r2, [r7, #0]
 8007b14:	430a      	orrs	r2, r1
 8007b16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	2101      	movs	r1, #1
 8007b24:	430a      	orrs	r2, r1
 8007b26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2241      	movs	r2, #65	; 0x41
 8007b2c:	2120      	movs	r1, #32
 8007b2e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2240      	movs	r2, #64	; 0x40
 8007b34:	2100      	movs	r1, #0
 8007b36:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	e000      	b.n	8007b3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007b3c:	2302      	movs	r3, #2
  }
}
 8007b3e:	0018      	movs	r0, r3
 8007b40:	46bd      	mov	sp, r7
 8007b42:	b002      	add	sp, #8
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	46c0      	nop			; (mov r8, r8)
 8007b48:	ffffefff 	.word	0xffffefff

08007b4c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b084      	sub	sp, #16
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2241      	movs	r2, #65	; 0x41
 8007b5a:	5c9b      	ldrb	r3, [r3, r2]
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	2b20      	cmp	r3, #32
 8007b60:	d139      	bne.n	8007bd6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2240      	movs	r2, #64	; 0x40
 8007b66:	5c9b      	ldrb	r3, [r3, r2]
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d101      	bne.n	8007b70 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007b6c:	2302      	movs	r3, #2
 8007b6e:	e033      	b.n	8007bd8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2240      	movs	r2, #64	; 0x40
 8007b74:	2101      	movs	r1, #1
 8007b76:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2241      	movs	r2, #65	; 0x41
 8007b7c:	2124      	movs	r1, #36	; 0x24
 8007b7e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	2101      	movs	r1, #1
 8007b8c:	438a      	bics	r2, r1
 8007b8e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	4a11      	ldr	r2, [pc, #68]	; (8007be0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8007b9c:	4013      	ands	r3, r2
 8007b9e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	021b      	lsls	r3, r3, #8
 8007ba4:	68fa      	ldr	r2, [r7, #12]
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	68fa      	ldr	r2, [r7, #12]
 8007bb0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	2101      	movs	r1, #1
 8007bbe:	430a      	orrs	r2, r1
 8007bc0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2241      	movs	r2, #65	; 0x41
 8007bc6:	2120      	movs	r1, #32
 8007bc8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2240      	movs	r2, #64	; 0x40
 8007bce:	2100      	movs	r1, #0
 8007bd0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	e000      	b.n	8007bd8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007bd6:	2302      	movs	r3, #2
  }
}
 8007bd8:	0018      	movs	r0, r3
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	b004      	add	sp, #16
 8007bde:	bd80      	pop	{r7, pc}
 8007be0:	fffff0ff 	.word	0xfffff0ff

08007be4 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b086      	sub	sp, #24
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	000a      	movs	r2, r1
 8007bee:	1cfb      	adds	r3, r7, #3
 8007bf0:	701a      	strb	r2, [r3, #0]
   uint32_t tmpreg = 0U;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8007bf6:	4b23      	ldr	r3, [pc, #140]	; (8007c84 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	2380      	movs	r3, #128	; 0x80
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	4013      	ands	r3, r2
 8007c00:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8007c02:	4b21      	ldr	r3, [pc, #132]	; (8007c88 <HAL_PWR_EnterSLEEPMode+0xa4>)
 8007c04:	6a1b      	ldr	r3, [r3, #32]
 8007c06:	2201      	movs	r2, #1
 8007c08:	4013      	ands	r3, r2
 8007c0a:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d008      	beq.n	8007c24 <HAL_PWR_EnterSLEEPMode+0x40>
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d005      	beq.n	8007c24 <HAL_PWR_EnterSLEEPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8007c18:	4b1a      	ldr	r3, [pc, #104]	; (8007c84 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	4b19      	ldr	r3, [pc, #100]	; (8007c84 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8007c1e:	491b      	ldr	r1, [pc, #108]	; (8007c8c <HAL_PWR_EnterSLEEPMode+0xa8>)
 8007c20:	400a      	ands	r2, r1
 8007c22:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Sleep mode ---------------------------------*/
  tmpreg = PWR->CR;
 8007c24:	4b17      	ldr	r3, [pc, #92]	; (8007c84 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	617b      	str	r3, [r7, #20]

  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	2203      	movs	r2, #3
 8007c2e:	4393      	bics	r3, r2
 8007c30:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8007c32:	697a      	ldr	r2, [r7, #20]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	4313      	orrs	r3, r2
 8007c38:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8007c3a:	4b12      	ldr	r3, [pc, #72]	; (8007c84 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8007c3c:	697a      	ldr	r2, [r7, #20]
 8007c3e:	601a      	str	r2, [r3, #0]
  
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8007c40:	4b13      	ldr	r3, [pc, #76]	; (8007c90 <HAL_PWR_EnterSLEEPMode+0xac>)
 8007c42:	691a      	ldr	r2, [r3, #16]
 8007c44:	4b12      	ldr	r3, [pc, #72]	; (8007c90 <HAL_PWR_EnterSLEEPMode+0xac>)
 8007c46:	2104      	movs	r1, #4
 8007c48:	438a      	bics	r2, r1
 8007c4a:	611a      	str	r2, [r3, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8007c4c:	1cfb      	adds	r3, r7, #3
 8007c4e:	781b      	ldrb	r3, [r3, #0]
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	d101      	bne.n	8007c58 <HAL_PWR_EnterSLEEPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8007c54:	bf30      	wfi
 8007c56:	e002      	b.n	8007c5e <HAL_PWR_EnterSLEEPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8007c58:	bf40      	sev
    __WFE();
 8007c5a:	bf20      	wfe
    __WFE();
 8007c5c:	bf20      	wfe
  }

  if((ulpbit != 0) && (vrefinbit != 0))
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d009      	beq.n	8007c78 <HAL_PWR_EnterSLEEPMode+0x94>
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d006      	beq.n	8007c78 <HAL_PWR_EnterSLEEPMode+0x94>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8007c6a:	4b06      	ldr	r3, [pc, #24]	; (8007c84 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8007c6c:	681a      	ldr	r2, [r3, #0]
 8007c6e:	4b05      	ldr	r3, [pc, #20]	; (8007c84 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8007c70:	2180      	movs	r1, #128	; 0x80
 8007c72:	0089      	lsls	r1, r1, #2
 8007c74:	430a      	orrs	r2, r1
 8007c76:	601a      	str	r2, [r3, #0]
  }

  /* Additional NOP to ensure all pending instructions are flushed before entering low power mode */
  __NOP();
 8007c78:	46c0      	nop			; (mov r8, r8)

}
 8007c7a:	46c0      	nop			; (mov r8, r8)
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	b006      	add	sp, #24
 8007c80:	bd80      	pop	{r7, pc}
 8007c82:	46c0      	nop			; (mov r8, r8)
 8007c84:	40007000 	.word	0x40007000
 8007c88:	40010000 	.word	0x40010000
 8007c8c:	fffffdff 	.word	0xfffffdff
 8007c90:	e000ed00 	.word	0xe000ed00

08007c94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007c94:	b5b0      	push	{r4, r5, r7, lr}
 8007c96:	b08a      	sub	sp, #40	; 0x28
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d102      	bne.n	8007ca8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	f000 fb6c 	bl	8008380 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ca8:	4bc8      	ldr	r3, [pc, #800]	; (8007fcc <HAL_RCC_OscConfig+0x338>)
 8007caa:	68db      	ldr	r3, [r3, #12]
 8007cac:	220c      	movs	r2, #12
 8007cae:	4013      	ands	r3, r2
 8007cb0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007cb2:	4bc6      	ldr	r3, [pc, #792]	; (8007fcc <HAL_RCC_OscConfig+0x338>)
 8007cb4:	68da      	ldr	r2, [r3, #12]
 8007cb6:	2380      	movs	r3, #128	; 0x80
 8007cb8:	025b      	lsls	r3, r3, #9
 8007cba:	4013      	ands	r3, r2
 8007cbc:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	4013      	ands	r3, r2
 8007cc6:	d100      	bne.n	8007cca <HAL_RCC_OscConfig+0x36>
 8007cc8:	e07d      	b.n	8007dc6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007cca:	69fb      	ldr	r3, [r7, #28]
 8007ccc:	2b08      	cmp	r3, #8
 8007cce:	d007      	beq.n	8007ce0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007cd0:	69fb      	ldr	r3, [r7, #28]
 8007cd2:	2b0c      	cmp	r3, #12
 8007cd4:	d112      	bne.n	8007cfc <HAL_RCC_OscConfig+0x68>
 8007cd6:	69ba      	ldr	r2, [r7, #24]
 8007cd8:	2380      	movs	r3, #128	; 0x80
 8007cda:	025b      	lsls	r3, r3, #9
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d10d      	bne.n	8007cfc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ce0:	4bba      	ldr	r3, [pc, #744]	; (8007fcc <HAL_RCC_OscConfig+0x338>)
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	2380      	movs	r3, #128	; 0x80
 8007ce6:	029b      	lsls	r3, r3, #10
 8007ce8:	4013      	ands	r3, r2
 8007cea:	d100      	bne.n	8007cee <HAL_RCC_OscConfig+0x5a>
 8007cec:	e06a      	b.n	8007dc4 <HAL_RCC_OscConfig+0x130>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d166      	bne.n	8007dc4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	f000 fb42 	bl	8008380 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	685a      	ldr	r2, [r3, #4]
 8007d00:	2380      	movs	r3, #128	; 0x80
 8007d02:	025b      	lsls	r3, r3, #9
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d107      	bne.n	8007d18 <HAL_RCC_OscConfig+0x84>
 8007d08:	4bb0      	ldr	r3, [pc, #704]	; (8007fcc <HAL_RCC_OscConfig+0x338>)
 8007d0a:	681a      	ldr	r2, [r3, #0]
 8007d0c:	4baf      	ldr	r3, [pc, #700]	; (8007fcc <HAL_RCC_OscConfig+0x338>)
 8007d0e:	2180      	movs	r1, #128	; 0x80
 8007d10:	0249      	lsls	r1, r1, #9
 8007d12:	430a      	orrs	r2, r1
 8007d14:	601a      	str	r2, [r3, #0]
 8007d16:	e027      	b.n	8007d68 <HAL_RCC_OscConfig+0xd4>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	685a      	ldr	r2, [r3, #4]
 8007d1c:	23a0      	movs	r3, #160	; 0xa0
 8007d1e:	02db      	lsls	r3, r3, #11
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d10e      	bne.n	8007d42 <HAL_RCC_OscConfig+0xae>
 8007d24:	4ba9      	ldr	r3, [pc, #676]	; (8007fcc <HAL_RCC_OscConfig+0x338>)
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	4ba8      	ldr	r3, [pc, #672]	; (8007fcc <HAL_RCC_OscConfig+0x338>)
 8007d2a:	2180      	movs	r1, #128	; 0x80
 8007d2c:	02c9      	lsls	r1, r1, #11
 8007d2e:	430a      	orrs	r2, r1
 8007d30:	601a      	str	r2, [r3, #0]
 8007d32:	4ba6      	ldr	r3, [pc, #664]	; (8007fcc <HAL_RCC_OscConfig+0x338>)
 8007d34:	681a      	ldr	r2, [r3, #0]
 8007d36:	4ba5      	ldr	r3, [pc, #660]	; (8007fcc <HAL_RCC_OscConfig+0x338>)
 8007d38:	2180      	movs	r1, #128	; 0x80
 8007d3a:	0249      	lsls	r1, r1, #9
 8007d3c:	430a      	orrs	r2, r1
 8007d3e:	601a      	str	r2, [r3, #0]
 8007d40:	e012      	b.n	8007d68 <HAL_RCC_OscConfig+0xd4>
 8007d42:	4ba2      	ldr	r3, [pc, #648]	; (8007fcc <HAL_RCC_OscConfig+0x338>)
 8007d44:	681a      	ldr	r2, [r3, #0]
 8007d46:	4ba1      	ldr	r3, [pc, #644]	; (8007fcc <HAL_RCC_OscConfig+0x338>)
 8007d48:	49a1      	ldr	r1, [pc, #644]	; (8007fd0 <HAL_RCC_OscConfig+0x33c>)
 8007d4a:	400a      	ands	r2, r1
 8007d4c:	601a      	str	r2, [r3, #0]
 8007d4e:	4b9f      	ldr	r3, [pc, #636]	; (8007fcc <HAL_RCC_OscConfig+0x338>)
 8007d50:	681a      	ldr	r2, [r3, #0]
 8007d52:	2380      	movs	r3, #128	; 0x80
 8007d54:	025b      	lsls	r3, r3, #9
 8007d56:	4013      	ands	r3, r2
 8007d58:	60fb      	str	r3, [r7, #12]
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	4b9b      	ldr	r3, [pc, #620]	; (8007fcc <HAL_RCC_OscConfig+0x338>)
 8007d5e:	681a      	ldr	r2, [r3, #0]
 8007d60:	4b9a      	ldr	r3, [pc, #616]	; (8007fcc <HAL_RCC_OscConfig+0x338>)
 8007d62:	499c      	ldr	r1, [pc, #624]	; (8007fd4 <HAL_RCC_OscConfig+0x340>)
 8007d64:	400a      	ands	r2, r1
 8007d66:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d014      	beq.n	8007d9a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d70:	f7fd fff0 	bl	8005d54 <HAL_GetTick>
 8007d74:	0003      	movs	r3, r0
 8007d76:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007d78:	e008      	b.n	8007d8c <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d7a:	f7fd ffeb 	bl	8005d54 <HAL_GetTick>
 8007d7e:	0002      	movs	r2, r0
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	1ad3      	subs	r3, r2, r3
 8007d84:	2b64      	cmp	r3, #100	; 0x64
 8007d86:	d901      	bls.n	8007d8c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8007d88:	2303      	movs	r3, #3
 8007d8a:	e2f9      	b.n	8008380 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007d8c:	4b8f      	ldr	r3, [pc, #572]	; (8007fcc <HAL_RCC_OscConfig+0x338>)
 8007d8e:	681a      	ldr	r2, [r3, #0]
 8007d90:	2380      	movs	r3, #128	; 0x80
 8007d92:	029b      	lsls	r3, r3, #10
 8007d94:	4013      	ands	r3, r2
 8007d96:	d0f0      	beq.n	8007d7a <HAL_RCC_OscConfig+0xe6>
 8007d98:	e015      	b.n	8007dc6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d9a:	f7fd ffdb 	bl	8005d54 <HAL_GetTick>
 8007d9e:	0003      	movs	r3, r0
 8007da0:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007da2:	e008      	b.n	8007db6 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007da4:	f7fd ffd6 	bl	8005d54 <HAL_GetTick>
 8007da8:	0002      	movs	r2, r0
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	1ad3      	subs	r3, r2, r3
 8007dae:	2b64      	cmp	r3, #100	; 0x64
 8007db0:	d901      	bls.n	8007db6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007db2:	2303      	movs	r3, #3
 8007db4:	e2e4      	b.n	8008380 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007db6:	4b85      	ldr	r3, [pc, #532]	; (8007fcc <HAL_RCC_OscConfig+0x338>)
 8007db8:	681a      	ldr	r2, [r3, #0]
 8007dba:	2380      	movs	r3, #128	; 0x80
 8007dbc:	029b      	lsls	r3, r3, #10
 8007dbe:	4013      	ands	r3, r2
 8007dc0:	d1f0      	bne.n	8007da4 <HAL_RCC_OscConfig+0x110>
 8007dc2:	e000      	b.n	8007dc6 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007dc4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	2202      	movs	r2, #2
 8007dcc:	4013      	ands	r3, r2
 8007dce:	d100      	bne.n	8007dd2 <HAL_RCC_OscConfig+0x13e>
 8007dd0:	e099      	b.n	8007f06 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	68db      	ldr	r3, [r3, #12]
 8007dd6:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8007dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dda:	2220      	movs	r2, #32
 8007ddc:	4013      	ands	r3, r2
 8007dde:	d009      	beq.n	8007df4 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8007de0:	4b7a      	ldr	r3, [pc, #488]	; (8007fcc <HAL_RCC_OscConfig+0x338>)
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	4b79      	ldr	r3, [pc, #484]	; (8007fcc <HAL_RCC_OscConfig+0x338>)
 8007de6:	2120      	movs	r1, #32
 8007de8:	430a      	orrs	r2, r1
 8007dea:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8007dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dee:	2220      	movs	r2, #32
 8007df0:	4393      	bics	r3, r2
 8007df2:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007df4:	69fb      	ldr	r3, [r7, #28]
 8007df6:	2b04      	cmp	r3, #4
 8007df8:	d005      	beq.n	8007e06 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007dfa:	69fb      	ldr	r3, [r7, #28]
 8007dfc:	2b0c      	cmp	r3, #12
 8007dfe:	d13e      	bne.n	8007e7e <HAL_RCC_OscConfig+0x1ea>
 8007e00:	69bb      	ldr	r3, [r7, #24]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d13b      	bne.n	8007e7e <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8007e06:	4b71      	ldr	r3, [pc, #452]	; (8007fcc <HAL_RCC_OscConfig+0x338>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	2204      	movs	r2, #4
 8007e0c:	4013      	ands	r3, r2
 8007e0e:	d004      	beq.n	8007e1a <HAL_RCC_OscConfig+0x186>
 8007e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d101      	bne.n	8007e1a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8007e16:	2301      	movs	r3, #1
 8007e18:	e2b2      	b.n	8008380 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e1a:	4b6c      	ldr	r3, [pc, #432]	; (8007fcc <HAL_RCC_OscConfig+0x338>)
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	4a6e      	ldr	r2, [pc, #440]	; (8007fd8 <HAL_RCC_OscConfig+0x344>)
 8007e20:	4013      	ands	r3, r2
 8007e22:	0019      	movs	r1, r3
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	691b      	ldr	r3, [r3, #16]
 8007e28:	021a      	lsls	r2, r3, #8
 8007e2a:	4b68      	ldr	r3, [pc, #416]	; (8007fcc <HAL_RCC_OscConfig+0x338>)
 8007e2c:	430a      	orrs	r2, r1
 8007e2e:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8007e30:	4b66      	ldr	r3, [pc, #408]	; (8007fcc <HAL_RCC_OscConfig+0x338>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	2209      	movs	r2, #9
 8007e36:	4393      	bics	r3, r2
 8007e38:	0019      	movs	r1, r3
 8007e3a:	4b64      	ldr	r3, [pc, #400]	; (8007fcc <HAL_RCC_OscConfig+0x338>)
 8007e3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e3e:	430a      	orrs	r2, r1
 8007e40:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007e42:	f000 fbeb 	bl	800861c <HAL_RCC_GetSysClockFreq>
 8007e46:	0001      	movs	r1, r0
 8007e48:	4b60      	ldr	r3, [pc, #384]	; (8007fcc <HAL_RCC_OscConfig+0x338>)
 8007e4a:	68db      	ldr	r3, [r3, #12]
 8007e4c:	091b      	lsrs	r3, r3, #4
 8007e4e:	220f      	movs	r2, #15
 8007e50:	4013      	ands	r3, r2
 8007e52:	4a62      	ldr	r2, [pc, #392]	; (8007fdc <HAL_RCC_OscConfig+0x348>)
 8007e54:	5cd3      	ldrb	r3, [r2, r3]
 8007e56:	000a      	movs	r2, r1
 8007e58:	40da      	lsrs	r2, r3
 8007e5a:	4b61      	ldr	r3, [pc, #388]	; (8007fe0 <HAL_RCC_OscConfig+0x34c>)
 8007e5c:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8007e5e:	4b61      	ldr	r3, [pc, #388]	; (8007fe4 <HAL_RCC_OscConfig+0x350>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	2513      	movs	r5, #19
 8007e64:	197c      	adds	r4, r7, r5
 8007e66:	0018      	movs	r0, r3
 8007e68:	f7fd ff2e 	bl	8005cc8 <HAL_InitTick>
 8007e6c:	0003      	movs	r3, r0
 8007e6e:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8007e70:	197b      	adds	r3, r7, r5
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d046      	beq.n	8007f06 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8007e78:	197b      	adds	r3, r7, r5
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	e280      	b.n	8008380 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8007e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d027      	beq.n	8007ed4 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8007e84:	4b51      	ldr	r3, [pc, #324]	; (8007fcc <HAL_RCC_OscConfig+0x338>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	2209      	movs	r2, #9
 8007e8a:	4393      	bics	r3, r2
 8007e8c:	0019      	movs	r1, r3
 8007e8e:	4b4f      	ldr	r3, [pc, #316]	; (8007fcc <HAL_RCC_OscConfig+0x338>)
 8007e90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e92:	430a      	orrs	r2, r1
 8007e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e96:	f7fd ff5d 	bl	8005d54 <HAL_GetTick>
 8007e9a:	0003      	movs	r3, r0
 8007e9c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007e9e:	e008      	b.n	8007eb2 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007ea0:	f7fd ff58 	bl	8005d54 <HAL_GetTick>
 8007ea4:	0002      	movs	r2, r0
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	1ad3      	subs	r3, r2, r3
 8007eaa:	2b02      	cmp	r3, #2
 8007eac:	d901      	bls.n	8007eb2 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8007eae:	2303      	movs	r3, #3
 8007eb0:	e266      	b.n	8008380 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007eb2:	4b46      	ldr	r3, [pc, #280]	; (8007fcc <HAL_RCC_OscConfig+0x338>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	2204      	movs	r2, #4
 8007eb8:	4013      	ands	r3, r2
 8007eba:	d0f1      	beq.n	8007ea0 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ebc:	4b43      	ldr	r3, [pc, #268]	; (8007fcc <HAL_RCC_OscConfig+0x338>)
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	4a45      	ldr	r2, [pc, #276]	; (8007fd8 <HAL_RCC_OscConfig+0x344>)
 8007ec2:	4013      	ands	r3, r2
 8007ec4:	0019      	movs	r1, r3
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	691b      	ldr	r3, [r3, #16]
 8007eca:	021a      	lsls	r2, r3, #8
 8007ecc:	4b3f      	ldr	r3, [pc, #252]	; (8007fcc <HAL_RCC_OscConfig+0x338>)
 8007ece:	430a      	orrs	r2, r1
 8007ed0:	605a      	str	r2, [r3, #4]
 8007ed2:	e018      	b.n	8007f06 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007ed4:	4b3d      	ldr	r3, [pc, #244]	; (8007fcc <HAL_RCC_OscConfig+0x338>)
 8007ed6:	681a      	ldr	r2, [r3, #0]
 8007ed8:	4b3c      	ldr	r3, [pc, #240]	; (8007fcc <HAL_RCC_OscConfig+0x338>)
 8007eda:	2101      	movs	r1, #1
 8007edc:	438a      	bics	r2, r1
 8007ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ee0:	f7fd ff38 	bl	8005d54 <HAL_GetTick>
 8007ee4:	0003      	movs	r3, r0
 8007ee6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007ee8:	e008      	b.n	8007efc <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007eea:	f7fd ff33 	bl	8005d54 <HAL_GetTick>
 8007eee:	0002      	movs	r2, r0
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	1ad3      	subs	r3, r2, r3
 8007ef4:	2b02      	cmp	r3, #2
 8007ef6:	d901      	bls.n	8007efc <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8007ef8:	2303      	movs	r3, #3
 8007efa:	e241      	b.n	8008380 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007efc:	4b33      	ldr	r3, [pc, #204]	; (8007fcc <HAL_RCC_OscConfig+0x338>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	2204      	movs	r2, #4
 8007f02:	4013      	ands	r3, r2
 8007f04:	d1f1      	bne.n	8007eea <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	2210      	movs	r2, #16
 8007f0c:	4013      	ands	r3, r2
 8007f0e:	d100      	bne.n	8007f12 <HAL_RCC_OscConfig+0x27e>
 8007f10:	e0a1      	b.n	8008056 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007f12:	69fb      	ldr	r3, [r7, #28]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d140      	bne.n	8007f9a <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007f18:	4b2c      	ldr	r3, [pc, #176]	; (8007fcc <HAL_RCC_OscConfig+0x338>)
 8007f1a:	681a      	ldr	r2, [r3, #0]
 8007f1c:	2380      	movs	r3, #128	; 0x80
 8007f1e:	009b      	lsls	r3, r3, #2
 8007f20:	4013      	ands	r3, r2
 8007f22:	d005      	beq.n	8007f30 <HAL_RCC_OscConfig+0x29c>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	699b      	ldr	r3, [r3, #24]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d101      	bne.n	8007f30 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	e227      	b.n	8008380 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007f30:	4b26      	ldr	r3, [pc, #152]	; (8007fcc <HAL_RCC_OscConfig+0x338>)
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	4a2c      	ldr	r2, [pc, #176]	; (8007fe8 <HAL_RCC_OscConfig+0x354>)
 8007f36:	4013      	ands	r3, r2
 8007f38:	0019      	movs	r1, r3
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6a1a      	ldr	r2, [r3, #32]
 8007f3e:	4b23      	ldr	r3, [pc, #140]	; (8007fcc <HAL_RCC_OscConfig+0x338>)
 8007f40:	430a      	orrs	r2, r1
 8007f42:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007f44:	4b21      	ldr	r3, [pc, #132]	; (8007fcc <HAL_RCC_OscConfig+0x338>)
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	021b      	lsls	r3, r3, #8
 8007f4a:	0a19      	lsrs	r1, r3, #8
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	69db      	ldr	r3, [r3, #28]
 8007f50:	061a      	lsls	r2, r3, #24
 8007f52:	4b1e      	ldr	r3, [pc, #120]	; (8007fcc <HAL_RCC_OscConfig+0x338>)
 8007f54:	430a      	orrs	r2, r1
 8007f56:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6a1b      	ldr	r3, [r3, #32]
 8007f5c:	0b5b      	lsrs	r3, r3, #13
 8007f5e:	3301      	adds	r3, #1
 8007f60:	2280      	movs	r2, #128	; 0x80
 8007f62:	0212      	lsls	r2, r2, #8
 8007f64:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8007f66:	4b19      	ldr	r3, [pc, #100]	; (8007fcc <HAL_RCC_OscConfig+0x338>)
 8007f68:	68db      	ldr	r3, [r3, #12]
 8007f6a:	091b      	lsrs	r3, r3, #4
 8007f6c:	210f      	movs	r1, #15
 8007f6e:	400b      	ands	r3, r1
 8007f70:	491a      	ldr	r1, [pc, #104]	; (8007fdc <HAL_RCC_OscConfig+0x348>)
 8007f72:	5ccb      	ldrb	r3, [r1, r3]
 8007f74:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8007f76:	4b1a      	ldr	r3, [pc, #104]	; (8007fe0 <HAL_RCC_OscConfig+0x34c>)
 8007f78:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8007f7a:	4b1a      	ldr	r3, [pc, #104]	; (8007fe4 <HAL_RCC_OscConfig+0x350>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	2513      	movs	r5, #19
 8007f80:	197c      	adds	r4, r7, r5
 8007f82:	0018      	movs	r0, r3
 8007f84:	f7fd fea0 	bl	8005cc8 <HAL_InitTick>
 8007f88:	0003      	movs	r3, r0
 8007f8a:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8007f8c:	197b      	adds	r3, r7, r5
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d060      	beq.n	8008056 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8007f94:	197b      	adds	r3, r7, r5
 8007f96:	781b      	ldrb	r3, [r3, #0]
 8007f98:	e1f2      	b.n	8008380 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	699b      	ldr	r3, [r3, #24]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d03f      	beq.n	8008022 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007fa2:	4b0a      	ldr	r3, [pc, #40]	; (8007fcc <HAL_RCC_OscConfig+0x338>)
 8007fa4:	681a      	ldr	r2, [r3, #0]
 8007fa6:	4b09      	ldr	r3, [pc, #36]	; (8007fcc <HAL_RCC_OscConfig+0x338>)
 8007fa8:	2180      	movs	r1, #128	; 0x80
 8007faa:	0049      	lsls	r1, r1, #1
 8007fac:	430a      	orrs	r2, r1
 8007fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007fb0:	f7fd fed0 	bl	8005d54 <HAL_GetTick>
 8007fb4:	0003      	movs	r3, r0
 8007fb6:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8007fb8:	e018      	b.n	8007fec <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007fba:	f7fd fecb 	bl	8005d54 <HAL_GetTick>
 8007fbe:	0002      	movs	r2, r0
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	1ad3      	subs	r3, r2, r3
 8007fc4:	2b02      	cmp	r3, #2
 8007fc6:	d911      	bls.n	8007fec <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8007fc8:	2303      	movs	r3, #3
 8007fca:	e1d9      	b.n	8008380 <HAL_RCC_OscConfig+0x6ec>
 8007fcc:	40021000 	.word	0x40021000
 8007fd0:	fffeffff 	.word	0xfffeffff
 8007fd4:	fffbffff 	.word	0xfffbffff
 8007fd8:	ffffe0ff 	.word	0xffffe0ff
 8007fdc:	0800fdb0 	.word	0x0800fdb0
 8007fe0:	200000dc 	.word	0x200000dc
 8007fe4:	200000e0 	.word	0x200000e0
 8007fe8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8007fec:	4bc9      	ldr	r3, [pc, #804]	; (8008314 <HAL_RCC_OscConfig+0x680>)
 8007fee:	681a      	ldr	r2, [r3, #0]
 8007ff0:	2380      	movs	r3, #128	; 0x80
 8007ff2:	009b      	lsls	r3, r3, #2
 8007ff4:	4013      	ands	r3, r2
 8007ff6:	d0e0      	beq.n	8007fba <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007ff8:	4bc6      	ldr	r3, [pc, #792]	; (8008314 <HAL_RCC_OscConfig+0x680>)
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	4ac6      	ldr	r2, [pc, #792]	; (8008318 <HAL_RCC_OscConfig+0x684>)
 8007ffe:	4013      	ands	r3, r2
 8008000:	0019      	movs	r1, r3
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6a1a      	ldr	r2, [r3, #32]
 8008006:	4bc3      	ldr	r3, [pc, #780]	; (8008314 <HAL_RCC_OscConfig+0x680>)
 8008008:	430a      	orrs	r2, r1
 800800a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800800c:	4bc1      	ldr	r3, [pc, #772]	; (8008314 <HAL_RCC_OscConfig+0x680>)
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	021b      	lsls	r3, r3, #8
 8008012:	0a19      	lsrs	r1, r3, #8
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	69db      	ldr	r3, [r3, #28]
 8008018:	061a      	lsls	r2, r3, #24
 800801a:	4bbe      	ldr	r3, [pc, #760]	; (8008314 <HAL_RCC_OscConfig+0x680>)
 800801c:	430a      	orrs	r2, r1
 800801e:	605a      	str	r2, [r3, #4]
 8008020:	e019      	b.n	8008056 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008022:	4bbc      	ldr	r3, [pc, #752]	; (8008314 <HAL_RCC_OscConfig+0x680>)
 8008024:	681a      	ldr	r2, [r3, #0]
 8008026:	4bbb      	ldr	r3, [pc, #748]	; (8008314 <HAL_RCC_OscConfig+0x680>)
 8008028:	49bc      	ldr	r1, [pc, #752]	; (800831c <HAL_RCC_OscConfig+0x688>)
 800802a:	400a      	ands	r2, r1
 800802c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800802e:	f7fd fe91 	bl	8005d54 <HAL_GetTick>
 8008032:	0003      	movs	r3, r0
 8008034:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8008036:	e008      	b.n	800804a <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008038:	f7fd fe8c 	bl	8005d54 <HAL_GetTick>
 800803c:	0002      	movs	r2, r0
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	1ad3      	subs	r3, r2, r3
 8008042:	2b02      	cmp	r3, #2
 8008044:	d901      	bls.n	800804a <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8008046:	2303      	movs	r3, #3
 8008048:	e19a      	b.n	8008380 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800804a:	4bb2      	ldr	r3, [pc, #712]	; (8008314 <HAL_RCC_OscConfig+0x680>)
 800804c:	681a      	ldr	r2, [r3, #0]
 800804e:	2380      	movs	r3, #128	; 0x80
 8008050:	009b      	lsls	r3, r3, #2
 8008052:	4013      	ands	r3, r2
 8008054:	d1f0      	bne.n	8008038 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	2208      	movs	r2, #8
 800805c:	4013      	ands	r3, r2
 800805e:	d036      	beq.n	80080ce <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	695b      	ldr	r3, [r3, #20]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d019      	beq.n	800809c <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008068:	4baa      	ldr	r3, [pc, #680]	; (8008314 <HAL_RCC_OscConfig+0x680>)
 800806a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800806c:	4ba9      	ldr	r3, [pc, #676]	; (8008314 <HAL_RCC_OscConfig+0x680>)
 800806e:	2101      	movs	r1, #1
 8008070:	430a      	orrs	r2, r1
 8008072:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008074:	f7fd fe6e 	bl	8005d54 <HAL_GetTick>
 8008078:	0003      	movs	r3, r0
 800807a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800807c:	e008      	b.n	8008090 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800807e:	f7fd fe69 	bl	8005d54 <HAL_GetTick>
 8008082:	0002      	movs	r2, r0
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	1ad3      	subs	r3, r2, r3
 8008088:	2b02      	cmp	r3, #2
 800808a:	d901      	bls.n	8008090 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 800808c:	2303      	movs	r3, #3
 800808e:	e177      	b.n	8008380 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008090:	4ba0      	ldr	r3, [pc, #640]	; (8008314 <HAL_RCC_OscConfig+0x680>)
 8008092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008094:	2202      	movs	r2, #2
 8008096:	4013      	ands	r3, r2
 8008098:	d0f1      	beq.n	800807e <HAL_RCC_OscConfig+0x3ea>
 800809a:	e018      	b.n	80080ce <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800809c:	4b9d      	ldr	r3, [pc, #628]	; (8008314 <HAL_RCC_OscConfig+0x680>)
 800809e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80080a0:	4b9c      	ldr	r3, [pc, #624]	; (8008314 <HAL_RCC_OscConfig+0x680>)
 80080a2:	2101      	movs	r1, #1
 80080a4:	438a      	bics	r2, r1
 80080a6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80080a8:	f7fd fe54 	bl	8005d54 <HAL_GetTick>
 80080ac:	0003      	movs	r3, r0
 80080ae:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80080b0:	e008      	b.n	80080c4 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80080b2:	f7fd fe4f 	bl	8005d54 <HAL_GetTick>
 80080b6:	0002      	movs	r2, r0
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	1ad3      	subs	r3, r2, r3
 80080bc:	2b02      	cmp	r3, #2
 80080be:	d901      	bls.n	80080c4 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80080c0:	2303      	movs	r3, #3
 80080c2:	e15d      	b.n	8008380 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80080c4:	4b93      	ldr	r3, [pc, #588]	; (8008314 <HAL_RCC_OscConfig+0x680>)
 80080c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080c8:	2202      	movs	r2, #2
 80080ca:	4013      	ands	r3, r2
 80080cc:	d1f1      	bne.n	80080b2 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	2204      	movs	r2, #4
 80080d4:	4013      	ands	r3, r2
 80080d6:	d100      	bne.n	80080da <HAL_RCC_OscConfig+0x446>
 80080d8:	e0ae      	b.n	8008238 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80080da:	2023      	movs	r0, #35	; 0x23
 80080dc:	183b      	adds	r3, r7, r0
 80080de:	2200      	movs	r2, #0
 80080e0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80080e2:	4b8c      	ldr	r3, [pc, #560]	; (8008314 <HAL_RCC_OscConfig+0x680>)
 80080e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080e6:	2380      	movs	r3, #128	; 0x80
 80080e8:	055b      	lsls	r3, r3, #21
 80080ea:	4013      	ands	r3, r2
 80080ec:	d109      	bne.n	8008102 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80080ee:	4b89      	ldr	r3, [pc, #548]	; (8008314 <HAL_RCC_OscConfig+0x680>)
 80080f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080f2:	4b88      	ldr	r3, [pc, #544]	; (8008314 <HAL_RCC_OscConfig+0x680>)
 80080f4:	2180      	movs	r1, #128	; 0x80
 80080f6:	0549      	lsls	r1, r1, #21
 80080f8:	430a      	orrs	r2, r1
 80080fa:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80080fc:	183b      	adds	r3, r7, r0
 80080fe:	2201      	movs	r2, #1
 8008100:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008102:	4b87      	ldr	r3, [pc, #540]	; (8008320 <HAL_RCC_OscConfig+0x68c>)
 8008104:	681a      	ldr	r2, [r3, #0]
 8008106:	2380      	movs	r3, #128	; 0x80
 8008108:	005b      	lsls	r3, r3, #1
 800810a:	4013      	ands	r3, r2
 800810c:	d11a      	bne.n	8008144 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800810e:	4b84      	ldr	r3, [pc, #528]	; (8008320 <HAL_RCC_OscConfig+0x68c>)
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	4b83      	ldr	r3, [pc, #524]	; (8008320 <HAL_RCC_OscConfig+0x68c>)
 8008114:	2180      	movs	r1, #128	; 0x80
 8008116:	0049      	lsls	r1, r1, #1
 8008118:	430a      	orrs	r2, r1
 800811a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800811c:	f7fd fe1a 	bl	8005d54 <HAL_GetTick>
 8008120:	0003      	movs	r3, r0
 8008122:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008124:	e008      	b.n	8008138 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008126:	f7fd fe15 	bl	8005d54 <HAL_GetTick>
 800812a:	0002      	movs	r2, r0
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	1ad3      	subs	r3, r2, r3
 8008130:	2b64      	cmp	r3, #100	; 0x64
 8008132:	d901      	bls.n	8008138 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8008134:	2303      	movs	r3, #3
 8008136:	e123      	b.n	8008380 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008138:	4b79      	ldr	r3, [pc, #484]	; (8008320 <HAL_RCC_OscConfig+0x68c>)
 800813a:	681a      	ldr	r2, [r3, #0]
 800813c:	2380      	movs	r3, #128	; 0x80
 800813e:	005b      	lsls	r3, r3, #1
 8008140:	4013      	ands	r3, r2
 8008142:	d0f0      	beq.n	8008126 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	689a      	ldr	r2, [r3, #8]
 8008148:	2380      	movs	r3, #128	; 0x80
 800814a:	005b      	lsls	r3, r3, #1
 800814c:	429a      	cmp	r2, r3
 800814e:	d107      	bne.n	8008160 <HAL_RCC_OscConfig+0x4cc>
 8008150:	4b70      	ldr	r3, [pc, #448]	; (8008314 <HAL_RCC_OscConfig+0x680>)
 8008152:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008154:	4b6f      	ldr	r3, [pc, #444]	; (8008314 <HAL_RCC_OscConfig+0x680>)
 8008156:	2180      	movs	r1, #128	; 0x80
 8008158:	0049      	lsls	r1, r1, #1
 800815a:	430a      	orrs	r2, r1
 800815c:	651a      	str	r2, [r3, #80]	; 0x50
 800815e:	e031      	b.n	80081c4 <HAL_RCC_OscConfig+0x530>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d10c      	bne.n	8008182 <HAL_RCC_OscConfig+0x4ee>
 8008168:	4b6a      	ldr	r3, [pc, #424]	; (8008314 <HAL_RCC_OscConfig+0x680>)
 800816a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800816c:	4b69      	ldr	r3, [pc, #420]	; (8008314 <HAL_RCC_OscConfig+0x680>)
 800816e:	496b      	ldr	r1, [pc, #428]	; (800831c <HAL_RCC_OscConfig+0x688>)
 8008170:	400a      	ands	r2, r1
 8008172:	651a      	str	r2, [r3, #80]	; 0x50
 8008174:	4b67      	ldr	r3, [pc, #412]	; (8008314 <HAL_RCC_OscConfig+0x680>)
 8008176:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008178:	4b66      	ldr	r3, [pc, #408]	; (8008314 <HAL_RCC_OscConfig+0x680>)
 800817a:	496a      	ldr	r1, [pc, #424]	; (8008324 <HAL_RCC_OscConfig+0x690>)
 800817c:	400a      	ands	r2, r1
 800817e:	651a      	str	r2, [r3, #80]	; 0x50
 8008180:	e020      	b.n	80081c4 <HAL_RCC_OscConfig+0x530>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	689a      	ldr	r2, [r3, #8]
 8008186:	23a0      	movs	r3, #160	; 0xa0
 8008188:	00db      	lsls	r3, r3, #3
 800818a:	429a      	cmp	r2, r3
 800818c:	d10e      	bne.n	80081ac <HAL_RCC_OscConfig+0x518>
 800818e:	4b61      	ldr	r3, [pc, #388]	; (8008314 <HAL_RCC_OscConfig+0x680>)
 8008190:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008192:	4b60      	ldr	r3, [pc, #384]	; (8008314 <HAL_RCC_OscConfig+0x680>)
 8008194:	2180      	movs	r1, #128	; 0x80
 8008196:	00c9      	lsls	r1, r1, #3
 8008198:	430a      	orrs	r2, r1
 800819a:	651a      	str	r2, [r3, #80]	; 0x50
 800819c:	4b5d      	ldr	r3, [pc, #372]	; (8008314 <HAL_RCC_OscConfig+0x680>)
 800819e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80081a0:	4b5c      	ldr	r3, [pc, #368]	; (8008314 <HAL_RCC_OscConfig+0x680>)
 80081a2:	2180      	movs	r1, #128	; 0x80
 80081a4:	0049      	lsls	r1, r1, #1
 80081a6:	430a      	orrs	r2, r1
 80081a8:	651a      	str	r2, [r3, #80]	; 0x50
 80081aa:	e00b      	b.n	80081c4 <HAL_RCC_OscConfig+0x530>
 80081ac:	4b59      	ldr	r3, [pc, #356]	; (8008314 <HAL_RCC_OscConfig+0x680>)
 80081ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80081b0:	4b58      	ldr	r3, [pc, #352]	; (8008314 <HAL_RCC_OscConfig+0x680>)
 80081b2:	495a      	ldr	r1, [pc, #360]	; (800831c <HAL_RCC_OscConfig+0x688>)
 80081b4:	400a      	ands	r2, r1
 80081b6:	651a      	str	r2, [r3, #80]	; 0x50
 80081b8:	4b56      	ldr	r3, [pc, #344]	; (8008314 <HAL_RCC_OscConfig+0x680>)
 80081ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80081bc:	4b55      	ldr	r3, [pc, #340]	; (8008314 <HAL_RCC_OscConfig+0x680>)
 80081be:	4959      	ldr	r1, [pc, #356]	; (8008324 <HAL_RCC_OscConfig+0x690>)
 80081c0:	400a      	ands	r2, r1
 80081c2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	689b      	ldr	r3, [r3, #8]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d015      	beq.n	80081f8 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80081cc:	f7fd fdc2 	bl	8005d54 <HAL_GetTick>
 80081d0:	0003      	movs	r3, r0
 80081d2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80081d4:	e009      	b.n	80081ea <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80081d6:	f7fd fdbd 	bl	8005d54 <HAL_GetTick>
 80081da:	0002      	movs	r2, r0
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	1ad3      	subs	r3, r2, r3
 80081e0:	4a51      	ldr	r2, [pc, #324]	; (8008328 <HAL_RCC_OscConfig+0x694>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d901      	bls.n	80081ea <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 80081e6:	2303      	movs	r3, #3
 80081e8:	e0ca      	b.n	8008380 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80081ea:	4b4a      	ldr	r3, [pc, #296]	; (8008314 <HAL_RCC_OscConfig+0x680>)
 80081ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80081ee:	2380      	movs	r3, #128	; 0x80
 80081f0:	009b      	lsls	r3, r3, #2
 80081f2:	4013      	ands	r3, r2
 80081f4:	d0ef      	beq.n	80081d6 <HAL_RCC_OscConfig+0x542>
 80081f6:	e014      	b.n	8008222 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80081f8:	f7fd fdac 	bl	8005d54 <HAL_GetTick>
 80081fc:	0003      	movs	r3, r0
 80081fe:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008200:	e009      	b.n	8008216 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008202:	f7fd fda7 	bl	8005d54 <HAL_GetTick>
 8008206:	0002      	movs	r2, r0
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	1ad3      	subs	r3, r2, r3
 800820c:	4a46      	ldr	r2, [pc, #280]	; (8008328 <HAL_RCC_OscConfig+0x694>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d901      	bls.n	8008216 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8008212:	2303      	movs	r3, #3
 8008214:	e0b4      	b.n	8008380 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008216:	4b3f      	ldr	r3, [pc, #252]	; (8008314 <HAL_RCC_OscConfig+0x680>)
 8008218:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800821a:	2380      	movs	r3, #128	; 0x80
 800821c:	009b      	lsls	r3, r3, #2
 800821e:	4013      	ands	r3, r2
 8008220:	d1ef      	bne.n	8008202 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008222:	2323      	movs	r3, #35	; 0x23
 8008224:	18fb      	adds	r3, r7, r3
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	2b01      	cmp	r3, #1
 800822a:	d105      	bne.n	8008238 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800822c:	4b39      	ldr	r3, [pc, #228]	; (8008314 <HAL_RCC_OscConfig+0x680>)
 800822e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008230:	4b38      	ldr	r3, [pc, #224]	; (8008314 <HAL_RCC_OscConfig+0x680>)
 8008232:	493e      	ldr	r1, [pc, #248]	; (800832c <HAL_RCC_OscConfig+0x698>)
 8008234:	400a      	ands	r2, r1
 8008236:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800823c:	2b00      	cmp	r3, #0
 800823e:	d100      	bne.n	8008242 <HAL_RCC_OscConfig+0x5ae>
 8008240:	e09d      	b.n	800837e <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008242:	69fb      	ldr	r3, [r7, #28]
 8008244:	2b0c      	cmp	r3, #12
 8008246:	d100      	bne.n	800824a <HAL_RCC_OscConfig+0x5b6>
 8008248:	e076      	b.n	8008338 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800824e:	2b02      	cmp	r3, #2
 8008250:	d145      	bne.n	80082de <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008252:	4b30      	ldr	r3, [pc, #192]	; (8008314 <HAL_RCC_OscConfig+0x680>)
 8008254:	681a      	ldr	r2, [r3, #0]
 8008256:	4b2f      	ldr	r3, [pc, #188]	; (8008314 <HAL_RCC_OscConfig+0x680>)
 8008258:	4935      	ldr	r1, [pc, #212]	; (8008330 <HAL_RCC_OscConfig+0x69c>)
 800825a:	400a      	ands	r2, r1
 800825c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800825e:	f7fd fd79 	bl	8005d54 <HAL_GetTick>
 8008262:	0003      	movs	r3, r0
 8008264:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8008266:	e008      	b.n	800827a <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008268:	f7fd fd74 	bl	8005d54 <HAL_GetTick>
 800826c:	0002      	movs	r2, r0
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	1ad3      	subs	r3, r2, r3
 8008272:	2b02      	cmp	r3, #2
 8008274:	d901      	bls.n	800827a <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8008276:	2303      	movs	r3, #3
 8008278:	e082      	b.n	8008380 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800827a:	4b26      	ldr	r3, [pc, #152]	; (8008314 <HAL_RCC_OscConfig+0x680>)
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	2380      	movs	r3, #128	; 0x80
 8008280:	049b      	lsls	r3, r3, #18
 8008282:	4013      	ands	r3, r2
 8008284:	d1f0      	bne.n	8008268 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008286:	4b23      	ldr	r3, [pc, #140]	; (8008314 <HAL_RCC_OscConfig+0x680>)
 8008288:	68db      	ldr	r3, [r3, #12]
 800828a:	4a2a      	ldr	r2, [pc, #168]	; (8008334 <HAL_RCC_OscConfig+0x6a0>)
 800828c:	4013      	ands	r3, r2
 800828e:	0019      	movs	r1, r3
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008298:	431a      	orrs	r2, r3
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800829e:	431a      	orrs	r2, r3
 80082a0:	4b1c      	ldr	r3, [pc, #112]	; (8008314 <HAL_RCC_OscConfig+0x680>)
 80082a2:	430a      	orrs	r2, r1
 80082a4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80082a6:	4b1b      	ldr	r3, [pc, #108]	; (8008314 <HAL_RCC_OscConfig+0x680>)
 80082a8:	681a      	ldr	r2, [r3, #0]
 80082aa:	4b1a      	ldr	r3, [pc, #104]	; (8008314 <HAL_RCC_OscConfig+0x680>)
 80082ac:	2180      	movs	r1, #128	; 0x80
 80082ae:	0449      	lsls	r1, r1, #17
 80082b0:	430a      	orrs	r2, r1
 80082b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082b4:	f7fd fd4e 	bl	8005d54 <HAL_GetTick>
 80082b8:	0003      	movs	r3, r0
 80082ba:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80082bc:	e008      	b.n	80082d0 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80082be:	f7fd fd49 	bl	8005d54 <HAL_GetTick>
 80082c2:	0002      	movs	r2, r0
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	1ad3      	subs	r3, r2, r3
 80082c8:	2b02      	cmp	r3, #2
 80082ca:	d901      	bls.n	80082d0 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80082cc:	2303      	movs	r3, #3
 80082ce:	e057      	b.n	8008380 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80082d0:	4b10      	ldr	r3, [pc, #64]	; (8008314 <HAL_RCC_OscConfig+0x680>)
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	2380      	movs	r3, #128	; 0x80
 80082d6:	049b      	lsls	r3, r3, #18
 80082d8:	4013      	ands	r3, r2
 80082da:	d0f0      	beq.n	80082be <HAL_RCC_OscConfig+0x62a>
 80082dc:	e04f      	b.n	800837e <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082de:	4b0d      	ldr	r3, [pc, #52]	; (8008314 <HAL_RCC_OscConfig+0x680>)
 80082e0:	681a      	ldr	r2, [r3, #0]
 80082e2:	4b0c      	ldr	r3, [pc, #48]	; (8008314 <HAL_RCC_OscConfig+0x680>)
 80082e4:	4912      	ldr	r1, [pc, #72]	; (8008330 <HAL_RCC_OscConfig+0x69c>)
 80082e6:	400a      	ands	r2, r1
 80082e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082ea:	f7fd fd33 	bl	8005d54 <HAL_GetTick>
 80082ee:	0003      	movs	r3, r0
 80082f0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80082f2:	e008      	b.n	8008306 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80082f4:	f7fd fd2e 	bl	8005d54 <HAL_GetTick>
 80082f8:	0002      	movs	r2, r0
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	1ad3      	subs	r3, r2, r3
 80082fe:	2b02      	cmp	r3, #2
 8008300:	d901      	bls.n	8008306 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8008302:	2303      	movs	r3, #3
 8008304:	e03c      	b.n	8008380 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8008306:	4b03      	ldr	r3, [pc, #12]	; (8008314 <HAL_RCC_OscConfig+0x680>)
 8008308:	681a      	ldr	r2, [r3, #0]
 800830a:	2380      	movs	r3, #128	; 0x80
 800830c:	049b      	lsls	r3, r3, #18
 800830e:	4013      	ands	r3, r2
 8008310:	d1f0      	bne.n	80082f4 <HAL_RCC_OscConfig+0x660>
 8008312:	e034      	b.n	800837e <HAL_RCC_OscConfig+0x6ea>
 8008314:	40021000 	.word	0x40021000
 8008318:	ffff1fff 	.word	0xffff1fff
 800831c:	fffffeff 	.word	0xfffffeff
 8008320:	40007000 	.word	0x40007000
 8008324:	fffffbff 	.word	0xfffffbff
 8008328:	00001388 	.word	0x00001388
 800832c:	efffffff 	.word	0xefffffff
 8008330:	feffffff 	.word	0xfeffffff
 8008334:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800833c:	2b01      	cmp	r3, #1
 800833e:	d101      	bne.n	8008344 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8008340:	2301      	movs	r3, #1
 8008342:	e01d      	b.n	8008380 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008344:	4b10      	ldr	r3, [pc, #64]	; (8008388 <HAL_RCC_OscConfig+0x6f4>)
 8008346:	68db      	ldr	r3, [r3, #12]
 8008348:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800834a:	69ba      	ldr	r2, [r7, #24]
 800834c:	2380      	movs	r3, #128	; 0x80
 800834e:	025b      	lsls	r3, r3, #9
 8008350:	401a      	ands	r2, r3
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008356:	429a      	cmp	r2, r3
 8008358:	d10f      	bne.n	800837a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800835a:	69ba      	ldr	r2, [r7, #24]
 800835c:	23f0      	movs	r3, #240	; 0xf0
 800835e:	039b      	lsls	r3, r3, #14
 8008360:	401a      	ands	r2, r3
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008366:	429a      	cmp	r2, r3
 8008368:	d107      	bne.n	800837a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800836a:	69ba      	ldr	r2, [r7, #24]
 800836c:	23c0      	movs	r3, #192	; 0xc0
 800836e:	041b      	lsls	r3, r3, #16
 8008370:	401a      	ands	r2, r3
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8008376:	429a      	cmp	r2, r3
 8008378:	d001      	beq.n	800837e <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 800837a:	2301      	movs	r3, #1
 800837c:	e000      	b.n	8008380 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 800837e:	2300      	movs	r3, #0
}
 8008380:	0018      	movs	r0, r3
 8008382:	46bd      	mov	sp, r7
 8008384:	b00a      	add	sp, #40	; 0x28
 8008386:	bdb0      	pop	{r4, r5, r7, pc}
 8008388:	40021000 	.word	0x40021000

0800838c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800838c:	b5b0      	push	{r4, r5, r7, lr}
 800838e:	b084      	sub	sp, #16
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d101      	bne.n	80083a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800839c:	2301      	movs	r3, #1
 800839e:	e128      	b.n	80085f2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80083a0:	4b96      	ldr	r3, [pc, #600]	; (80085fc <HAL_RCC_ClockConfig+0x270>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	2201      	movs	r2, #1
 80083a6:	4013      	ands	r3, r2
 80083a8:	683a      	ldr	r2, [r7, #0]
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d91e      	bls.n	80083ec <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083ae:	4b93      	ldr	r3, [pc, #588]	; (80085fc <HAL_RCC_ClockConfig+0x270>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	2201      	movs	r2, #1
 80083b4:	4393      	bics	r3, r2
 80083b6:	0019      	movs	r1, r3
 80083b8:	4b90      	ldr	r3, [pc, #576]	; (80085fc <HAL_RCC_ClockConfig+0x270>)
 80083ba:	683a      	ldr	r2, [r7, #0]
 80083bc:	430a      	orrs	r2, r1
 80083be:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80083c0:	f7fd fcc8 	bl	8005d54 <HAL_GetTick>
 80083c4:	0003      	movs	r3, r0
 80083c6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80083c8:	e009      	b.n	80083de <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80083ca:	f7fd fcc3 	bl	8005d54 <HAL_GetTick>
 80083ce:	0002      	movs	r2, r0
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	1ad3      	subs	r3, r2, r3
 80083d4:	4a8a      	ldr	r2, [pc, #552]	; (8008600 <HAL_RCC_ClockConfig+0x274>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d901      	bls.n	80083de <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80083da:	2303      	movs	r3, #3
 80083dc:	e109      	b.n	80085f2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80083de:	4b87      	ldr	r3, [pc, #540]	; (80085fc <HAL_RCC_ClockConfig+0x270>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	2201      	movs	r2, #1
 80083e4:	4013      	ands	r3, r2
 80083e6:	683a      	ldr	r2, [r7, #0]
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d1ee      	bne.n	80083ca <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	2202      	movs	r2, #2
 80083f2:	4013      	ands	r3, r2
 80083f4:	d009      	beq.n	800840a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80083f6:	4b83      	ldr	r3, [pc, #524]	; (8008604 <HAL_RCC_ClockConfig+0x278>)
 80083f8:	68db      	ldr	r3, [r3, #12]
 80083fa:	22f0      	movs	r2, #240	; 0xf0
 80083fc:	4393      	bics	r3, r2
 80083fe:	0019      	movs	r1, r3
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	689a      	ldr	r2, [r3, #8]
 8008404:	4b7f      	ldr	r3, [pc, #508]	; (8008604 <HAL_RCC_ClockConfig+0x278>)
 8008406:	430a      	orrs	r2, r1
 8008408:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	2201      	movs	r2, #1
 8008410:	4013      	ands	r3, r2
 8008412:	d100      	bne.n	8008416 <HAL_RCC_ClockConfig+0x8a>
 8008414:	e089      	b.n	800852a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	2b02      	cmp	r3, #2
 800841c:	d107      	bne.n	800842e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800841e:	4b79      	ldr	r3, [pc, #484]	; (8008604 <HAL_RCC_ClockConfig+0x278>)
 8008420:	681a      	ldr	r2, [r3, #0]
 8008422:	2380      	movs	r3, #128	; 0x80
 8008424:	029b      	lsls	r3, r3, #10
 8008426:	4013      	ands	r3, r2
 8008428:	d120      	bne.n	800846c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800842a:	2301      	movs	r3, #1
 800842c:	e0e1      	b.n	80085f2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	2b03      	cmp	r3, #3
 8008434:	d107      	bne.n	8008446 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008436:	4b73      	ldr	r3, [pc, #460]	; (8008604 <HAL_RCC_ClockConfig+0x278>)
 8008438:	681a      	ldr	r2, [r3, #0]
 800843a:	2380      	movs	r3, #128	; 0x80
 800843c:	049b      	lsls	r3, r3, #18
 800843e:	4013      	ands	r3, r2
 8008440:	d114      	bne.n	800846c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8008442:	2301      	movs	r3, #1
 8008444:	e0d5      	b.n	80085f2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	2b01      	cmp	r3, #1
 800844c:	d106      	bne.n	800845c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800844e:	4b6d      	ldr	r3, [pc, #436]	; (8008604 <HAL_RCC_ClockConfig+0x278>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	2204      	movs	r2, #4
 8008454:	4013      	ands	r3, r2
 8008456:	d109      	bne.n	800846c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8008458:	2301      	movs	r3, #1
 800845a:	e0ca      	b.n	80085f2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800845c:	4b69      	ldr	r3, [pc, #420]	; (8008604 <HAL_RCC_ClockConfig+0x278>)
 800845e:	681a      	ldr	r2, [r3, #0]
 8008460:	2380      	movs	r3, #128	; 0x80
 8008462:	009b      	lsls	r3, r3, #2
 8008464:	4013      	ands	r3, r2
 8008466:	d101      	bne.n	800846c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8008468:	2301      	movs	r3, #1
 800846a:	e0c2      	b.n	80085f2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800846c:	4b65      	ldr	r3, [pc, #404]	; (8008604 <HAL_RCC_ClockConfig+0x278>)
 800846e:	68db      	ldr	r3, [r3, #12]
 8008470:	2203      	movs	r2, #3
 8008472:	4393      	bics	r3, r2
 8008474:	0019      	movs	r1, r3
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	685a      	ldr	r2, [r3, #4]
 800847a:	4b62      	ldr	r3, [pc, #392]	; (8008604 <HAL_RCC_ClockConfig+0x278>)
 800847c:	430a      	orrs	r2, r1
 800847e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008480:	f7fd fc68 	bl	8005d54 <HAL_GetTick>
 8008484:	0003      	movs	r3, r0
 8008486:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	2b02      	cmp	r3, #2
 800848e:	d111      	bne.n	80084b4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008490:	e009      	b.n	80084a6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008492:	f7fd fc5f 	bl	8005d54 <HAL_GetTick>
 8008496:	0002      	movs	r2, r0
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	1ad3      	subs	r3, r2, r3
 800849c:	4a58      	ldr	r2, [pc, #352]	; (8008600 <HAL_RCC_ClockConfig+0x274>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d901      	bls.n	80084a6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80084a2:	2303      	movs	r3, #3
 80084a4:	e0a5      	b.n	80085f2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80084a6:	4b57      	ldr	r3, [pc, #348]	; (8008604 <HAL_RCC_ClockConfig+0x278>)
 80084a8:	68db      	ldr	r3, [r3, #12]
 80084aa:	220c      	movs	r2, #12
 80084ac:	4013      	ands	r3, r2
 80084ae:	2b08      	cmp	r3, #8
 80084b0:	d1ef      	bne.n	8008492 <HAL_RCC_ClockConfig+0x106>
 80084b2:	e03a      	b.n	800852a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	2b03      	cmp	r3, #3
 80084ba:	d111      	bne.n	80084e0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80084bc:	e009      	b.n	80084d2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80084be:	f7fd fc49 	bl	8005d54 <HAL_GetTick>
 80084c2:	0002      	movs	r2, r0
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	1ad3      	subs	r3, r2, r3
 80084c8:	4a4d      	ldr	r2, [pc, #308]	; (8008600 <HAL_RCC_ClockConfig+0x274>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d901      	bls.n	80084d2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80084ce:	2303      	movs	r3, #3
 80084d0:	e08f      	b.n	80085f2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80084d2:	4b4c      	ldr	r3, [pc, #304]	; (8008604 <HAL_RCC_ClockConfig+0x278>)
 80084d4:	68db      	ldr	r3, [r3, #12]
 80084d6:	220c      	movs	r2, #12
 80084d8:	4013      	ands	r3, r2
 80084da:	2b0c      	cmp	r3, #12
 80084dc:	d1ef      	bne.n	80084be <HAL_RCC_ClockConfig+0x132>
 80084de:	e024      	b.n	800852a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d11b      	bne.n	8008520 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80084e8:	e009      	b.n	80084fe <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80084ea:	f7fd fc33 	bl	8005d54 <HAL_GetTick>
 80084ee:	0002      	movs	r2, r0
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	1ad3      	subs	r3, r2, r3
 80084f4:	4a42      	ldr	r2, [pc, #264]	; (8008600 <HAL_RCC_ClockConfig+0x274>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d901      	bls.n	80084fe <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80084fa:	2303      	movs	r3, #3
 80084fc:	e079      	b.n	80085f2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80084fe:	4b41      	ldr	r3, [pc, #260]	; (8008604 <HAL_RCC_ClockConfig+0x278>)
 8008500:	68db      	ldr	r3, [r3, #12]
 8008502:	220c      	movs	r2, #12
 8008504:	4013      	ands	r3, r2
 8008506:	2b04      	cmp	r3, #4
 8008508:	d1ef      	bne.n	80084ea <HAL_RCC_ClockConfig+0x15e>
 800850a:	e00e      	b.n	800852a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800850c:	f7fd fc22 	bl	8005d54 <HAL_GetTick>
 8008510:	0002      	movs	r2, r0
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	1ad3      	subs	r3, r2, r3
 8008516:	4a3a      	ldr	r2, [pc, #232]	; (8008600 <HAL_RCC_ClockConfig+0x274>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d901      	bls.n	8008520 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800851c:	2303      	movs	r3, #3
 800851e:	e068      	b.n	80085f2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8008520:	4b38      	ldr	r3, [pc, #224]	; (8008604 <HAL_RCC_ClockConfig+0x278>)
 8008522:	68db      	ldr	r3, [r3, #12]
 8008524:	220c      	movs	r2, #12
 8008526:	4013      	ands	r3, r2
 8008528:	d1f0      	bne.n	800850c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800852a:	4b34      	ldr	r3, [pc, #208]	; (80085fc <HAL_RCC_ClockConfig+0x270>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	2201      	movs	r2, #1
 8008530:	4013      	ands	r3, r2
 8008532:	683a      	ldr	r2, [r7, #0]
 8008534:	429a      	cmp	r2, r3
 8008536:	d21e      	bcs.n	8008576 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008538:	4b30      	ldr	r3, [pc, #192]	; (80085fc <HAL_RCC_ClockConfig+0x270>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	2201      	movs	r2, #1
 800853e:	4393      	bics	r3, r2
 8008540:	0019      	movs	r1, r3
 8008542:	4b2e      	ldr	r3, [pc, #184]	; (80085fc <HAL_RCC_ClockConfig+0x270>)
 8008544:	683a      	ldr	r2, [r7, #0]
 8008546:	430a      	orrs	r2, r1
 8008548:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800854a:	f7fd fc03 	bl	8005d54 <HAL_GetTick>
 800854e:	0003      	movs	r3, r0
 8008550:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008552:	e009      	b.n	8008568 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008554:	f7fd fbfe 	bl	8005d54 <HAL_GetTick>
 8008558:	0002      	movs	r2, r0
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	1ad3      	subs	r3, r2, r3
 800855e:	4a28      	ldr	r2, [pc, #160]	; (8008600 <HAL_RCC_ClockConfig+0x274>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d901      	bls.n	8008568 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8008564:	2303      	movs	r3, #3
 8008566:	e044      	b.n	80085f2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008568:	4b24      	ldr	r3, [pc, #144]	; (80085fc <HAL_RCC_ClockConfig+0x270>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	2201      	movs	r2, #1
 800856e:	4013      	ands	r3, r2
 8008570:	683a      	ldr	r2, [r7, #0]
 8008572:	429a      	cmp	r2, r3
 8008574:	d1ee      	bne.n	8008554 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	2204      	movs	r2, #4
 800857c:	4013      	ands	r3, r2
 800857e:	d009      	beq.n	8008594 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008580:	4b20      	ldr	r3, [pc, #128]	; (8008604 <HAL_RCC_ClockConfig+0x278>)
 8008582:	68db      	ldr	r3, [r3, #12]
 8008584:	4a20      	ldr	r2, [pc, #128]	; (8008608 <HAL_RCC_ClockConfig+0x27c>)
 8008586:	4013      	ands	r3, r2
 8008588:	0019      	movs	r1, r3
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	68da      	ldr	r2, [r3, #12]
 800858e:	4b1d      	ldr	r3, [pc, #116]	; (8008604 <HAL_RCC_ClockConfig+0x278>)
 8008590:	430a      	orrs	r2, r1
 8008592:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	2208      	movs	r2, #8
 800859a:	4013      	ands	r3, r2
 800859c:	d00a      	beq.n	80085b4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800859e:	4b19      	ldr	r3, [pc, #100]	; (8008604 <HAL_RCC_ClockConfig+0x278>)
 80085a0:	68db      	ldr	r3, [r3, #12]
 80085a2:	4a1a      	ldr	r2, [pc, #104]	; (800860c <HAL_RCC_ClockConfig+0x280>)
 80085a4:	4013      	ands	r3, r2
 80085a6:	0019      	movs	r1, r3
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	691b      	ldr	r3, [r3, #16]
 80085ac:	00da      	lsls	r2, r3, #3
 80085ae:	4b15      	ldr	r3, [pc, #84]	; (8008604 <HAL_RCC_ClockConfig+0x278>)
 80085b0:	430a      	orrs	r2, r1
 80085b2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80085b4:	f000 f832 	bl	800861c <HAL_RCC_GetSysClockFreq>
 80085b8:	0001      	movs	r1, r0
 80085ba:	4b12      	ldr	r3, [pc, #72]	; (8008604 <HAL_RCC_ClockConfig+0x278>)
 80085bc:	68db      	ldr	r3, [r3, #12]
 80085be:	091b      	lsrs	r3, r3, #4
 80085c0:	220f      	movs	r2, #15
 80085c2:	4013      	ands	r3, r2
 80085c4:	4a12      	ldr	r2, [pc, #72]	; (8008610 <HAL_RCC_ClockConfig+0x284>)
 80085c6:	5cd3      	ldrb	r3, [r2, r3]
 80085c8:	000a      	movs	r2, r1
 80085ca:	40da      	lsrs	r2, r3
 80085cc:	4b11      	ldr	r3, [pc, #68]	; (8008614 <HAL_RCC_ClockConfig+0x288>)
 80085ce:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80085d0:	4b11      	ldr	r3, [pc, #68]	; (8008618 <HAL_RCC_ClockConfig+0x28c>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	250b      	movs	r5, #11
 80085d6:	197c      	adds	r4, r7, r5
 80085d8:	0018      	movs	r0, r3
 80085da:	f7fd fb75 	bl	8005cc8 <HAL_InitTick>
 80085de:	0003      	movs	r3, r0
 80085e0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80085e2:	197b      	adds	r3, r7, r5
 80085e4:	781b      	ldrb	r3, [r3, #0]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d002      	beq.n	80085f0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80085ea:	197b      	adds	r3, r7, r5
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	e000      	b.n	80085f2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80085f0:	2300      	movs	r3, #0
}
 80085f2:	0018      	movs	r0, r3
 80085f4:	46bd      	mov	sp, r7
 80085f6:	b004      	add	sp, #16
 80085f8:	bdb0      	pop	{r4, r5, r7, pc}
 80085fa:	46c0      	nop			; (mov r8, r8)
 80085fc:	40022000 	.word	0x40022000
 8008600:	00001388 	.word	0x00001388
 8008604:	40021000 	.word	0x40021000
 8008608:	fffff8ff 	.word	0xfffff8ff
 800860c:	ffffc7ff 	.word	0xffffc7ff
 8008610:	0800fdb0 	.word	0x0800fdb0
 8008614:	200000dc 	.word	0x200000dc
 8008618:	200000e0 	.word	0x200000e0

0800861c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800861c:	b5b0      	push	{r4, r5, r7, lr}
 800861e:	b08e      	sub	sp, #56	; 0x38
 8008620:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8008622:	4b4c      	ldr	r3, [pc, #304]	; (8008754 <HAL_RCC_GetSysClockFreq+0x138>)
 8008624:	68db      	ldr	r3, [r3, #12]
 8008626:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008628:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800862a:	230c      	movs	r3, #12
 800862c:	4013      	ands	r3, r2
 800862e:	2b0c      	cmp	r3, #12
 8008630:	d014      	beq.n	800865c <HAL_RCC_GetSysClockFreq+0x40>
 8008632:	d900      	bls.n	8008636 <HAL_RCC_GetSysClockFreq+0x1a>
 8008634:	e07b      	b.n	800872e <HAL_RCC_GetSysClockFreq+0x112>
 8008636:	2b04      	cmp	r3, #4
 8008638:	d002      	beq.n	8008640 <HAL_RCC_GetSysClockFreq+0x24>
 800863a:	2b08      	cmp	r3, #8
 800863c:	d00b      	beq.n	8008656 <HAL_RCC_GetSysClockFreq+0x3a>
 800863e:	e076      	b.n	800872e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8008640:	4b44      	ldr	r3, [pc, #272]	; (8008754 <HAL_RCC_GetSysClockFreq+0x138>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	2210      	movs	r2, #16
 8008646:	4013      	ands	r3, r2
 8008648:	d002      	beq.n	8008650 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800864a:	4b43      	ldr	r3, [pc, #268]	; (8008758 <HAL_RCC_GetSysClockFreq+0x13c>)
 800864c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800864e:	e07c      	b.n	800874a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8008650:	4b42      	ldr	r3, [pc, #264]	; (800875c <HAL_RCC_GetSysClockFreq+0x140>)
 8008652:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8008654:	e079      	b.n	800874a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008656:	4b42      	ldr	r3, [pc, #264]	; (8008760 <HAL_RCC_GetSysClockFreq+0x144>)
 8008658:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800865a:	e076      	b.n	800874a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800865c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800865e:	0c9a      	lsrs	r2, r3, #18
 8008660:	230f      	movs	r3, #15
 8008662:	401a      	ands	r2, r3
 8008664:	4b3f      	ldr	r3, [pc, #252]	; (8008764 <HAL_RCC_GetSysClockFreq+0x148>)
 8008666:	5c9b      	ldrb	r3, [r3, r2]
 8008668:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800866a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800866c:	0d9a      	lsrs	r2, r3, #22
 800866e:	2303      	movs	r3, #3
 8008670:	4013      	ands	r3, r2
 8008672:	3301      	adds	r3, #1
 8008674:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008676:	4b37      	ldr	r3, [pc, #220]	; (8008754 <HAL_RCC_GetSysClockFreq+0x138>)
 8008678:	68da      	ldr	r2, [r3, #12]
 800867a:	2380      	movs	r3, #128	; 0x80
 800867c:	025b      	lsls	r3, r3, #9
 800867e:	4013      	ands	r3, r2
 8008680:	d01a      	beq.n	80086b8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8008682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008684:	61bb      	str	r3, [r7, #24]
 8008686:	2300      	movs	r3, #0
 8008688:	61fb      	str	r3, [r7, #28]
 800868a:	4a35      	ldr	r2, [pc, #212]	; (8008760 <HAL_RCC_GetSysClockFreq+0x144>)
 800868c:	2300      	movs	r3, #0
 800868e:	69b8      	ldr	r0, [r7, #24]
 8008690:	69f9      	ldr	r1, [r7, #28]
 8008692:	f7f7 ff63 	bl	800055c <__aeabi_lmul>
 8008696:	0002      	movs	r2, r0
 8008698:	000b      	movs	r3, r1
 800869a:	0010      	movs	r0, r2
 800869c:	0019      	movs	r1, r3
 800869e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a0:	613b      	str	r3, [r7, #16]
 80086a2:	2300      	movs	r3, #0
 80086a4:	617b      	str	r3, [r7, #20]
 80086a6:	693a      	ldr	r2, [r7, #16]
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	f7f7 ff37 	bl	800051c <__aeabi_uldivmod>
 80086ae:	0002      	movs	r2, r0
 80086b0:	000b      	movs	r3, r1
 80086b2:	0013      	movs	r3, r2
 80086b4:	637b      	str	r3, [r7, #52]	; 0x34
 80086b6:	e037      	b.n	8008728 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80086b8:	4b26      	ldr	r3, [pc, #152]	; (8008754 <HAL_RCC_GetSysClockFreq+0x138>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	2210      	movs	r2, #16
 80086be:	4013      	ands	r3, r2
 80086c0:	d01a      	beq.n	80086f8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80086c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c4:	60bb      	str	r3, [r7, #8]
 80086c6:	2300      	movs	r3, #0
 80086c8:	60fb      	str	r3, [r7, #12]
 80086ca:	4a23      	ldr	r2, [pc, #140]	; (8008758 <HAL_RCC_GetSysClockFreq+0x13c>)
 80086cc:	2300      	movs	r3, #0
 80086ce:	68b8      	ldr	r0, [r7, #8]
 80086d0:	68f9      	ldr	r1, [r7, #12]
 80086d2:	f7f7 ff43 	bl	800055c <__aeabi_lmul>
 80086d6:	0002      	movs	r2, r0
 80086d8:	000b      	movs	r3, r1
 80086da:	0010      	movs	r0, r2
 80086dc:	0019      	movs	r1, r3
 80086de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e0:	603b      	str	r3, [r7, #0]
 80086e2:	2300      	movs	r3, #0
 80086e4:	607b      	str	r3, [r7, #4]
 80086e6:	683a      	ldr	r2, [r7, #0]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f7f7 ff17 	bl	800051c <__aeabi_uldivmod>
 80086ee:	0002      	movs	r2, r0
 80086f0:	000b      	movs	r3, r1
 80086f2:	0013      	movs	r3, r2
 80086f4:	637b      	str	r3, [r7, #52]	; 0x34
 80086f6:	e017      	b.n	8008728 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80086f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086fa:	0018      	movs	r0, r3
 80086fc:	2300      	movs	r3, #0
 80086fe:	0019      	movs	r1, r3
 8008700:	4a16      	ldr	r2, [pc, #88]	; (800875c <HAL_RCC_GetSysClockFreq+0x140>)
 8008702:	2300      	movs	r3, #0
 8008704:	f7f7 ff2a 	bl	800055c <__aeabi_lmul>
 8008708:	0002      	movs	r2, r0
 800870a:	000b      	movs	r3, r1
 800870c:	0010      	movs	r0, r2
 800870e:	0019      	movs	r1, r3
 8008710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008712:	001c      	movs	r4, r3
 8008714:	2300      	movs	r3, #0
 8008716:	001d      	movs	r5, r3
 8008718:	0022      	movs	r2, r4
 800871a:	002b      	movs	r3, r5
 800871c:	f7f7 fefe 	bl	800051c <__aeabi_uldivmod>
 8008720:	0002      	movs	r2, r0
 8008722:	000b      	movs	r3, r1
 8008724:	0013      	movs	r3, r2
 8008726:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8008728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800872a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800872c:	e00d      	b.n	800874a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800872e:	4b09      	ldr	r3, [pc, #36]	; (8008754 <HAL_RCC_GetSysClockFreq+0x138>)
 8008730:	685b      	ldr	r3, [r3, #4]
 8008732:	0b5b      	lsrs	r3, r3, #13
 8008734:	2207      	movs	r2, #7
 8008736:	4013      	ands	r3, r2
 8008738:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800873a:	6a3b      	ldr	r3, [r7, #32]
 800873c:	3301      	adds	r3, #1
 800873e:	2280      	movs	r2, #128	; 0x80
 8008740:	0212      	lsls	r2, r2, #8
 8008742:	409a      	lsls	r2, r3
 8008744:	0013      	movs	r3, r2
 8008746:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8008748:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800874a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800874c:	0018      	movs	r0, r3
 800874e:	46bd      	mov	sp, r7
 8008750:	b00e      	add	sp, #56	; 0x38
 8008752:	bdb0      	pop	{r4, r5, r7, pc}
 8008754:	40021000 	.word	0x40021000
 8008758:	003d0900 	.word	0x003d0900
 800875c:	00f42400 	.word	0x00f42400
 8008760:	007a1200 	.word	0x007a1200
 8008764:	0800fdc8 	.word	0x0800fdc8

08008768 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800876c:	4b02      	ldr	r3, [pc, #8]	; (8008778 <HAL_RCC_GetHCLKFreq+0x10>)
 800876e:	681b      	ldr	r3, [r3, #0]
}
 8008770:	0018      	movs	r0, r3
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
 8008776:	46c0      	nop			; (mov r8, r8)
 8008778:	200000dc 	.word	0x200000dc

0800877c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008780:	f7ff fff2 	bl	8008768 <HAL_RCC_GetHCLKFreq>
 8008784:	0001      	movs	r1, r0
 8008786:	4b06      	ldr	r3, [pc, #24]	; (80087a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008788:	68db      	ldr	r3, [r3, #12]
 800878a:	0a1b      	lsrs	r3, r3, #8
 800878c:	2207      	movs	r2, #7
 800878e:	4013      	ands	r3, r2
 8008790:	4a04      	ldr	r2, [pc, #16]	; (80087a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008792:	5cd3      	ldrb	r3, [r2, r3]
 8008794:	40d9      	lsrs	r1, r3
 8008796:	000b      	movs	r3, r1
}
 8008798:	0018      	movs	r0, r3
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}
 800879e:	46c0      	nop			; (mov r8, r8)
 80087a0:	40021000 	.word	0x40021000
 80087a4:	0800fdc0 	.word	0x0800fdc0

080087a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80087ac:	f7ff ffdc 	bl	8008768 <HAL_RCC_GetHCLKFreq>
 80087b0:	0001      	movs	r1, r0
 80087b2:	4b06      	ldr	r3, [pc, #24]	; (80087cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80087b4:	68db      	ldr	r3, [r3, #12]
 80087b6:	0adb      	lsrs	r3, r3, #11
 80087b8:	2207      	movs	r2, #7
 80087ba:	4013      	ands	r3, r2
 80087bc:	4a04      	ldr	r2, [pc, #16]	; (80087d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80087be:	5cd3      	ldrb	r3, [r2, r3]
 80087c0:	40d9      	lsrs	r1, r3
 80087c2:	000b      	movs	r3, r1
}
 80087c4:	0018      	movs	r0, r3
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
 80087ca:	46c0      	nop			; (mov r8, r8)
 80087cc:	40021000 	.word	0x40021000
 80087d0:	0800fdc0 	.word	0x0800fdc0

080087d4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b086      	sub	sp, #24
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80087dc:	2017      	movs	r0, #23
 80087de:	183b      	adds	r3, r7, r0
 80087e0:	2200      	movs	r2, #0
 80087e2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	2220      	movs	r2, #32
 80087ea:	4013      	ands	r3, r2
 80087ec:	d100      	bne.n	80087f0 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80087ee:	e0c7      	b.n	8008980 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80087f0:	4b93      	ldr	r3, [pc, #588]	; (8008a40 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80087f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087f4:	2380      	movs	r3, #128	; 0x80
 80087f6:	055b      	lsls	r3, r3, #21
 80087f8:	4013      	ands	r3, r2
 80087fa:	d109      	bne.n	8008810 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80087fc:	4b90      	ldr	r3, [pc, #576]	; (8008a40 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80087fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008800:	4b8f      	ldr	r3, [pc, #572]	; (8008a40 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008802:	2180      	movs	r1, #128	; 0x80
 8008804:	0549      	lsls	r1, r1, #21
 8008806:	430a      	orrs	r2, r1
 8008808:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800880a:	183b      	adds	r3, r7, r0
 800880c:	2201      	movs	r2, #1
 800880e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008810:	4b8c      	ldr	r3, [pc, #560]	; (8008a44 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8008812:	681a      	ldr	r2, [r3, #0]
 8008814:	2380      	movs	r3, #128	; 0x80
 8008816:	005b      	lsls	r3, r3, #1
 8008818:	4013      	ands	r3, r2
 800881a:	d11a      	bne.n	8008852 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800881c:	4b89      	ldr	r3, [pc, #548]	; (8008a44 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 800881e:	681a      	ldr	r2, [r3, #0]
 8008820:	4b88      	ldr	r3, [pc, #544]	; (8008a44 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8008822:	2180      	movs	r1, #128	; 0x80
 8008824:	0049      	lsls	r1, r1, #1
 8008826:	430a      	orrs	r2, r1
 8008828:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800882a:	f7fd fa93 	bl	8005d54 <HAL_GetTick>
 800882e:	0003      	movs	r3, r0
 8008830:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008832:	e008      	b.n	8008846 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008834:	f7fd fa8e 	bl	8005d54 <HAL_GetTick>
 8008838:	0002      	movs	r2, r0
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	1ad3      	subs	r3, r2, r3
 800883e:	2b64      	cmp	r3, #100	; 0x64
 8008840:	d901      	bls.n	8008846 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8008842:	2303      	movs	r3, #3
 8008844:	e0f8      	b.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0x264>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008846:	4b7f      	ldr	r3, [pc, #508]	; (8008a44 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	2380      	movs	r3, #128	; 0x80
 800884c:	005b      	lsls	r3, r3, #1
 800884e:	4013      	ands	r3, r2
 8008850:	d0f0      	beq.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8008852:	4b7b      	ldr	r3, [pc, #492]	; (8008a40 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008854:	681a      	ldr	r2, [r3, #0]
 8008856:	23c0      	movs	r3, #192	; 0xc0
 8008858:	039b      	lsls	r3, r3, #14
 800885a:	4013      	ands	r3, r2
 800885c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	685a      	ldr	r2, [r3, #4]
 8008862:	23c0      	movs	r3, #192	; 0xc0
 8008864:	039b      	lsls	r3, r3, #14
 8008866:	4013      	ands	r3, r2
 8008868:	68fa      	ldr	r2, [r7, #12]
 800886a:	429a      	cmp	r2, r3
 800886c:	d013      	beq.n	8008896 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	685a      	ldr	r2, [r3, #4]
 8008872:	23c0      	movs	r3, #192	; 0xc0
 8008874:	029b      	lsls	r3, r3, #10
 8008876:	401a      	ands	r2, r3
 8008878:	23c0      	movs	r3, #192	; 0xc0
 800887a:	029b      	lsls	r3, r3, #10
 800887c:	429a      	cmp	r2, r3
 800887e:	d10a      	bne.n	8008896 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008880:	4b6f      	ldr	r3, [pc, #444]	; (8008a40 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008882:	681a      	ldr	r2, [r3, #0]
 8008884:	2380      	movs	r3, #128	; 0x80
 8008886:	029b      	lsls	r3, r3, #10
 8008888:	401a      	ands	r2, r3
 800888a:	2380      	movs	r3, #128	; 0x80
 800888c:	029b      	lsls	r3, r3, #10
 800888e:	429a      	cmp	r2, r3
 8008890:	d101      	bne.n	8008896 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8008892:	2301      	movs	r3, #1
 8008894:	e0d0      	b.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0x264>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8008896:	4b6a      	ldr	r3, [pc, #424]	; (8008a40 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008898:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800889a:	23c0      	movs	r3, #192	; 0xc0
 800889c:	029b      	lsls	r3, r3, #10
 800889e:	4013      	ands	r3, r2
 80088a0:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d03b      	beq.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	685a      	ldr	r2, [r3, #4]
 80088ac:	23c0      	movs	r3, #192	; 0xc0
 80088ae:	029b      	lsls	r3, r3, #10
 80088b0:	4013      	ands	r3, r2
 80088b2:	68fa      	ldr	r2, [r7, #12]
 80088b4:	429a      	cmp	r2, r3
 80088b6:	d033      	beq.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	2220      	movs	r2, #32
 80088be:	4013      	ands	r3, r2
 80088c0:	d02e      	beq.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80088c2:	4b5f      	ldr	r3, [pc, #380]	; (8008a40 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80088c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088c6:	4a60      	ldr	r2, [pc, #384]	; (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 80088c8:	4013      	ands	r3, r2
 80088ca:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80088cc:	4b5c      	ldr	r3, [pc, #368]	; (8008a40 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80088ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80088d0:	4b5b      	ldr	r3, [pc, #364]	; (8008a40 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80088d2:	2180      	movs	r1, #128	; 0x80
 80088d4:	0309      	lsls	r1, r1, #12
 80088d6:	430a      	orrs	r2, r1
 80088d8:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80088da:	4b59      	ldr	r3, [pc, #356]	; (8008a40 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80088dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80088de:	4b58      	ldr	r3, [pc, #352]	; (8008a40 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80088e0:	495a      	ldr	r1, [pc, #360]	; (8008a4c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80088e2:	400a      	ands	r2, r1
 80088e4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80088e6:	4b56      	ldr	r3, [pc, #344]	; (8008a40 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80088e8:	68fa      	ldr	r2, [r7, #12]
 80088ea:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80088ec:	68fa      	ldr	r2, [r7, #12]
 80088ee:	2380      	movs	r3, #128	; 0x80
 80088f0:	005b      	lsls	r3, r3, #1
 80088f2:	4013      	ands	r3, r2
 80088f4:	d014      	beq.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088f6:	f7fd fa2d 	bl	8005d54 <HAL_GetTick>
 80088fa:	0003      	movs	r3, r0
 80088fc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80088fe:	e009      	b.n	8008914 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008900:	f7fd fa28 	bl	8005d54 <HAL_GetTick>
 8008904:	0002      	movs	r2, r0
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	1ad3      	subs	r3, r2, r3
 800890a:	4a51      	ldr	r2, [pc, #324]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d901      	bls.n	8008914 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8008910:	2303      	movs	r3, #3
 8008912:	e091      	b.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0x264>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008914:	4b4a      	ldr	r3, [pc, #296]	; (8008a40 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008916:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008918:	2380      	movs	r3, #128	; 0x80
 800891a:	009b      	lsls	r3, r3, #2
 800891c:	4013      	ands	r3, r2
 800891e:	d0ef      	beq.n	8008900 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	2220      	movs	r2, #32
 8008926:	4013      	ands	r3, r2
 8008928:	d01f      	beq.n	800896a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	685a      	ldr	r2, [r3, #4]
 800892e:	23c0      	movs	r3, #192	; 0xc0
 8008930:	029b      	lsls	r3, r3, #10
 8008932:	401a      	ands	r2, r3
 8008934:	23c0      	movs	r3, #192	; 0xc0
 8008936:	029b      	lsls	r3, r3, #10
 8008938:	429a      	cmp	r2, r3
 800893a:	d10c      	bne.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0x182>
 800893c:	4b40      	ldr	r3, [pc, #256]	; (8008a40 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4a44      	ldr	r2, [pc, #272]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008942:	4013      	ands	r3, r2
 8008944:	0019      	movs	r1, r3
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	685a      	ldr	r2, [r3, #4]
 800894a:	23c0      	movs	r3, #192	; 0xc0
 800894c:	039b      	lsls	r3, r3, #14
 800894e:	401a      	ands	r2, r3
 8008950:	4b3b      	ldr	r3, [pc, #236]	; (8008a40 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008952:	430a      	orrs	r2, r1
 8008954:	601a      	str	r2, [r3, #0]
 8008956:	4b3a      	ldr	r3, [pc, #232]	; (8008a40 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008958:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	685a      	ldr	r2, [r3, #4]
 800895e:	23c0      	movs	r3, #192	; 0xc0
 8008960:	029b      	lsls	r3, r3, #10
 8008962:	401a      	ands	r2, r3
 8008964:	4b36      	ldr	r3, [pc, #216]	; (8008a40 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008966:	430a      	orrs	r2, r1
 8008968:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800896a:	2317      	movs	r3, #23
 800896c:	18fb      	adds	r3, r7, r3
 800896e:	781b      	ldrb	r3, [r3, #0]
 8008970:	2b01      	cmp	r3, #1
 8008972:	d105      	bne.n	8008980 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008974:	4b32      	ldr	r3, [pc, #200]	; (8008a40 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008976:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008978:	4b31      	ldr	r3, [pc, #196]	; (8008a40 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800897a:	4937      	ldr	r1, [pc, #220]	; (8008a58 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800897c:	400a      	ands	r2, r1
 800897e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	2201      	movs	r2, #1
 8008986:	4013      	ands	r3, r2
 8008988:	d009      	beq.n	800899e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800898a:	4b2d      	ldr	r3, [pc, #180]	; (8008a40 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800898c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800898e:	2203      	movs	r2, #3
 8008990:	4393      	bics	r3, r2
 8008992:	0019      	movs	r1, r3
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	689a      	ldr	r2, [r3, #8]
 8008998:	4b29      	ldr	r3, [pc, #164]	; (8008a40 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800899a:	430a      	orrs	r2, r1
 800899c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	2202      	movs	r2, #2
 80089a4:	4013      	ands	r3, r2
 80089a6:	d009      	beq.n	80089bc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80089a8:	4b25      	ldr	r3, [pc, #148]	; (8008a40 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80089aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089ac:	220c      	movs	r2, #12
 80089ae:	4393      	bics	r3, r2
 80089b0:	0019      	movs	r1, r3
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	68da      	ldr	r2, [r3, #12]
 80089b6:	4b22      	ldr	r3, [pc, #136]	; (8008a40 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80089b8:	430a      	orrs	r2, r1
 80089ba:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	2204      	movs	r2, #4
 80089c2:	4013      	ands	r3, r2
 80089c4:	d009      	beq.n	80089da <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80089c6:	4b1e      	ldr	r3, [pc, #120]	; (8008a40 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80089c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089ca:	4a24      	ldr	r2, [pc, #144]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80089cc:	4013      	ands	r3, r2
 80089ce:	0019      	movs	r1, r3
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	691a      	ldr	r2, [r3, #16]
 80089d4:	4b1a      	ldr	r3, [pc, #104]	; (8008a40 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80089d6:	430a      	orrs	r2, r1
 80089d8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	2208      	movs	r2, #8
 80089e0:	4013      	ands	r3, r2
 80089e2:	d009      	beq.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80089e4:	4b16      	ldr	r3, [pc, #88]	; (8008a40 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80089e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089e8:	4a1d      	ldr	r2, [pc, #116]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80089ea:	4013      	ands	r3, r2
 80089ec:	0019      	movs	r1, r3
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	695a      	ldr	r2, [r3, #20]
 80089f2:	4b13      	ldr	r3, [pc, #76]	; (8008a40 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80089f4:	430a      	orrs	r2, r1
 80089f6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681a      	ldr	r2, [r3, #0]
 80089fc:	2380      	movs	r3, #128	; 0x80
 80089fe:	005b      	lsls	r3, r3, #1
 8008a00:	4013      	ands	r3, r2
 8008a02:	d009      	beq.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008a04:	4b0e      	ldr	r3, [pc, #56]	; (8008a40 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a08:	4a0f      	ldr	r2, [pc, #60]	; (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8008a0a:	4013      	ands	r3, r2
 8008a0c:	0019      	movs	r1, r3
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	699a      	ldr	r2, [r3, #24]
 8008a12:	4b0b      	ldr	r3, [pc, #44]	; (8008a40 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008a14:	430a      	orrs	r2, r1
 8008a16:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	2280      	movs	r2, #128	; 0x80
 8008a1e:	4013      	ands	r3, r2
 8008a20:	d009      	beq.n	8008a36 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8008a22:	4b07      	ldr	r3, [pc, #28]	; (8008a40 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a26:	4a0f      	ldr	r2, [pc, #60]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8008a28:	4013      	ands	r3, r2
 8008a2a:	0019      	movs	r1, r3
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	69da      	ldr	r2, [r3, #28]
 8008a30:	4b03      	ldr	r3, [pc, #12]	; (8008a40 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008a32:	430a      	orrs	r2, r1
 8008a34:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008a36:	2300      	movs	r3, #0
}
 8008a38:	0018      	movs	r0, r3
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	b006      	add	sp, #24
 8008a3e:	bd80      	pop	{r7, pc}
 8008a40:	40021000 	.word	0x40021000
 8008a44:	40007000 	.word	0x40007000
 8008a48:	fffcffff 	.word	0xfffcffff
 8008a4c:	fff7ffff 	.word	0xfff7ffff
 8008a50:	00001388 	.word	0x00001388
 8008a54:	ffcfffff 	.word	0xffcfffff
 8008a58:	efffffff 	.word	0xefffffff
 8008a5c:	fffff3ff 	.word	0xfffff3ff
 8008a60:	ffffcfff 	.word	0xffffcfff
 8008a64:	fff3ffff 	.word	0xfff3ffff

08008a68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b082      	sub	sp, #8
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d101      	bne.n	8008a7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008a76:	2301      	movs	r3, #1
 8008a78:	e032      	b.n	8008ae0 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2239      	movs	r2, #57	; 0x39
 8008a7e:	5c9b      	ldrb	r3, [r3, r2]
 8008a80:	b2db      	uxtb	r3, r3
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d107      	bne.n	8008a96 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2238      	movs	r2, #56	; 0x38
 8008a8a:	2100      	movs	r1, #0
 8008a8c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	0018      	movs	r0, r3
 8008a92:	f7fc fec1 	bl	8005818 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2239      	movs	r2, #57	; 0x39
 8008a9a:	2102      	movs	r1, #2
 8008a9c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681a      	ldr	r2, [r3, #0]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	3304      	adds	r3, #4
 8008aa6:	0019      	movs	r1, r3
 8008aa8:	0010      	movs	r0, r2
 8008aaa:	f000 f97f 	bl	8008dac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	223e      	movs	r2, #62	; 0x3e
 8008ab2:	2101      	movs	r1, #1
 8008ab4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	223a      	movs	r2, #58	; 0x3a
 8008aba:	2101      	movs	r1, #1
 8008abc:	5499      	strb	r1, [r3, r2]
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	223b      	movs	r2, #59	; 0x3b
 8008ac2:	2101      	movs	r1, #1
 8008ac4:	5499      	strb	r1, [r3, r2]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	223c      	movs	r2, #60	; 0x3c
 8008aca:	2101      	movs	r1, #1
 8008acc:	5499      	strb	r1, [r3, r2]
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	223d      	movs	r2, #61	; 0x3d
 8008ad2:	2101      	movs	r1, #1
 8008ad4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2239      	movs	r2, #57	; 0x39
 8008ada:	2101      	movs	r1, #1
 8008adc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008ade:	2300      	movs	r3, #0
}
 8008ae0:	0018      	movs	r0, r3
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	b002      	add	sp, #8
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b084      	sub	sp, #16
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2239      	movs	r2, #57	; 0x39
 8008af4:	5c9b      	ldrb	r3, [r3, r2]
 8008af6:	b2db      	uxtb	r3, r3
 8008af8:	2b01      	cmp	r3, #1
 8008afa:	d001      	beq.n	8008b00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008afc:	2301      	movs	r3, #1
 8008afe:	e03b      	b.n	8008b78 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2239      	movs	r2, #57	; 0x39
 8008b04:	2102      	movs	r1, #2
 8008b06:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	68da      	ldr	r2, [r3, #12]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	2101      	movs	r1, #1
 8008b14:	430a      	orrs	r2, r1
 8008b16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681a      	ldr	r2, [r3, #0]
 8008b1c:	2380      	movs	r3, #128	; 0x80
 8008b1e:	05db      	lsls	r3, r3, #23
 8008b20:	429a      	cmp	r2, r3
 8008b22:	d00e      	beq.n	8008b42 <HAL_TIM_Base_Start_IT+0x5a>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4a15      	ldr	r2, [pc, #84]	; (8008b80 <HAL_TIM_Base_Start_IT+0x98>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d009      	beq.n	8008b42 <HAL_TIM_Base_Start_IT+0x5a>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4a14      	ldr	r2, [pc, #80]	; (8008b84 <HAL_TIM_Base_Start_IT+0x9c>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d004      	beq.n	8008b42 <HAL_TIM_Base_Start_IT+0x5a>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4a12      	ldr	r2, [pc, #72]	; (8008b88 <HAL_TIM_Base_Start_IT+0xa0>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d111      	bne.n	8008b66 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	689b      	ldr	r3, [r3, #8]
 8008b48:	2207      	movs	r2, #7
 8008b4a:	4013      	ands	r3, r2
 8008b4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2b06      	cmp	r3, #6
 8008b52:	d010      	beq.n	8008b76 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	681a      	ldr	r2, [r3, #0]
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	2101      	movs	r1, #1
 8008b60:	430a      	orrs	r2, r1
 8008b62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b64:	e007      	b.n	8008b76 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	681a      	ldr	r2, [r3, #0]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	2101      	movs	r1, #1
 8008b72:	430a      	orrs	r2, r1
 8008b74:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008b76:	2300      	movs	r3, #0
}
 8008b78:	0018      	movs	r0, r3
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	b004      	add	sp, #16
 8008b7e:	bd80      	pop	{r7, pc}
 8008b80:	40000400 	.word	0x40000400
 8008b84:	40010800 	.word	0x40010800
 8008b88:	40011400 	.word	0x40011400

08008b8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b082      	sub	sp, #8
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	691b      	ldr	r3, [r3, #16]
 8008b9a:	2202      	movs	r2, #2
 8008b9c:	4013      	ands	r3, r2
 8008b9e:	2b02      	cmp	r3, #2
 8008ba0:	d124      	bne.n	8008bec <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	68db      	ldr	r3, [r3, #12]
 8008ba8:	2202      	movs	r2, #2
 8008baa:	4013      	ands	r3, r2
 8008bac:	2b02      	cmp	r3, #2
 8008bae:	d11d      	bne.n	8008bec <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	2203      	movs	r2, #3
 8008bb6:	4252      	negs	r2, r2
 8008bb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2201      	movs	r2, #1
 8008bbe:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	699b      	ldr	r3, [r3, #24]
 8008bc6:	2203      	movs	r2, #3
 8008bc8:	4013      	ands	r3, r2
 8008bca:	d004      	beq.n	8008bd6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	0018      	movs	r0, r3
 8008bd0:	f000 f8d4 	bl	8008d7c <HAL_TIM_IC_CaptureCallback>
 8008bd4:	e007      	b.n	8008be6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	0018      	movs	r0, r3
 8008bda:	f000 f8c7 	bl	8008d6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	0018      	movs	r0, r3
 8008be2:	f000 f8d3 	bl	8008d8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2200      	movs	r2, #0
 8008bea:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	691b      	ldr	r3, [r3, #16]
 8008bf2:	2204      	movs	r2, #4
 8008bf4:	4013      	ands	r3, r2
 8008bf6:	2b04      	cmp	r3, #4
 8008bf8:	d125      	bne.n	8008c46 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	68db      	ldr	r3, [r3, #12]
 8008c00:	2204      	movs	r2, #4
 8008c02:	4013      	ands	r3, r2
 8008c04:	2b04      	cmp	r3, #4
 8008c06:	d11e      	bne.n	8008c46 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	2205      	movs	r2, #5
 8008c0e:	4252      	negs	r2, r2
 8008c10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2202      	movs	r2, #2
 8008c16:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	699a      	ldr	r2, [r3, #24]
 8008c1e:	23c0      	movs	r3, #192	; 0xc0
 8008c20:	009b      	lsls	r3, r3, #2
 8008c22:	4013      	ands	r3, r2
 8008c24:	d004      	beq.n	8008c30 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	0018      	movs	r0, r3
 8008c2a:	f000 f8a7 	bl	8008d7c <HAL_TIM_IC_CaptureCallback>
 8008c2e:	e007      	b.n	8008c40 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	0018      	movs	r0, r3
 8008c34:	f000 f89a 	bl	8008d6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	0018      	movs	r0, r3
 8008c3c:	f000 f8a6 	bl	8008d8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2200      	movs	r2, #0
 8008c44:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	691b      	ldr	r3, [r3, #16]
 8008c4c:	2208      	movs	r2, #8
 8008c4e:	4013      	ands	r3, r2
 8008c50:	2b08      	cmp	r3, #8
 8008c52:	d124      	bne.n	8008c9e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	68db      	ldr	r3, [r3, #12]
 8008c5a:	2208      	movs	r2, #8
 8008c5c:	4013      	ands	r3, r2
 8008c5e:	2b08      	cmp	r3, #8
 8008c60:	d11d      	bne.n	8008c9e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	2209      	movs	r2, #9
 8008c68:	4252      	negs	r2, r2
 8008c6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2204      	movs	r2, #4
 8008c70:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	69db      	ldr	r3, [r3, #28]
 8008c78:	2203      	movs	r2, #3
 8008c7a:	4013      	ands	r3, r2
 8008c7c:	d004      	beq.n	8008c88 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	0018      	movs	r0, r3
 8008c82:	f000 f87b 	bl	8008d7c <HAL_TIM_IC_CaptureCallback>
 8008c86:	e007      	b.n	8008c98 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	0018      	movs	r0, r3
 8008c8c:	f000 f86e 	bl	8008d6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	0018      	movs	r0, r3
 8008c94:	f000 f87a 	bl	8008d8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	691b      	ldr	r3, [r3, #16]
 8008ca4:	2210      	movs	r2, #16
 8008ca6:	4013      	ands	r3, r2
 8008ca8:	2b10      	cmp	r3, #16
 8008caa:	d125      	bne.n	8008cf8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	68db      	ldr	r3, [r3, #12]
 8008cb2:	2210      	movs	r2, #16
 8008cb4:	4013      	ands	r3, r2
 8008cb6:	2b10      	cmp	r3, #16
 8008cb8:	d11e      	bne.n	8008cf8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	2211      	movs	r2, #17
 8008cc0:	4252      	negs	r2, r2
 8008cc2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2208      	movs	r2, #8
 8008cc8:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	69da      	ldr	r2, [r3, #28]
 8008cd0:	23c0      	movs	r3, #192	; 0xc0
 8008cd2:	009b      	lsls	r3, r3, #2
 8008cd4:	4013      	ands	r3, r2
 8008cd6:	d004      	beq.n	8008ce2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	0018      	movs	r0, r3
 8008cdc:	f000 f84e 	bl	8008d7c <HAL_TIM_IC_CaptureCallback>
 8008ce0:	e007      	b.n	8008cf2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	0018      	movs	r0, r3
 8008ce6:	f000 f841 	bl	8008d6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	0018      	movs	r0, r3
 8008cee:	f000 f84d 	bl	8008d8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	691b      	ldr	r3, [r3, #16]
 8008cfe:	2201      	movs	r2, #1
 8008d00:	4013      	ands	r3, r2
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	d10f      	bne.n	8008d26 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	68db      	ldr	r3, [r3, #12]
 8008d0c:	2201      	movs	r2, #1
 8008d0e:	4013      	ands	r3, r2
 8008d10:	2b01      	cmp	r3, #1
 8008d12:	d108      	bne.n	8008d26 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	2202      	movs	r2, #2
 8008d1a:	4252      	negs	r2, r2
 8008d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	0018      	movs	r0, r3
 8008d22:	f000 f81b 	bl	8008d5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	691b      	ldr	r3, [r3, #16]
 8008d2c:	2240      	movs	r2, #64	; 0x40
 8008d2e:	4013      	ands	r3, r2
 8008d30:	2b40      	cmp	r3, #64	; 0x40
 8008d32:	d10f      	bne.n	8008d54 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	68db      	ldr	r3, [r3, #12]
 8008d3a:	2240      	movs	r2, #64	; 0x40
 8008d3c:	4013      	ands	r3, r2
 8008d3e:	2b40      	cmp	r3, #64	; 0x40
 8008d40:	d108      	bne.n	8008d54 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	2241      	movs	r2, #65	; 0x41
 8008d48:	4252      	negs	r2, r2
 8008d4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	0018      	movs	r0, r3
 8008d50:	f000 f824 	bl	8008d9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008d54:	46c0      	nop			; (mov r8, r8)
 8008d56:	46bd      	mov	sp, r7
 8008d58:	b002      	add	sp, #8
 8008d5a:	bd80      	pop	{r7, pc}

08008d5c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b082      	sub	sp, #8
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008d64:	46c0      	nop			; (mov r8, r8)
 8008d66:	46bd      	mov	sp, r7
 8008d68:	b002      	add	sp, #8
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b082      	sub	sp, #8
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008d74:	46c0      	nop			; (mov r8, r8)
 8008d76:	46bd      	mov	sp, r7
 8008d78:	b002      	add	sp, #8
 8008d7a:	bd80      	pop	{r7, pc}

08008d7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b082      	sub	sp, #8
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008d84:	46c0      	nop			; (mov r8, r8)
 8008d86:	46bd      	mov	sp, r7
 8008d88:	b002      	add	sp, #8
 8008d8a:	bd80      	pop	{r7, pc}

08008d8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b082      	sub	sp, #8
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008d94:	46c0      	nop			; (mov r8, r8)
 8008d96:	46bd      	mov	sp, r7
 8008d98:	b002      	add	sp, #8
 8008d9a:	bd80      	pop	{r7, pc}

08008d9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b082      	sub	sp, #8
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008da4:	46c0      	nop			; (mov r8, r8)
 8008da6:	46bd      	mov	sp, r7
 8008da8:	b002      	add	sp, #8
 8008daa:	bd80      	pop	{r7, pc}

08008dac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b084      	sub	sp, #16
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
 8008db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008dbc:	687a      	ldr	r2, [r7, #4]
 8008dbe:	2380      	movs	r3, #128	; 0x80
 8008dc0:	05db      	lsls	r3, r3, #23
 8008dc2:	429a      	cmp	r2, r3
 8008dc4:	d00b      	beq.n	8008dde <TIM_Base_SetConfig+0x32>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	4a23      	ldr	r2, [pc, #140]	; (8008e58 <TIM_Base_SetConfig+0xac>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d007      	beq.n	8008dde <TIM_Base_SetConfig+0x32>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	4a22      	ldr	r2, [pc, #136]	; (8008e5c <TIM_Base_SetConfig+0xb0>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d003      	beq.n	8008dde <TIM_Base_SetConfig+0x32>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	4a21      	ldr	r2, [pc, #132]	; (8008e60 <TIM_Base_SetConfig+0xb4>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d108      	bne.n	8008df0 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2270      	movs	r2, #112	; 0x70
 8008de2:	4393      	bics	r3, r2
 8008de4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	68fa      	ldr	r2, [r7, #12]
 8008dec:	4313      	orrs	r3, r2
 8008dee:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008df0:	687a      	ldr	r2, [r7, #4]
 8008df2:	2380      	movs	r3, #128	; 0x80
 8008df4:	05db      	lsls	r3, r3, #23
 8008df6:	429a      	cmp	r2, r3
 8008df8:	d00b      	beq.n	8008e12 <TIM_Base_SetConfig+0x66>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	4a16      	ldr	r2, [pc, #88]	; (8008e58 <TIM_Base_SetConfig+0xac>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d007      	beq.n	8008e12 <TIM_Base_SetConfig+0x66>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	4a15      	ldr	r2, [pc, #84]	; (8008e5c <TIM_Base_SetConfig+0xb0>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d003      	beq.n	8008e12 <TIM_Base_SetConfig+0x66>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	4a14      	ldr	r2, [pc, #80]	; (8008e60 <TIM_Base_SetConfig+0xb4>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d108      	bne.n	8008e24 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	4a13      	ldr	r2, [pc, #76]	; (8008e64 <TIM_Base_SetConfig+0xb8>)
 8008e16:	4013      	ands	r3, r2
 8008e18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	68db      	ldr	r3, [r3, #12]
 8008e1e:	68fa      	ldr	r2, [r7, #12]
 8008e20:	4313      	orrs	r3, r2
 8008e22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2280      	movs	r2, #128	; 0x80
 8008e28:	4393      	bics	r3, r2
 8008e2a:	001a      	movs	r2, r3
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	691b      	ldr	r3, [r3, #16]
 8008e30:	4313      	orrs	r3, r2
 8008e32:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	68fa      	ldr	r2, [r7, #12]
 8008e38:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	689a      	ldr	r2, [r3, #8]
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	681a      	ldr	r2, [r3, #0]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2201      	movs	r2, #1
 8008e4e:	615a      	str	r2, [r3, #20]
}
 8008e50:	46c0      	nop			; (mov r8, r8)
 8008e52:	46bd      	mov	sp, r7
 8008e54:	b004      	add	sp, #16
 8008e56:	bd80      	pop	{r7, pc}
 8008e58:	40000400 	.word	0x40000400
 8008e5c:	40010800 	.word	0x40010800
 8008e60:	40011400 	.word	0x40011400
 8008e64:	fffffcff 	.word	0xfffffcff

08008e68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b084      	sub	sp, #16
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2238      	movs	r2, #56	; 0x38
 8008e76:	5c9b      	ldrb	r3, [r3, r2]
 8008e78:	2b01      	cmp	r3, #1
 8008e7a:	d101      	bne.n	8008e80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008e7c:	2302      	movs	r3, #2
 8008e7e:	e047      	b.n	8008f10 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2238      	movs	r2, #56	; 0x38
 8008e84:	2101      	movs	r1, #1
 8008e86:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2239      	movs	r2, #57	; 0x39
 8008e8c:	2102      	movs	r1, #2
 8008e8e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	685b      	ldr	r3, [r3, #4]
 8008e96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	689b      	ldr	r3, [r3, #8]
 8008e9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	2270      	movs	r2, #112	; 0x70
 8008ea4:	4393      	bics	r3, r2
 8008ea6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	68fa      	ldr	r2, [r7, #12]
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	68fa      	ldr	r2, [r7, #12]
 8008eb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681a      	ldr	r2, [r3, #0]
 8008ebe:	2380      	movs	r3, #128	; 0x80
 8008ec0:	05db      	lsls	r3, r3, #23
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	d00e      	beq.n	8008ee4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4a13      	ldr	r2, [pc, #76]	; (8008f18 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d009      	beq.n	8008ee4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	4a11      	ldr	r2, [pc, #68]	; (8008f1c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d004      	beq.n	8008ee4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	4a10      	ldr	r2, [pc, #64]	; (8008f20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d10c      	bne.n	8008efe <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	2280      	movs	r2, #128	; 0x80
 8008ee8:	4393      	bics	r3, r2
 8008eea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	68ba      	ldr	r2, [r7, #8]
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	68ba      	ldr	r2, [r7, #8]
 8008efc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2239      	movs	r2, #57	; 0x39
 8008f02:	2101      	movs	r1, #1
 8008f04:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2238      	movs	r2, #56	; 0x38
 8008f0a:	2100      	movs	r1, #0
 8008f0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008f0e:	2300      	movs	r3, #0
}
 8008f10:	0018      	movs	r0, r3
 8008f12:	46bd      	mov	sp, r7
 8008f14:	b004      	add	sp, #16
 8008f16:	bd80      	pop	{r7, pc}
 8008f18:	40000400 	.word	0x40000400
 8008f1c:	40010800 	.word	0x40010800
 8008f20:	40011400 	.word	0x40011400

08008f24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b082      	sub	sp, #8
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d101      	bne.n	8008f36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008f32:	2301      	movs	r3, #1
 8008f34:	e044      	b.n	8008fc0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d107      	bne.n	8008f4e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2278      	movs	r2, #120	; 0x78
 8008f42:	2100      	movs	r1, #0
 8008f44:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	0018      	movs	r0, r3
 8008f4a:	f7fc fc85 	bl	8005858 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2224      	movs	r2, #36	; 0x24
 8008f52:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	681a      	ldr	r2, [r3, #0]
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	2101      	movs	r1, #1
 8008f60:	438a      	bics	r2, r1
 8008f62:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	0018      	movs	r0, r3
 8008f68:	f000 fbca 	bl	8009700 <UART_SetConfig>
 8008f6c:	0003      	movs	r3, r0
 8008f6e:	2b01      	cmp	r3, #1
 8008f70:	d101      	bne.n	8008f76 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008f72:	2301      	movs	r3, #1
 8008f74:	e024      	b.n	8008fc0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d003      	beq.n	8008f86 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	0018      	movs	r0, r3
 8008f82:	f000 fe5b 	bl	8009c3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	685a      	ldr	r2, [r3, #4]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	490d      	ldr	r1, [pc, #52]	; (8008fc8 <HAL_UART_Init+0xa4>)
 8008f92:	400a      	ands	r2, r1
 8008f94:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	689a      	ldr	r2, [r3, #8]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	212a      	movs	r1, #42	; 0x2a
 8008fa2:	438a      	bics	r2, r1
 8008fa4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	681a      	ldr	r2, [r3, #0]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	2101      	movs	r1, #1
 8008fb2:	430a      	orrs	r2, r1
 8008fb4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	0018      	movs	r0, r3
 8008fba:	f000 fef3 	bl	8009da4 <UART_CheckIdleState>
 8008fbe:	0003      	movs	r3, r0
}
 8008fc0:	0018      	movs	r0, r3
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	b002      	add	sp, #8
 8008fc6:	bd80      	pop	{r7, pc}
 8008fc8:	ffffb7ff 	.word	0xffffb7ff

08008fcc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b08a      	sub	sp, #40	; 0x28
 8008fd0:	af02      	add	r7, sp, #8
 8008fd2:	60f8      	str	r0, [r7, #12]
 8008fd4:	60b9      	str	r1, [r7, #8]
 8008fd6:	603b      	str	r3, [r7, #0]
 8008fd8:	1dbb      	adds	r3, r7, #6
 8008fda:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008fe0:	2b20      	cmp	r3, #32
 8008fe2:	d000      	beq.n	8008fe6 <HAL_UART_Transmit+0x1a>
 8008fe4:	e08c      	b.n	8009100 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d003      	beq.n	8008ff4 <HAL_UART_Transmit+0x28>
 8008fec:	1dbb      	adds	r3, r7, #6
 8008fee:	881b      	ldrh	r3, [r3, #0]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d101      	bne.n	8008ff8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	e084      	b.n	8009102 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	689a      	ldr	r2, [r3, #8]
 8008ffc:	2380      	movs	r3, #128	; 0x80
 8008ffe:	015b      	lsls	r3, r3, #5
 8009000:	429a      	cmp	r2, r3
 8009002:	d109      	bne.n	8009018 <HAL_UART_Transmit+0x4c>
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	691b      	ldr	r3, [r3, #16]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d105      	bne.n	8009018 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	2201      	movs	r2, #1
 8009010:	4013      	ands	r3, r2
 8009012:	d001      	beq.n	8009018 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8009014:	2301      	movs	r3, #1
 8009016:	e074      	b.n	8009102 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2284      	movs	r2, #132	; 0x84
 800901c:	2100      	movs	r1, #0
 800901e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	2221      	movs	r2, #33	; 0x21
 8009024:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009026:	f7fc fe95 	bl	8005d54 <HAL_GetTick>
 800902a:	0003      	movs	r3, r0
 800902c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	1dba      	adds	r2, r7, #6
 8009032:	2150      	movs	r1, #80	; 0x50
 8009034:	8812      	ldrh	r2, [r2, #0]
 8009036:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	1dba      	adds	r2, r7, #6
 800903c:	2152      	movs	r1, #82	; 0x52
 800903e:	8812      	ldrh	r2, [r2, #0]
 8009040:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	689a      	ldr	r2, [r3, #8]
 8009046:	2380      	movs	r3, #128	; 0x80
 8009048:	015b      	lsls	r3, r3, #5
 800904a:	429a      	cmp	r2, r3
 800904c:	d108      	bne.n	8009060 <HAL_UART_Transmit+0x94>
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	691b      	ldr	r3, [r3, #16]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d104      	bne.n	8009060 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8009056:	2300      	movs	r3, #0
 8009058:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	61bb      	str	r3, [r7, #24]
 800905e:	e003      	b.n	8009068 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009064:	2300      	movs	r3, #0
 8009066:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009068:	e02f      	b.n	80090ca <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800906a:	697a      	ldr	r2, [r7, #20]
 800906c:	68f8      	ldr	r0, [r7, #12]
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	9300      	str	r3, [sp, #0]
 8009072:	0013      	movs	r3, r2
 8009074:	2200      	movs	r2, #0
 8009076:	2180      	movs	r1, #128	; 0x80
 8009078:	f000 ff3c 	bl	8009ef4 <UART_WaitOnFlagUntilTimeout>
 800907c:	1e03      	subs	r3, r0, #0
 800907e:	d004      	beq.n	800908a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2220      	movs	r2, #32
 8009084:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009086:	2303      	movs	r3, #3
 8009088:	e03b      	b.n	8009102 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800908a:	69fb      	ldr	r3, [r7, #28]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d10b      	bne.n	80090a8 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009090:	69bb      	ldr	r3, [r7, #24]
 8009092:	881b      	ldrh	r3, [r3, #0]
 8009094:	001a      	movs	r2, r3
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	05d2      	lsls	r2, r2, #23
 800909c:	0dd2      	lsrs	r2, r2, #23
 800909e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80090a0:	69bb      	ldr	r3, [r7, #24]
 80090a2:	3302      	adds	r3, #2
 80090a4:	61bb      	str	r3, [r7, #24]
 80090a6:	e007      	b.n	80090b8 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80090a8:	69fb      	ldr	r3, [r7, #28]
 80090aa:	781a      	ldrb	r2, [r3, #0]
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80090b2:	69fb      	ldr	r3, [r7, #28]
 80090b4:	3301      	adds	r3, #1
 80090b6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	2252      	movs	r2, #82	; 0x52
 80090bc:	5a9b      	ldrh	r3, [r3, r2]
 80090be:	b29b      	uxth	r3, r3
 80090c0:	3b01      	subs	r3, #1
 80090c2:	b299      	uxth	r1, r3
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	2252      	movs	r2, #82	; 0x52
 80090c8:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	2252      	movs	r2, #82	; 0x52
 80090ce:	5a9b      	ldrh	r3, [r3, r2]
 80090d0:	b29b      	uxth	r3, r3
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d1c9      	bne.n	800906a <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80090d6:	697a      	ldr	r2, [r7, #20]
 80090d8:	68f8      	ldr	r0, [r7, #12]
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	9300      	str	r3, [sp, #0]
 80090de:	0013      	movs	r3, r2
 80090e0:	2200      	movs	r2, #0
 80090e2:	2140      	movs	r1, #64	; 0x40
 80090e4:	f000 ff06 	bl	8009ef4 <UART_WaitOnFlagUntilTimeout>
 80090e8:	1e03      	subs	r3, r0, #0
 80090ea:	d004      	beq.n	80090f6 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2220      	movs	r2, #32
 80090f0:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80090f2:	2303      	movs	r3, #3
 80090f4:	e005      	b.n	8009102 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	2220      	movs	r2, #32
 80090fa:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80090fc:	2300      	movs	r3, #0
 80090fe:	e000      	b.n	8009102 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8009100:	2302      	movs	r3, #2
  }
}
 8009102:	0018      	movs	r0, r3
 8009104:	46bd      	mov	sp, r7
 8009106:	b008      	add	sp, #32
 8009108:	bd80      	pop	{r7, pc}
	...

0800910c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800910c:	b590      	push	{r4, r7, lr}
 800910e:	b0ab      	sub	sp, #172	; 0xac
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	69db      	ldr	r3, [r3, #28]
 800911a:	22a4      	movs	r2, #164	; 0xa4
 800911c:	18b9      	adds	r1, r7, r2
 800911e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	20a0      	movs	r0, #160	; 0xa0
 8009128:	1839      	adds	r1, r7, r0
 800912a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	689b      	ldr	r3, [r3, #8]
 8009132:	219c      	movs	r1, #156	; 0x9c
 8009134:	1879      	adds	r1, r7, r1
 8009136:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009138:	0011      	movs	r1, r2
 800913a:	18bb      	adds	r3, r7, r2
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	4a99      	ldr	r2, [pc, #612]	; (80093a4 <HAL_UART_IRQHandler+0x298>)
 8009140:	4013      	ands	r3, r2
 8009142:	2298      	movs	r2, #152	; 0x98
 8009144:	18bc      	adds	r4, r7, r2
 8009146:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8009148:	18bb      	adds	r3, r7, r2
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d114      	bne.n	800917a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009150:	187b      	adds	r3, r7, r1
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	2220      	movs	r2, #32
 8009156:	4013      	ands	r3, r2
 8009158:	d00f      	beq.n	800917a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800915a:	183b      	adds	r3, r7, r0
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	2220      	movs	r2, #32
 8009160:	4013      	ands	r3, r2
 8009162:	d00a      	beq.n	800917a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009168:	2b00      	cmp	r3, #0
 800916a:	d100      	bne.n	800916e <HAL_UART_IRQHandler+0x62>
 800916c:	e2a0      	b.n	80096b0 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009172:	687a      	ldr	r2, [r7, #4]
 8009174:	0010      	movs	r0, r2
 8009176:	4798      	blx	r3
      }
      return;
 8009178:	e29a      	b.n	80096b0 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800917a:	2398      	movs	r3, #152	; 0x98
 800917c:	18fb      	adds	r3, r7, r3
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d100      	bne.n	8009186 <HAL_UART_IRQHandler+0x7a>
 8009184:	e114      	b.n	80093b0 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009186:	239c      	movs	r3, #156	; 0x9c
 8009188:	18fb      	adds	r3, r7, r3
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	2201      	movs	r2, #1
 800918e:	4013      	ands	r3, r2
 8009190:	d106      	bne.n	80091a0 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009192:	23a0      	movs	r3, #160	; 0xa0
 8009194:	18fb      	adds	r3, r7, r3
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4a83      	ldr	r2, [pc, #524]	; (80093a8 <HAL_UART_IRQHandler+0x29c>)
 800919a:	4013      	ands	r3, r2
 800919c:	d100      	bne.n	80091a0 <HAL_UART_IRQHandler+0x94>
 800919e:	e107      	b.n	80093b0 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80091a0:	23a4      	movs	r3, #164	; 0xa4
 80091a2:	18fb      	adds	r3, r7, r3
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	2201      	movs	r2, #1
 80091a8:	4013      	ands	r3, r2
 80091aa:	d012      	beq.n	80091d2 <HAL_UART_IRQHandler+0xc6>
 80091ac:	23a0      	movs	r3, #160	; 0xa0
 80091ae:	18fb      	adds	r3, r7, r3
 80091b0:	681a      	ldr	r2, [r3, #0]
 80091b2:	2380      	movs	r3, #128	; 0x80
 80091b4:	005b      	lsls	r3, r3, #1
 80091b6:	4013      	ands	r3, r2
 80091b8:	d00b      	beq.n	80091d2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	2201      	movs	r2, #1
 80091c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2284      	movs	r2, #132	; 0x84
 80091c6:	589b      	ldr	r3, [r3, r2]
 80091c8:	2201      	movs	r2, #1
 80091ca:	431a      	orrs	r2, r3
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2184      	movs	r1, #132	; 0x84
 80091d0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80091d2:	23a4      	movs	r3, #164	; 0xa4
 80091d4:	18fb      	adds	r3, r7, r3
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	2202      	movs	r2, #2
 80091da:	4013      	ands	r3, r2
 80091dc:	d011      	beq.n	8009202 <HAL_UART_IRQHandler+0xf6>
 80091de:	239c      	movs	r3, #156	; 0x9c
 80091e0:	18fb      	adds	r3, r7, r3
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	2201      	movs	r2, #1
 80091e6:	4013      	ands	r3, r2
 80091e8:	d00b      	beq.n	8009202 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	2202      	movs	r2, #2
 80091f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2284      	movs	r2, #132	; 0x84
 80091f6:	589b      	ldr	r3, [r3, r2]
 80091f8:	2204      	movs	r2, #4
 80091fa:	431a      	orrs	r2, r3
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2184      	movs	r1, #132	; 0x84
 8009200:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009202:	23a4      	movs	r3, #164	; 0xa4
 8009204:	18fb      	adds	r3, r7, r3
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	2204      	movs	r2, #4
 800920a:	4013      	ands	r3, r2
 800920c:	d011      	beq.n	8009232 <HAL_UART_IRQHandler+0x126>
 800920e:	239c      	movs	r3, #156	; 0x9c
 8009210:	18fb      	adds	r3, r7, r3
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	2201      	movs	r2, #1
 8009216:	4013      	ands	r3, r2
 8009218:	d00b      	beq.n	8009232 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	2204      	movs	r2, #4
 8009220:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2284      	movs	r2, #132	; 0x84
 8009226:	589b      	ldr	r3, [r3, r2]
 8009228:	2202      	movs	r2, #2
 800922a:	431a      	orrs	r2, r3
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2184      	movs	r1, #132	; 0x84
 8009230:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009232:	23a4      	movs	r3, #164	; 0xa4
 8009234:	18fb      	adds	r3, r7, r3
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	2208      	movs	r2, #8
 800923a:	4013      	ands	r3, r2
 800923c:	d017      	beq.n	800926e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800923e:	23a0      	movs	r3, #160	; 0xa0
 8009240:	18fb      	adds	r3, r7, r3
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	2220      	movs	r2, #32
 8009246:	4013      	ands	r3, r2
 8009248:	d105      	bne.n	8009256 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800924a:	239c      	movs	r3, #156	; 0x9c
 800924c:	18fb      	adds	r3, r7, r3
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	2201      	movs	r2, #1
 8009252:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009254:	d00b      	beq.n	800926e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	2208      	movs	r2, #8
 800925c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2284      	movs	r2, #132	; 0x84
 8009262:	589b      	ldr	r3, [r3, r2]
 8009264:	2208      	movs	r2, #8
 8009266:	431a      	orrs	r2, r3
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2184      	movs	r1, #132	; 0x84
 800926c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800926e:	23a4      	movs	r3, #164	; 0xa4
 8009270:	18fb      	adds	r3, r7, r3
 8009272:	681a      	ldr	r2, [r3, #0]
 8009274:	2380      	movs	r3, #128	; 0x80
 8009276:	011b      	lsls	r3, r3, #4
 8009278:	4013      	ands	r3, r2
 800927a:	d013      	beq.n	80092a4 <HAL_UART_IRQHandler+0x198>
 800927c:	23a0      	movs	r3, #160	; 0xa0
 800927e:	18fb      	adds	r3, r7, r3
 8009280:	681a      	ldr	r2, [r3, #0]
 8009282:	2380      	movs	r3, #128	; 0x80
 8009284:	04db      	lsls	r3, r3, #19
 8009286:	4013      	ands	r3, r2
 8009288:	d00c      	beq.n	80092a4 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	2280      	movs	r2, #128	; 0x80
 8009290:	0112      	lsls	r2, r2, #4
 8009292:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2284      	movs	r2, #132	; 0x84
 8009298:	589b      	ldr	r3, [r3, r2]
 800929a:	2220      	movs	r2, #32
 800929c:	431a      	orrs	r2, r3
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2184      	movs	r1, #132	; 0x84
 80092a2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2284      	movs	r2, #132	; 0x84
 80092a8:	589b      	ldr	r3, [r3, r2]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d100      	bne.n	80092b0 <HAL_UART_IRQHandler+0x1a4>
 80092ae:	e201      	b.n	80096b4 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80092b0:	23a4      	movs	r3, #164	; 0xa4
 80092b2:	18fb      	adds	r3, r7, r3
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	2220      	movs	r2, #32
 80092b8:	4013      	ands	r3, r2
 80092ba:	d00e      	beq.n	80092da <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80092bc:	23a0      	movs	r3, #160	; 0xa0
 80092be:	18fb      	adds	r3, r7, r3
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	2220      	movs	r2, #32
 80092c4:	4013      	ands	r3, r2
 80092c6:	d008      	beq.n	80092da <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d004      	beq.n	80092da <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092d4:	687a      	ldr	r2, [r7, #4]
 80092d6:	0010      	movs	r0, r2
 80092d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2284      	movs	r2, #132	; 0x84
 80092de:	589b      	ldr	r3, [r3, r2]
 80092e0:	2194      	movs	r1, #148	; 0x94
 80092e2:	187a      	adds	r2, r7, r1
 80092e4:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	689b      	ldr	r3, [r3, #8]
 80092ec:	2240      	movs	r2, #64	; 0x40
 80092ee:	4013      	ands	r3, r2
 80092f0:	2b40      	cmp	r3, #64	; 0x40
 80092f2:	d004      	beq.n	80092fe <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80092f4:	187b      	adds	r3, r7, r1
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	2228      	movs	r2, #40	; 0x28
 80092fa:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80092fc:	d047      	beq.n	800938e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	0018      	movs	r0, r3
 8009302:	f000 ff2b 	bl	800a15c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	689b      	ldr	r3, [r3, #8]
 800930c:	2240      	movs	r2, #64	; 0x40
 800930e:	4013      	ands	r3, r2
 8009310:	2b40      	cmp	r3, #64	; 0x40
 8009312:	d137      	bne.n	8009384 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009314:	f3ef 8310 	mrs	r3, PRIMASK
 8009318:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800931a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800931c:	2090      	movs	r0, #144	; 0x90
 800931e:	183a      	adds	r2, r7, r0
 8009320:	6013      	str	r3, [r2, #0]
 8009322:	2301      	movs	r3, #1
 8009324:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009326:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009328:	f383 8810 	msr	PRIMASK, r3
}
 800932c:	46c0      	nop			; (mov r8, r8)
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	689a      	ldr	r2, [r3, #8]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	2140      	movs	r1, #64	; 0x40
 800933a:	438a      	bics	r2, r1
 800933c:	609a      	str	r2, [r3, #8]
 800933e:	183b      	adds	r3, r7, r0
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009344:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009346:	f383 8810 	msr	PRIMASK, r3
}
 800934a:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009350:	2b00      	cmp	r3, #0
 8009352:	d012      	beq.n	800937a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009358:	4a14      	ldr	r2, [pc, #80]	; (80093ac <HAL_UART_IRQHandler+0x2a0>)
 800935a:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009360:	0018      	movs	r0, r3
 8009362:	f7fd fad1 	bl	8006908 <HAL_DMA_Abort_IT>
 8009366:	1e03      	subs	r3, r0, #0
 8009368:	d01a      	beq.n	80093a0 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800936e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009374:	0018      	movs	r0, r3
 8009376:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009378:	e012      	b.n	80093a0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	0018      	movs	r0, r3
 800937e:	f000 f9b7 	bl	80096f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009382:	e00d      	b.n	80093a0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	0018      	movs	r0, r3
 8009388:	f000 f9b2 	bl	80096f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800938c:	e008      	b.n	80093a0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	0018      	movs	r0, r3
 8009392:	f000 f9ad 	bl	80096f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2284      	movs	r2, #132	; 0x84
 800939a:	2100      	movs	r1, #0
 800939c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800939e:	e189      	b.n	80096b4 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093a0:	46c0      	nop			; (mov r8, r8)
    return;
 80093a2:	e187      	b.n	80096b4 <HAL_UART_IRQHandler+0x5a8>
 80093a4:	0000080f 	.word	0x0000080f
 80093a8:	04000120 	.word	0x04000120
 80093ac:	0800a225 	.word	0x0800a225

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093b4:	2b01      	cmp	r3, #1
 80093b6:	d000      	beq.n	80093ba <HAL_UART_IRQHandler+0x2ae>
 80093b8:	e13b      	b.n	8009632 <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80093ba:	23a4      	movs	r3, #164	; 0xa4
 80093bc:	18fb      	adds	r3, r7, r3
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	2210      	movs	r2, #16
 80093c2:	4013      	ands	r3, r2
 80093c4:	d100      	bne.n	80093c8 <HAL_UART_IRQHandler+0x2bc>
 80093c6:	e134      	b.n	8009632 <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80093c8:	23a0      	movs	r3, #160	; 0xa0
 80093ca:	18fb      	adds	r3, r7, r3
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	2210      	movs	r2, #16
 80093d0:	4013      	ands	r3, r2
 80093d2:	d100      	bne.n	80093d6 <HAL_UART_IRQHandler+0x2ca>
 80093d4:	e12d      	b.n	8009632 <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	2210      	movs	r2, #16
 80093dc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	689b      	ldr	r3, [r3, #8]
 80093e4:	2240      	movs	r2, #64	; 0x40
 80093e6:	4013      	ands	r3, r2
 80093e8:	2b40      	cmp	r3, #64	; 0x40
 80093ea:	d000      	beq.n	80093ee <HAL_UART_IRQHandler+0x2e2>
 80093ec:	e0a1      	b.n	8009532 <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	685a      	ldr	r2, [r3, #4]
 80093f6:	217e      	movs	r1, #126	; 0x7e
 80093f8:	187b      	adds	r3, r7, r1
 80093fa:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80093fc:	187b      	adds	r3, r7, r1
 80093fe:	881b      	ldrh	r3, [r3, #0]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d100      	bne.n	8009406 <HAL_UART_IRQHandler+0x2fa>
 8009404:	e158      	b.n	80096b8 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2258      	movs	r2, #88	; 0x58
 800940a:	5a9b      	ldrh	r3, [r3, r2]
 800940c:	187a      	adds	r2, r7, r1
 800940e:	8812      	ldrh	r2, [r2, #0]
 8009410:	429a      	cmp	r2, r3
 8009412:	d300      	bcc.n	8009416 <HAL_UART_IRQHandler+0x30a>
 8009414:	e150      	b.n	80096b8 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	187a      	adds	r2, r7, r1
 800941a:	215a      	movs	r1, #90	; 0x5a
 800941c:	8812      	ldrh	r2, [r2, #0]
 800941e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	2220      	movs	r2, #32
 800942a:	4013      	ands	r3, r2
 800942c:	d16f      	bne.n	800950e <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800942e:	f3ef 8310 	mrs	r3, PRIMASK
 8009432:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8009434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009436:	67bb      	str	r3, [r7, #120]	; 0x78
 8009438:	2301      	movs	r3, #1
 800943a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800943c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800943e:	f383 8810 	msr	PRIMASK, r3
}
 8009442:	46c0      	nop			; (mov r8, r8)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	681a      	ldr	r2, [r3, #0]
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	499e      	ldr	r1, [pc, #632]	; (80096c8 <HAL_UART_IRQHandler+0x5bc>)
 8009450:	400a      	ands	r2, r1
 8009452:	601a      	str	r2, [r3, #0]
 8009454:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009456:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800945a:	f383 8810 	msr	PRIMASK, r3
}
 800945e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009460:	f3ef 8310 	mrs	r3, PRIMASK
 8009464:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8009466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009468:	677b      	str	r3, [r7, #116]	; 0x74
 800946a:	2301      	movs	r3, #1
 800946c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800946e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009470:	f383 8810 	msr	PRIMASK, r3
}
 8009474:	46c0      	nop			; (mov r8, r8)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	689a      	ldr	r2, [r3, #8]
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	2101      	movs	r1, #1
 8009482:	438a      	bics	r2, r1
 8009484:	609a      	str	r2, [r3, #8]
 8009486:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009488:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800948a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800948c:	f383 8810 	msr	PRIMASK, r3
}
 8009490:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009492:	f3ef 8310 	mrs	r3, PRIMASK
 8009496:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8009498:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800949a:	673b      	str	r3, [r7, #112]	; 0x70
 800949c:	2301      	movs	r3, #1
 800949e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094a2:	f383 8810 	msr	PRIMASK, r3
}
 80094a6:	46c0      	nop			; (mov r8, r8)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	689a      	ldr	r2, [r3, #8]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	2140      	movs	r1, #64	; 0x40
 80094b4:	438a      	bics	r2, r1
 80094b6:	609a      	str	r2, [r3, #8]
 80094b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80094ba:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094be:	f383 8810 	msr	PRIMASK, r3
}
 80094c2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2280      	movs	r2, #128	; 0x80
 80094c8:	2120      	movs	r1, #32
 80094ca:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2200      	movs	r2, #0
 80094d0:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80094d2:	f3ef 8310 	mrs	r3, PRIMASK
 80094d6:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80094d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80094dc:	2301      	movs	r3, #1
 80094de:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80094e2:	f383 8810 	msr	PRIMASK, r3
}
 80094e6:	46c0      	nop			; (mov r8, r8)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	681a      	ldr	r2, [r3, #0]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	2110      	movs	r1, #16
 80094f4:	438a      	bics	r2, r1
 80094f6:	601a      	str	r2, [r3, #0]
 80094f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094fa:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80094fe:	f383 8810 	msr	PRIMASK, r3
}
 8009502:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009508:	0018      	movs	r0, r3
 800950a:	f7fd f9bd 	bl	8006888 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2202      	movs	r2, #2
 8009512:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2258      	movs	r2, #88	; 0x58
 8009518:	5a9a      	ldrh	r2, [r3, r2]
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	215a      	movs	r1, #90	; 0x5a
 800951e:	5a5b      	ldrh	r3, [r3, r1]
 8009520:	b29b      	uxth	r3, r3
 8009522:	1ad3      	subs	r3, r2, r3
 8009524:	b29a      	uxth	r2, r3
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	0011      	movs	r1, r2
 800952a:	0018      	movs	r0, r3
 800952c:	f7fa fe76 	bl	800421c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009530:	e0c2      	b.n	80096b8 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2258      	movs	r2, #88	; 0x58
 8009536:	5a99      	ldrh	r1, [r3, r2]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	225a      	movs	r2, #90	; 0x5a
 800953c:	5a9b      	ldrh	r3, [r3, r2]
 800953e:	b29a      	uxth	r2, r3
 8009540:	208e      	movs	r0, #142	; 0x8e
 8009542:	183b      	adds	r3, r7, r0
 8009544:	1a8a      	subs	r2, r1, r2
 8009546:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	225a      	movs	r2, #90	; 0x5a
 800954c:	5a9b      	ldrh	r3, [r3, r2]
 800954e:	b29b      	uxth	r3, r3
 8009550:	2b00      	cmp	r3, #0
 8009552:	d100      	bne.n	8009556 <HAL_UART_IRQHandler+0x44a>
 8009554:	e0b2      	b.n	80096bc <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8009556:	183b      	adds	r3, r7, r0
 8009558:	881b      	ldrh	r3, [r3, #0]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d100      	bne.n	8009560 <HAL_UART_IRQHandler+0x454>
 800955e:	e0ad      	b.n	80096bc <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009560:	f3ef 8310 	mrs	r3, PRIMASK
 8009564:	60fb      	str	r3, [r7, #12]
  return(result);
 8009566:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009568:	2488      	movs	r4, #136	; 0x88
 800956a:	193a      	adds	r2, r7, r4
 800956c:	6013      	str	r3, [r2, #0]
 800956e:	2301      	movs	r3, #1
 8009570:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	f383 8810 	msr	PRIMASK, r3
}
 8009578:	46c0      	nop			; (mov r8, r8)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	681a      	ldr	r2, [r3, #0]
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	4951      	ldr	r1, [pc, #324]	; (80096cc <HAL_UART_IRQHandler+0x5c0>)
 8009586:	400a      	ands	r2, r1
 8009588:	601a      	str	r2, [r3, #0]
 800958a:	193b      	adds	r3, r7, r4
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	f383 8810 	msr	PRIMASK, r3
}
 8009596:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009598:	f3ef 8310 	mrs	r3, PRIMASK
 800959c:	61bb      	str	r3, [r7, #24]
  return(result);
 800959e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095a0:	2484      	movs	r4, #132	; 0x84
 80095a2:	193a      	adds	r2, r7, r4
 80095a4:	6013      	str	r3, [r2, #0]
 80095a6:	2301      	movs	r3, #1
 80095a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095aa:	69fb      	ldr	r3, [r7, #28]
 80095ac:	f383 8810 	msr	PRIMASK, r3
}
 80095b0:	46c0      	nop			; (mov r8, r8)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	689a      	ldr	r2, [r3, #8]
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	2101      	movs	r1, #1
 80095be:	438a      	bics	r2, r1
 80095c0:	609a      	str	r2, [r3, #8]
 80095c2:	193b      	adds	r3, r7, r4
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095c8:	6a3b      	ldr	r3, [r7, #32]
 80095ca:	f383 8810 	msr	PRIMASK, r3
}
 80095ce:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2280      	movs	r2, #128	; 0x80
 80095d4:	2120      	movs	r1, #32
 80095d6:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2200      	movs	r2, #0
 80095dc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2200      	movs	r2, #0
 80095e2:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80095e4:	f3ef 8310 	mrs	r3, PRIMASK
 80095e8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80095ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095ec:	2480      	movs	r4, #128	; 0x80
 80095ee:	193a      	adds	r2, r7, r4
 80095f0:	6013      	str	r3, [r2, #0]
 80095f2:	2301      	movs	r3, #1
 80095f4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f8:	f383 8810 	msr	PRIMASK, r3
}
 80095fc:	46c0      	nop			; (mov r8, r8)
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	681a      	ldr	r2, [r3, #0]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	2110      	movs	r1, #16
 800960a:	438a      	bics	r2, r1
 800960c:	601a      	str	r2, [r3, #0]
 800960e:	193b      	adds	r3, r7, r4
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009616:	f383 8810 	msr	PRIMASK, r3
}
 800961a:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2202      	movs	r2, #2
 8009620:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009622:	183b      	adds	r3, r7, r0
 8009624:	881a      	ldrh	r2, [r3, #0]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	0011      	movs	r1, r2
 800962a:	0018      	movs	r0, r3
 800962c:	f7fa fdf6 	bl	800421c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009630:	e044      	b.n	80096bc <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009632:	23a4      	movs	r3, #164	; 0xa4
 8009634:	18fb      	adds	r3, r7, r3
 8009636:	681a      	ldr	r2, [r3, #0]
 8009638:	2380      	movs	r3, #128	; 0x80
 800963a:	035b      	lsls	r3, r3, #13
 800963c:	4013      	ands	r3, r2
 800963e:	d010      	beq.n	8009662 <HAL_UART_IRQHandler+0x556>
 8009640:	239c      	movs	r3, #156	; 0x9c
 8009642:	18fb      	adds	r3, r7, r3
 8009644:	681a      	ldr	r2, [r3, #0]
 8009646:	2380      	movs	r3, #128	; 0x80
 8009648:	03db      	lsls	r3, r3, #15
 800964a:	4013      	ands	r3, r2
 800964c:	d009      	beq.n	8009662 <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	2280      	movs	r2, #128	; 0x80
 8009654:	0352      	lsls	r2, r2, #13
 8009656:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	0018      	movs	r0, r3
 800965c:	f000 ffe8 	bl	800a630 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009660:	e02f      	b.n	80096c2 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009662:	23a4      	movs	r3, #164	; 0xa4
 8009664:	18fb      	adds	r3, r7, r3
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	2280      	movs	r2, #128	; 0x80
 800966a:	4013      	ands	r3, r2
 800966c:	d00f      	beq.n	800968e <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800966e:	23a0      	movs	r3, #160	; 0xa0
 8009670:	18fb      	adds	r3, r7, r3
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	2280      	movs	r2, #128	; 0x80
 8009676:	4013      	ands	r3, r2
 8009678:	d009      	beq.n	800968e <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800967e:	2b00      	cmp	r3, #0
 8009680:	d01e      	beq.n	80096c0 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009686:	687a      	ldr	r2, [r7, #4]
 8009688:	0010      	movs	r0, r2
 800968a:	4798      	blx	r3
    }
    return;
 800968c:	e018      	b.n	80096c0 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800968e:	23a4      	movs	r3, #164	; 0xa4
 8009690:	18fb      	adds	r3, r7, r3
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	2240      	movs	r2, #64	; 0x40
 8009696:	4013      	ands	r3, r2
 8009698:	d013      	beq.n	80096c2 <HAL_UART_IRQHandler+0x5b6>
 800969a:	23a0      	movs	r3, #160	; 0xa0
 800969c:	18fb      	adds	r3, r7, r3
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	2240      	movs	r2, #64	; 0x40
 80096a2:	4013      	ands	r3, r2
 80096a4:	d00d      	beq.n	80096c2 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	0018      	movs	r0, r3
 80096aa:	f000 fdd2 	bl	800a252 <UART_EndTransmit_IT>
    return;
 80096ae:	e008      	b.n	80096c2 <HAL_UART_IRQHandler+0x5b6>
      return;
 80096b0:	46c0      	nop			; (mov r8, r8)
 80096b2:	e006      	b.n	80096c2 <HAL_UART_IRQHandler+0x5b6>
    return;
 80096b4:	46c0      	nop			; (mov r8, r8)
 80096b6:	e004      	b.n	80096c2 <HAL_UART_IRQHandler+0x5b6>
      return;
 80096b8:	46c0      	nop			; (mov r8, r8)
 80096ba:	e002      	b.n	80096c2 <HAL_UART_IRQHandler+0x5b6>
      return;
 80096bc:	46c0      	nop			; (mov r8, r8)
 80096be:	e000      	b.n	80096c2 <HAL_UART_IRQHandler+0x5b6>
    return;
 80096c0:	46c0      	nop			; (mov r8, r8)
  }

}
 80096c2:	46bd      	mov	sp, r7
 80096c4:	b02b      	add	sp, #172	; 0xac
 80096c6:	bd90      	pop	{r4, r7, pc}
 80096c8:	fffffeff 	.word	0xfffffeff
 80096cc:	fffffedf 	.word	0xfffffedf

080096d0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b082      	sub	sp, #8
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80096d8:	46c0      	nop			; (mov r8, r8)
 80096da:	46bd      	mov	sp, r7
 80096dc:	b002      	add	sp, #8
 80096de:	bd80      	pop	{r7, pc}

080096e0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b082      	sub	sp, #8
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80096e8:	46c0      	nop			; (mov r8, r8)
 80096ea:	46bd      	mov	sp, r7
 80096ec:	b002      	add	sp, #8
 80096ee:	bd80      	pop	{r7, pc}

080096f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b082      	sub	sp, #8
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80096f8:	46c0      	nop			; (mov r8, r8)
 80096fa:	46bd      	mov	sp, r7
 80096fc:	b002      	add	sp, #8
 80096fe:	bd80      	pop	{r7, pc}

08009700 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009700:	b5b0      	push	{r4, r5, r7, lr}
 8009702:	b08e      	sub	sp, #56	; 0x38
 8009704:	af00      	add	r7, sp, #0
 8009706:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009708:	231a      	movs	r3, #26
 800970a:	2218      	movs	r2, #24
 800970c:	189b      	adds	r3, r3, r2
 800970e:	19db      	adds	r3, r3, r7
 8009710:	2200      	movs	r2, #0
 8009712:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009714:	69fb      	ldr	r3, [r7, #28]
 8009716:	689a      	ldr	r2, [r3, #8]
 8009718:	69fb      	ldr	r3, [r7, #28]
 800971a:	691b      	ldr	r3, [r3, #16]
 800971c:	431a      	orrs	r2, r3
 800971e:	69fb      	ldr	r3, [r7, #28]
 8009720:	695b      	ldr	r3, [r3, #20]
 8009722:	431a      	orrs	r2, r3
 8009724:	69fb      	ldr	r3, [r7, #28]
 8009726:	69db      	ldr	r3, [r3, #28]
 8009728:	4313      	orrs	r3, r2
 800972a:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800972c:	69fb      	ldr	r3, [r7, #28]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	4ac3      	ldr	r2, [pc, #780]	; (8009a40 <UART_SetConfig+0x340>)
 8009734:	4013      	ands	r3, r2
 8009736:	0019      	movs	r1, r3
 8009738:	69fb      	ldr	r3, [r7, #28]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800973e:	430a      	orrs	r2, r1
 8009740:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009742:	69fb      	ldr	r3, [r7, #28]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	685b      	ldr	r3, [r3, #4]
 8009748:	4abe      	ldr	r2, [pc, #760]	; (8009a44 <UART_SetConfig+0x344>)
 800974a:	4013      	ands	r3, r2
 800974c:	0019      	movs	r1, r3
 800974e:	69fb      	ldr	r3, [r7, #28]
 8009750:	68da      	ldr	r2, [r3, #12]
 8009752:	69fb      	ldr	r3, [r7, #28]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	430a      	orrs	r2, r1
 8009758:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800975a:	69fb      	ldr	r3, [r7, #28]
 800975c:	699b      	ldr	r3, [r3, #24]
 800975e:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009760:	69fb      	ldr	r3, [r7, #28]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	4ab8      	ldr	r2, [pc, #736]	; (8009a48 <UART_SetConfig+0x348>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d004      	beq.n	8009774 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800976a:	69fb      	ldr	r3, [r7, #28]
 800976c:	6a1b      	ldr	r3, [r3, #32]
 800976e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009770:	4313      	orrs	r3, r2
 8009772:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009774:	69fb      	ldr	r3, [r7, #28]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	689b      	ldr	r3, [r3, #8]
 800977a:	4ab4      	ldr	r2, [pc, #720]	; (8009a4c <UART_SetConfig+0x34c>)
 800977c:	4013      	ands	r3, r2
 800977e:	0019      	movs	r1, r3
 8009780:	69fb      	ldr	r3, [r7, #28]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009786:	430a      	orrs	r2, r1
 8009788:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800978a:	69fb      	ldr	r3, [r7, #28]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	4ab0      	ldr	r2, [pc, #704]	; (8009a50 <UART_SetConfig+0x350>)
 8009790:	4293      	cmp	r3, r2
 8009792:	d131      	bne.n	80097f8 <UART_SetConfig+0xf8>
 8009794:	4baf      	ldr	r3, [pc, #700]	; (8009a54 <UART_SetConfig+0x354>)
 8009796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009798:	2203      	movs	r2, #3
 800979a:	4013      	ands	r3, r2
 800979c:	2b03      	cmp	r3, #3
 800979e:	d01d      	beq.n	80097dc <UART_SetConfig+0xdc>
 80097a0:	d823      	bhi.n	80097ea <UART_SetConfig+0xea>
 80097a2:	2b02      	cmp	r3, #2
 80097a4:	d00c      	beq.n	80097c0 <UART_SetConfig+0xc0>
 80097a6:	d820      	bhi.n	80097ea <UART_SetConfig+0xea>
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d002      	beq.n	80097b2 <UART_SetConfig+0xb2>
 80097ac:	2b01      	cmp	r3, #1
 80097ae:	d00e      	beq.n	80097ce <UART_SetConfig+0xce>
 80097b0:	e01b      	b.n	80097ea <UART_SetConfig+0xea>
 80097b2:	231b      	movs	r3, #27
 80097b4:	2218      	movs	r2, #24
 80097b6:	189b      	adds	r3, r3, r2
 80097b8:	19db      	adds	r3, r3, r7
 80097ba:	2201      	movs	r2, #1
 80097bc:	701a      	strb	r2, [r3, #0]
 80097be:	e0b4      	b.n	800992a <UART_SetConfig+0x22a>
 80097c0:	231b      	movs	r3, #27
 80097c2:	2218      	movs	r2, #24
 80097c4:	189b      	adds	r3, r3, r2
 80097c6:	19db      	adds	r3, r3, r7
 80097c8:	2202      	movs	r2, #2
 80097ca:	701a      	strb	r2, [r3, #0]
 80097cc:	e0ad      	b.n	800992a <UART_SetConfig+0x22a>
 80097ce:	231b      	movs	r3, #27
 80097d0:	2218      	movs	r2, #24
 80097d2:	189b      	adds	r3, r3, r2
 80097d4:	19db      	adds	r3, r3, r7
 80097d6:	2204      	movs	r2, #4
 80097d8:	701a      	strb	r2, [r3, #0]
 80097da:	e0a6      	b.n	800992a <UART_SetConfig+0x22a>
 80097dc:	231b      	movs	r3, #27
 80097de:	2218      	movs	r2, #24
 80097e0:	189b      	adds	r3, r3, r2
 80097e2:	19db      	adds	r3, r3, r7
 80097e4:	2208      	movs	r2, #8
 80097e6:	701a      	strb	r2, [r3, #0]
 80097e8:	e09f      	b.n	800992a <UART_SetConfig+0x22a>
 80097ea:	231b      	movs	r3, #27
 80097ec:	2218      	movs	r2, #24
 80097ee:	189b      	adds	r3, r3, r2
 80097f0:	19db      	adds	r3, r3, r7
 80097f2:	2210      	movs	r2, #16
 80097f4:	701a      	strb	r2, [r3, #0]
 80097f6:	e098      	b.n	800992a <UART_SetConfig+0x22a>
 80097f8:	69fb      	ldr	r3, [r7, #28]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	4a96      	ldr	r2, [pc, #600]	; (8009a58 <UART_SetConfig+0x358>)
 80097fe:	4293      	cmp	r3, r2
 8009800:	d131      	bne.n	8009866 <UART_SetConfig+0x166>
 8009802:	4b94      	ldr	r3, [pc, #592]	; (8009a54 <UART_SetConfig+0x354>)
 8009804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009806:	220c      	movs	r2, #12
 8009808:	4013      	ands	r3, r2
 800980a:	2b0c      	cmp	r3, #12
 800980c:	d01d      	beq.n	800984a <UART_SetConfig+0x14a>
 800980e:	d823      	bhi.n	8009858 <UART_SetConfig+0x158>
 8009810:	2b08      	cmp	r3, #8
 8009812:	d00c      	beq.n	800982e <UART_SetConfig+0x12e>
 8009814:	d820      	bhi.n	8009858 <UART_SetConfig+0x158>
 8009816:	2b00      	cmp	r3, #0
 8009818:	d002      	beq.n	8009820 <UART_SetConfig+0x120>
 800981a:	2b04      	cmp	r3, #4
 800981c:	d00e      	beq.n	800983c <UART_SetConfig+0x13c>
 800981e:	e01b      	b.n	8009858 <UART_SetConfig+0x158>
 8009820:	231b      	movs	r3, #27
 8009822:	2218      	movs	r2, #24
 8009824:	189b      	adds	r3, r3, r2
 8009826:	19db      	adds	r3, r3, r7
 8009828:	2200      	movs	r2, #0
 800982a:	701a      	strb	r2, [r3, #0]
 800982c:	e07d      	b.n	800992a <UART_SetConfig+0x22a>
 800982e:	231b      	movs	r3, #27
 8009830:	2218      	movs	r2, #24
 8009832:	189b      	adds	r3, r3, r2
 8009834:	19db      	adds	r3, r3, r7
 8009836:	2202      	movs	r2, #2
 8009838:	701a      	strb	r2, [r3, #0]
 800983a:	e076      	b.n	800992a <UART_SetConfig+0x22a>
 800983c:	231b      	movs	r3, #27
 800983e:	2218      	movs	r2, #24
 8009840:	189b      	adds	r3, r3, r2
 8009842:	19db      	adds	r3, r3, r7
 8009844:	2204      	movs	r2, #4
 8009846:	701a      	strb	r2, [r3, #0]
 8009848:	e06f      	b.n	800992a <UART_SetConfig+0x22a>
 800984a:	231b      	movs	r3, #27
 800984c:	2218      	movs	r2, #24
 800984e:	189b      	adds	r3, r3, r2
 8009850:	19db      	adds	r3, r3, r7
 8009852:	2208      	movs	r2, #8
 8009854:	701a      	strb	r2, [r3, #0]
 8009856:	e068      	b.n	800992a <UART_SetConfig+0x22a>
 8009858:	231b      	movs	r3, #27
 800985a:	2218      	movs	r2, #24
 800985c:	189b      	adds	r3, r3, r2
 800985e:	19db      	adds	r3, r3, r7
 8009860:	2210      	movs	r2, #16
 8009862:	701a      	strb	r2, [r3, #0]
 8009864:	e061      	b.n	800992a <UART_SetConfig+0x22a>
 8009866:	69fb      	ldr	r3, [r7, #28]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4a7c      	ldr	r2, [pc, #496]	; (8009a5c <UART_SetConfig+0x35c>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d106      	bne.n	800987e <UART_SetConfig+0x17e>
 8009870:	231b      	movs	r3, #27
 8009872:	2218      	movs	r2, #24
 8009874:	189b      	adds	r3, r3, r2
 8009876:	19db      	adds	r3, r3, r7
 8009878:	2200      	movs	r2, #0
 800987a:	701a      	strb	r2, [r3, #0]
 800987c:	e055      	b.n	800992a <UART_SetConfig+0x22a>
 800987e:	69fb      	ldr	r3, [r7, #28]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	4a77      	ldr	r2, [pc, #476]	; (8009a60 <UART_SetConfig+0x360>)
 8009884:	4293      	cmp	r3, r2
 8009886:	d106      	bne.n	8009896 <UART_SetConfig+0x196>
 8009888:	231b      	movs	r3, #27
 800988a:	2218      	movs	r2, #24
 800988c:	189b      	adds	r3, r3, r2
 800988e:	19db      	adds	r3, r3, r7
 8009890:	2200      	movs	r2, #0
 8009892:	701a      	strb	r2, [r3, #0]
 8009894:	e049      	b.n	800992a <UART_SetConfig+0x22a>
 8009896:	69fb      	ldr	r3, [r7, #28]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	4a6b      	ldr	r2, [pc, #428]	; (8009a48 <UART_SetConfig+0x348>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d13e      	bne.n	800991e <UART_SetConfig+0x21e>
 80098a0:	4b6c      	ldr	r3, [pc, #432]	; (8009a54 <UART_SetConfig+0x354>)
 80098a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80098a4:	23c0      	movs	r3, #192	; 0xc0
 80098a6:	011b      	lsls	r3, r3, #4
 80098a8:	4013      	ands	r3, r2
 80098aa:	22c0      	movs	r2, #192	; 0xc0
 80098ac:	0112      	lsls	r2, r2, #4
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d027      	beq.n	8009902 <UART_SetConfig+0x202>
 80098b2:	22c0      	movs	r2, #192	; 0xc0
 80098b4:	0112      	lsls	r2, r2, #4
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d82a      	bhi.n	8009910 <UART_SetConfig+0x210>
 80098ba:	2280      	movs	r2, #128	; 0x80
 80098bc:	0112      	lsls	r2, r2, #4
 80098be:	4293      	cmp	r3, r2
 80098c0:	d011      	beq.n	80098e6 <UART_SetConfig+0x1e6>
 80098c2:	2280      	movs	r2, #128	; 0x80
 80098c4:	0112      	lsls	r2, r2, #4
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d822      	bhi.n	8009910 <UART_SetConfig+0x210>
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d004      	beq.n	80098d8 <UART_SetConfig+0x1d8>
 80098ce:	2280      	movs	r2, #128	; 0x80
 80098d0:	00d2      	lsls	r2, r2, #3
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d00e      	beq.n	80098f4 <UART_SetConfig+0x1f4>
 80098d6:	e01b      	b.n	8009910 <UART_SetConfig+0x210>
 80098d8:	231b      	movs	r3, #27
 80098da:	2218      	movs	r2, #24
 80098dc:	189b      	adds	r3, r3, r2
 80098de:	19db      	adds	r3, r3, r7
 80098e0:	2200      	movs	r2, #0
 80098e2:	701a      	strb	r2, [r3, #0]
 80098e4:	e021      	b.n	800992a <UART_SetConfig+0x22a>
 80098e6:	231b      	movs	r3, #27
 80098e8:	2218      	movs	r2, #24
 80098ea:	189b      	adds	r3, r3, r2
 80098ec:	19db      	adds	r3, r3, r7
 80098ee:	2202      	movs	r2, #2
 80098f0:	701a      	strb	r2, [r3, #0]
 80098f2:	e01a      	b.n	800992a <UART_SetConfig+0x22a>
 80098f4:	231b      	movs	r3, #27
 80098f6:	2218      	movs	r2, #24
 80098f8:	189b      	adds	r3, r3, r2
 80098fa:	19db      	adds	r3, r3, r7
 80098fc:	2204      	movs	r2, #4
 80098fe:	701a      	strb	r2, [r3, #0]
 8009900:	e013      	b.n	800992a <UART_SetConfig+0x22a>
 8009902:	231b      	movs	r3, #27
 8009904:	2218      	movs	r2, #24
 8009906:	189b      	adds	r3, r3, r2
 8009908:	19db      	adds	r3, r3, r7
 800990a:	2208      	movs	r2, #8
 800990c:	701a      	strb	r2, [r3, #0]
 800990e:	e00c      	b.n	800992a <UART_SetConfig+0x22a>
 8009910:	231b      	movs	r3, #27
 8009912:	2218      	movs	r2, #24
 8009914:	189b      	adds	r3, r3, r2
 8009916:	19db      	adds	r3, r3, r7
 8009918:	2210      	movs	r2, #16
 800991a:	701a      	strb	r2, [r3, #0]
 800991c:	e005      	b.n	800992a <UART_SetConfig+0x22a>
 800991e:	231b      	movs	r3, #27
 8009920:	2218      	movs	r2, #24
 8009922:	189b      	adds	r3, r3, r2
 8009924:	19db      	adds	r3, r3, r7
 8009926:	2210      	movs	r2, #16
 8009928:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800992a:	69fb      	ldr	r3, [r7, #28]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	4a46      	ldr	r2, [pc, #280]	; (8009a48 <UART_SetConfig+0x348>)
 8009930:	4293      	cmp	r3, r2
 8009932:	d000      	beq.n	8009936 <UART_SetConfig+0x236>
 8009934:	e09a      	b.n	8009a6c <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009936:	231b      	movs	r3, #27
 8009938:	2218      	movs	r2, #24
 800993a:	189b      	adds	r3, r3, r2
 800993c:	19db      	adds	r3, r3, r7
 800993e:	781b      	ldrb	r3, [r3, #0]
 8009940:	2b08      	cmp	r3, #8
 8009942:	d01d      	beq.n	8009980 <UART_SetConfig+0x280>
 8009944:	dc20      	bgt.n	8009988 <UART_SetConfig+0x288>
 8009946:	2b04      	cmp	r3, #4
 8009948:	d015      	beq.n	8009976 <UART_SetConfig+0x276>
 800994a:	dc1d      	bgt.n	8009988 <UART_SetConfig+0x288>
 800994c:	2b00      	cmp	r3, #0
 800994e:	d002      	beq.n	8009956 <UART_SetConfig+0x256>
 8009950:	2b02      	cmp	r3, #2
 8009952:	d005      	beq.n	8009960 <UART_SetConfig+0x260>
 8009954:	e018      	b.n	8009988 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009956:	f7fe ff11 	bl	800877c <HAL_RCC_GetPCLK1Freq>
 800995a:	0003      	movs	r3, r0
 800995c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800995e:	e01c      	b.n	800999a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009960:	4b3c      	ldr	r3, [pc, #240]	; (8009a54 <UART_SetConfig+0x354>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	2210      	movs	r2, #16
 8009966:	4013      	ands	r3, r2
 8009968:	d002      	beq.n	8009970 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800996a:	4b3e      	ldr	r3, [pc, #248]	; (8009a64 <UART_SetConfig+0x364>)
 800996c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800996e:	e014      	b.n	800999a <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8009970:	4b3d      	ldr	r3, [pc, #244]	; (8009a68 <UART_SetConfig+0x368>)
 8009972:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009974:	e011      	b.n	800999a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009976:	f7fe fe51 	bl	800861c <HAL_RCC_GetSysClockFreq>
 800997a:	0003      	movs	r3, r0
 800997c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800997e:	e00c      	b.n	800999a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009980:	2380      	movs	r3, #128	; 0x80
 8009982:	021b      	lsls	r3, r3, #8
 8009984:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009986:	e008      	b.n	800999a <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8009988:	2300      	movs	r3, #0
 800998a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800998c:	231a      	movs	r3, #26
 800998e:	2218      	movs	r2, #24
 8009990:	189b      	adds	r3, r3, r2
 8009992:	19db      	adds	r3, r3, r7
 8009994:	2201      	movs	r2, #1
 8009996:	701a      	strb	r2, [r3, #0]
        break;
 8009998:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800999a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800999c:	2b00      	cmp	r3, #0
 800999e:	d100      	bne.n	80099a2 <UART_SetConfig+0x2a2>
 80099a0:	e133      	b.n	8009c0a <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80099a2:	69fb      	ldr	r3, [r7, #28]
 80099a4:	685a      	ldr	r2, [r3, #4]
 80099a6:	0013      	movs	r3, r2
 80099a8:	005b      	lsls	r3, r3, #1
 80099aa:	189b      	adds	r3, r3, r2
 80099ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099ae:	429a      	cmp	r2, r3
 80099b0:	d305      	bcc.n	80099be <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 80099b2:	69fb      	ldr	r3, [r7, #28]
 80099b4:	685b      	ldr	r3, [r3, #4]
 80099b6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80099b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099ba:	429a      	cmp	r2, r3
 80099bc:	d906      	bls.n	80099cc <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 80099be:	231a      	movs	r3, #26
 80099c0:	2218      	movs	r2, #24
 80099c2:	189b      	adds	r3, r3, r2
 80099c4:	19db      	adds	r3, r3, r7
 80099c6:	2201      	movs	r2, #1
 80099c8:	701a      	strb	r2, [r3, #0]
 80099ca:	e11e      	b.n	8009c0a <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80099cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ce:	613b      	str	r3, [r7, #16]
 80099d0:	2300      	movs	r3, #0
 80099d2:	617b      	str	r3, [r7, #20]
 80099d4:	6939      	ldr	r1, [r7, #16]
 80099d6:	697a      	ldr	r2, [r7, #20]
 80099d8:	000b      	movs	r3, r1
 80099da:	0e1b      	lsrs	r3, r3, #24
 80099dc:	0010      	movs	r0, r2
 80099de:	0205      	lsls	r5, r0, #8
 80099e0:	431d      	orrs	r5, r3
 80099e2:	000b      	movs	r3, r1
 80099e4:	021c      	lsls	r4, r3, #8
 80099e6:	69fb      	ldr	r3, [r7, #28]
 80099e8:	685b      	ldr	r3, [r3, #4]
 80099ea:	085b      	lsrs	r3, r3, #1
 80099ec:	60bb      	str	r3, [r7, #8]
 80099ee:	2300      	movs	r3, #0
 80099f0:	60fb      	str	r3, [r7, #12]
 80099f2:	68b8      	ldr	r0, [r7, #8]
 80099f4:	68f9      	ldr	r1, [r7, #12]
 80099f6:	1900      	adds	r0, r0, r4
 80099f8:	4169      	adcs	r1, r5
 80099fa:	69fb      	ldr	r3, [r7, #28]
 80099fc:	685b      	ldr	r3, [r3, #4]
 80099fe:	603b      	str	r3, [r7, #0]
 8009a00:	2300      	movs	r3, #0
 8009a02:	607b      	str	r3, [r7, #4]
 8009a04:	683a      	ldr	r2, [r7, #0]
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f7f6 fd88 	bl	800051c <__aeabi_uldivmod>
 8009a0c:	0002      	movs	r2, r0
 8009a0e:	000b      	movs	r3, r1
 8009a10:	0013      	movs	r3, r2
 8009a12:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009a14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a16:	23c0      	movs	r3, #192	; 0xc0
 8009a18:	009b      	lsls	r3, r3, #2
 8009a1a:	429a      	cmp	r2, r3
 8009a1c:	d309      	bcc.n	8009a32 <UART_SetConfig+0x332>
 8009a1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a20:	2380      	movs	r3, #128	; 0x80
 8009a22:	035b      	lsls	r3, r3, #13
 8009a24:	429a      	cmp	r2, r3
 8009a26:	d204      	bcs.n	8009a32 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8009a28:	69fb      	ldr	r3, [r7, #28]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a2e:	60da      	str	r2, [r3, #12]
 8009a30:	e0eb      	b.n	8009c0a <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8009a32:	231a      	movs	r3, #26
 8009a34:	2218      	movs	r2, #24
 8009a36:	189b      	adds	r3, r3, r2
 8009a38:	19db      	adds	r3, r3, r7
 8009a3a:	2201      	movs	r2, #1
 8009a3c:	701a      	strb	r2, [r3, #0]
 8009a3e:	e0e4      	b.n	8009c0a <UART_SetConfig+0x50a>
 8009a40:	efff69f3 	.word	0xefff69f3
 8009a44:	ffffcfff 	.word	0xffffcfff
 8009a48:	40004800 	.word	0x40004800
 8009a4c:	fffff4ff 	.word	0xfffff4ff
 8009a50:	40013800 	.word	0x40013800
 8009a54:	40021000 	.word	0x40021000
 8009a58:	40004400 	.word	0x40004400
 8009a5c:	40004c00 	.word	0x40004c00
 8009a60:	40005000 	.word	0x40005000
 8009a64:	003d0900 	.word	0x003d0900
 8009a68:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009a6c:	69fb      	ldr	r3, [r7, #28]
 8009a6e:	69da      	ldr	r2, [r3, #28]
 8009a70:	2380      	movs	r3, #128	; 0x80
 8009a72:	021b      	lsls	r3, r3, #8
 8009a74:	429a      	cmp	r2, r3
 8009a76:	d000      	beq.n	8009a7a <UART_SetConfig+0x37a>
 8009a78:	e070      	b.n	8009b5c <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8009a7a:	231b      	movs	r3, #27
 8009a7c:	2218      	movs	r2, #24
 8009a7e:	189b      	adds	r3, r3, r2
 8009a80:	19db      	adds	r3, r3, r7
 8009a82:	781b      	ldrb	r3, [r3, #0]
 8009a84:	2b08      	cmp	r3, #8
 8009a86:	d822      	bhi.n	8009ace <UART_SetConfig+0x3ce>
 8009a88:	009a      	lsls	r2, r3, #2
 8009a8a:	4b67      	ldr	r3, [pc, #412]	; (8009c28 <UART_SetConfig+0x528>)
 8009a8c:	18d3      	adds	r3, r2, r3
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a92:	f7fe fe73 	bl	800877c <HAL_RCC_GetPCLK1Freq>
 8009a96:	0003      	movs	r3, r0
 8009a98:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009a9a:	e021      	b.n	8009ae0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009a9c:	f7fe fe84 	bl	80087a8 <HAL_RCC_GetPCLK2Freq>
 8009aa0:	0003      	movs	r3, r0
 8009aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009aa4:	e01c      	b.n	8009ae0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009aa6:	4b61      	ldr	r3, [pc, #388]	; (8009c2c <UART_SetConfig+0x52c>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	2210      	movs	r2, #16
 8009aac:	4013      	ands	r3, r2
 8009aae:	d002      	beq.n	8009ab6 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8009ab0:	4b5f      	ldr	r3, [pc, #380]	; (8009c30 <UART_SetConfig+0x530>)
 8009ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009ab4:	e014      	b.n	8009ae0 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8009ab6:	4b5f      	ldr	r3, [pc, #380]	; (8009c34 <UART_SetConfig+0x534>)
 8009ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009aba:	e011      	b.n	8009ae0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009abc:	f7fe fdae 	bl	800861c <HAL_RCC_GetSysClockFreq>
 8009ac0:	0003      	movs	r3, r0
 8009ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009ac4:	e00c      	b.n	8009ae0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ac6:	2380      	movs	r3, #128	; 0x80
 8009ac8:	021b      	lsls	r3, r3, #8
 8009aca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009acc:	e008      	b.n	8009ae0 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009ad2:	231a      	movs	r3, #26
 8009ad4:	2218      	movs	r2, #24
 8009ad6:	189b      	adds	r3, r3, r2
 8009ad8:	19db      	adds	r3, r3, r7
 8009ada:	2201      	movs	r2, #1
 8009adc:	701a      	strb	r2, [r3, #0]
        break;
 8009ade:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d100      	bne.n	8009ae8 <UART_SetConfig+0x3e8>
 8009ae6:	e090      	b.n	8009c0a <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aea:	005a      	lsls	r2, r3, #1
 8009aec:	69fb      	ldr	r3, [r7, #28]
 8009aee:	685b      	ldr	r3, [r3, #4]
 8009af0:	085b      	lsrs	r3, r3, #1
 8009af2:	18d2      	adds	r2, r2, r3
 8009af4:	69fb      	ldr	r3, [r7, #28]
 8009af6:	685b      	ldr	r3, [r3, #4]
 8009af8:	0019      	movs	r1, r3
 8009afa:	0010      	movs	r0, r2
 8009afc:	f7f6 fb20 	bl	8000140 <__udivsi3>
 8009b00:	0003      	movs	r3, r0
 8009b02:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b06:	2b0f      	cmp	r3, #15
 8009b08:	d921      	bls.n	8009b4e <UART_SetConfig+0x44e>
 8009b0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b0c:	2380      	movs	r3, #128	; 0x80
 8009b0e:	025b      	lsls	r3, r3, #9
 8009b10:	429a      	cmp	r2, r3
 8009b12:	d21c      	bcs.n	8009b4e <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b16:	b29a      	uxth	r2, r3
 8009b18:	200e      	movs	r0, #14
 8009b1a:	2418      	movs	r4, #24
 8009b1c:	1903      	adds	r3, r0, r4
 8009b1e:	19db      	adds	r3, r3, r7
 8009b20:	210f      	movs	r1, #15
 8009b22:	438a      	bics	r2, r1
 8009b24:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b28:	085b      	lsrs	r3, r3, #1
 8009b2a:	b29b      	uxth	r3, r3
 8009b2c:	2207      	movs	r2, #7
 8009b2e:	4013      	ands	r3, r2
 8009b30:	b299      	uxth	r1, r3
 8009b32:	1903      	adds	r3, r0, r4
 8009b34:	19db      	adds	r3, r3, r7
 8009b36:	1902      	adds	r2, r0, r4
 8009b38:	19d2      	adds	r2, r2, r7
 8009b3a:	8812      	ldrh	r2, [r2, #0]
 8009b3c:	430a      	orrs	r2, r1
 8009b3e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8009b40:	69fb      	ldr	r3, [r7, #28]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	1902      	adds	r2, r0, r4
 8009b46:	19d2      	adds	r2, r2, r7
 8009b48:	8812      	ldrh	r2, [r2, #0]
 8009b4a:	60da      	str	r2, [r3, #12]
 8009b4c:	e05d      	b.n	8009c0a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8009b4e:	231a      	movs	r3, #26
 8009b50:	2218      	movs	r2, #24
 8009b52:	189b      	adds	r3, r3, r2
 8009b54:	19db      	adds	r3, r3, r7
 8009b56:	2201      	movs	r2, #1
 8009b58:	701a      	strb	r2, [r3, #0]
 8009b5a:	e056      	b.n	8009c0a <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009b5c:	231b      	movs	r3, #27
 8009b5e:	2218      	movs	r2, #24
 8009b60:	189b      	adds	r3, r3, r2
 8009b62:	19db      	adds	r3, r3, r7
 8009b64:	781b      	ldrb	r3, [r3, #0]
 8009b66:	2b08      	cmp	r3, #8
 8009b68:	d822      	bhi.n	8009bb0 <UART_SetConfig+0x4b0>
 8009b6a:	009a      	lsls	r2, r3, #2
 8009b6c:	4b32      	ldr	r3, [pc, #200]	; (8009c38 <UART_SetConfig+0x538>)
 8009b6e:	18d3      	adds	r3, r2, r3
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009b74:	f7fe fe02 	bl	800877c <HAL_RCC_GetPCLK1Freq>
 8009b78:	0003      	movs	r3, r0
 8009b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009b7c:	e021      	b.n	8009bc2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009b7e:	f7fe fe13 	bl	80087a8 <HAL_RCC_GetPCLK2Freq>
 8009b82:	0003      	movs	r3, r0
 8009b84:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009b86:	e01c      	b.n	8009bc2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b88:	4b28      	ldr	r3, [pc, #160]	; (8009c2c <UART_SetConfig+0x52c>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	2210      	movs	r2, #16
 8009b8e:	4013      	ands	r3, r2
 8009b90:	d002      	beq.n	8009b98 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8009b92:	4b27      	ldr	r3, [pc, #156]	; (8009c30 <UART_SetConfig+0x530>)
 8009b94:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009b96:	e014      	b.n	8009bc2 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8009b98:	4b26      	ldr	r3, [pc, #152]	; (8009c34 <UART_SetConfig+0x534>)
 8009b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009b9c:	e011      	b.n	8009bc2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009b9e:	f7fe fd3d 	bl	800861c <HAL_RCC_GetSysClockFreq>
 8009ba2:	0003      	movs	r3, r0
 8009ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009ba6:	e00c      	b.n	8009bc2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ba8:	2380      	movs	r3, #128	; 0x80
 8009baa:	021b      	lsls	r3, r3, #8
 8009bac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009bae:	e008      	b.n	8009bc2 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009bb4:	231a      	movs	r3, #26
 8009bb6:	2218      	movs	r2, #24
 8009bb8:	189b      	adds	r3, r3, r2
 8009bba:	19db      	adds	r3, r3, r7
 8009bbc:	2201      	movs	r2, #1
 8009bbe:	701a      	strb	r2, [r3, #0]
        break;
 8009bc0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8009bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d020      	beq.n	8009c0a <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009bc8:	69fb      	ldr	r3, [r7, #28]
 8009bca:	685b      	ldr	r3, [r3, #4]
 8009bcc:	085a      	lsrs	r2, r3, #1
 8009bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bd0:	18d2      	adds	r2, r2, r3
 8009bd2:	69fb      	ldr	r3, [r7, #28]
 8009bd4:	685b      	ldr	r3, [r3, #4]
 8009bd6:	0019      	movs	r1, r3
 8009bd8:	0010      	movs	r0, r2
 8009bda:	f7f6 fab1 	bl	8000140 <__udivsi3>
 8009bde:	0003      	movs	r3, r0
 8009be0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009be4:	2b0f      	cmp	r3, #15
 8009be6:	d90a      	bls.n	8009bfe <UART_SetConfig+0x4fe>
 8009be8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009bea:	2380      	movs	r3, #128	; 0x80
 8009bec:	025b      	lsls	r3, r3, #9
 8009bee:	429a      	cmp	r2, r3
 8009bf0:	d205      	bcs.n	8009bfe <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bf4:	b29a      	uxth	r2, r3
 8009bf6:	69fb      	ldr	r3, [r7, #28]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	60da      	str	r2, [r3, #12]
 8009bfc:	e005      	b.n	8009c0a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8009bfe:	231a      	movs	r3, #26
 8009c00:	2218      	movs	r2, #24
 8009c02:	189b      	adds	r3, r3, r2
 8009c04:	19db      	adds	r3, r3, r7
 8009c06:	2201      	movs	r2, #1
 8009c08:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009c0a:	69fb      	ldr	r3, [r7, #28]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8009c10:	69fb      	ldr	r3, [r7, #28]
 8009c12:	2200      	movs	r2, #0
 8009c14:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8009c16:	231a      	movs	r3, #26
 8009c18:	2218      	movs	r2, #24
 8009c1a:	189b      	adds	r3, r3, r2
 8009c1c:	19db      	adds	r3, r3, r7
 8009c1e:	781b      	ldrb	r3, [r3, #0]
}
 8009c20:	0018      	movs	r0, r3
 8009c22:	46bd      	mov	sp, r7
 8009c24:	b00e      	add	sp, #56	; 0x38
 8009c26:	bdb0      	pop	{r4, r5, r7, pc}
 8009c28:	0800fdd4 	.word	0x0800fdd4
 8009c2c:	40021000 	.word	0x40021000
 8009c30:	003d0900 	.word	0x003d0900
 8009c34:	00f42400 	.word	0x00f42400
 8009c38:	0800fdf8 	.word	0x0800fdf8

08009c3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b082      	sub	sp, #8
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c48:	2201      	movs	r2, #1
 8009c4a:	4013      	ands	r3, r2
 8009c4c:	d00b      	beq.n	8009c66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	685b      	ldr	r3, [r3, #4]
 8009c54:	4a4a      	ldr	r2, [pc, #296]	; (8009d80 <UART_AdvFeatureConfig+0x144>)
 8009c56:	4013      	ands	r3, r2
 8009c58:	0019      	movs	r1, r3
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	430a      	orrs	r2, r1
 8009c64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c6a:	2202      	movs	r2, #2
 8009c6c:	4013      	ands	r3, r2
 8009c6e:	d00b      	beq.n	8009c88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	685b      	ldr	r3, [r3, #4]
 8009c76:	4a43      	ldr	r2, [pc, #268]	; (8009d84 <UART_AdvFeatureConfig+0x148>)
 8009c78:	4013      	ands	r3, r2
 8009c7a:	0019      	movs	r1, r3
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	430a      	orrs	r2, r1
 8009c86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c8c:	2204      	movs	r2, #4
 8009c8e:	4013      	ands	r3, r2
 8009c90:	d00b      	beq.n	8009caa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	685b      	ldr	r3, [r3, #4]
 8009c98:	4a3b      	ldr	r2, [pc, #236]	; (8009d88 <UART_AdvFeatureConfig+0x14c>)
 8009c9a:	4013      	ands	r3, r2
 8009c9c:	0019      	movs	r1, r3
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	430a      	orrs	r2, r1
 8009ca8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cae:	2208      	movs	r2, #8
 8009cb0:	4013      	ands	r3, r2
 8009cb2:	d00b      	beq.n	8009ccc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	685b      	ldr	r3, [r3, #4]
 8009cba:	4a34      	ldr	r2, [pc, #208]	; (8009d8c <UART_AdvFeatureConfig+0x150>)
 8009cbc:	4013      	ands	r3, r2
 8009cbe:	0019      	movs	r1, r3
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	430a      	orrs	r2, r1
 8009cca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cd0:	2210      	movs	r2, #16
 8009cd2:	4013      	ands	r3, r2
 8009cd4:	d00b      	beq.n	8009cee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	689b      	ldr	r3, [r3, #8]
 8009cdc:	4a2c      	ldr	r2, [pc, #176]	; (8009d90 <UART_AdvFeatureConfig+0x154>)
 8009cde:	4013      	ands	r3, r2
 8009ce0:	0019      	movs	r1, r3
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	430a      	orrs	r2, r1
 8009cec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cf2:	2220      	movs	r2, #32
 8009cf4:	4013      	ands	r3, r2
 8009cf6:	d00b      	beq.n	8009d10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	689b      	ldr	r3, [r3, #8]
 8009cfe:	4a25      	ldr	r2, [pc, #148]	; (8009d94 <UART_AdvFeatureConfig+0x158>)
 8009d00:	4013      	ands	r3, r2
 8009d02:	0019      	movs	r1, r3
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	430a      	orrs	r2, r1
 8009d0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d14:	2240      	movs	r2, #64	; 0x40
 8009d16:	4013      	ands	r3, r2
 8009d18:	d01d      	beq.n	8009d56 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	685b      	ldr	r3, [r3, #4]
 8009d20:	4a1d      	ldr	r2, [pc, #116]	; (8009d98 <UART_AdvFeatureConfig+0x15c>)
 8009d22:	4013      	ands	r3, r2
 8009d24:	0019      	movs	r1, r3
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	430a      	orrs	r2, r1
 8009d30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009d36:	2380      	movs	r3, #128	; 0x80
 8009d38:	035b      	lsls	r3, r3, #13
 8009d3a:	429a      	cmp	r2, r3
 8009d3c:	d10b      	bne.n	8009d56 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	685b      	ldr	r3, [r3, #4]
 8009d44:	4a15      	ldr	r2, [pc, #84]	; (8009d9c <UART_AdvFeatureConfig+0x160>)
 8009d46:	4013      	ands	r3, r2
 8009d48:	0019      	movs	r1, r3
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	430a      	orrs	r2, r1
 8009d54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d5a:	2280      	movs	r2, #128	; 0x80
 8009d5c:	4013      	ands	r3, r2
 8009d5e:	d00b      	beq.n	8009d78 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	685b      	ldr	r3, [r3, #4]
 8009d66:	4a0e      	ldr	r2, [pc, #56]	; (8009da0 <UART_AdvFeatureConfig+0x164>)
 8009d68:	4013      	ands	r3, r2
 8009d6a:	0019      	movs	r1, r3
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	430a      	orrs	r2, r1
 8009d76:	605a      	str	r2, [r3, #4]
  }
}
 8009d78:	46c0      	nop			; (mov r8, r8)
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	b002      	add	sp, #8
 8009d7e:	bd80      	pop	{r7, pc}
 8009d80:	fffdffff 	.word	0xfffdffff
 8009d84:	fffeffff 	.word	0xfffeffff
 8009d88:	fffbffff 	.word	0xfffbffff
 8009d8c:	ffff7fff 	.word	0xffff7fff
 8009d90:	ffffefff 	.word	0xffffefff
 8009d94:	ffffdfff 	.word	0xffffdfff
 8009d98:	ffefffff 	.word	0xffefffff
 8009d9c:	ff9fffff 	.word	0xff9fffff
 8009da0:	fff7ffff 	.word	0xfff7ffff

08009da4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b092      	sub	sp, #72	; 0x48
 8009da8:	af02      	add	r7, sp, #8
 8009daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2284      	movs	r2, #132	; 0x84
 8009db0:	2100      	movs	r1, #0
 8009db2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009db4:	f7fb ffce 	bl	8005d54 <HAL_GetTick>
 8009db8:	0003      	movs	r3, r0
 8009dba:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	2208      	movs	r2, #8
 8009dc4:	4013      	ands	r3, r2
 8009dc6:	2b08      	cmp	r3, #8
 8009dc8:	d12c      	bne.n	8009e24 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009dca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dcc:	2280      	movs	r2, #128	; 0x80
 8009dce:	0391      	lsls	r1, r2, #14
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	4a46      	ldr	r2, [pc, #280]	; (8009eec <UART_CheckIdleState+0x148>)
 8009dd4:	9200      	str	r2, [sp, #0]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	f000 f88c 	bl	8009ef4 <UART_WaitOnFlagUntilTimeout>
 8009ddc:	1e03      	subs	r3, r0, #0
 8009dde:	d021      	beq.n	8009e24 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009de0:	f3ef 8310 	mrs	r3, PRIMASK
 8009de4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8009de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009de8:	63bb      	str	r3, [r7, #56]	; 0x38
 8009dea:	2301      	movs	r3, #1
 8009dec:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009df0:	f383 8810 	msr	PRIMASK, r3
}
 8009df4:	46c0      	nop			; (mov r8, r8)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	681a      	ldr	r2, [r3, #0]
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	2180      	movs	r1, #128	; 0x80
 8009e02:	438a      	bics	r2, r1
 8009e04:	601a      	str	r2, [r3, #0]
 8009e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e08:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e0c:	f383 8810 	msr	PRIMASK, r3
}
 8009e10:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2220      	movs	r2, #32
 8009e16:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2278      	movs	r2, #120	; 0x78
 8009e1c:	2100      	movs	r1, #0
 8009e1e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e20:	2303      	movs	r3, #3
 8009e22:	e05f      	b.n	8009ee4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	2204      	movs	r2, #4
 8009e2c:	4013      	ands	r3, r2
 8009e2e:	2b04      	cmp	r3, #4
 8009e30:	d146      	bne.n	8009ec0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e34:	2280      	movs	r2, #128	; 0x80
 8009e36:	03d1      	lsls	r1, r2, #15
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	4a2c      	ldr	r2, [pc, #176]	; (8009eec <UART_CheckIdleState+0x148>)
 8009e3c:	9200      	str	r2, [sp, #0]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	f000 f858 	bl	8009ef4 <UART_WaitOnFlagUntilTimeout>
 8009e44:	1e03      	subs	r3, r0, #0
 8009e46:	d03b      	beq.n	8009ec0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e48:	f3ef 8310 	mrs	r3, PRIMASK
 8009e4c:	60fb      	str	r3, [r7, #12]
  return(result);
 8009e4e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009e50:	637b      	str	r3, [r7, #52]	; 0x34
 8009e52:	2301      	movs	r3, #1
 8009e54:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e56:	693b      	ldr	r3, [r7, #16]
 8009e58:	f383 8810 	msr	PRIMASK, r3
}
 8009e5c:	46c0      	nop			; (mov r8, r8)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	681a      	ldr	r2, [r3, #0]
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	4921      	ldr	r1, [pc, #132]	; (8009ef0 <UART_CheckIdleState+0x14c>)
 8009e6a:	400a      	ands	r2, r1
 8009e6c:	601a      	str	r2, [r3, #0]
 8009e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e70:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e72:	697b      	ldr	r3, [r7, #20]
 8009e74:	f383 8810 	msr	PRIMASK, r3
}
 8009e78:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e7a:	f3ef 8310 	mrs	r3, PRIMASK
 8009e7e:	61bb      	str	r3, [r7, #24]
  return(result);
 8009e80:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e82:	633b      	str	r3, [r7, #48]	; 0x30
 8009e84:	2301      	movs	r3, #1
 8009e86:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e88:	69fb      	ldr	r3, [r7, #28]
 8009e8a:	f383 8810 	msr	PRIMASK, r3
}
 8009e8e:	46c0      	nop			; (mov r8, r8)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	689a      	ldr	r2, [r3, #8]
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	2101      	movs	r1, #1
 8009e9c:	438a      	bics	r2, r1
 8009e9e:	609a      	str	r2, [r3, #8]
 8009ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ea4:	6a3b      	ldr	r3, [r7, #32]
 8009ea6:	f383 8810 	msr	PRIMASK, r3
}
 8009eaa:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2280      	movs	r2, #128	; 0x80
 8009eb0:	2120      	movs	r1, #32
 8009eb2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2278      	movs	r2, #120	; 0x78
 8009eb8:	2100      	movs	r1, #0
 8009eba:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ebc:	2303      	movs	r3, #3
 8009ebe:	e011      	b.n	8009ee4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2220      	movs	r2, #32
 8009ec4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2280      	movs	r2, #128	; 0x80
 8009eca:	2120      	movs	r1, #32
 8009ecc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2278      	movs	r2, #120	; 0x78
 8009ede:	2100      	movs	r1, #0
 8009ee0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009ee2:	2300      	movs	r3, #0
}
 8009ee4:	0018      	movs	r0, r3
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	b010      	add	sp, #64	; 0x40
 8009eea:	bd80      	pop	{r7, pc}
 8009eec:	01ffffff 	.word	0x01ffffff
 8009ef0:	fffffedf 	.word	0xfffffedf

08009ef4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b084      	sub	sp, #16
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	60f8      	str	r0, [r7, #12]
 8009efc:	60b9      	str	r1, [r7, #8]
 8009efe:	603b      	str	r3, [r7, #0]
 8009f00:	1dfb      	adds	r3, r7, #7
 8009f02:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f04:	e04b      	b.n	8009f9e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f06:	69bb      	ldr	r3, [r7, #24]
 8009f08:	3301      	adds	r3, #1
 8009f0a:	d048      	beq.n	8009f9e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f0c:	f7fb ff22 	bl	8005d54 <HAL_GetTick>
 8009f10:	0002      	movs	r2, r0
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	1ad3      	subs	r3, r2, r3
 8009f16:	69ba      	ldr	r2, [r7, #24]
 8009f18:	429a      	cmp	r2, r3
 8009f1a:	d302      	bcc.n	8009f22 <UART_WaitOnFlagUntilTimeout+0x2e>
 8009f1c:	69bb      	ldr	r3, [r7, #24]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d101      	bne.n	8009f26 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8009f22:	2303      	movs	r3, #3
 8009f24:	e04b      	b.n	8009fbe <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	2204      	movs	r2, #4
 8009f2e:	4013      	ands	r3, r2
 8009f30:	d035      	beq.n	8009f9e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	69db      	ldr	r3, [r3, #28]
 8009f38:	2208      	movs	r2, #8
 8009f3a:	4013      	ands	r3, r2
 8009f3c:	2b08      	cmp	r3, #8
 8009f3e:	d111      	bne.n	8009f64 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	2208      	movs	r2, #8
 8009f46:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	0018      	movs	r0, r3
 8009f4c:	f000 f906 	bl	800a15c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	2284      	movs	r2, #132	; 0x84
 8009f54:	2108      	movs	r1, #8
 8009f56:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	2278      	movs	r2, #120	; 0x78
 8009f5c:	2100      	movs	r1, #0
 8009f5e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8009f60:	2301      	movs	r3, #1
 8009f62:	e02c      	b.n	8009fbe <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	69da      	ldr	r2, [r3, #28]
 8009f6a:	2380      	movs	r3, #128	; 0x80
 8009f6c:	011b      	lsls	r3, r3, #4
 8009f6e:	401a      	ands	r2, r3
 8009f70:	2380      	movs	r3, #128	; 0x80
 8009f72:	011b      	lsls	r3, r3, #4
 8009f74:	429a      	cmp	r2, r3
 8009f76:	d112      	bne.n	8009f9e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	2280      	movs	r2, #128	; 0x80
 8009f7e:	0112      	lsls	r2, r2, #4
 8009f80:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	0018      	movs	r0, r3
 8009f86:	f000 f8e9 	bl	800a15c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	2284      	movs	r2, #132	; 0x84
 8009f8e:	2120      	movs	r1, #32
 8009f90:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	2278      	movs	r2, #120	; 0x78
 8009f96:	2100      	movs	r1, #0
 8009f98:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8009f9a:	2303      	movs	r3, #3
 8009f9c:	e00f      	b.n	8009fbe <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	69db      	ldr	r3, [r3, #28]
 8009fa4:	68ba      	ldr	r2, [r7, #8]
 8009fa6:	4013      	ands	r3, r2
 8009fa8:	68ba      	ldr	r2, [r7, #8]
 8009faa:	1ad3      	subs	r3, r2, r3
 8009fac:	425a      	negs	r2, r3
 8009fae:	4153      	adcs	r3, r2
 8009fb0:	b2db      	uxtb	r3, r3
 8009fb2:	001a      	movs	r2, r3
 8009fb4:	1dfb      	adds	r3, r7, #7
 8009fb6:	781b      	ldrb	r3, [r3, #0]
 8009fb8:	429a      	cmp	r2, r3
 8009fba:	d0a4      	beq.n	8009f06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009fbc:	2300      	movs	r3, #0
}
 8009fbe:	0018      	movs	r0, r3
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	b004      	add	sp, #16
 8009fc4:	bd80      	pop	{r7, pc}
	...

08009fc8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b090      	sub	sp, #64	; 0x40
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	60f8      	str	r0, [r7, #12]
 8009fd0:	60b9      	str	r1, [r7, #8]
 8009fd2:	1dbb      	adds	r3, r7, #6
 8009fd4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	68ba      	ldr	r2, [r7, #8]
 8009fda:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	1dba      	adds	r2, r7, #6
 8009fe0:	2158      	movs	r1, #88	; 0x58
 8009fe2:	8812      	ldrh	r2, [r2, #0]
 8009fe4:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	1dba      	adds	r2, r7, #6
 8009fea:	215a      	movs	r1, #90	; 0x5a
 8009fec:	8812      	ldrh	r2, [r2, #0]
 8009fee:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	689a      	ldr	r2, [r3, #8]
 8009ffa:	2380      	movs	r3, #128	; 0x80
 8009ffc:	015b      	lsls	r3, r3, #5
 8009ffe:	429a      	cmp	r2, r3
 800a000:	d10d      	bne.n	800a01e <UART_Start_Receive_IT+0x56>
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	691b      	ldr	r3, [r3, #16]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d104      	bne.n	800a014 <UART_Start_Receive_IT+0x4c>
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	225c      	movs	r2, #92	; 0x5c
 800a00e:	4950      	ldr	r1, [pc, #320]	; (800a150 <UART_Start_Receive_IT+0x188>)
 800a010:	5299      	strh	r1, [r3, r2]
 800a012:	e02e      	b.n	800a072 <UART_Start_Receive_IT+0xaa>
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	225c      	movs	r2, #92	; 0x5c
 800a018:	21ff      	movs	r1, #255	; 0xff
 800a01a:	5299      	strh	r1, [r3, r2]
 800a01c:	e029      	b.n	800a072 <UART_Start_Receive_IT+0xaa>
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	689b      	ldr	r3, [r3, #8]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d10d      	bne.n	800a042 <UART_Start_Receive_IT+0x7a>
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	691b      	ldr	r3, [r3, #16]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d104      	bne.n	800a038 <UART_Start_Receive_IT+0x70>
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	225c      	movs	r2, #92	; 0x5c
 800a032:	21ff      	movs	r1, #255	; 0xff
 800a034:	5299      	strh	r1, [r3, r2]
 800a036:	e01c      	b.n	800a072 <UART_Start_Receive_IT+0xaa>
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	225c      	movs	r2, #92	; 0x5c
 800a03c:	217f      	movs	r1, #127	; 0x7f
 800a03e:	5299      	strh	r1, [r3, r2]
 800a040:	e017      	b.n	800a072 <UART_Start_Receive_IT+0xaa>
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	689a      	ldr	r2, [r3, #8]
 800a046:	2380      	movs	r3, #128	; 0x80
 800a048:	055b      	lsls	r3, r3, #21
 800a04a:	429a      	cmp	r2, r3
 800a04c:	d10d      	bne.n	800a06a <UART_Start_Receive_IT+0xa2>
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	691b      	ldr	r3, [r3, #16]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d104      	bne.n	800a060 <UART_Start_Receive_IT+0x98>
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	225c      	movs	r2, #92	; 0x5c
 800a05a:	217f      	movs	r1, #127	; 0x7f
 800a05c:	5299      	strh	r1, [r3, r2]
 800a05e:	e008      	b.n	800a072 <UART_Start_Receive_IT+0xaa>
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	225c      	movs	r2, #92	; 0x5c
 800a064:	213f      	movs	r1, #63	; 0x3f
 800a066:	5299      	strh	r1, [r3, r2]
 800a068:	e003      	b.n	800a072 <UART_Start_Receive_IT+0xaa>
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	225c      	movs	r2, #92	; 0x5c
 800a06e:	2100      	movs	r1, #0
 800a070:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	2284      	movs	r2, #132	; 0x84
 800a076:	2100      	movs	r1, #0
 800a078:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	2280      	movs	r2, #128	; 0x80
 800a07e:	2122      	movs	r1, #34	; 0x22
 800a080:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a082:	f3ef 8310 	mrs	r3, PRIMASK
 800a086:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800a088:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a08a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a08c:	2301      	movs	r3, #1
 800a08e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a092:	f383 8810 	msr	PRIMASK, r3
}
 800a096:	46c0      	nop			; (mov r8, r8)
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	689a      	ldr	r2, [r3, #8]
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	2101      	movs	r1, #1
 800a0a4:	430a      	orrs	r2, r1
 800a0a6:	609a      	str	r2, [r3, #8]
 800a0a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0aa:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ae:	f383 8810 	msr	PRIMASK, r3
}
 800a0b2:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	689a      	ldr	r2, [r3, #8]
 800a0b8:	2380      	movs	r3, #128	; 0x80
 800a0ba:	015b      	lsls	r3, r3, #5
 800a0bc:	429a      	cmp	r2, r3
 800a0be:	d107      	bne.n	800a0d0 <UART_Start_Receive_IT+0x108>
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	691b      	ldr	r3, [r3, #16]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d103      	bne.n	800a0d0 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	4a22      	ldr	r2, [pc, #136]	; (800a154 <UART_Start_Receive_IT+0x18c>)
 800a0cc:	669a      	str	r2, [r3, #104]	; 0x68
 800a0ce:	e002      	b.n	800a0d6 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	4a21      	ldr	r2, [pc, #132]	; (800a158 <UART_Start_Receive_IT+0x190>)
 800a0d4:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	691b      	ldr	r3, [r3, #16]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d019      	beq.n	800a112 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a0de:	f3ef 8310 	mrs	r3, PRIMASK
 800a0e2:	61fb      	str	r3, [r7, #28]
  return(result);
 800a0e4:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800a0e6:	637b      	str	r3, [r7, #52]	; 0x34
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0ec:	6a3b      	ldr	r3, [r7, #32]
 800a0ee:	f383 8810 	msr	PRIMASK, r3
}
 800a0f2:	46c0      	nop			; (mov r8, r8)
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	681a      	ldr	r2, [r3, #0]
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	2190      	movs	r1, #144	; 0x90
 800a100:	0049      	lsls	r1, r1, #1
 800a102:	430a      	orrs	r2, r1
 800a104:	601a      	str	r2, [r3, #0]
 800a106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a108:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a10c:	f383 8810 	msr	PRIMASK, r3
}
 800a110:	e018      	b.n	800a144 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a112:	f3ef 8310 	mrs	r3, PRIMASK
 800a116:	613b      	str	r3, [r7, #16]
  return(result);
 800a118:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800a11a:	63bb      	str	r3, [r7, #56]	; 0x38
 800a11c:	2301      	movs	r3, #1
 800a11e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	f383 8810 	msr	PRIMASK, r3
}
 800a126:	46c0      	nop			; (mov r8, r8)
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	681a      	ldr	r2, [r3, #0]
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	2120      	movs	r1, #32
 800a134:	430a      	orrs	r2, r1
 800a136:	601a      	str	r2, [r3, #0]
 800a138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a13a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a13c:	69bb      	ldr	r3, [r7, #24]
 800a13e:	f383 8810 	msr	PRIMASK, r3
}
 800a142:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 800a144:	2300      	movs	r3, #0
}
 800a146:	0018      	movs	r0, r3
 800a148:	46bd      	mov	sp, r7
 800a14a:	b010      	add	sp, #64	; 0x40
 800a14c:	bd80      	pop	{r7, pc}
 800a14e:	46c0      	nop			; (mov r8, r8)
 800a150:	000001ff 	.word	0x000001ff
 800a154:	0800a46d 	.word	0x0800a46d
 800a158:	0800a2a9 	.word	0x0800a2a9

0800a15c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b08e      	sub	sp, #56	; 0x38
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a164:	f3ef 8310 	mrs	r3, PRIMASK
 800a168:	617b      	str	r3, [r7, #20]
  return(result);
 800a16a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a16c:	637b      	str	r3, [r7, #52]	; 0x34
 800a16e:	2301      	movs	r3, #1
 800a170:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a172:	69bb      	ldr	r3, [r7, #24]
 800a174:	f383 8810 	msr	PRIMASK, r3
}
 800a178:	46c0      	nop			; (mov r8, r8)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	681a      	ldr	r2, [r3, #0]
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	4926      	ldr	r1, [pc, #152]	; (800a220 <UART_EndRxTransfer+0xc4>)
 800a186:	400a      	ands	r2, r1
 800a188:	601a      	str	r2, [r3, #0]
 800a18a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a18c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a18e:	69fb      	ldr	r3, [r7, #28]
 800a190:	f383 8810 	msr	PRIMASK, r3
}
 800a194:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a196:	f3ef 8310 	mrs	r3, PRIMASK
 800a19a:	623b      	str	r3, [r7, #32]
  return(result);
 800a19c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a19e:	633b      	str	r3, [r7, #48]	; 0x30
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a6:	f383 8810 	msr	PRIMASK, r3
}
 800a1aa:	46c0      	nop			; (mov r8, r8)
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	689a      	ldr	r2, [r3, #8]
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	2101      	movs	r1, #1
 800a1b8:	438a      	bics	r2, r1
 800a1ba:	609a      	str	r2, [r3, #8]
 800a1bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1be:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1c2:	f383 8810 	msr	PRIMASK, r3
}
 800a1c6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1cc:	2b01      	cmp	r3, #1
 800a1ce:	d118      	bne.n	800a202 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1d0:	f3ef 8310 	mrs	r3, PRIMASK
 800a1d4:	60bb      	str	r3, [r7, #8]
  return(result);
 800a1d6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a1da:	2301      	movs	r3, #1
 800a1dc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	f383 8810 	msr	PRIMASK, r3
}
 800a1e4:	46c0      	nop			; (mov r8, r8)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	681a      	ldr	r2, [r3, #0]
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	2110      	movs	r1, #16
 800a1f2:	438a      	bics	r2, r1
 800a1f4:	601a      	str	r2, [r3, #0]
 800a1f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1fa:	693b      	ldr	r3, [r7, #16]
 800a1fc:	f383 8810 	msr	PRIMASK, r3
}
 800a200:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2280      	movs	r2, #128	; 0x80
 800a206:	2120      	movs	r1, #32
 800a208:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2200      	movs	r2, #0
 800a20e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2200      	movs	r2, #0
 800a214:	669a      	str	r2, [r3, #104]	; 0x68
}
 800a216:	46c0      	nop			; (mov r8, r8)
 800a218:	46bd      	mov	sp, r7
 800a21a:	b00e      	add	sp, #56	; 0x38
 800a21c:	bd80      	pop	{r7, pc}
 800a21e:	46c0      	nop			; (mov r8, r8)
 800a220:	fffffedf 	.word	0xfffffedf

0800a224 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b084      	sub	sp, #16
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a230:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	225a      	movs	r2, #90	; 0x5a
 800a236:	2100      	movs	r1, #0
 800a238:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	2252      	movs	r2, #82	; 0x52
 800a23e:	2100      	movs	r1, #0
 800a240:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	0018      	movs	r0, r3
 800a246:	f7ff fa53 	bl	80096f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a24a:	46c0      	nop			; (mov r8, r8)
 800a24c:	46bd      	mov	sp, r7
 800a24e:	b004      	add	sp, #16
 800a250:	bd80      	pop	{r7, pc}

0800a252 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a252:	b580      	push	{r7, lr}
 800a254:	b086      	sub	sp, #24
 800a256:	af00      	add	r7, sp, #0
 800a258:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a25a:	f3ef 8310 	mrs	r3, PRIMASK
 800a25e:	60bb      	str	r3, [r7, #8]
  return(result);
 800a260:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a262:	617b      	str	r3, [r7, #20]
 800a264:	2301      	movs	r3, #1
 800a266:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	f383 8810 	msr	PRIMASK, r3
}
 800a26e:	46c0      	nop			; (mov r8, r8)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	681a      	ldr	r2, [r3, #0]
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	2140      	movs	r1, #64	; 0x40
 800a27c:	438a      	bics	r2, r1
 800a27e:	601a      	str	r2, [r3, #0]
 800a280:	697b      	ldr	r3, [r7, #20]
 800a282:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a284:	693b      	ldr	r3, [r7, #16]
 800a286:	f383 8810 	msr	PRIMASK, r3
}
 800a28a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2220      	movs	r2, #32
 800a290:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2200      	movs	r2, #0
 800a296:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	0018      	movs	r0, r3
 800a29c:	f7ff fa18 	bl	80096d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a2a0:	46c0      	nop			; (mov r8, r8)
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	b006      	add	sp, #24
 800a2a6:	bd80      	pop	{r7, pc}

0800a2a8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b094      	sub	sp, #80	; 0x50
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a2b0:	204e      	movs	r0, #78	; 0x4e
 800a2b2:	183b      	adds	r3, r7, r0
 800a2b4:	687a      	ldr	r2, [r7, #4]
 800a2b6:	215c      	movs	r1, #92	; 0x5c
 800a2b8:	5a52      	ldrh	r2, [r2, r1]
 800a2ba:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2280      	movs	r2, #128	; 0x80
 800a2c0:	589b      	ldr	r3, [r3, r2]
 800a2c2:	2b22      	cmp	r3, #34	; 0x22
 800a2c4:	d000      	beq.n	800a2c8 <UART_RxISR_8BIT+0x20>
 800a2c6:	e0bf      	b.n	800a448 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a2ce:	214c      	movs	r1, #76	; 0x4c
 800a2d0:	187b      	adds	r3, r7, r1
 800a2d2:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a2d4:	187b      	adds	r3, r7, r1
 800a2d6:	881b      	ldrh	r3, [r3, #0]
 800a2d8:	b2da      	uxtb	r2, r3
 800a2da:	183b      	adds	r3, r7, r0
 800a2dc:	881b      	ldrh	r3, [r3, #0]
 800a2de:	b2d9      	uxtb	r1, r3
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2e4:	400a      	ands	r2, r1
 800a2e6:	b2d2      	uxtb	r2, r2
 800a2e8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2ee:	1c5a      	adds	r2, r3, #1
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	225a      	movs	r2, #90	; 0x5a
 800a2f8:	5a9b      	ldrh	r3, [r3, r2]
 800a2fa:	b29b      	uxth	r3, r3
 800a2fc:	3b01      	subs	r3, #1
 800a2fe:	b299      	uxth	r1, r3
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	225a      	movs	r2, #90	; 0x5a
 800a304:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	225a      	movs	r2, #90	; 0x5a
 800a30a:	5a9b      	ldrh	r3, [r3, r2]
 800a30c:	b29b      	uxth	r3, r3
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d000      	beq.n	800a314 <UART_RxISR_8BIT+0x6c>
 800a312:	e0a1      	b.n	800a458 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a314:	f3ef 8310 	mrs	r3, PRIMASK
 800a318:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800a31a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a31c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a31e:	2301      	movs	r3, #1
 800a320:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a324:	f383 8810 	msr	PRIMASK, r3
}
 800a328:	46c0      	nop			; (mov r8, r8)
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	681a      	ldr	r2, [r3, #0]
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	494a      	ldr	r1, [pc, #296]	; (800a460 <UART_RxISR_8BIT+0x1b8>)
 800a336:	400a      	ands	r2, r1
 800a338:	601a      	str	r2, [r3, #0]
 800a33a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a33c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a33e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a340:	f383 8810 	msr	PRIMASK, r3
}
 800a344:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a346:	f3ef 8310 	mrs	r3, PRIMASK
 800a34a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800a34c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a34e:	647b      	str	r3, [r7, #68]	; 0x44
 800a350:	2301      	movs	r3, #1
 800a352:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a356:	f383 8810 	msr	PRIMASK, r3
}
 800a35a:	46c0      	nop			; (mov r8, r8)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	689a      	ldr	r2, [r3, #8]
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	2101      	movs	r1, #1
 800a368:	438a      	bics	r2, r1
 800a36a:	609a      	str	r2, [r3, #8]
 800a36c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a36e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a372:	f383 8810 	msr	PRIMASK, r3
}
 800a376:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2280      	movs	r2, #128	; 0x80
 800a37c:	2120      	movs	r1, #32
 800a37e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2200      	movs	r2, #0
 800a384:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2200      	movs	r2, #0
 800a38a:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	4a34      	ldr	r2, [pc, #208]	; (800a464 <UART_RxISR_8BIT+0x1bc>)
 800a392:	4293      	cmp	r3, r2
 800a394:	d01f      	beq.n	800a3d6 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	685a      	ldr	r2, [r3, #4]
 800a39c:	2380      	movs	r3, #128	; 0x80
 800a39e:	041b      	lsls	r3, r3, #16
 800a3a0:	4013      	ands	r3, r2
 800a3a2:	d018      	beq.n	800a3d6 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a3a4:	f3ef 8310 	mrs	r3, PRIMASK
 800a3a8:	61bb      	str	r3, [r7, #24]
  return(result);
 800a3aa:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a3ac:	643b      	str	r3, [r7, #64]	; 0x40
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3b2:	69fb      	ldr	r3, [r7, #28]
 800a3b4:	f383 8810 	msr	PRIMASK, r3
}
 800a3b8:	46c0      	nop			; (mov r8, r8)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	681a      	ldr	r2, [r3, #0]
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	4928      	ldr	r1, [pc, #160]	; (800a468 <UART_RxISR_8BIT+0x1c0>)
 800a3c6:	400a      	ands	r2, r1
 800a3c8:	601a      	str	r2, [r3, #0]
 800a3ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3cc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3ce:	6a3b      	ldr	r3, [r7, #32]
 800a3d0:	f383 8810 	msr	PRIMASK, r3
}
 800a3d4:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3da:	2b01      	cmp	r3, #1
 800a3dc:	d12f      	bne.n	800a43e <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a3e4:	f3ef 8310 	mrs	r3, PRIMASK
 800a3e8:	60fb      	str	r3, [r7, #12]
  return(result);
 800a3ea:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3f2:	693b      	ldr	r3, [r7, #16]
 800a3f4:	f383 8810 	msr	PRIMASK, r3
}
 800a3f8:	46c0      	nop			; (mov r8, r8)
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	681a      	ldr	r2, [r3, #0]
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	2110      	movs	r1, #16
 800a406:	438a      	bics	r2, r1
 800a408:	601a      	str	r2, [r3, #0]
 800a40a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a40c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a40e:	697b      	ldr	r3, [r7, #20]
 800a410:	f383 8810 	msr	PRIMASK, r3
}
 800a414:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	69db      	ldr	r3, [r3, #28]
 800a41c:	2210      	movs	r2, #16
 800a41e:	4013      	ands	r3, r2
 800a420:	2b10      	cmp	r3, #16
 800a422:	d103      	bne.n	800a42c <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	2210      	movs	r2, #16
 800a42a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2258      	movs	r2, #88	; 0x58
 800a430:	5a9a      	ldrh	r2, [r3, r2]
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	0011      	movs	r1, r2
 800a436:	0018      	movs	r0, r3
 800a438:	f7f9 fef0 	bl	800421c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a43c:	e00c      	b.n	800a458 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	0018      	movs	r0, r3
 800a442:	f7ff f94d 	bl	80096e0 <HAL_UART_RxCpltCallback>
}
 800a446:	e007      	b.n	800a458 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	699a      	ldr	r2, [r3, #24]
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	2108      	movs	r1, #8
 800a454:	430a      	orrs	r2, r1
 800a456:	619a      	str	r2, [r3, #24]
}
 800a458:	46c0      	nop			; (mov r8, r8)
 800a45a:	46bd      	mov	sp, r7
 800a45c:	b014      	add	sp, #80	; 0x50
 800a45e:	bd80      	pop	{r7, pc}
 800a460:	fffffedf 	.word	0xfffffedf
 800a464:	40004800 	.word	0x40004800
 800a468:	fbffffff 	.word	0xfbffffff

0800a46c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b094      	sub	sp, #80	; 0x50
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a474:	204e      	movs	r0, #78	; 0x4e
 800a476:	183b      	adds	r3, r7, r0
 800a478:	687a      	ldr	r2, [r7, #4]
 800a47a:	215c      	movs	r1, #92	; 0x5c
 800a47c:	5a52      	ldrh	r2, [r2, r1]
 800a47e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2280      	movs	r2, #128	; 0x80
 800a484:	589b      	ldr	r3, [r3, r2]
 800a486:	2b22      	cmp	r3, #34	; 0x22
 800a488:	d000      	beq.n	800a48c <UART_RxISR_16BIT+0x20>
 800a48a:	e0bf      	b.n	800a60c <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a492:	214c      	movs	r1, #76	; 0x4c
 800a494:	187b      	adds	r3, r7, r1
 800a496:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a49c:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800a49e:	187b      	adds	r3, r7, r1
 800a4a0:	183a      	adds	r2, r7, r0
 800a4a2:	881b      	ldrh	r3, [r3, #0]
 800a4a4:	8812      	ldrh	r2, [r2, #0]
 800a4a6:	4013      	ands	r3, r2
 800a4a8:	b29a      	uxth	r2, r3
 800a4aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4ac:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4b2:	1c9a      	adds	r2, r3, #2
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	225a      	movs	r2, #90	; 0x5a
 800a4bc:	5a9b      	ldrh	r3, [r3, r2]
 800a4be:	b29b      	uxth	r3, r3
 800a4c0:	3b01      	subs	r3, #1
 800a4c2:	b299      	uxth	r1, r3
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	225a      	movs	r2, #90	; 0x5a
 800a4c8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	225a      	movs	r2, #90	; 0x5a
 800a4ce:	5a9b      	ldrh	r3, [r3, r2]
 800a4d0:	b29b      	uxth	r3, r3
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d000      	beq.n	800a4d8 <UART_RxISR_16BIT+0x6c>
 800a4d6:	e0a1      	b.n	800a61c <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a4d8:	f3ef 8310 	mrs	r3, PRIMASK
 800a4dc:	623b      	str	r3, [r7, #32]
  return(result);
 800a4de:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a4e0:	647b      	str	r3, [r7, #68]	; 0x44
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e8:	f383 8810 	msr	PRIMASK, r3
}
 800a4ec:	46c0      	nop			; (mov r8, r8)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	681a      	ldr	r2, [r3, #0]
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	494a      	ldr	r1, [pc, #296]	; (800a624 <UART_RxISR_16BIT+0x1b8>)
 800a4fa:	400a      	ands	r2, r1
 800a4fc:	601a      	str	r2, [r3, #0]
 800a4fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a500:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a504:	f383 8810 	msr	PRIMASK, r3
}
 800a508:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a50a:	f3ef 8310 	mrs	r3, PRIMASK
 800a50e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800a510:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a512:	643b      	str	r3, [r7, #64]	; 0x40
 800a514:	2301      	movs	r3, #1
 800a516:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a51a:	f383 8810 	msr	PRIMASK, r3
}
 800a51e:	46c0      	nop			; (mov r8, r8)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	689a      	ldr	r2, [r3, #8]
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	2101      	movs	r1, #1
 800a52c:	438a      	bics	r2, r1
 800a52e:	609a      	str	r2, [r3, #8]
 800a530:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a532:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a536:	f383 8810 	msr	PRIMASK, r3
}
 800a53a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2280      	movs	r2, #128	; 0x80
 800a540:	2120      	movs	r1, #32
 800a542:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2200      	movs	r2, #0
 800a548:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2200      	movs	r2, #0
 800a54e:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	4a34      	ldr	r2, [pc, #208]	; (800a628 <UART_RxISR_16BIT+0x1bc>)
 800a556:	4293      	cmp	r3, r2
 800a558:	d01f      	beq.n	800a59a <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	685a      	ldr	r2, [r3, #4]
 800a560:	2380      	movs	r3, #128	; 0x80
 800a562:	041b      	lsls	r3, r3, #16
 800a564:	4013      	ands	r3, r2
 800a566:	d018      	beq.n	800a59a <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a568:	f3ef 8310 	mrs	r3, PRIMASK
 800a56c:	617b      	str	r3, [r7, #20]
  return(result);
 800a56e:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a570:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a572:	2301      	movs	r3, #1
 800a574:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a576:	69bb      	ldr	r3, [r7, #24]
 800a578:	f383 8810 	msr	PRIMASK, r3
}
 800a57c:	46c0      	nop			; (mov r8, r8)
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	681a      	ldr	r2, [r3, #0]
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	4928      	ldr	r1, [pc, #160]	; (800a62c <UART_RxISR_16BIT+0x1c0>)
 800a58a:	400a      	ands	r2, r1
 800a58c:	601a      	str	r2, [r3, #0]
 800a58e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a590:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a592:	69fb      	ldr	r3, [r7, #28]
 800a594:	f383 8810 	msr	PRIMASK, r3
}
 800a598:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a59e:	2b01      	cmp	r3, #1
 800a5a0:	d12f      	bne.n	800a602 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a5a8:	f3ef 8310 	mrs	r3, PRIMASK
 800a5ac:	60bb      	str	r3, [r7, #8]
  return(result);
 800a5ae:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5b0:	63bb      	str	r3, [r7, #56]	; 0x38
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	f383 8810 	msr	PRIMASK, r3
}
 800a5bc:	46c0      	nop			; (mov r8, r8)
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	681a      	ldr	r2, [r3, #0]
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	2110      	movs	r1, #16
 800a5ca:	438a      	bics	r2, r1
 800a5cc:	601a      	str	r2, [r3, #0]
 800a5ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a5d2:	693b      	ldr	r3, [r7, #16]
 800a5d4:	f383 8810 	msr	PRIMASK, r3
}
 800a5d8:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	69db      	ldr	r3, [r3, #28]
 800a5e0:	2210      	movs	r2, #16
 800a5e2:	4013      	ands	r3, r2
 800a5e4:	2b10      	cmp	r3, #16
 800a5e6:	d103      	bne.n	800a5f0 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	2210      	movs	r2, #16
 800a5ee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2258      	movs	r2, #88	; 0x58
 800a5f4:	5a9a      	ldrh	r2, [r3, r2]
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	0011      	movs	r1, r2
 800a5fa:	0018      	movs	r0, r3
 800a5fc:	f7f9 fe0e 	bl	800421c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a600:	e00c      	b.n	800a61c <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	0018      	movs	r0, r3
 800a606:	f7ff f86b 	bl	80096e0 <HAL_UART_RxCpltCallback>
}
 800a60a:	e007      	b.n	800a61c <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	699a      	ldr	r2, [r3, #24]
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	2108      	movs	r1, #8
 800a618:	430a      	orrs	r2, r1
 800a61a:	619a      	str	r2, [r3, #24]
}
 800a61c:	46c0      	nop			; (mov r8, r8)
 800a61e:	46bd      	mov	sp, r7
 800a620:	b014      	add	sp, #80	; 0x50
 800a622:	bd80      	pop	{r7, pc}
 800a624:	fffffedf 	.word	0xfffffedf
 800a628:	40004800 	.word	0x40004800
 800a62c:	fbffffff 	.word	0xfbffffff

0800a630 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b082      	sub	sp, #8
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a638:	46c0      	nop			; (mov r8, r8)
 800a63a:	46bd      	mov	sp, r7
 800a63c:	b002      	add	sp, #8
 800a63e:	bd80      	pop	{r7, pc}

0800a640 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a640:	b5b0      	push	{r4, r5, r7, lr}
 800a642:	b08a      	sub	sp, #40	; 0x28
 800a644:	af00      	add	r7, sp, #0
 800a646:	60f8      	str	r0, [r7, #12]
 800a648:	60b9      	str	r1, [r7, #8]
 800a64a:	1dbb      	adds	r3, r7, #6
 800a64c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	2280      	movs	r2, #128	; 0x80
 800a652:	589b      	ldr	r3, [r3, r2]
 800a654:	2b20      	cmp	r3, #32
 800a656:	d156      	bne.n	800a706 <HAL_UARTEx_ReceiveToIdle_IT+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d003      	beq.n	800a666 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 800a65e:	1dbb      	adds	r3, r7, #6
 800a660:	881b      	ldrh	r3, [r3, #0]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d101      	bne.n	800a66a <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 800a666:	2301      	movs	r3, #1
 800a668:	e04e      	b.n	800a708 <HAL_UARTEx_ReceiveToIdle_IT+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data to be received from RDR will be
       handled through a uint16_t cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	689a      	ldr	r2, [r3, #8]
 800a66e:	2380      	movs	r3, #128	; 0x80
 800a670:	015b      	lsls	r3, r3, #5
 800a672:	429a      	cmp	r2, r3
 800a674:	d109      	bne.n	800a68a <HAL_UARTEx_ReceiveToIdle_IT+0x4a>
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	691b      	ldr	r3, [r3, #16]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d105      	bne.n	800a68a <HAL_UARTEx_ReceiveToIdle_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	2201      	movs	r2, #1
 800a682:	4013      	ands	r3, r2
 800a684:	d001      	beq.n	800a68a <HAL_UARTEx_ReceiveToIdle_IT+0x4a>
      {
        return  HAL_ERROR;
 800a686:	2301      	movs	r3, #1
 800a688:	e03e      	b.n	800a708 <HAL_UARTEx_ReceiveToIdle_IT+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	2201      	movs	r2, #1
 800a68e:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	2200      	movs	r2, #0
 800a694:	665a      	str	r2, [r3, #100]	; 0x64

    status =  UART_Start_Receive_IT(huart, pData, Size);
 800a696:	2527      	movs	r5, #39	; 0x27
 800a698:	197c      	adds	r4, r7, r5
 800a69a:	1dbb      	adds	r3, r7, #6
 800a69c:	881a      	ldrh	r2, [r3, #0]
 800a69e:	68b9      	ldr	r1, [r7, #8]
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	0018      	movs	r0, r3
 800a6a4:	f7ff fc90 	bl	8009fc8 <UART_Start_Receive_IT>
 800a6a8:	0003      	movs	r3, r0
 800a6aa:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800a6ac:	197b      	adds	r3, r7, r5
 800a6ae:	781b      	ldrb	r3, [r3, #0]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d124      	bne.n	800a6fe <HAL_UARTEx_ReceiveToIdle_IT+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6b8:	2b01      	cmp	r3, #1
 800a6ba:	d11c      	bne.n	800a6f6 <HAL_UARTEx_ReceiveToIdle_IT+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	2210      	movs	r2, #16
 800a6c2:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a6c4:	f3ef 8310 	mrs	r3, PRIMASK
 800a6c8:	617b      	str	r3, [r7, #20]
  return(result);
 800a6ca:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6cc:	623b      	str	r3, [r7, #32]
 800a6ce:	2301      	movs	r3, #1
 800a6d0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a6d2:	69bb      	ldr	r3, [r7, #24]
 800a6d4:	f383 8810 	msr	PRIMASK, r3
}
 800a6d8:	46c0      	nop			; (mov r8, r8)
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	681a      	ldr	r2, [r3, #0]
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	2110      	movs	r1, #16
 800a6e6:	430a      	orrs	r2, r1
 800a6e8:	601a      	str	r2, [r3, #0]
 800a6ea:	6a3b      	ldr	r3, [r7, #32]
 800a6ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a6ee:	69fb      	ldr	r3, [r7, #28]
 800a6f0:	f383 8810 	msr	PRIMASK, r3
}
 800a6f4:	e003      	b.n	800a6fe <HAL_UARTEx_ReceiveToIdle_IT+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800a6f6:	2327      	movs	r3, #39	; 0x27
 800a6f8:	18fb      	adds	r3, r7, r3
 800a6fa:	2201      	movs	r2, #1
 800a6fc:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 800a6fe:	2327      	movs	r3, #39	; 0x27
 800a700:	18fb      	adds	r3, r7, r3
 800a702:	781b      	ldrb	r3, [r3, #0]
 800a704:	e000      	b.n	800a708 <HAL_UARTEx_ReceiveToIdle_IT+0xc8>
  }
  else
  {
    return HAL_BUSY;
 800a706:	2302      	movs	r3, #2
  }
}
 800a708:	0018      	movs	r0, r3
 800a70a:	46bd      	mov	sp, r7
 800a70c:	b00a      	add	sp, #40	; 0x28
 800a70e:	bdb0      	pop	{r4, r5, r7, pc}

0800a710 <__assert_func>:
 800a710:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800a712:	0014      	movs	r4, r2
 800a714:	001a      	movs	r2, r3
 800a716:	4b09      	ldr	r3, [pc, #36]	; (800a73c <__assert_func+0x2c>)
 800a718:	0005      	movs	r5, r0
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	000e      	movs	r6, r1
 800a71e:	68d8      	ldr	r0, [r3, #12]
 800a720:	4b07      	ldr	r3, [pc, #28]	; (800a740 <__assert_func+0x30>)
 800a722:	2c00      	cmp	r4, #0
 800a724:	d101      	bne.n	800a72a <__assert_func+0x1a>
 800a726:	4b07      	ldr	r3, [pc, #28]	; (800a744 <__assert_func+0x34>)
 800a728:	001c      	movs	r4, r3
 800a72a:	4907      	ldr	r1, [pc, #28]	; (800a748 <__assert_func+0x38>)
 800a72c:	9301      	str	r3, [sp, #4]
 800a72e:	9402      	str	r4, [sp, #8]
 800a730:	002b      	movs	r3, r5
 800a732:	9600      	str	r6, [sp, #0]
 800a734:	f001 fe64 	bl	800c400 <fiprintf>
 800a738:	f002 f91a 	bl	800c970 <abort>
 800a73c:	200002ac 	.word	0x200002ac
 800a740:	0800fe1c 	.word	0x0800fe1c
 800a744:	0800fe57 	.word	0x0800fe57
 800a748:	0800fe29 	.word	0x0800fe29

0800a74c <malloc>:
 800a74c:	b510      	push	{r4, lr}
 800a74e:	4b03      	ldr	r3, [pc, #12]	; (800a75c <malloc+0x10>)
 800a750:	0001      	movs	r1, r0
 800a752:	6818      	ldr	r0, [r3, #0]
 800a754:	f000 f830 	bl	800a7b8 <_malloc_r>
 800a758:	bd10      	pop	{r4, pc}
 800a75a:	46c0      	nop			; (mov r8, r8)
 800a75c:	200002ac 	.word	0x200002ac

0800a760 <free>:
 800a760:	b510      	push	{r4, lr}
 800a762:	4b03      	ldr	r3, [pc, #12]	; (800a770 <free+0x10>)
 800a764:	0001      	movs	r1, r0
 800a766:	6818      	ldr	r0, [r3, #0]
 800a768:	f002 ffa6 	bl	800d6b8 <_free_r>
 800a76c:	bd10      	pop	{r4, pc}
 800a76e:	46c0      	nop			; (mov r8, r8)
 800a770:	200002ac 	.word	0x200002ac

0800a774 <sbrk_aligned>:
 800a774:	b570      	push	{r4, r5, r6, lr}
 800a776:	4e0f      	ldr	r6, [pc, #60]	; (800a7b4 <sbrk_aligned+0x40>)
 800a778:	000d      	movs	r5, r1
 800a77a:	6831      	ldr	r1, [r6, #0]
 800a77c:	0004      	movs	r4, r0
 800a77e:	2900      	cmp	r1, #0
 800a780:	d102      	bne.n	800a788 <sbrk_aligned+0x14>
 800a782:	f002 f883 	bl	800c88c <_sbrk_r>
 800a786:	6030      	str	r0, [r6, #0]
 800a788:	0029      	movs	r1, r5
 800a78a:	0020      	movs	r0, r4
 800a78c:	f002 f87e 	bl	800c88c <_sbrk_r>
 800a790:	1c43      	adds	r3, r0, #1
 800a792:	d00a      	beq.n	800a7aa <sbrk_aligned+0x36>
 800a794:	2303      	movs	r3, #3
 800a796:	1cc5      	adds	r5, r0, #3
 800a798:	439d      	bics	r5, r3
 800a79a:	42a8      	cmp	r0, r5
 800a79c:	d007      	beq.n	800a7ae <sbrk_aligned+0x3a>
 800a79e:	1a29      	subs	r1, r5, r0
 800a7a0:	0020      	movs	r0, r4
 800a7a2:	f002 f873 	bl	800c88c <_sbrk_r>
 800a7a6:	3001      	adds	r0, #1
 800a7a8:	d101      	bne.n	800a7ae <sbrk_aligned+0x3a>
 800a7aa:	2501      	movs	r5, #1
 800a7ac:	426d      	negs	r5, r5
 800a7ae:	0028      	movs	r0, r5
 800a7b0:	bd70      	pop	{r4, r5, r6, pc}
 800a7b2:	46c0      	nop			; (mov r8, r8)
 800a7b4:	20000a18 	.word	0x20000a18

0800a7b8 <_malloc_r>:
 800a7b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a7ba:	2203      	movs	r2, #3
 800a7bc:	1ccb      	adds	r3, r1, #3
 800a7be:	4393      	bics	r3, r2
 800a7c0:	3308      	adds	r3, #8
 800a7c2:	0006      	movs	r6, r0
 800a7c4:	001f      	movs	r7, r3
 800a7c6:	2b0c      	cmp	r3, #12
 800a7c8:	d238      	bcs.n	800a83c <_malloc_r+0x84>
 800a7ca:	270c      	movs	r7, #12
 800a7cc:	42b9      	cmp	r1, r7
 800a7ce:	d837      	bhi.n	800a840 <_malloc_r+0x88>
 800a7d0:	0030      	movs	r0, r6
 800a7d2:	f000 f873 	bl	800a8bc <__malloc_lock>
 800a7d6:	4b38      	ldr	r3, [pc, #224]	; (800a8b8 <_malloc_r+0x100>)
 800a7d8:	9300      	str	r3, [sp, #0]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	001c      	movs	r4, r3
 800a7de:	2c00      	cmp	r4, #0
 800a7e0:	d133      	bne.n	800a84a <_malloc_r+0x92>
 800a7e2:	0039      	movs	r1, r7
 800a7e4:	0030      	movs	r0, r6
 800a7e6:	f7ff ffc5 	bl	800a774 <sbrk_aligned>
 800a7ea:	0004      	movs	r4, r0
 800a7ec:	1c43      	adds	r3, r0, #1
 800a7ee:	d15e      	bne.n	800a8ae <_malloc_r+0xf6>
 800a7f0:	9b00      	ldr	r3, [sp, #0]
 800a7f2:	681c      	ldr	r4, [r3, #0]
 800a7f4:	0025      	movs	r5, r4
 800a7f6:	2d00      	cmp	r5, #0
 800a7f8:	d14e      	bne.n	800a898 <_malloc_r+0xe0>
 800a7fa:	2c00      	cmp	r4, #0
 800a7fc:	d051      	beq.n	800a8a2 <_malloc_r+0xea>
 800a7fe:	6823      	ldr	r3, [r4, #0]
 800a800:	0029      	movs	r1, r5
 800a802:	18e3      	adds	r3, r4, r3
 800a804:	0030      	movs	r0, r6
 800a806:	9301      	str	r3, [sp, #4]
 800a808:	f002 f840 	bl	800c88c <_sbrk_r>
 800a80c:	9b01      	ldr	r3, [sp, #4]
 800a80e:	4283      	cmp	r3, r0
 800a810:	d147      	bne.n	800a8a2 <_malloc_r+0xea>
 800a812:	6823      	ldr	r3, [r4, #0]
 800a814:	0030      	movs	r0, r6
 800a816:	1aff      	subs	r7, r7, r3
 800a818:	0039      	movs	r1, r7
 800a81a:	f7ff ffab 	bl	800a774 <sbrk_aligned>
 800a81e:	3001      	adds	r0, #1
 800a820:	d03f      	beq.n	800a8a2 <_malloc_r+0xea>
 800a822:	6823      	ldr	r3, [r4, #0]
 800a824:	19db      	adds	r3, r3, r7
 800a826:	6023      	str	r3, [r4, #0]
 800a828:	9b00      	ldr	r3, [sp, #0]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d040      	beq.n	800a8b2 <_malloc_r+0xfa>
 800a830:	685a      	ldr	r2, [r3, #4]
 800a832:	42a2      	cmp	r2, r4
 800a834:	d133      	bne.n	800a89e <_malloc_r+0xe6>
 800a836:	2200      	movs	r2, #0
 800a838:	605a      	str	r2, [r3, #4]
 800a83a:	e014      	b.n	800a866 <_malloc_r+0xae>
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	dac5      	bge.n	800a7cc <_malloc_r+0x14>
 800a840:	230c      	movs	r3, #12
 800a842:	2500      	movs	r5, #0
 800a844:	6033      	str	r3, [r6, #0]
 800a846:	0028      	movs	r0, r5
 800a848:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a84a:	6821      	ldr	r1, [r4, #0]
 800a84c:	1bc9      	subs	r1, r1, r7
 800a84e:	d420      	bmi.n	800a892 <_malloc_r+0xda>
 800a850:	290b      	cmp	r1, #11
 800a852:	d918      	bls.n	800a886 <_malloc_r+0xce>
 800a854:	19e2      	adds	r2, r4, r7
 800a856:	6027      	str	r7, [r4, #0]
 800a858:	42a3      	cmp	r3, r4
 800a85a:	d112      	bne.n	800a882 <_malloc_r+0xca>
 800a85c:	9b00      	ldr	r3, [sp, #0]
 800a85e:	601a      	str	r2, [r3, #0]
 800a860:	6863      	ldr	r3, [r4, #4]
 800a862:	6011      	str	r1, [r2, #0]
 800a864:	6053      	str	r3, [r2, #4]
 800a866:	0030      	movs	r0, r6
 800a868:	0025      	movs	r5, r4
 800a86a:	f000 f82f 	bl	800a8cc <__malloc_unlock>
 800a86e:	2207      	movs	r2, #7
 800a870:	350b      	adds	r5, #11
 800a872:	1d23      	adds	r3, r4, #4
 800a874:	4395      	bics	r5, r2
 800a876:	1aea      	subs	r2, r5, r3
 800a878:	429d      	cmp	r5, r3
 800a87a:	d0e4      	beq.n	800a846 <_malloc_r+0x8e>
 800a87c:	1b5b      	subs	r3, r3, r5
 800a87e:	50a3      	str	r3, [r4, r2]
 800a880:	e7e1      	b.n	800a846 <_malloc_r+0x8e>
 800a882:	605a      	str	r2, [r3, #4]
 800a884:	e7ec      	b.n	800a860 <_malloc_r+0xa8>
 800a886:	6862      	ldr	r2, [r4, #4]
 800a888:	42a3      	cmp	r3, r4
 800a88a:	d1d5      	bne.n	800a838 <_malloc_r+0x80>
 800a88c:	9b00      	ldr	r3, [sp, #0]
 800a88e:	601a      	str	r2, [r3, #0]
 800a890:	e7e9      	b.n	800a866 <_malloc_r+0xae>
 800a892:	0023      	movs	r3, r4
 800a894:	6864      	ldr	r4, [r4, #4]
 800a896:	e7a2      	b.n	800a7de <_malloc_r+0x26>
 800a898:	002c      	movs	r4, r5
 800a89a:	686d      	ldr	r5, [r5, #4]
 800a89c:	e7ab      	b.n	800a7f6 <_malloc_r+0x3e>
 800a89e:	0013      	movs	r3, r2
 800a8a0:	e7c4      	b.n	800a82c <_malloc_r+0x74>
 800a8a2:	230c      	movs	r3, #12
 800a8a4:	0030      	movs	r0, r6
 800a8a6:	6033      	str	r3, [r6, #0]
 800a8a8:	f000 f810 	bl	800a8cc <__malloc_unlock>
 800a8ac:	e7cb      	b.n	800a846 <_malloc_r+0x8e>
 800a8ae:	6027      	str	r7, [r4, #0]
 800a8b0:	e7d9      	b.n	800a866 <_malloc_r+0xae>
 800a8b2:	605b      	str	r3, [r3, #4]
 800a8b4:	deff      	udf	#255	; 0xff
 800a8b6:	46c0      	nop			; (mov r8, r8)
 800a8b8:	20000a14 	.word	0x20000a14

0800a8bc <__malloc_lock>:
 800a8bc:	b510      	push	{r4, lr}
 800a8be:	4802      	ldr	r0, [pc, #8]	; (800a8c8 <__malloc_lock+0xc>)
 800a8c0:	f002 f835 	bl	800c92e <__retarget_lock_acquire_recursive>
 800a8c4:	bd10      	pop	{r4, pc}
 800a8c6:	46c0      	nop			; (mov r8, r8)
 800a8c8:	20000b5c 	.word	0x20000b5c

0800a8cc <__malloc_unlock>:
 800a8cc:	b510      	push	{r4, lr}
 800a8ce:	4802      	ldr	r0, [pc, #8]	; (800a8d8 <__malloc_unlock+0xc>)
 800a8d0:	f002 f82e 	bl	800c930 <__retarget_lock_release_recursive>
 800a8d4:	bd10      	pop	{r4, pc}
 800a8d6:	46c0      	nop			; (mov r8, r8)
 800a8d8:	20000b5c 	.word	0x20000b5c

0800a8dc <realloc>:
 800a8dc:	b510      	push	{r4, lr}
 800a8de:	4b03      	ldr	r3, [pc, #12]	; (800a8ec <realloc+0x10>)
 800a8e0:	000a      	movs	r2, r1
 800a8e2:	0001      	movs	r1, r0
 800a8e4:	6818      	ldr	r0, [r3, #0]
 800a8e6:	f000 f803 	bl	800a8f0 <_realloc_r>
 800a8ea:	bd10      	pop	{r4, pc}
 800a8ec:	200002ac 	.word	0x200002ac

0800a8f0 <_realloc_r>:
 800a8f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a8f2:	0007      	movs	r7, r0
 800a8f4:	000e      	movs	r6, r1
 800a8f6:	0014      	movs	r4, r2
 800a8f8:	2900      	cmp	r1, #0
 800a8fa:	d105      	bne.n	800a908 <_realloc_r+0x18>
 800a8fc:	0011      	movs	r1, r2
 800a8fe:	f7ff ff5b 	bl	800a7b8 <_malloc_r>
 800a902:	0005      	movs	r5, r0
 800a904:	0028      	movs	r0, r5
 800a906:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a908:	2a00      	cmp	r2, #0
 800a90a:	d103      	bne.n	800a914 <_realloc_r+0x24>
 800a90c:	f002 fed4 	bl	800d6b8 <_free_r>
 800a910:	0025      	movs	r5, r4
 800a912:	e7f7      	b.n	800a904 <_realloc_r+0x14>
 800a914:	f003 ff43 	bl	800e79e <_malloc_usable_size_r>
 800a918:	9001      	str	r0, [sp, #4]
 800a91a:	4284      	cmp	r4, r0
 800a91c:	d803      	bhi.n	800a926 <_realloc_r+0x36>
 800a91e:	0035      	movs	r5, r6
 800a920:	0843      	lsrs	r3, r0, #1
 800a922:	42a3      	cmp	r3, r4
 800a924:	d3ee      	bcc.n	800a904 <_realloc_r+0x14>
 800a926:	0021      	movs	r1, r4
 800a928:	0038      	movs	r0, r7
 800a92a:	f7ff ff45 	bl	800a7b8 <_malloc_r>
 800a92e:	1e05      	subs	r5, r0, #0
 800a930:	d0e8      	beq.n	800a904 <_realloc_r+0x14>
 800a932:	9b01      	ldr	r3, [sp, #4]
 800a934:	0022      	movs	r2, r4
 800a936:	429c      	cmp	r4, r3
 800a938:	d900      	bls.n	800a93c <_realloc_r+0x4c>
 800a93a:	001a      	movs	r2, r3
 800a93c:	0031      	movs	r1, r6
 800a93e:	0028      	movs	r0, r5
 800a940:	f002 f802 	bl	800c948 <memcpy>
 800a944:	0031      	movs	r1, r6
 800a946:	0038      	movs	r0, r7
 800a948:	f002 feb6 	bl	800d6b8 <_free_r>
 800a94c:	e7da      	b.n	800a904 <_realloc_r+0x14>
	...

0800a950 <sulp>:
 800a950:	b570      	push	{r4, r5, r6, lr}
 800a952:	0016      	movs	r6, r2
 800a954:	000d      	movs	r5, r1
 800a956:	f003 fded 	bl	800e534 <__ulp>
 800a95a:	2e00      	cmp	r6, #0
 800a95c:	d00d      	beq.n	800a97a <sulp+0x2a>
 800a95e:	236b      	movs	r3, #107	; 0x6b
 800a960:	006a      	lsls	r2, r5, #1
 800a962:	0d52      	lsrs	r2, r2, #21
 800a964:	1a9b      	subs	r3, r3, r2
 800a966:	2b00      	cmp	r3, #0
 800a968:	dd07      	ble.n	800a97a <sulp+0x2a>
 800a96a:	2400      	movs	r4, #0
 800a96c:	4a03      	ldr	r2, [pc, #12]	; (800a97c <sulp+0x2c>)
 800a96e:	051b      	lsls	r3, r3, #20
 800a970:	189d      	adds	r5, r3, r2
 800a972:	002b      	movs	r3, r5
 800a974:	0022      	movs	r2, r4
 800a976:	f7f7 fc27 	bl	80021c8 <__aeabi_dmul>
 800a97a:	bd70      	pop	{r4, r5, r6, pc}
 800a97c:	3ff00000 	.word	0x3ff00000

0800a980 <_strtod_l>:
 800a980:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a982:	b0a1      	sub	sp, #132	; 0x84
 800a984:	9219      	str	r2, [sp, #100]	; 0x64
 800a986:	2200      	movs	r2, #0
 800a988:	2600      	movs	r6, #0
 800a98a:	2700      	movs	r7, #0
 800a98c:	9004      	str	r0, [sp, #16]
 800a98e:	9107      	str	r1, [sp, #28]
 800a990:	921c      	str	r2, [sp, #112]	; 0x70
 800a992:	911b      	str	r1, [sp, #108]	; 0x6c
 800a994:	780a      	ldrb	r2, [r1, #0]
 800a996:	2a2b      	cmp	r2, #43	; 0x2b
 800a998:	d055      	beq.n	800aa46 <_strtod_l+0xc6>
 800a99a:	d841      	bhi.n	800aa20 <_strtod_l+0xa0>
 800a99c:	2a0d      	cmp	r2, #13
 800a99e:	d83b      	bhi.n	800aa18 <_strtod_l+0x98>
 800a9a0:	2a08      	cmp	r2, #8
 800a9a2:	d83b      	bhi.n	800aa1c <_strtod_l+0x9c>
 800a9a4:	2a00      	cmp	r2, #0
 800a9a6:	d044      	beq.n	800aa32 <_strtod_l+0xb2>
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	920f      	str	r2, [sp, #60]	; 0x3c
 800a9ac:	2100      	movs	r1, #0
 800a9ae:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800a9b0:	9109      	str	r1, [sp, #36]	; 0x24
 800a9b2:	782a      	ldrb	r2, [r5, #0]
 800a9b4:	2a30      	cmp	r2, #48	; 0x30
 800a9b6:	d000      	beq.n	800a9ba <_strtod_l+0x3a>
 800a9b8:	e085      	b.n	800aac6 <_strtod_l+0x146>
 800a9ba:	786a      	ldrb	r2, [r5, #1]
 800a9bc:	3120      	adds	r1, #32
 800a9be:	438a      	bics	r2, r1
 800a9c0:	2a58      	cmp	r2, #88	; 0x58
 800a9c2:	d000      	beq.n	800a9c6 <_strtod_l+0x46>
 800a9c4:	e075      	b.n	800aab2 <_strtod_l+0x132>
 800a9c6:	9302      	str	r3, [sp, #8]
 800a9c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a9ca:	4a97      	ldr	r2, [pc, #604]	; (800ac28 <_strtod_l+0x2a8>)
 800a9cc:	9301      	str	r3, [sp, #4]
 800a9ce:	ab1c      	add	r3, sp, #112	; 0x70
 800a9d0:	9300      	str	r3, [sp, #0]
 800a9d2:	9804      	ldr	r0, [sp, #16]
 800a9d4:	ab1d      	add	r3, sp, #116	; 0x74
 800a9d6:	a91b      	add	r1, sp, #108	; 0x6c
 800a9d8:	f002 ff22 	bl	800d820 <__gethex>
 800a9dc:	230f      	movs	r3, #15
 800a9de:	0002      	movs	r2, r0
 800a9e0:	401a      	ands	r2, r3
 800a9e2:	0004      	movs	r4, r0
 800a9e4:	9205      	str	r2, [sp, #20]
 800a9e6:	4218      	tst	r0, r3
 800a9e8:	d005      	beq.n	800a9f6 <_strtod_l+0x76>
 800a9ea:	2a06      	cmp	r2, #6
 800a9ec:	d12d      	bne.n	800aa4a <_strtod_l+0xca>
 800a9ee:	1c6b      	adds	r3, r5, #1
 800a9f0:	931b      	str	r3, [sp, #108]	; 0x6c
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	930f      	str	r3, [sp, #60]	; 0x3c
 800a9f6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d002      	beq.n	800aa02 <_strtod_l+0x82>
 800a9fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a9fe:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800aa00:	6013      	str	r3, [r2, #0]
 800aa02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d01b      	beq.n	800aa40 <_strtod_l+0xc0>
 800aa08:	2380      	movs	r3, #128	; 0x80
 800aa0a:	0032      	movs	r2, r6
 800aa0c:	061b      	lsls	r3, r3, #24
 800aa0e:	18fb      	adds	r3, r7, r3
 800aa10:	0010      	movs	r0, r2
 800aa12:	0019      	movs	r1, r3
 800aa14:	b021      	add	sp, #132	; 0x84
 800aa16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa18:	2a20      	cmp	r2, #32
 800aa1a:	d1c5      	bne.n	800a9a8 <_strtod_l+0x28>
 800aa1c:	3101      	adds	r1, #1
 800aa1e:	e7b8      	b.n	800a992 <_strtod_l+0x12>
 800aa20:	2a2d      	cmp	r2, #45	; 0x2d
 800aa22:	d1c1      	bne.n	800a9a8 <_strtod_l+0x28>
 800aa24:	3a2c      	subs	r2, #44	; 0x2c
 800aa26:	920f      	str	r2, [sp, #60]	; 0x3c
 800aa28:	1c4a      	adds	r2, r1, #1
 800aa2a:	921b      	str	r2, [sp, #108]	; 0x6c
 800aa2c:	784a      	ldrb	r2, [r1, #1]
 800aa2e:	2a00      	cmp	r2, #0
 800aa30:	d1bc      	bne.n	800a9ac <_strtod_l+0x2c>
 800aa32:	9b07      	ldr	r3, [sp, #28]
 800aa34:	931b      	str	r3, [sp, #108]	; 0x6c
 800aa36:	2300      	movs	r3, #0
 800aa38:	930f      	str	r3, [sp, #60]	; 0x3c
 800aa3a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d1dd      	bne.n	800a9fc <_strtod_l+0x7c>
 800aa40:	0032      	movs	r2, r6
 800aa42:	003b      	movs	r3, r7
 800aa44:	e7e4      	b.n	800aa10 <_strtod_l+0x90>
 800aa46:	2200      	movs	r2, #0
 800aa48:	e7ed      	b.n	800aa26 <_strtod_l+0xa6>
 800aa4a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800aa4c:	2a00      	cmp	r2, #0
 800aa4e:	d007      	beq.n	800aa60 <_strtod_l+0xe0>
 800aa50:	2135      	movs	r1, #53	; 0x35
 800aa52:	a81e      	add	r0, sp, #120	; 0x78
 800aa54:	f003 fe5f 	bl	800e716 <__copybits>
 800aa58:	991c      	ldr	r1, [sp, #112]	; 0x70
 800aa5a:	9804      	ldr	r0, [sp, #16]
 800aa5c:	f003 fa28 	bl	800deb0 <_Bfree>
 800aa60:	9805      	ldr	r0, [sp, #20]
 800aa62:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800aa64:	3801      	subs	r0, #1
 800aa66:	2804      	cmp	r0, #4
 800aa68:	d806      	bhi.n	800aa78 <_strtod_l+0xf8>
 800aa6a:	f7f5 fb55 	bl	8000118 <__gnu_thumb1_case_uqi>
 800aa6e:	0312      	.short	0x0312
 800aa70:	1e1c      	.short	0x1e1c
 800aa72:	12          	.byte	0x12
 800aa73:	00          	.byte	0x00
 800aa74:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800aa76:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800aa78:	05e4      	lsls	r4, r4, #23
 800aa7a:	d502      	bpl.n	800aa82 <_strtod_l+0x102>
 800aa7c:	2380      	movs	r3, #128	; 0x80
 800aa7e:	061b      	lsls	r3, r3, #24
 800aa80:	431f      	orrs	r7, r3
 800aa82:	4b6a      	ldr	r3, [pc, #424]	; (800ac2c <_strtod_l+0x2ac>)
 800aa84:	423b      	tst	r3, r7
 800aa86:	d1b6      	bne.n	800a9f6 <_strtod_l+0x76>
 800aa88:	f001 ff26 	bl	800c8d8 <__errno>
 800aa8c:	2322      	movs	r3, #34	; 0x22
 800aa8e:	6003      	str	r3, [r0, #0]
 800aa90:	e7b1      	b.n	800a9f6 <_strtod_l+0x76>
 800aa92:	4967      	ldr	r1, [pc, #412]	; (800ac30 <_strtod_l+0x2b0>)
 800aa94:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800aa96:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800aa98:	400a      	ands	r2, r1
 800aa9a:	4966      	ldr	r1, [pc, #408]	; (800ac34 <_strtod_l+0x2b4>)
 800aa9c:	185b      	adds	r3, r3, r1
 800aa9e:	051b      	lsls	r3, r3, #20
 800aaa0:	431a      	orrs	r2, r3
 800aaa2:	0017      	movs	r7, r2
 800aaa4:	e7e8      	b.n	800aa78 <_strtod_l+0xf8>
 800aaa6:	4f61      	ldr	r7, [pc, #388]	; (800ac2c <_strtod_l+0x2ac>)
 800aaa8:	e7e6      	b.n	800aa78 <_strtod_l+0xf8>
 800aaaa:	2601      	movs	r6, #1
 800aaac:	4f62      	ldr	r7, [pc, #392]	; (800ac38 <_strtod_l+0x2b8>)
 800aaae:	4276      	negs	r6, r6
 800aab0:	e7e2      	b.n	800aa78 <_strtod_l+0xf8>
 800aab2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aab4:	1c5a      	adds	r2, r3, #1
 800aab6:	921b      	str	r2, [sp, #108]	; 0x6c
 800aab8:	785b      	ldrb	r3, [r3, #1]
 800aaba:	2b30      	cmp	r3, #48	; 0x30
 800aabc:	d0f9      	beq.n	800aab2 <_strtod_l+0x132>
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d099      	beq.n	800a9f6 <_strtod_l+0x76>
 800aac2:	2301      	movs	r3, #1
 800aac4:	9309      	str	r3, [sp, #36]	; 0x24
 800aac6:	2500      	movs	r5, #0
 800aac8:	220a      	movs	r2, #10
 800aaca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aacc:	950d      	str	r5, [sp, #52]	; 0x34
 800aace:	9310      	str	r3, [sp, #64]	; 0x40
 800aad0:	9508      	str	r5, [sp, #32]
 800aad2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800aad4:	7804      	ldrb	r4, [r0, #0]
 800aad6:	0023      	movs	r3, r4
 800aad8:	3b30      	subs	r3, #48	; 0x30
 800aada:	b2d9      	uxtb	r1, r3
 800aadc:	2909      	cmp	r1, #9
 800aade:	d927      	bls.n	800ab30 <_strtod_l+0x1b0>
 800aae0:	2201      	movs	r2, #1
 800aae2:	4956      	ldr	r1, [pc, #344]	; (800ac3c <_strtod_l+0x2bc>)
 800aae4:	f001 fe6c 	bl	800c7c0 <strncmp>
 800aae8:	2800      	cmp	r0, #0
 800aaea:	d031      	beq.n	800ab50 <_strtod_l+0x1d0>
 800aaec:	2000      	movs	r0, #0
 800aaee:	0023      	movs	r3, r4
 800aaf0:	4684      	mov	ip, r0
 800aaf2:	9a08      	ldr	r2, [sp, #32]
 800aaf4:	900c      	str	r0, [sp, #48]	; 0x30
 800aaf6:	9205      	str	r2, [sp, #20]
 800aaf8:	2220      	movs	r2, #32
 800aafa:	0019      	movs	r1, r3
 800aafc:	4391      	bics	r1, r2
 800aafe:	000a      	movs	r2, r1
 800ab00:	2100      	movs	r1, #0
 800ab02:	9106      	str	r1, [sp, #24]
 800ab04:	2a45      	cmp	r2, #69	; 0x45
 800ab06:	d000      	beq.n	800ab0a <_strtod_l+0x18a>
 800ab08:	e0c2      	b.n	800ac90 <_strtod_l+0x310>
 800ab0a:	9b05      	ldr	r3, [sp, #20]
 800ab0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab0e:	4303      	orrs	r3, r0
 800ab10:	4313      	orrs	r3, r2
 800ab12:	428b      	cmp	r3, r1
 800ab14:	d08d      	beq.n	800aa32 <_strtod_l+0xb2>
 800ab16:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ab18:	9307      	str	r3, [sp, #28]
 800ab1a:	3301      	adds	r3, #1
 800ab1c:	931b      	str	r3, [sp, #108]	; 0x6c
 800ab1e:	9b07      	ldr	r3, [sp, #28]
 800ab20:	785b      	ldrb	r3, [r3, #1]
 800ab22:	2b2b      	cmp	r3, #43	; 0x2b
 800ab24:	d071      	beq.n	800ac0a <_strtod_l+0x28a>
 800ab26:	000c      	movs	r4, r1
 800ab28:	2b2d      	cmp	r3, #45	; 0x2d
 800ab2a:	d174      	bne.n	800ac16 <_strtod_l+0x296>
 800ab2c:	2401      	movs	r4, #1
 800ab2e:	e06d      	b.n	800ac0c <_strtod_l+0x28c>
 800ab30:	9908      	ldr	r1, [sp, #32]
 800ab32:	2908      	cmp	r1, #8
 800ab34:	dc09      	bgt.n	800ab4a <_strtod_l+0x1ca>
 800ab36:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ab38:	4351      	muls	r1, r2
 800ab3a:	185b      	adds	r3, r3, r1
 800ab3c:	930d      	str	r3, [sp, #52]	; 0x34
 800ab3e:	9b08      	ldr	r3, [sp, #32]
 800ab40:	3001      	adds	r0, #1
 800ab42:	3301      	adds	r3, #1
 800ab44:	9308      	str	r3, [sp, #32]
 800ab46:	901b      	str	r0, [sp, #108]	; 0x6c
 800ab48:	e7c3      	b.n	800aad2 <_strtod_l+0x152>
 800ab4a:	4355      	muls	r5, r2
 800ab4c:	195d      	adds	r5, r3, r5
 800ab4e:	e7f6      	b.n	800ab3e <_strtod_l+0x1be>
 800ab50:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ab52:	1c5a      	adds	r2, r3, #1
 800ab54:	921b      	str	r2, [sp, #108]	; 0x6c
 800ab56:	9a08      	ldr	r2, [sp, #32]
 800ab58:	785b      	ldrb	r3, [r3, #1]
 800ab5a:	2a00      	cmp	r2, #0
 800ab5c:	d03a      	beq.n	800abd4 <_strtod_l+0x254>
 800ab5e:	900c      	str	r0, [sp, #48]	; 0x30
 800ab60:	9205      	str	r2, [sp, #20]
 800ab62:	001a      	movs	r2, r3
 800ab64:	3a30      	subs	r2, #48	; 0x30
 800ab66:	2a09      	cmp	r2, #9
 800ab68:	d912      	bls.n	800ab90 <_strtod_l+0x210>
 800ab6a:	2201      	movs	r2, #1
 800ab6c:	4694      	mov	ip, r2
 800ab6e:	e7c3      	b.n	800aaf8 <_strtod_l+0x178>
 800ab70:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ab72:	3001      	adds	r0, #1
 800ab74:	1c5a      	adds	r2, r3, #1
 800ab76:	921b      	str	r2, [sp, #108]	; 0x6c
 800ab78:	785b      	ldrb	r3, [r3, #1]
 800ab7a:	2b30      	cmp	r3, #48	; 0x30
 800ab7c:	d0f8      	beq.n	800ab70 <_strtod_l+0x1f0>
 800ab7e:	001a      	movs	r2, r3
 800ab80:	3a31      	subs	r2, #49	; 0x31
 800ab82:	2a08      	cmp	r2, #8
 800ab84:	d83c      	bhi.n	800ac00 <_strtod_l+0x280>
 800ab86:	900c      	str	r0, [sp, #48]	; 0x30
 800ab88:	2000      	movs	r0, #0
 800ab8a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800ab8c:	9005      	str	r0, [sp, #20]
 800ab8e:	9210      	str	r2, [sp, #64]	; 0x40
 800ab90:	001a      	movs	r2, r3
 800ab92:	1c41      	adds	r1, r0, #1
 800ab94:	3a30      	subs	r2, #48	; 0x30
 800ab96:	2b30      	cmp	r3, #48	; 0x30
 800ab98:	d016      	beq.n	800abc8 <_strtod_l+0x248>
 800ab9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab9c:	185b      	adds	r3, r3, r1
 800ab9e:	930c      	str	r3, [sp, #48]	; 0x30
 800aba0:	9b05      	ldr	r3, [sp, #20]
 800aba2:	210a      	movs	r1, #10
 800aba4:	469c      	mov	ip, r3
 800aba6:	4484      	add	ip, r0
 800aba8:	4563      	cmp	r3, ip
 800abaa:	d115      	bne.n	800abd8 <_strtod_l+0x258>
 800abac:	9905      	ldr	r1, [sp, #20]
 800abae:	9b05      	ldr	r3, [sp, #20]
 800abb0:	3101      	adds	r1, #1
 800abb2:	1809      	adds	r1, r1, r0
 800abb4:	181b      	adds	r3, r3, r0
 800abb6:	9105      	str	r1, [sp, #20]
 800abb8:	2b08      	cmp	r3, #8
 800abba:	dc19      	bgt.n	800abf0 <_strtod_l+0x270>
 800abbc:	230a      	movs	r3, #10
 800abbe:	990d      	ldr	r1, [sp, #52]	; 0x34
 800abc0:	434b      	muls	r3, r1
 800abc2:	2100      	movs	r1, #0
 800abc4:	18d3      	adds	r3, r2, r3
 800abc6:	930d      	str	r3, [sp, #52]	; 0x34
 800abc8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800abca:	0008      	movs	r0, r1
 800abcc:	1c5a      	adds	r2, r3, #1
 800abce:	921b      	str	r2, [sp, #108]	; 0x6c
 800abd0:	785b      	ldrb	r3, [r3, #1]
 800abd2:	e7c6      	b.n	800ab62 <_strtod_l+0x1e2>
 800abd4:	9808      	ldr	r0, [sp, #32]
 800abd6:	e7d0      	b.n	800ab7a <_strtod_l+0x1fa>
 800abd8:	1c5c      	adds	r4, r3, #1
 800abda:	2b08      	cmp	r3, #8
 800abdc:	dc04      	bgt.n	800abe8 <_strtod_l+0x268>
 800abde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800abe0:	434b      	muls	r3, r1
 800abe2:	930d      	str	r3, [sp, #52]	; 0x34
 800abe4:	0023      	movs	r3, r4
 800abe6:	e7df      	b.n	800aba8 <_strtod_l+0x228>
 800abe8:	2c10      	cmp	r4, #16
 800abea:	dcfb      	bgt.n	800abe4 <_strtod_l+0x264>
 800abec:	434d      	muls	r5, r1
 800abee:	e7f9      	b.n	800abe4 <_strtod_l+0x264>
 800abf0:	9b05      	ldr	r3, [sp, #20]
 800abf2:	2100      	movs	r1, #0
 800abf4:	2b10      	cmp	r3, #16
 800abf6:	dce7      	bgt.n	800abc8 <_strtod_l+0x248>
 800abf8:	230a      	movs	r3, #10
 800abfa:	435d      	muls	r5, r3
 800abfc:	1955      	adds	r5, r2, r5
 800abfe:	e7e3      	b.n	800abc8 <_strtod_l+0x248>
 800ac00:	2200      	movs	r2, #0
 800ac02:	920c      	str	r2, [sp, #48]	; 0x30
 800ac04:	9205      	str	r2, [sp, #20]
 800ac06:	3201      	adds	r2, #1
 800ac08:	e7b0      	b.n	800ab6c <_strtod_l+0x1ec>
 800ac0a:	2400      	movs	r4, #0
 800ac0c:	9b07      	ldr	r3, [sp, #28]
 800ac0e:	3302      	adds	r3, #2
 800ac10:	931b      	str	r3, [sp, #108]	; 0x6c
 800ac12:	9b07      	ldr	r3, [sp, #28]
 800ac14:	789b      	ldrb	r3, [r3, #2]
 800ac16:	001a      	movs	r2, r3
 800ac18:	3a30      	subs	r2, #48	; 0x30
 800ac1a:	2a09      	cmp	r2, #9
 800ac1c:	d914      	bls.n	800ac48 <_strtod_l+0x2c8>
 800ac1e:	9a07      	ldr	r2, [sp, #28]
 800ac20:	921b      	str	r2, [sp, #108]	; 0x6c
 800ac22:	2200      	movs	r2, #0
 800ac24:	e033      	b.n	800ac8e <_strtod_l+0x30e>
 800ac26:	46c0      	nop			; (mov r8, r8)
 800ac28:	0800fe5c 	.word	0x0800fe5c
 800ac2c:	7ff00000 	.word	0x7ff00000
 800ac30:	ffefffff 	.word	0xffefffff
 800ac34:	00000433 	.word	0x00000433
 800ac38:	7fffffff 	.word	0x7fffffff
 800ac3c:	0800fe58 	.word	0x0800fe58
 800ac40:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ac42:	1c5a      	adds	r2, r3, #1
 800ac44:	921b      	str	r2, [sp, #108]	; 0x6c
 800ac46:	785b      	ldrb	r3, [r3, #1]
 800ac48:	2b30      	cmp	r3, #48	; 0x30
 800ac4a:	d0f9      	beq.n	800ac40 <_strtod_l+0x2c0>
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	9206      	str	r2, [sp, #24]
 800ac50:	001a      	movs	r2, r3
 800ac52:	3a31      	subs	r2, #49	; 0x31
 800ac54:	2a08      	cmp	r2, #8
 800ac56:	d81b      	bhi.n	800ac90 <_strtod_l+0x310>
 800ac58:	3b30      	subs	r3, #48	; 0x30
 800ac5a:	930e      	str	r3, [sp, #56]	; 0x38
 800ac5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ac5e:	9306      	str	r3, [sp, #24]
 800ac60:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ac62:	1c59      	adds	r1, r3, #1
 800ac64:	911b      	str	r1, [sp, #108]	; 0x6c
 800ac66:	785b      	ldrb	r3, [r3, #1]
 800ac68:	001a      	movs	r2, r3
 800ac6a:	3a30      	subs	r2, #48	; 0x30
 800ac6c:	2a09      	cmp	r2, #9
 800ac6e:	d93a      	bls.n	800ace6 <_strtod_l+0x366>
 800ac70:	9a06      	ldr	r2, [sp, #24]
 800ac72:	1a8a      	subs	r2, r1, r2
 800ac74:	49b2      	ldr	r1, [pc, #712]	; (800af40 <_strtod_l+0x5c0>)
 800ac76:	9106      	str	r1, [sp, #24]
 800ac78:	2a08      	cmp	r2, #8
 800ac7a:	dc04      	bgt.n	800ac86 <_strtod_l+0x306>
 800ac7c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ac7e:	9206      	str	r2, [sp, #24]
 800ac80:	428a      	cmp	r2, r1
 800ac82:	dd00      	ble.n	800ac86 <_strtod_l+0x306>
 800ac84:	9106      	str	r1, [sp, #24]
 800ac86:	2c00      	cmp	r4, #0
 800ac88:	d002      	beq.n	800ac90 <_strtod_l+0x310>
 800ac8a:	9a06      	ldr	r2, [sp, #24]
 800ac8c:	4252      	negs	r2, r2
 800ac8e:	9206      	str	r2, [sp, #24]
 800ac90:	9a05      	ldr	r2, [sp, #20]
 800ac92:	2a00      	cmp	r2, #0
 800ac94:	d14d      	bne.n	800ad32 <_strtod_l+0x3b2>
 800ac96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac98:	4310      	orrs	r0, r2
 800ac9a:	d000      	beq.n	800ac9e <_strtod_l+0x31e>
 800ac9c:	e6ab      	b.n	800a9f6 <_strtod_l+0x76>
 800ac9e:	4662      	mov	r2, ip
 800aca0:	2a00      	cmp	r2, #0
 800aca2:	d000      	beq.n	800aca6 <_strtod_l+0x326>
 800aca4:	e6c5      	b.n	800aa32 <_strtod_l+0xb2>
 800aca6:	2b69      	cmp	r3, #105	; 0x69
 800aca8:	d027      	beq.n	800acfa <_strtod_l+0x37a>
 800acaa:	dc23      	bgt.n	800acf4 <_strtod_l+0x374>
 800acac:	2b49      	cmp	r3, #73	; 0x49
 800acae:	d024      	beq.n	800acfa <_strtod_l+0x37a>
 800acb0:	2b4e      	cmp	r3, #78	; 0x4e
 800acb2:	d000      	beq.n	800acb6 <_strtod_l+0x336>
 800acb4:	e6bd      	b.n	800aa32 <_strtod_l+0xb2>
 800acb6:	49a3      	ldr	r1, [pc, #652]	; (800af44 <_strtod_l+0x5c4>)
 800acb8:	a81b      	add	r0, sp, #108	; 0x6c
 800acba:	f002 ffe7 	bl	800dc8c <__match>
 800acbe:	2800      	cmp	r0, #0
 800acc0:	d100      	bne.n	800acc4 <_strtod_l+0x344>
 800acc2:	e6b6      	b.n	800aa32 <_strtod_l+0xb2>
 800acc4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800acc6:	781b      	ldrb	r3, [r3, #0]
 800acc8:	2b28      	cmp	r3, #40	; 0x28
 800acca:	d12c      	bne.n	800ad26 <_strtod_l+0x3a6>
 800accc:	499e      	ldr	r1, [pc, #632]	; (800af48 <_strtod_l+0x5c8>)
 800acce:	aa1e      	add	r2, sp, #120	; 0x78
 800acd0:	a81b      	add	r0, sp, #108	; 0x6c
 800acd2:	f002 ffef 	bl	800dcb4 <__hexnan>
 800acd6:	2805      	cmp	r0, #5
 800acd8:	d125      	bne.n	800ad26 <_strtod_l+0x3a6>
 800acda:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800acdc:	4a9b      	ldr	r2, [pc, #620]	; (800af4c <_strtod_l+0x5cc>)
 800acde:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800ace0:	431a      	orrs	r2, r3
 800ace2:	0017      	movs	r7, r2
 800ace4:	e687      	b.n	800a9f6 <_strtod_l+0x76>
 800ace6:	220a      	movs	r2, #10
 800ace8:	990e      	ldr	r1, [sp, #56]	; 0x38
 800acea:	434a      	muls	r2, r1
 800acec:	18d2      	adds	r2, r2, r3
 800acee:	3a30      	subs	r2, #48	; 0x30
 800acf0:	920e      	str	r2, [sp, #56]	; 0x38
 800acf2:	e7b5      	b.n	800ac60 <_strtod_l+0x2e0>
 800acf4:	2b6e      	cmp	r3, #110	; 0x6e
 800acf6:	d0de      	beq.n	800acb6 <_strtod_l+0x336>
 800acf8:	e69b      	b.n	800aa32 <_strtod_l+0xb2>
 800acfa:	4995      	ldr	r1, [pc, #596]	; (800af50 <_strtod_l+0x5d0>)
 800acfc:	a81b      	add	r0, sp, #108	; 0x6c
 800acfe:	f002 ffc5 	bl	800dc8c <__match>
 800ad02:	2800      	cmp	r0, #0
 800ad04:	d100      	bne.n	800ad08 <_strtod_l+0x388>
 800ad06:	e694      	b.n	800aa32 <_strtod_l+0xb2>
 800ad08:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ad0a:	4992      	ldr	r1, [pc, #584]	; (800af54 <_strtod_l+0x5d4>)
 800ad0c:	3b01      	subs	r3, #1
 800ad0e:	a81b      	add	r0, sp, #108	; 0x6c
 800ad10:	931b      	str	r3, [sp, #108]	; 0x6c
 800ad12:	f002 ffbb 	bl	800dc8c <__match>
 800ad16:	2800      	cmp	r0, #0
 800ad18:	d102      	bne.n	800ad20 <_strtod_l+0x3a0>
 800ad1a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ad1c:	3301      	adds	r3, #1
 800ad1e:	931b      	str	r3, [sp, #108]	; 0x6c
 800ad20:	2600      	movs	r6, #0
 800ad22:	4f8a      	ldr	r7, [pc, #552]	; (800af4c <_strtod_l+0x5cc>)
 800ad24:	e667      	b.n	800a9f6 <_strtod_l+0x76>
 800ad26:	488c      	ldr	r0, [pc, #560]	; (800af58 <_strtod_l+0x5d8>)
 800ad28:	f001 fe18 	bl	800c95c <nan>
 800ad2c:	0006      	movs	r6, r0
 800ad2e:	000f      	movs	r7, r1
 800ad30:	e661      	b.n	800a9f6 <_strtod_l+0x76>
 800ad32:	9b06      	ldr	r3, [sp, #24]
 800ad34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ad36:	1a9b      	subs	r3, r3, r2
 800ad38:	9309      	str	r3, [sp, #36]	; 0x24
 800ad3a:	9b08      	ldr	r3, [sp, #32]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d101      	bne.n	800ad44 <_strtod_l+0x3c4>
 800ad40:	9b05      	ldr	r3, [sp, #20]
 800ad42:	9308      	str	r3, [sp, #32]
 800ad44:	9c05      	ldr	r4, [sp, #20]
 800ad46:	2c10      	cmp	r4, #16
 800ad48:	dd00      	ble.n	800ad4c <_strtod_l+0x3cc>
 800ad4a:	2410      	movs	r4, #16
 800ad4c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800ad4e:	f7f8 f903 	bl	8002f58 <__aeabi_ui2d>
 800ad52:	9b05      	ldr	r3, [sp, #20]
 800ad54:	0006      	movs	r6, r0
 800ad56:	000f      	movs	r7, r1
 800ad58:	2b09      	cmp	r3, #9
 800ad5a:	dd15      	ble.n	800ad88 <_strtod_l+0x408>
 800ad5c:	0022      	movs	r2, r4
 800ad5e:	4b7f      	ldr	r3, [pc, #508]	; (800af5c <_strtod_l+0x5dc>)
 800ad60:	3a09      	subs	r2, #9
 800ad62:	00d2      	lsls	r2, r2, #3
 800ad64:	189b      	adds	r3, r3, r2
 800ad66:	681a      	ldr	r2, [r3, #0]
 800ad68:	685b      	ldr	r3, [r3, #4]
 800ad6a:	f7f7 fa2d 	bl	80021c8 <__aeabi_dmul>
 800ad6e:	0006      	movs	r6, r0
 800ad70:	0028      	movs	r0, r5
 800ad72:	000f      	movs	r7, r1
 800ad74:	f7f8 f8f0 	bl	8002f58 <__aeabi_ui2d>
 800ad78:	0002      	movs	r2, r0
 800ad7a:	000b      	movs	r3, r1
 800ad7c:	0030      	movs	r0, r6
 800ad7e:	0039      	movs	r1, r7
 800ad80:	f7f6 fac8 	bl	8001314 <__aeabi_dadd>
 800ad84:	0006      	movs	r6, r0
 800ad86:	000f      	movs	r7, r1
 800ad88:	9b05      	ldr	r3, [sp, #20]
 800ad8a:	2b0f      	cmp	r3, #15
 800ad8c:	dc39      	bgt.n	800ae02 <_strtod_l+0x482>
 800ad8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d100      	bne.n	800ad96 <_strtod_l+0x416>
 800ad94:	e62f      	b.n	800a9f6 <_strtod_l+0x76>
 800ad96:	dd24      	ble.n	800ade2 <_strtod_l+0x462>
 800ad98:	2b16      	cmp	r3, #22
 800ad9a:	dc09      	bgt.n	800adb0 <_strtod_l+0x430>
 800ad9c:	496f      	ldr	r1, [pc, #444]	; (800af5c <_strtod_l+0x5dc>)
 800ad9e:	00db      	lsls	r3, r3, #3
 800ada0:	18c9      	adds	r1, r1, r3
 800ada2:	0032      	movs	r2, r6
 800ada4:	6808      	ldr	r0, [r1, #0]
 800ada6:	6849      	ldr	r1, [r1, #4]
 800ada8:	003b      	movs	r3, r7
 800adaa:	f7f7 fa0d 	bl	80021c8 <__aeabi_dmul>
 800adae:	e7bd      	b.n	800ad2c <_strtod_l+0x3ac>
 800adb0:	2325      	movs	r3, #37	; 0x25
 800adb2:	9a05      	ldr	r2, [sp, #20]
 800adb4:	1a9b      	subs	r3, r3, r2
 800adb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800adb8:	4293      	cmp	r3, r2
 800adba:	db22      	blt.n	800ae02 <_strtod_l+0x482>
 800adbc:	240f      	movs	r4, #15
 800adbe:	9b05      	ldr	r3, [sp, #20]
 800adc0:	4d66      	ldr	r5, [pc, #408]	; (800af5c <_strtod_l+0x5dc>)
 800adc2:	1ae4      	subs	r4, r4, r3
 800adc4:	00e1      	lsls	r1, r4, #3
 800adc6:	1869      	adds	r1, r5, r1
 800adc8:	0032      	movs	r2, r6
 800adca:	6808      	ldr	r0, [r1, #0]
 800adcc:	6849      	ldr	r1, [r1, #4]
 800adce:	003b      	movs	r3, r7
 800add0:	f7f7 f9fa 	bl	80021c8 <__aeabi_dmul>
 800add4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800add6:	1b1c      	subs	r4, r3, r4
 800add8:	00e4      	lsls	r4, r4, #3
 800adda:	192d      	adds	r5, r5, r4
 800addc:	682a      	ldr	r2, [r5, #0]
 800adde:	686b      	ldr	r3, [r5, #4]
 800ade0:	e7e3      	b.n	800adaa <_strtod_l+0x42a>
 800ade2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ade4:	3316      	adds	r3, #22
 800ade6:	db0c      	blt.n	800ae02 <_strtod_l+0x482>
 800ade8:	9906      	ldr	r1, [sp, #24]
 800adea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800adec:	4b5b      	ldr	r3, [pc, #364]	; (800af5c <_strtod_l+0x5dc>)
 800adee:	1a52      	subs	r2, r2, r1
 800adf0:	00d2      	lsls	r2, r2, #3
 800adf2:	189b      	adds	r3, r3, r2
 800adf4:	0030      	movs	r0, r6
 800adf6:	681a      	ldr	r2, [r3, #0]
 800adf8:	685b      	ldr	r3, [r3, #4]
 800adfa:	0039      	movs	r1, r7
 800adfc:	f7f6 fdea 	bl	80019d4 <__aeabi_ddiv>
 800ae00:	e794      	b.n	800ad2c <_strtod_l+0x3ac>
 800ae02:	9b05      	ldr	r3, [sp, #20]
 800ae04:	1b1c      	subs	r4, r3, r4
 800ae06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae08:	18e4      	adds	r4, r4, r3
 800ae0a:	2c00      	cmp	r4, #0
 800ae0c:	dd72      	ble.n	800aef4 <_strtod_l+0x574>
 800ae0e:	220f      	movs	r2, #15
 800ae10:	0023      	movs	r3, r4
 800ae12:	4013      	ands	r3, r2
 800ae14:	4214      	tst	r4, r2
 800ae16:	d00a      	beq.n	800ae2e <_strtod_l+0x4ae>
 800ae18:	4950      	ldr	r1, [pc, #320]	; (800af5c <_strtod_l+0x5dc>)
 800ae1a:	00db      	lsls	r3, r3, #3
 800ae1c:	18c9      	adds	r1, r1, r3
 800ae1e:	0032      	movs	r2, r6
 800ae20:	6808      	ldr	r0, [r1, #0]
 800ae22:	6849      	ldr	r1, [r1, #4]
 800ae24:	003b      	movs	r3, r7
 800ae26:	f7f7 f9cf 	bl	80021c8 <__aeabi_dmul>
 800ae2a:	0006      	movs	r6, r0
 800ae2c:	000f      	movs	r7, r1
 800ae2e:	230f      	movs	r3, #15
 800ae30:	439c      	bics	r4, r3
 800ae32:	d04a      	beq.n	800aeca <_strtod_l+0x54a>
 800ae34:	3326      	adds	r3, #38	; 0x26
 800ae36:	33ff      	adds	r3, #255	; 0xff
 800ae38:	429c      	cmp	r4, r3
 800ae3a:	dd22      	ble.n	800ae82 <_strtod_l+0x502>
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	9305      	str	r3, [sp, #20]
 800ae40:	9306      	str	r3, [sp, #24]
 800ae42:	930d      	str	r3, [sp, #52]	; 0x34
 800ae44:	9308      	str	r3, [sp, #32]
 800ae46:	2322      	movs	r3, #34	; 0x22
 800ae48:	2600      	movs	r6, #0
 800ae4a:	9a04      	ldr	r2, [sp, #16]
 800ae4c:	4f3f      	ldr	r7, [pc, #252]	; (800af4c <_strtod_l+0x5cc>)
 800ae4e:	6013      	str	r3, [r2, #0]
 800ae50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae52:	42b3      	cmp	r3, r6
 800ae54:	d100      	bne.n	800ae58 <_strtod_l+0x4d8>
 800ae56:	e5ce      	b.n	800a9f6 <_strtod_l+0x76>
 800ae58:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ae5a:	9804      	ldr	r0, [sp, #16]
 800ae5c:	f003 f828 	bl	800deb0 <_Bfree>
 800ae60:	9908      	ldr	r1, [sp, #32]
 800ae62:	9804      	ldr	r0, [sp, #16]
 800ae64:	f003 f824 	bl	800deb0 <_Bfree>
 800ae68:	9906      	ldr	r1, [sp, #24]
 800ae6a:	9804      	ldr	r0, [sp, #16]
 800ae6c:	f003 f820 	bl	800deb0 <_Bfree>
 800ae70:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ae72:	9804      	ldr	r0, [sp, #16]
 800ae74:	f003 f81c 	bl	800deb0 <_Bfree>
 800ae78:	9905      	ldr	r1, [sp, #20]
 800ae7a:	9804      	ldr	r0, [sp, #16]
 800ae7c:	f003 f818 	bl	800deb0 <_Bfree>
 800ae80:	e5b9      	b.n	800a9f6 <_strtod_l+0x76>
 800ae82:	2300      	movs	r3, #0
 800ae84:	0030      	movs	r0, r6
 800ae86:	0039      	movs	r1, r7
 800ae88:	4d35      	ldr	r5, [pc, #212]	; (800af60 <_strtod_l+0x5e0>)
 800ae8a:	1124      	asrs	r4, r4, #4
 800ae8c:	9307      	str	r3, [sp, #28]
 800ae8e:	2c01      	cmp	r4, #1
 800ae90:	dc1e      	bgt.n	800aed0 <_strtod_l+0x550>
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d001      	beq.n	800ae9a <_strtod_l+0x51a>
 800ae96:	0006      	movs	r6, r0
 800ae98:	000f      	movs	r7, r1
 800ae9a:	4b32      	ldr	r3, [pc, #200]	; (800af64 <_strtod_l+0x5e4>)
 800ae9c:	9a07      	ldr	r2, [sp, #28]
 800ae9e:	18ff      	adds	r7, r7, r3
 800aea0:	4b2f      	ldr	r3, [pc, #188]	; (800af60 <_strtod_l+0x5e0>)
 800aea2:	00d2      	lsls	r2, r2, #3
 800aea4:	189d      	adds	r5, r3, r2
 800aea6:	6828      	ldr	r0, [r5, #0]
 800aea8:	6869      	ldr	r1, [r5, #4]
 800aeaa:	0032      	movs	r2, r6
 800aeac:	003b      	movs	r3, r7
 800aeae:	f7f7 f98b 	bl	80021c8 <__aeabi_dmul>
 800aeb2:	4b26      	ldr	r3, [pc, #152]	; (800af4c <_strtod_l+0x5cc>)
 800aeb4:	4a2c      	ldr	r2, [pc, #176]	; (800af68 <_strtod_l+0x5e8>)
 800aeb6:	0006      	movs	r6, r0
 800aeb8:	400b      	ands	r3, r1
 800aeba:	4293      	cmp	r3, r2
 800aebc:	d8be      	bhi.n	800ae3c <_strtod_l+0x4bc>
 800aebe:	4a2b      	ldr	r2, [pc, #172]	; (800af6c <_strtod_l+0x5ec>)
 800aec0:	4293      	cmp	r3, r2
 800aec2:	d913      	bls.n	800aeec <_strtod_l+0x56c>
 800aec4:	2601      	movs	r6, #1
 800aec6:	4f2a      	ldr	r7, [pc, #168]	; (800af70 <_strtod_l+0x5f0>)
 800aec8:	4276      	negs	r6, r6
 800aeca:	2300      	movs	r3, #0
 800aecc:	9307      	str	r3, [sp, #28]
 800aece:	e088      	b.n	800afe2 <_strtod_l+0x662>
 800aed0:	2201      	movs	r2, #1
 800aed2:	4214      	tst	r4, r2
 800aed4:	d004      	beq.n	800aee0 <_strtod_l+0x560>
 800aed6:	682a      	ldr	r2, [r5, #0]
 800aed8:	686b      	ldr	r3, [r5, #4]
 800aeda:	f7f7 f975 	bl	80021c8 <__aeabi_dmul>
 800aede:	2301      	movs	r3, #1
 800aee0:	9a07      	ldr	r2, [sp, #28]
 800aee2:	1064      	asrs	r4, r4, #1
 800aee4:	3201      	adds	r2, #1
 800aee6:	9207      	str	r2, [sp, #28]
 800aee8:	3508      	adds	r5, #8
 800aeea:	e7d0      	b.n	800ae8e <_strtod_l+0x50e>
 800aeec:	23d4      	movs	r3, #212	; 0xd4
 800aeee:	049b      	lsls	r3, r3, #18
 800aef0:	18cf      	adds	r7, r1, r3
 800aef2:	e7ea      	b.n	800aeca <_strtod_l+0x54a>
 800aef4:	2c00      	cmp	r4, #0
 800aef6:	d0e8      	beq.n	800aeca <_strtod_l+0x54a>
 800aef8:	4264      	negs	r4, r4
 800aefa:	230f      	movs	r3, #15
 800aefc:	0022      	movs	r2, r4
 800aefe:	401a      	ands	r2, r3
 800af00:	421c      	tst	r4, r3
 800af02:	d00a      	beq.n	800af1a <_strtod_l+0x59a>
 800af04:	4b15      	ldr	r3, [pc, #84]	; (800af5c <_strtod_l+0x5dc>)
 800af06:	00d2      	lsls	r2, r2, #3
 800af08:	189b      	adds	r3, r3, r2
 800af0a:	0030      	movs	r0, r6
 800af0c:	681a      	ldr	r2, [r3, #0]
 800af0e:	685b      	ldr	r3, [r3, #4]
 800af10:	0039      	movs	r1, r7
 800af12:	f7f6 fd5f 	bl	80019d4 <__aeabi_ddiv>
 800af16:	0006      	movs	r6, r0
 800af18:	000f      	movs	r7, r1
 800af1a:	1124      	asrs	r4, r4, #4
 800af1c:	d0d5      	beq.n	800aeca <_strtod_l+0x54a>
 800af1e:	2c1f      	cmp	r4, #31
 800af20:	dd28      	ble.n	800af74 <_strtod_l+0x5f4>
 800af22:	2300      	movs	r3, #0
 800af24:	9305      	str	r3, [sp, #20]
 800af26:	9306      	str	r3, [sp, #24]
 800af28:	930d      	str	r3, [sp, #52]	; 0x34
 800af2a:	9308      	str	r3, [sp, #32]
 800af2c:	2322      	movs	r3, #34	; 0x22
 800af2e:	9a04      	ldr	r2, [sp, #16]
 800af30:	2600      	movs	r6, #0
 800af32:	6013      	str	r3, [r2, #0]
 800af34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af36:	2700      	movs	r7, #0
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d18d      	bne.n	800ae58 <_strtod_l+0x4d8>
 800af3c:	e55b      	b.n	800a9f6 <_strtod_l+0x76>
 800af3e:	46c0      	nop			; (mov r8, r8)
 800af40:	00004e1f 	.word	0x00004e1f
 800af44:	0800ffbe 	.word	0x0800ffbe
 800af48:	0800fe70 	.word	0x0800fe70
 800af4c:	7ff00000 	.word	0x7ff00000
 800af50:	0800ffb6 	.word	0x0800ffb6
 800af54:	0800fff3 	.word	0x0800fff3
 800af58:	0800fe57 	.word	0x0800fe57
 800af5c:	08010160 	.word	0x08010160
 800af60:	08010138 	.word	0x08010138
 800af64:	fcb00000 	.word	0xfcb00000
 800af68:	7ca00000 	.word	0x7ca00000
 800af6c:	7c900000 	.word	0x7c900000
 800af70:	7fefffff 	.word	0x7fefffff
 800af74:	2310      	movs	r3, #16
 800af76:	0022      	movs	r2, r4
 800af78:	401a      	ands	r2, r3
 800af7a:	9207      	str	r2, [sp, #28]
 800af7c:	421c      	tst	r4, r3
 800af7e:	d001      	beq.n	800af84 <_strtod_l+0x604>
 800af80:	335a      	adds	r3, #90	; 0x5a
 800af82:	9307      	str	r3, [sp, #28]
 800af84:	0030      	movs	r0, r6
 800af86:	0039      	movs	r1, r7
 800af88:	2300      	movs	r3, #0
 800af8a:	4dc4      	ldr	r5, [pc, #784]	; (800b29c <_strtod_l+0x91c>)
 800af8c:	2201      	movs	r2, #1
 800af8e:	4214      	tst	r4, r2
 800af90:	d004      	beq.n	800af9c <_strtod_l+0x61c>
 800af92:	682a      	ldr	r2, [r5, #0]
 800af94:	686b      	ldr	r3, [r5, #4]
 800af96:	f7f7 f917 	bl	80021c8 <__aeabi_dmul>
 800af9a:	2301      	movs	r3, #1
 800af9c:	1064      	asrs	r4, r4, #1
 800af9e:	3508      	adds	r5, #8
 800afa0:	2c00      	cmp	r4, #0
 800afa2:	d1f3      	bne.n	800af8c <_strtod_l+0x60c>
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d001      	beq.n	800afac <_strtod_l+0x62c>
 800afa8:	0006      	movs	r6, r0
 800afaa:	000f      	movs	r7, r1
 800afac:	9b07      	ldr	r3, [sp, #28]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d00f      	beq.n	800afd2 <_strtod_l+0x652>
 800afb2:	236b      	movs	r3, #107	; 0x6b
 800afb4:	007a      	lsls	r2, r7, #1
 800afb6:	0d52      	lsrs	r2, r2, #21
 800afb8:	0039      	movs	r1, r7
 800afba:	1a9b      	subs	r3, r3, r2
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	dd08      	ble.n	800afd2 <_strtod_l+0x652>
 800afc0:	2b1f      	cmp	r3, #31
 800afc2:	dc00      	bgt.n	800afc6 <_strtod_l+0x646>
 800afc4:	e121      	b.n	800b20a <_strtod_l+0x88a>
 800afc6:	2600      	movs	r6, #0
 800afc8:	2b34      	cmp	r3, #52	; 0x34
 800afca:	dc00      	bgt.n	800afce <_strtod_l+0x64e>
 800afcc:	e116      	b.n	800b1fc <_strtod_l+0x87c>
 800afce:	27dc      	movs	r7, #220	; 0xdc
 800afd0:	04bf      	lsls	r7, r7, #18
 800afd2:	2200      	movs	r2, #0
 800afd4:	2300      	movs	r3, #0
 800afd6:	0030      	movs	r0, r6
 800afd8:	0039      	movs	r1, r7
 800afda:	f7f5 fa37 	bl	800044c <__aeabi_dcmpeq>
 800afde:	2800      	cmp	r0, #0
 800afe0:	d19f      	bne.n	800af22 <_strtod_l+0x5a2>
 800afe2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800afe4:	9a08      	ldr	r2, [sp, #32]
 800afe6:	9300      	str	r3, [sp, #0]
 800afe8:	9910      	ldr	r1, [sp, #64]	; 0x40
 800afea:	9b05      	ldr	r3, [sp, #20]
 800afec:	9804      	ldr	r0, [sp, #16]
 800afee:	f002 ffc7 	bl	800df80 <__s2b>
 800aff2:	900d      	str	r0, [sp, #52]	; 0x34
 800aff4:	2800      	cmp	r0, #0
 800aff6:	d100      	bne.n	800affa <_strtod_l+0x67a>
 800aff8:	e720      	b.n	800ae3c <_strtod_l+0x4bc>
 800affa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800affc:	9906      	ldr	r1, [sp, #24]
 800affe:	17da      	asrs	r2, r3, #31
 800b000:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b002:	1a5b      	subs	r3, r3, r1
 800b004:	401a      	ands	r2, r3
 800b006:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b008:	9215      	str	r2, [sp, #84]	; 0x54
 800b00a:	43db      	mvns	r3, r3
 800b00c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b00e:	17db      	asrs	r3, r3, #31
 800b010:	401a      	ands	r2, r3
 800b012:	2300      	movs	r3, #0
 800b014:	9218      	str	r2, [sp, #96]	; 0x60
 800b016:	9305      	str	r3, [sp, #20]
 800b018:	9306      	str	r3, [sp, #24]
 800b01a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b01c:	9804      	ldr	r0, [sp, #16]
 800b01e:	6859      	ldr	r1, [r3, #4]
 800b020:	f002 ff02 	bl	800de28 <_Balloc>
 800b024:	9008      	str	r0, [sp, #32]
 800b026:	2800      	cmp	r0, #0
 800b028:	d100      	bne.n	800b02c <_strtod_l+0x6ac>
 800b02a:	e70c      	b.n	800ae46 <_strtod_l+0x4c6>
 800b02c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b02e:	300c      	adds	r0, #12
 800b030:	0019      	movs	r1, r3
 800b032:	691a      	ldr	r2, [r3, #16]
 800b034:	310c      	adds	r1, #12
 800b036:	3202      	adds	r2, #2
 800b038:	0092      	lsls	r2, r2, #2
 800b03a:	f001 fc85 	bl	800c948 <memcpy>
 800b03e:	ab1e      	add	r3, sp, #120	; 0x78
 800b040:	9301      	str	r3, [sp, #4]
 800b042:	ab1d      	add	r3, sp, #116	; 0x74
 800b044:	9300      	str	r3, [sp, #0]
 800b046:	0032      	movs	r2, r6
 800b048:	003b      	movs	r3, r7
 800b04a:	9804      	ldr	r0, [sp, #16]
 800b04c:	9610      	str	r6, [sp, #64]	; 0x40
 800b04e:	9711      	str	r7, [sp, #68]	; 0x44
 800b050:	f003 fad8 	bl	800e604 <__d2b>
 800b054:	901c      	str	r0, [sp, #112]	; 0x70
 800b056:	2800      	cmp	r0, #0
 800b058:	d100      	bne.n	800b05c <_strtod_l+0x6dc>
 800b05a:	e6f4      	b.n	800ae46 <_strtod_l+0x4c6>
 800b05c:	2101      	movs	r1, #1
 800b05e:	9804      	ldr	r0, [sp, #16]
 800b060:	f003 f822 	bl	800e0a8 <__i2b>
 800b064:	9006      	str	r0, [sp, #24]
 800b066:	2800      	cmp	r0, #0
 800b068:	d100      	bne.n	800b06c <_strtod_l+0x6ec>
 800b06a:	e6ec      	b.n	800ae46 <_strtod_l+0x4c6>
 800b06c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b06e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b070:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800b072:	1ad4      	subs	r4, r2, r3
 800b074:	2b00      	cmp	r3, #0
 800b076:	db01      	blt.n	800b07c <_strtod_l+0x6fc>
 800b078:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800b07a:	195d      	adds	r5, r3, r5
 800b07c:	9907      	ldr	r1, [sp, #28]
 800b07e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b080:	1a5b      	subs	r3, r3, r1
 800b082:	2136      	movs	r1, #54	; 0x36
 800b084:	189b      	adds	r3, r3, r2
 800b086:	1a8a      	subs	r2, r1, r2
 800b088:	4985      	ldr	r1, [pc, #532]	; (800b2a0 <_strtod_l+0x920>)
 800b08a:	2001      	movs	r0, #1
 800b08c:	468c      	mov	ip, r1
 800b08e:	2100      	movs	r1, #0
 800b090:	3b01      	subs	r3, #1
 800b092:	9114      	str	r1, [sp, #80]	; 0x50
 800b094:	9012      	str	r0, [sp, #72]	; 0x48
 800b096:	4563      	cmp	r3, ip
 800b098:	da07      	bge.n	800b0aa <_strtod_l+0x72a>
 800b09a:	4661      	mov	r1, ip
 800b09c:	1ac9      	subs	r1, r1, r3
 800b09e:	1a52      	subs	r2, r2, r1
 800b0a0:	291f      	cmp	r1, #31
 800b0a2:	dd00      	ble.n	800b0a6 <_strtod_l+0x726>
 800b0a4:	e0b6      	b.n	800b214 <_strtod_l+0x894>
 800b0a6:	4088      	lsls	r0, r1
 800b0a8:	9012      	str	r0, [sp, #72]	; 0x48
 800b0aa:	18ab      	adds	r3, r5, r2
 800b0ac:	930c      	str	r3, [sp, #48]	; 0x30
 800b0ae:	18a4      	adds	r4, r4, r2
 800b0b0:	9b07      	ldr	r3, [sp, #28]
 800b0b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b0b4:	191c      	adds	r4, r3, r4
 800b0b6:	002b      	movs	r3, r5
 800b0b8:	4295      	cmp	r5, r2
 800b0ba:	dd00      	ble.n	800b0be <_strtod_l+0x73e>
 800b0bc:	0013      	movs	r3, r2
 800b0be:	42a3      	cmp	r3, r4
 800b0c0:	dd00      	ble.n	800b0c4 <_strtod_l+0x744>
 800b0c2:	0023      	movs	r3, r4
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	dd04      	ble.n	800b0d2 <_strtod_l+0x752>
 800b0c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b0ca:	1ae4      	subs	r4, r4, r3
 800b0cc:	1ad2      	subs	r2, r2, r3
 800b0ce:	920c      	str	r2, [sp, #48]	; 0x30
 800b0d0:	1aed      	subs	r5, r5, r3
 800b0d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	dd17      	ble.n	800b108 <_strtod_l+0x788>
 800b0d8:	001a      	movs	r2, r3
 800b0da:	9906      	ldr	r1, [sp, #24]
 800b0dc:	9804      	ldr	r0, [sp, #16]
 800b0de:	f003 f8ab 	bl	800e238 <__pow5mult>
 800b0e2:	9006      	str	r0, [sp, #24]
 800b0e4:	2800      	cmp	r0, #0
 800b0e6:	d100      	bne.n	800b0ea <_strtod_l+0x76a>
 800b0e8:	e6ad      	b.n	800ae46 <_strtod_l+0x4c6>
 800b0ea:	0001      	movs	r1, r0
 800b0ec:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b0ee:	9804      	ldr	r0, [sp, #16]
 800b0f0:	f002 fff2 	bl	800e0d8 <__multiply>
 800b0f4:	900e      	str	r0, [sp, #56]	; 0x38
 800b0f6:	2800      	cmp	r0, #0
 800b0f8:	d100      	bne.n	800b0fc <_strtod_l+0x77c>
 800b0fa:	e6a4      	b.n	800ae46 <_strtod_l+0x4c6>
 800b0fc:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b0fe:	9804      	ldr	r0, [sp, #16]
 800b100:	f002 fed6 	bl	800deb0 <_Bfree>
 800b104:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b106:	931c      	str	r3, [sp, #112]	; 0x70
 800b108:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	dd00      	ble.n	800b110 <_strtod_l+0x790>
 800b10e:	e087      	b.n	800b220 <_strtod_l+0x8a0>
 800b110:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b112:	2b00      	cmp	r3, #0
 800b114:	dd08      	ble.n	800b128 <_strtod_l+0x7a8>
 800b116:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b118:	9908      	ldr	r1, [sp, #32]
 800b11a:	9804      	ldr	r0, [sp, #16]
 800b11c:	f003 f88c 	bl	800e238 <__pow5mult>
 800b120:	9008      	str	r0, [sp, #32]
 800b122:	2800      	cmp	r0, #0
 800b124:	d100      	bne.n	800b128 <_strtod_l+0x7a8>
 800b126:	e68e      	b.n	800ae46 <_strtod_l+0x4c6>
 800b128:	2c00      	cmp	r4, #0
 800b12a:	dd08      	ble.n	800b13e <_strtod_l+0x7be>
 800b12c:	0022      	movs	r2, r4
 800b12e:	9908      	ldr	r1, [sp, #32]
 800b130:	9804      	ldr	r0, [sp, #16]
 800b132:	f003 f8dd 	bl	800e2f0 <__lshift>
 800b136:	9008      	str	r0, [sp, #32]
 800b138:	2800      	cmp	r0, #0
 800b13a:	d100      	bne.n	800b13e <_strtod_l+0x7be>
 800b13c:	e683      	b.n	800ae46 <_strtod_l+0x4c6>
 800b13e:	2d00      	cmp	r5, #0
 800b140:	dd08      	ble.n	800b154 <_strtod_l+0x7d4>
 800b142:	002a      	movs	r2, r5
 800b144:	9906      	ldr	r1, [sp, #24]
 800b146:	9804      	ldr	r0, [sp, #16]
 800b148:	f003 f8d2 	bl	800e2f0 <__lshift>
 800b14c:	9006      	str	r0, [sp, #24]
 800b14e:	2800      	cmp	r0, #0
 800b150:	d100      	bne.n	800b154 <_strtod_l+0x7d4>
 800b152:	e678      	b.n	800ae46 <_strtod_l+0x4c6>
 800b154:	9a08      	ldr	r2, [sp, #32]
 800b156:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b158:	9804      	ldr	r0, [sp, #16]
 800b15a:	f003 f953 	bl	800e404 <__mdiff>
 800b15e:	9005      	str	r0, [sp, #20]
 800b160:	2800      	cmp	r0, #0
 800b162:	d100      	bne.n	800b166 <_strtod_l+0x7e6>
 800b164:	e66f      	b.n	800ae46 <_strtod_l+0x4c6>
 800b166:	2200      	movs	r2, #0
 800b168:	68c3      	ldr	r3, [r0, #12]
 800b16a:	9906      	ldr	r1, [sp, #24]
 800b16c:	60c2      	str	r2, [r0, #12]
 800b16e:	930c      	str	r3, [sp, #48]	; 0x30
 800b170:	f003 f92c 	bl	800e3cc <__mcmp>
 800b174:	2800      	cmp	r0, #0
 800b176:	da5d      	bge.n	800b234 <_strtod_l+0x8b4>
 800b178:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b17a:	4333      	orrs	r3, r6
 800b17c:	d000      	beq.n	800b180 <_strtod_l+0x800>
 800b17e:	e088      	b.n	800b292 <_strtod_l+0x912>
 800b180:	033b      	lsls	r3, r7, #12
 800b182:	d000      	beq.n	800b186 <_strtod_l+0x806>
 800b184:	e085      	b.n	800b292 <_strtod_l+0x912>
 800b186:	22d6      	movs	r2, #214	; 0xd6
 800b188:	4b46      	ldr	r3, [pc, #280]	; (800b2a4 <_strtod_l+0x924>)
 800b18a:	04d2      	lsls	r2, r2, #19
 800b18c:	403b      	ands	r3, r7
 800b18e:	4293      	cmp	r3, r2
 800b190:	d97f      	bls.n	800b292 <_strtod_l+0x912>
 800b192:	9b05      	ldr	r3, [sp, #20]
 800b194:	695b      	ldr	r3, [r3, #20]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d103      	bne.n	800b1a2 <_strtod_l+0x822>
 800b19a:	9b05      	ldr	r3, [sp, #20]
 800b19c:	691b      	ldr	r3, [r3, #16]
 800b19e:	2b01      	cmp	r3, #1
 800b1a0:	dd77      	ble.n	800b292 <_strtod_l+0x912>
 800b1a2:	9905      	ldr	r1, [sp, #20]
 800b1a4:	2201      	movs	r2, #1
 800b1a6:	9804      	ldr	r0, [sp, #16]
 800b1a8:	f003 f8a2 	bl	800e2f0 <__lshift>
 800b1ac:	9906      	ldr	r1, [sp, #24]
 800b1ae:	9005      	str	r0, [sp, #20]
 800b1b0:	f003 f90c 	bl	800e3cc <__mcmp>
 800b1b4:	2800      	cmp	r0, #0
 800b1b6:	dd6c      	ble.n	800b292 <_strtod_l+0x912>
 800b1b8:	9907      	ldr	r1, [sp, #28]
 800b1ba:	003b      	movs	r3, r7
 800b1bc:	4a39      	ldr	r2, [pc, #228]	; (800b2a4 <_strtod_l+0x924>)
 800b1be:	2900      	cmp	r1, #0
 800b1c0:	d100      	bne.n	800b1c4 <_strtod_l+0x844>
 800b1c2:	e094      	b.n	800b2ee <_strtod_l+0x96e>
 800b1c4:	0011      	movs	r1, r2
 800b1c6:	20d6      	movs	r0, #214	; 0xd6
 800b1c8:	4039      	ands	r1, r7
 800b1ca:	04c0      	lsls	r0, r0, #19
 800b1cc:	4281      	cmp	r1, r0
 800b1ce:	dd00      	ble.n	800b1d2 <_strtod_l+0x852>
 800b1d0:	e08d      	b.n	800b2ee <_strtod_l+0x96e>
 800b1d2:	23dc      	movs	r3, #220	; 0xdc
 800b1d4:	049b      	lsls	r3, r3, #18
 800b1d6:	4299      	cmp	r1, r3
 800b1d8:	dc00      	bgt.n	800b1dc <_strtod_l+0x85c>
 800b1da:	e6a7      	b.n	800af2c <_strtod_l+0x5ac>
 800b1dc:	0030      	movs	r0, r6
 800b1de:	0039      	movs	r1, r7
 800b1e0:	4b31      	ldr	r3, [pc, #196]	; (800b2a8 <_strtod_l+0x928>)
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	f7f6 fff0 	bl	80021c8 <__aeabi_dmul>
 800b1e8:	4b2e      	ldr	r3, [pc, #184]	; (800b2a4 <_strtod_l+0x924>)
 800b1ea:	0006      	movs	r6, r0
 800b1ec:	000f      	movs	r7, r1
 800b1ee:	420b      	tst	r3, r1
 800b1f0:	d000      	beq.n	800b1f4 <_strtod_l+0x874>
 800b1f2:	e631      	b.n	800ae58 <_strtod_l+0x4d8>
 800b1f4:	2322      	movs	r3, #34	; 0x22
 800b1f6:	9a04      	ldr	r2, [sp, #16]
 800b1f8:	6013      	str	r3, [r2, #0]
 800b1fa:	e62d      	b.n	800ae58 <_strtod_l+0x4d8>
 800b1fc:	234b      	movs	r3, #75	; 0x4b
 800b1fe:	1a9a      	subs	r2, r3, r2
 800b200:	3b4c      	subs	r3, #76	; 0x4c
 800b202:	4093      	lsls	r3, r2
 800b204:	4019      	ands	r1, r3
 800b206:	000f      	movs	r7, r1
 800b208:	e6e3      	b.n	800afd2 <_strtod_l+0x652>
 800b20a:	2201      	movs	r2, #1
 800b20c:	4252      	negs	r2, r2
 800b20e:	409a      	lsls	r2, r3
 800b210:	4016      	ands	r6, r2
 800b212:	e6de      	b.n	800afd2 <_strtod_l+0x652>
 800b214:	4925      	ldr	r1, [pc, #148]	; (800b2ac <_strtod_l+0x92c>)
 800b216:	1acb      	subs	r3, r1, r3
 800b218:	0001      	movs	r1, r0
 800b21a:	4099      	lsls	r1, r3
 800b21c:	9114      	str	r1, [sp, #80]	; 0x50
 800b21e:	e743      	b.n	800b0a8 <_strtod_l+0x728>
 800b220:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b222:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b224:	9804      	ldr	r0, [sp, #16]
 800b226:	f003 f863 	bl	800e2f0 <__lshift>
 800b22a:	901c      	str	r0, [sp, #112]	; 0x70
 800b22c:	2800      	cmp	r0, #0
 800b22e:	d000      	beq.n	800b232 <_strtod_l+0x8b2>
 800b230:	e76e      	b.n	800b110 <_strtod_l+0x790>
 800b232:	e608      	b.n	800ae46 <_strtod_l+0x4c6>
 800b234:	970e      	str	r7, [sp, #56]	; 0x38
 800b236:	2800      	cmp	r0, #0
 800b238:	d177      	bne.n	800b32a <_strtod_l+0x9aa>
 800b23a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b23c:	033b      	lsls	r3, r7, #12
 800b23e:	0b1b      	lsrs	r3, r3, #12
 800b240:	2a00      	cmp	r2, #0
 800b242:	d039      	beq.n	800b2b8 <_strtod_l+0x938>
 800b244:	4a1a      	ldr	r2, [pc, #104]	; (800b2b0 <_strtod_l+0x930>)
 800b246:	4293      	cmp	r3, r2
 800b248:	d139      	bne.n	800b2be <_strtod_l+0x93e>
 800b24a:	2101      	movs	r1, #1
 800b24c:	9b07      	ldr	r3, [sp, #28]
 800b24e:	4249      	negs	r1, r1
 800b250:	0032      	movs	r2, r6
 800b252:	0008      	movs	r0, r1
 800b254:	2b00      	cmp	r3, #0
 800b256:	d00b      	beq.n	800b270 <_strtod_l+0x8f0>
 800b258:	24d4      	movs	r4, #212	; 0xd4
 800b25a:	4b12      	ldr	r3, [pc, #72]	; (800b2a4 <_strtod_l+0x924>)
 800b25c:	0008      	movs	r0, r1
 800b25e:	403b      	ands	r3, r7
 800b260:	04e4      	lsls	r4, r4, #19
 800b262:	42a3      	cmp	r3, r4
 800b264:	d804      	bhi.n	800b270 <_strtod_l+0x8f0>
 800b266:	306c      	adds	r0, #108	; 0x6c
 800b268:	0d1b      	lsrs	r3, r3, #20
 800b26a:	1ac3      	subs	r3, r0, r3
 800b26c:	4099      	lsls	r1, r3
 800b26e:	0008      	movs	r0, r1
 800b270:	4282      	cmp	r2, r0
 800b272:	d124      	bne.n	800b2be <_strtod_l+0x93e>
 800b274:	4b0f      	ldr	r3, [pc, #60]	; (800b2b4 <_strtod_l+0x934>)
 800b276:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b278:	4299      	cmp	r1, r3
 800b27a:	d102      	bne.n	800b282 <_strtod_l+0x902>
 800b27c:	3201      	adds	r2, #1
 800b27e:	d100      	bne.n	800b282 <_strtod_l+0x902>
 800b280:	e5e1      	b.n	800ae46 <_strtod_l+0x4c6>
 800b282:	4b08      	ldr	r3, [pc, #32]	; (800b2a4 <_strtod_l+0x924>)
 800b284:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b286:	2600      	movs	r6, #0
 800b288:	401a      	ands	r2, r3
 800b28a:	0013      	movs	r3, r2
 800b28c:	2280      	movs	r2, #128	; 0x80
 800b28e:	0352      	lsls	r2, r2, #13
 800b290:	189f      	adds	r7, r3, r2
 800b292:	9b07      	ldr	r3, [sp, #28]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d1a1      	bne.n	800b1dc <_strtod_l+0x85c>
 800b298:	e5de      	b.n	800ae58 <_strtod_l+0x4d8>
 800b29a:	46c0      	nop			; (mov r8, r8)
 800b29c:	0800fe88 	.word	0x0800fe88
 800b2a0:	fffffc02 	.word	0xfffffc02
 800b2a4:	7ff00000 	.word	0x7ff00000
 800b2a8:	39500000 	.word	0x39500000
 800b2ac:	fffffbe2 	.word	0xfffffbe2
 800b2b0:	000fffff 	.word	0x000fffff
 800b2b4:	7fefffff 	.word	0x7fefffff
 800b2b8:	4333      	orrs	r3, r6
 800b2ba:	d100      	bne.n	800b2be <_strtod_l+0x93e>
 800b2bc:	e77c      	b.n	800b1b8 <_strtod_l+0x838>
 800b2be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d01d      	beq.n	800b300 <_strtod_l+0x980>
 800b2c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b2c6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b2c8:	4213      	tst	r3, r2
 800b2ca:	d0e2      	beq.n	800b292 <_strtod_l+0x912>
 800b2cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b2ce:	0030      	movs	r0, r6
 800b2d0:	0039      	movs	r1, r7
 800b2d2:	9a07      	ldr	r2, [sp, #28]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d017      	beq.n	800b308 <_strtod_l+0x988>
 800b2d8:	f7ff fb3a 	bl	800a950 <sulp>
 800b2dc:	0002      	movs	r2, r0
 800b2de:	000b      	movs	r3, r1
 800b2e0:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b2e2:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b2e4:	f7f6 f816 	bl	8001314 <__aeabi_dadd>
 800b2e8:	0006      	movs	r6, r0
 800b2ea:	000f      	movs	r7, r1
 800b2ec:	e7d1      	b.n	800b292 <_strtod_l+0x912>
 800b2ee:	2601      	movs	r6, #1
 800b2f0:	4013      	ands	r3, r2
 800b2f2:	4a98      	ldr	r2, [pc, #608]	; (800b554 <_strtod_l+0xbd4>)
 800b2f4:	4276      	negs	r6, r6
 800b2f6:	189b      	adds	r3, r3, r2
 800b2f8:	4a97      	ldr	r2, [pc, #604]	; (800b558 <_strtod_l+0xbd8>)
 800b2fa:	431a      	orrs	r2, r3
 800b2fc:	0017      	movs	r7, r2
 800b2fe:	e7c8      	b.n	800b292 <_strtod_l+0x912>
 800b300:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b302:	4233      	tst	r3, r6
 800b304:	d0c5      	beq.n	800b292 <_strtod_l+0x912>
 800b306:	e7e1      	b.n	800b2cc <_strtod_l+0x94c>
 800b308:	f7ff fb22 	bl	800a950 <sulp>
 800b30c:	0002      	movs	r2, r0
 800b30e:	000b      	movs	r3, r1
 800b310:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b312:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b314:	f7f7 fa1a 	bl	800274c <__aeabi_dsub>
 800b318:	2200      	movs	r2, #0
 800b31a:	2300      	movs	r3, #0
 800b31c:	0006      	movs	r6, r0
 800b31e:	000f      	movs	r7, r1
 800b320:	f7f5 f894 	bl	800044c <__aeabi_dcmpeq>
 800b324:	2800      	cmp	r0, #0
 800b326:	d0b4      	beq.n	800b292 <_strtod_l+0x912>
 800b328:	e600      	b.n	800af2c <_strtod_l+0x5ac>
 800b32a:	9906      	ldr	r1, [sp, #24]
 800b32c:	9805      	ldr	r0, [sp, #20]
 800b32e:	f003 f9c9 	bl	800e6c4 <__ratio>
 800b332:	2380      	movs	r3, #128	; 0x80
 800b334:	2200      	movs	r2, #0
 800b336:	05db      	lsls	r3, r3, #23
 800b338:	0004      	movs	r4, r0
 800b33a:	000d      	movs	r5, r1
 800b33c:	f7f5 f896 	bl	800046c <__aeabi_dcmple>
 800b340:	2800      	cmp	r0, #0
 800b342:	d06d      	beq.n	800b420 <_strtod_l+0xaa0>
 800b344:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b346:	2b00      	cmp	r3, #0
 800b348:	d000      	beq.n	800b34c <_strtod_l+0x9cc>
 800b34a:	e07e      	b.n	800b44a <_strtod_l+0xaca>
 800b34c:	2e00      	cmp	r6, #0
 800b34e:	d158      	bne.n	800b402 <_strtod_l+0xa82>
 800b350:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b352:	031b      	lsls	r3, r3, #12
 800b354:	d000      	beq.n	800b358 <_strtod_l+0x9d8>
 800b356:	e07f      	b.n	800b458 <_strtod_l+0xad8>
 800b358:	2200      	movs	r2, #0
 800b35a:	0020      	movs	r0, r4
 800b35c:	0029      	movs	r1, r5
 800b35e:	4b7f      	ldr	r3, [pc, #508]	; (800b55c <_strtod_l+0xbdc>)
 800b360:	f7f5 f87a 	bl	8000458 <__aeabi_dcmplt>
 800b364:	2800      	cmp	r0, #0
 800b366:	d158      	bne.n	800b41a <_strtod_l+0xa9a>
 800b368:	0020      	movs	r0, r4
 800b36a:	0029      	movs	r1, r5
 800b36c:	2200      	movs	r2, #0
 800b36e:	4b7c      	ldr	r3, [pc, #496]	; (800b560 <_strtod_l+0xbe0>)
 800b370:	f7f6 ff2a 	bl	80021c8 <__aeabi_dmul>
 800b374:	0004      	movs	r4, r0
 800b376:	000d      	movs	r5, r1
 800b378:	2380      	movs	r3, #128	; 0x80
 800b37a:	061b      	lsls	r3, r3, #24
 800b37c:	940a      	str	r4, [sp, #40]	; 0x28
 800b37e:	18eb      	adds	r3, r5, r3
 800b380:	930b      	str	r3, [sp, #44]	; 0x2c
 800b382:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b384:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b386:	9212      	str	r2, [sp, #72]	; 0x48
 800b388:	9313      	str	r3, [sp, #76]	; 0x4c
 800b38a:	4a76      	ldr	r2, [pc, #472]	; (800b564 <_strtod_l+0xbe4>)
 800b38c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b38e:	4013      	ands	r3, r2
 800b390:	9314      	str	r3, [sp, #80]	; 0x50
 800b392:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b394:	4b74      	ldr	r3, [pc, #464]	; (800b568 <_strtod_l+0xbe8>)
 800b396:	429a      	cmp	r2, r3
 800b398:	d000      	beq.n	800b39c <_strtod_l+0xa1c>
 800b39a:	e091      	b.n	800b4c0 <_strtod_l+0xb40>
 800b39c:	4a73      	ldr	r2, [pc, #460]	; (800b56c <_strtod_l+0xbec>)
 800b39e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b3a0:	4694      	mov	ip, r2
 800b3a2:	4463      	add	r3, ip
 800b3a4:	001f      	movs	r7, r3
 800b3a6:	0030      	movs	r0, r6
 800b3a8:	0019      	movs	r1, r3
 800b3aa:	f003 f8c3 	bl	800e534 <__ulp>
 800b3ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b3b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3b2:	f7f6 ff09 	bl	80021c8 <__aeabi_dmul>
 800b3b6:	0032      	movs	r2, r6
 800b3b8:	003b      	movs	r3, r7
 800b3ba:	f7f5 ffab 	bl	8001314 <__aeabi_dadd>
 800b3be:	4a69      	ldr	r2, [pc, #420]	; (800b564 <_strtod_l+0xbe4>)
 800b3c0:	4b6b      	ldr	r3, [pc, #428]	; (800b570 <_strtod_l+0xbf0>)
 800b3c2:	0006      	movs	r6, r0
 800b3c4:	400a      	ands	r2, r1
 800b3c6:	429a      	cmp	r2, r3
 800b3c8:	d949      	bls.n	800b45e <_strtod_l+0xade>
 800b3ca:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b3cc:	4b69      	ldr	r3, [pc, #420]	; (800b574 <_strtod_l+0xbf4>)
 800b3ce:	429a      	cmp	r2, r3
 800b3d0:	d103      	bne.n	800b3da <_strtod_l+0xa5a>
 800b3d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b3d4:	3301      	adds	r3, #1
 800b3d6:	d100      	bne.n	800b3da <_strtod_l+0xa5a>
 800b3d8:	e535      	b.n	800ae46 <_strtod_l+0x4c6>
 800b3da:	2601      	movs	r6, #1
 800b3dc:	4f65      	ldr	r7, [pc, #404]	; (800b574 <_strtod_l+0xbf4>)
 800b3de:	4276      	negs	r6, r6
 800b3e0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b3e2:	9804      	ldr	r0, [sp, #16]
 800b3e4:	f002 fd64 	bl	800deb0 <_Bfree>
 800b3e8:	9908      	ldr	r1, [sp, #32]
 800b3ea:	9804      	ldr	r0, [sp, #16]
 800b3ec:	f002 fd60 	bl	800deb0 <_Bfree>
 800b3f0:	9906      	ldr	r1, [sp, #24]
 800b3f2:	9804      	ldr	r0, [sp, #16]
 800b3f4:	f002 fd5c 	bl	800deb0 <_Bfree>
 800b3f8:	9905      	ldr	r1, [sp, #20]
 800b3fa:	9804      	ldr	r0, [sp, #16]
 800b3fc:	f002 fd58 	bl	800deb0 <_Bfree>
 800b400:	e60b      	b.n	800b01a <_strtod_l+0x69a>
 800b402:	2e01      	cmp	r6, #1
 800b404:	d103      	bne.n	800b40e <_strtod_l+0xa8e>
 800b406:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d100      	bne.n	800b40e <_strtod_l+0xa8e>
 800b40c:	e58e      	b.n	800af2c <_strtod_l+0x5ac>
 800b40e:	2300      	movs	r3, #0
 800b410:	4c59      	ldr	r4, [pc, #356]	; (800b578 <_strtod_l+0xbf8>)
 800b412:	930a      	str	r3, [sp, #40]	; 0x28
 800b414:	940b      	str	r4, [sp, #44]	; 0x2c
 800b416:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800b418:	e01c      	b.n	800b454 <_strtod_l+0xad4>
 800b41a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800b41c:	4d50      	ldr	r5, [pc, #320]	; (800b560 <_strtod_l+0xbe0>)
 800b41e:	e7ab      	b.n	800b378 <_strtod_l+0x9f8>
 800b420:	2200      	movs	r2, #0
 800b422:	0020      	movs	r0, r4
 800b424:	0029      	movs	r1, r5
 800b426:	4b4e      	ldr	r3, [pc, #312]	; (800b560 <_strtod_l+0xbe0>)
 800b428:	f7f6 fece 	bl	80021c8 <__aeabi_dmul>
 800b42c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b42e:	0004      	movs	r4, r0
 800b430:	000b      	movs	r3, r1
 800b432:	000d      	movs	r5, r1
 800b434:	2a00      	cmp	r2, #0
 800b436:	d104      	bne.n	800b442 <_strtod_l+0xac2>
 800b438:	2280      	movs	r2, #128	; 0x80
 800b43a:	0612      	lsls	r2, r2, #24
 800b43c:	900a      	str	r0, [sp, #40]	; 0x28
 800b43e:	188b      	adds	r3, r1, r2
 800b440:	e79e      	b.n	800b380 <_strtod_l+0xa00>
 800b442:	0002      	movs	r2, r0
 800b444:	920a      	str	r2, [sp, #40]	; 0x28
 800b446:	930b      	str	r3, [sp, #44]	; 0x2c
 800b448:	e79b      	b.n	800b382 <_strtod_l+0xa02>
 800b44a:	2300      	movs	r3, #0
 800b44c:	4c43      	ldr	r4, [pc, #268]	; (800b55c <_strtod_l+0xbdc>)
 800b44e:	930a      	str	r3, [sp, #40]	; 0x28
 800b450:	940b      	str	r4, [sp, #44]	; 0x2c
 800b452:	2400      	movs	r4, #0
 800b454:	4d41      	ldr	r5, [pc, #260]	; (800b55c <_strtod_l+0xbdc>)
 800b456:	e794      	b.n	800b382 <_strtod_l+0xa02>
 800b458:	2300      	movs	r3, #0
 800b45a:	4c47      	ldr	r4, [pc, #284]	; (800b578 <_strtod_l+0xbf8>)
 800b45c:	e7f7      	b.n	800b44e <_strtod_l+0xace>
 800b45e:	23d4      	movs	r3, #212	; 0xd4
 800b460:	049b      	lsls	r3, r3, #18
 800b462:	18cf      	adds	r7, r1, r3
 800b464:	9b07      	ldr	r3, [sp, #28]
 800b466:	970e      	str	r7, [sp, #56]	; 0x38
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d1b9      	bne.n	800b3e0 <_strtod_l+0xa60>
 800b46c:	4b3d      	ldr	r3, [pc, #244]	; (800b564 <_strtod_l+0xbe4>)
 800b46e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b470:	403b      	ands	r3, r7
 800b472:	429a      	cmp	r2, r3
 800b474:	d1b4      	bne.n	800b3e0 <_strtod_l+0xa60>
 800b476:	0020      	movs	r0, r4
 800b478:	0029      	movs	r1, r5
 800b47a:	f7f5 f8bb 	bl	80005f4 <__aeabi_d2lz>
 800b47e:	f7f5 f8f5 	bl	800066c <__aeabi_l2d>
 800b482:	0002      	movs	r2, r0
 800b484:	000b      	movs	r3, r1
 800b486:	0020      	movs	r0, r4
 800b488:	0029      	movs	r1, r5
 800b48a:	f7f7 f95f 	bl	800274c <__aeabi_dsub>
 800b48e:	033b      	lsls	r3, r7, #12
 800b490:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b492:	0b1b      	lsrs	r3, r3, #12
 800b494:	4333      	orrs	r3, r6
 800b496:	4313      	orrs	r3, r2
 800b498:	0004      	movs	r4, r0
 800b49a:	000d      	movs	r5, r1
 800b49c:	4a37      	ldr	r2, [pc, #220]	; (800b57c <_strtod_l+0xbfc>)
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d054      	beq.n	800b54c <_strtod_l+0xbcc>
 800b4a2:	4b37      	ldr	r3, [pc, #220]	; (800b580 <_strtod_l+0xc00>)
 800b4a4:	f7f4 ffd8 	bl	8000458 <__aeabi_dcmplt>
 800b4a8:	2800      	cmp	r0, #0
 800b4aa:	d000      	beq.n	800b4ae <_strtod_l+0xb2e>
 800b4ac:	e4d4      	b.n	800ae58 <_strtod_l+0x4d8>
 800b4ae:	0020      	movs	r0, r4
 800b4b0:	0029      	movs	r1, r5
 800b4b2:	4a34      	ldr	r2, [pc, #208]	; (800b584 <_strtod_l+0xc04>)
 800b4b4:	4b2a      	ldr	r3, [pc, #168]	; (800b560 <_strtod_l+0xbe0>)
 800b4b6:	f7f4 ffe3 	bl	8000480 <__aeabi_dcmpgt>
 800b4ba:	2800      	cmp	r0, #0
 800b4bc:	d090      	beq.n	800b3e0 <_strtod_l+0xa60>
 800b4be:	e4cb      	b.n	800ae58 <_strtod_l+0x4d8>
 800b4c0:	9b07      	ldr	r3, [sp, #28]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d02b      	beq.n	800b51e <_strtod_l+0xb9e>
 800b4c6:	23d4      	movs	r3, #212	; 0xd4
 800b4c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b4ca:	04db      	lsls	r3, r3, #19
 800b4cc:	429a      	cmp	r2, r3
 800b4ce:	d826      	bhi.n	800b51e <_strtod_l+0xb9e>
 800b4d0:	0020      	movs	r0, r4
 800b4d2:	0029      	movs	r1, r5
 800b4d4:	4a2c      	ldr	r2, [pc, #176]	; (800b588 <_strtod_l+0xc08>)
 800b4d6:	4b2d      	ldr	r3, [pc, #180]	; (800b58c <_strtod_l+0xc0c>)
 800b4d8:	f7f4 ffc8 	bl	800046c <__aeabi_dcmple>
 800b4dc:	2800      	cmp	r0, #0
 800b4de:	d017      	beq.n	800b510 <_strtod_l+0xb90>
 800b4e0:	0020      	movs	r0, r4
 800b4e2:	0029      	movs	r1, r5
 800b4e4:	f7f5 f868 	bl	80005b8 <__aeabi_d2uiz>
 800b4e8:	2800      	cmp	r0, #0
 800b4ea:	d100      	bne.n	800b4ee <_strtod_l+0xb6e>
 800b4ec:	3001      	adds	r0, #1
 800b4ee:	f7f7 fd33 	bl	8002f58 <__aeabi_ui2d>
 800b4f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b4f4:	0004      	movs	r4, r0
 800b4f6:	000b      	movs	r3, r1
 800b4f8:	000d      	movs	r5, r1
 800b4fa:	2a00      	cmp	r2, #0
 800b4fc:	d122      	bne.n	800b544 <_strtod_l+0xbc4>
 800b4fe:	2280      	movs	r2, #128	; 0x80
 800b500:	0612      	lsls	r2, r2, #24
 800b502:	188b      	adds	r3, r1, r2
 800b504:	9016      	str	r0, [sp, #88]	; 0x58
 800b506:	9317      	str	r3, [sp, #92]	; 0x5c
 800b508:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b50a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b50c:	9212      	str	r2, [sp, #72]	; 0x48
 800b50e:	9313      	str	r3, [sp, #76]	; 0x4c
 800b510:	22d6      	movs	r2, #214	; 0xd6
 800b512:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b514:	04d2      	lsls	r2, r2, #19
 800b516:	189b      	adds	r3, r3, r2
 800b518:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b51a:	1a9b      	subs	r3, r3, r2
 800b51c:	9313      	str	r3, [sp, #76]	; 0x4c
 800b51e:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b520:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b522:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800b524:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800b526:	f003 f805 	bl	800e534 <__ulp>
 800b52a:	0002      	movs	r2, r0
 800b52c:	000b      	movs	r3, r1
 800b52e:	0030      	movs	r0, r6
 800b530:	0039      	movs	r1, r7
 800b532:	f7f6 fe49 	bl	80021c8 <__aeabi_dmul>
 800b536:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b538:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b53a:	f7f5 feeb 	bl	8001314 <__aeabi_dadd>
 800b53e:	0006      	movs	r6, r0
 800b540:	000f      	movs	r7, r1
 800b542:	e78f      	b.n	800b464 <_strtod_l+0xae4>
 800b544:	0002      	movs	r2, r0
 800b546:	9216      	str	r2, [sp, #88]	; 0x58
 800b548:	9317      	str	r3, [sp, #92]	; 0x5c
 800b54a:	e7dd      	b.n	800b508 <_strtod_l+0xb88>
 800b54c:	4b10      	ldr	r3, [pc, #64]	; (800b590 <_strtod_l+0xc10>)
 800b54e:	f7f4 ff83 	bl	8000458 <__aeabi_dcmplt>
 800b552:	e7b2      	b.n	800b4ba <_strtod_l+0xb3a>
 800b554:	fff00000 	.word	0xfff00000
 800b558:	000fffff 	.word	0x000fffff
 800b55c:	3ff00000 	.word	0x3ff00000
 800b560:	3fe00000 	.word	0x3fe00000
 800b564:	7ff00000 	.word	0x7ff00000
 800b568:	7fe00000 	.word	0x7fe00000
 800b56c:	fcb00000 	.word	0xfcb00000
 800b570:	7c9fffff 	.word	0x7c9fffff
 800b574:	7fefffff 	.word	0x7fefffff
 800b578:	bff00000 	.word	0xbff00000
 800b57c:	94a03595 	.word	0x94a03595
 800b580:	3fdfffff 	.word	0x3fdfffff
 800b584:	35afe535 	.word	0x35afe535
 800b588:	ffc00000 	.word	0xffc00000
 800b58c:	41dfffff 	.word	0x41dfffff
 800b590:	3fcfffff 	.word	0x3fcfffff

0800b594 <_strtod_r>:
 800b594:	b510      	push	{r4, lr}
 800b596:	4b02      	ldr	r3, [pc, #8]	; (800b5a0 <_strtod_r+0xc>)
 800b598:	f7ff f9f2 	bl	800a980 <_strtod_l>
 800b59c:	bd10      	pop	{r4, pc}
 800b59e:	46c0      	nop			; (mov r8, r8)
 800b5a0:	200000f4 	.word	0x200000f4

0800b5a4 <__cvt>:
 800b5a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5a6:	001e      	movs	r6, r3
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	0014      	movs	r4, r2
 800b5ac:	b08b      	sub	sp, #44	; 0x2c
 800b5ae:	429e      	cmp	r6, r3
 800b5b0:	da04      	bge.n	800b5bc <__cvt+0x18>
 800b5b2:	2180      	movs	r1, #128	; 0x80
 800b5b4:	0609      	lsls	r1, r1, #24
 800b5b6:	1873      	adds	r3, r6, r1
 800b5b8:	001e      	movs	r6, r3
 800b5ba:	232d      	movs	r3, #45	; 0x2d
 800b5bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b5be:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800b5c0:	7013      	strb	r3, [r2, #0]
 800b5c2:	2320      	movs	r3, #32
 800b5c4:	2203      	movs	r2, #3
 800b5c6:	439f      	bics	r7, r3
 800b5c8:	2f46      	cmp	r7, #70	; 0x46
 800b5ca:	d007      	beq.n	800b5dc <__cvt+0x38>
 800b5cc:	003b      	movs	r3, r7
 800b5ce:	3b45      	subs	r3, #69	; 0x45
 800b5d0:	4259      	negs	r1, r3
 800b5d2:	414b      	adcs	r3, r1
 800b5d4:	9910      	ldr	r1, [sp, #64]	; 0x40
 800b5d6:	3a01      	subs	r2, #1
 800b5d8:	18cb      	adds	r3, r1, r3
 800b5da:	9310      	str	r3, [sp, #64]	; 0x40
 800b5dc:	ab09      	add	r3, sp, #36	; 0x24
 800b5de:	9304      	str	r3, [sp, #16]
 800b5e0:	ab08      	add	r3, sp, #32
 800b5e2:	9303      	str	r3, [sp, #12]
 800b5e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b5e6:	9200      	str	r2, [sp, #0]
 800b5e8:	9302      	str	r3, [sp, #8]
 800b5ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b5ec:	0022      	movs	r2, r4
 800b5ee:	9301      	str	r3, [sp, #4]
 800b5f0:	0033      	movs	r3, r6
 800b5f2:	f001 fa53 	bl	800ca9c <_dtoa_r>
 800b5f6:	0005      	movs	r5, r0
 800b5f8:	2f47      	cmp	r7, #71	; 0x47
 800b5fa:	d102      	bne.n	800b602 <__cvt+0x5e>
 800b5fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b5fe:	07db      	lsls	r3, r3, #31
 800b600:	d528      	bpl.n	800b654 <__cvt+0xb0>
 800b602:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b604:	18eb      	adds	r3, r5, r3
 800b606:	9307      	str	r3, [sp, #28]
 800b608:	2f46      	cmp	r7, #70	; 0x46
 800b60a:	d114      	bne.n	800b636 <__cvt+0x92>
 800b60c:	782b      	ldrb	r3, [r5, #0]
 800b60e:	2b30      	cmp	r3, #48	; 0x30
 800b610:	d10c      	bne.n	800b62c <__cvt+0x88>
 800b612:	2200      	movs	r2, #0
 800b614:	2300      	movs	r3, #0
 800b616:	0020      	movs	r0, r4
 800b618:	0031      	movs	r1, r6
 800b61a:	f7f4 ff17 	bl	800044c <__aeabi_dcmpeq>
 800b61e:	2800      	cmp	r0, #0
 800b620:	d104      	bne.n	800b62c <__cvt+0x88>
 800b622:	2301      	movs	r3, #1
 800b624:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b626:	1a9b      	subs	r3, r3, r2
 800b628:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b62a:	6013      	str	r3, [r2, #0]
 800b62c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b62e:	9a07      	ldr	r2, [sp, #28]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	18d3      	adds	r3, r2, r3
 800b634:	9307      	str	r3, [sp, #28]
 800b636:	2200      	movs	r2, #0
 800b638:	2300      	movs	r3, #0
 800b63a:	0020      	movs	r0, r4
 800b63c:	0031      	movs	r1, r6
 800b63e:	f7f4 ff05 	bl	800044c <__aeabi_dcmpeq>
 800b642:	2800      	cmp	r0, #0
 800b644:	d001      	beq.n	800b64a <__cvt+0xa6>
 800b646:	9b07      	ldr	r3, [sp, #28]
 800b648:	9309      	str	r3, [sp, #36]	; 0x24
 800b64a:	2230      	movs	r2, #48	; 0x30
 800b64c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b64e:	9907      	ldr	r1, [sp, #28]
 800b650:	428b      	cmp	r3, r1
 800b652:	d306      	bcc.n	800b662 <__cvt+0xbe>
 800b654:	0028      	movs	r0, r5
 800b656:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b658:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b65a:	1b5b      	subs	r3, r3, r5
 800b65c:	6013      	str	r3, [r2, #0]
 800b65e:	b00b      	add	sp, #44	; 0x2c
 800b660:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b662:	1c59      	adds	r1, r3, #1
 800b664:	9109      	str	r1, [sp, #36]	; 0x24
 800b666:	701a      	strb	r2, [r3, #0]
 800b668:	e7f0      	b.n	800b64c <__cvt+0xa8>

0800b66a <__exponent>:
 800b66a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b66c:	1c83      	adds	r3, r0, #2
 800b66e:	b087      	sub	sp, #28
 800b670:	9303      	str	r3, [sp, #12]
 800b672:	0005      	movs	r5, r0
 800b674:	000c      	movs	r4, r1
 800b676:	232b      	movs	r3, #43	; 0x2b
 800b678:	7002      	strb	r2, [r0, #0]
 800b67a:	2900      	cmp	r1, #0
 800b67c:	da01      	bge.n	800b682 <__exponent+0x18>
 800b67e:	424c      	negs	r4, r1
 800b680:	3302      	adds	r3, #2
 800b682:	706b      	strb	r3, [r5, #1]
 800b684:	2c09      	cmp	r4, #9
 800b686:	dd2f      	ble.n	800b6e8 <__exponent+0x7e>
 800b688:	270a      	movs	r7, #10
 800b68a:	ab04      	add	r3, sp, #16
 800b68c:	1dde      	adds	r6, r3, #7
 800b68e:	0020      	movs	r0, r4
 800b690:	0039      	movs	r1, r7
 800b692:	9601      	str	r6, [sp, #4]
 800b694:	f7f4 fec4 	bl	8000420 <__aeabi_idivmod>
 800b698:	3e01      	subs	r6, #1
 800b69a:	3130      	adds	r1, #48	; 0x30
 800b69c:	0020      	movs	r0, r4
 800b69e:	7031      	strb	r1, [r6, #0]
 800b6a0:	0039      	movs	r1, r7
 800b6a2:	9402      	str	r4, [sp, #8]
 800b6a4:	f7f4 fdd6 	bl	8000254 <__divsi3>
 800b6a8:	9b02      	ldr	r3, [sp, #8]
 800b6aa:	0004      	movs	r4, r0
 800b6ac:	2b63      	cmp	r3, #99	; 0x63
 800b6ae:	dcee      	bgt.n	800b68e <__exponent+0x24>
 800b6b0:	9b01      	ldr	r3, [sp, #4]
 800b6b2:	3430      	adds	r4, #48	; 0x30
 800b6b4:	1e9a      	subs	r2, r3, #2
 800b6b6:	0013      	movs	r3, r2
 800b6b8:	9903      	ldr	r1, [sp, #12]
 800b6ba:	7014      	strb	r4, [r2, #0]
 800b6bc:	a804      	add	r0, sp, #16
 800b6be:	3007      	adds	r0, #7
 800b6c0:	4298      	cmp	r0, r3
 800b6c2:	d80c      	bhi.n	800b6de <__exponent+0x74>
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	4282      	cmp	r2, r0
 800b6c8:	d804      	bhi.n	800b6d4 <__exponent+0x6a>
 800b6ca:	aa04      	add	r2, sp, #16
 800b6cc:	3309      	adds	r3, #9
 800b6ce:	189b      	adds	r3, r3, r2
 800b6d0:	9a01      	ldr	r2, [sp, #4]
 800b6d2:	1a9b      	subs	r3, r3, r2
 800b6d4:	9a03      	ldr	r2, [sp, #12]
 800b6d6:	18d3      	adds	r3, r2, r3
 800b6d8:	1b58      	subs	r0, r3, r5
 800b6da:	b007      	add	sp, #28
 800b6dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6de:	7818      	ldrb	r0, [r3, #0]
 800b6e0:	3301      	adds	r3, #1
 800b6e2:	7008      	strb	r0, [r1, #0]
 800b6e4:	3101      	adds	r1, #1
 800b6e6:	e7e9      	b.n	800b6bc <__exponent+0x52>
 800b6e8:	2330      	movs	r3, #48	; 0x30
 800b6ea:	3430      	adds	r4, #48	; 0x30
 800b6ec:	70ab      	strb	r3, [r5, #2]
 800b6ee:	70ec      	strb	r4, [r5, #3]
 800b6f0:	1d2b      	adds	r3, r5, #4
 800b6f2:	e7f1      	b.n	800b6d8 <__exponent+0x6e>

0800b6f4 <_printf_float>:
 800b6f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b6f6:	b095      	sub	sp, #84	; 0x54
 800b6f8:	000c      	movs	r4, r1
 800b6fa:	9208      	str	r2, [sp, #32]
 800b6fc:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800b6fe:	9309      	str	r3, [sp, #36]	; 0x24
 800b700:	0007      	movs	r7, r0
 800b702:	f001 f885 	bl	800c810 <_localeconv_r>
 800b706:	6803      	ldr	r3, [r0, #0]
 800b708:	0018      	movs	r0, r3
 800b70a:	930c      	str	r3, [sp, #48]	; 0x30
 800b70c:	f7f4 fcfc 	bl	8000108 <strlen>
 800b710:	2300      	movs	r3, #0
 800b712:	9312      	str	r3, [sp, #72]	; 0x48
 800b714:	7e23      	ldrb	r3, [r4, #24]
 800b716:	2207      	movs	r2, #7
 800b718:	930a      	str	r3, [sp, #40]	; 0x28
 800b71a:	6823      	ldr	r3, [r4, #0]
 800b71c:	900d      	str	r0, [sp, #52]	; 0x34
 800b71e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b720:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b722:	682b      	ldr	r3, [r5, #0]
 800b724:	05c9      	lsls	r1, r1, #23
 800b726:	d547      	bpl.n	800b7b8 <_printf_float+0xc4>
 800b728:	189b      	adds	r3, r3, r2
 800b72a:	4393      	bics	r3, r2
 800b72c:	001a      	movs	r2, r3
 800b72e:	3208      	adds	r2, #8
 800b730:	602a      	str	r2, [r5, #0]
 800b732:	681e      	ldr	r6, [r3, #0]
 800b734:	685d      	ldr	r5, [r3, #4]
 800b736:	0032      	movs	r2, r6
 800b738:	002b      	movs	r3, r5
 800b73a:	64a2      	str	r2, [r4, #72]	; 0x48
 800b73c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800b73e:	2201      	movs	r2, #1
 800b740:	006b      	lsls	r3, r5, #1
 800b742:	085b      	lsrs	r3, r3, #1
 800b744:	930e      	str	r3, [sp, #56]	; 0x38
 800b746:	0030      	movs	r0, r6
 800b748:	4bab      	ldr	r3, [pc, #684]	; (800b9f8 <_printf_float+0x304>)
 800b74a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b74c:	4252      	negs	r2, r2
 800b74e:	f7f7 fb7f 	bl	8002e50 <__aeabi_dcmpun>
 800b752:	2800      	cmp	r0, #0
 800b754:	d132      	bne.n	800b7bc <_printf_float+0xc8>
 800b756:	2201      	movs	r2, #1
 800b758:	0030      	movs	r0, r6
 800b75a:	4ba7      	ldr	r3, [pc, #668]	; (800b9f8 <_printf_float+0x304>)
 800b75c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b75e:	4252      	negs	r2, r2
 800b760:	f7f4 fe84 	bl	800046c <__aeabi_dcmple>
 800b764:	2800      	cmp	r0, #0
 800b766:	d129      	bne.n	800b7bc <_printf_float+0xc8>
 800b768:	2200      	movs	r2, #0
 800b76a:	2300      	movs	r3, #0
 800b76c:	0030      	movs	r0, r6
 800b76e:	0029      	movs	r1, r5
 800b770:	f7f4 fe72 	bl	8000458 <__aeabi_dcmplt>
 800b774:	2800      	cmp	r0, #0
 800b776:	d003      	beq.n	800b780 <_printf_float+0x8c>
 800b778:	0023      	movs	r3, r4
 800b77a:	222d      	movs	r2, #45	; 0x2d
 800b77c:	3343      	adds	r3, #67	; 0x43
 800b77e:	701a      	strb	r2, [r3, #0]
 800b780:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b782:	4d9e      	ldr	r5, [pc, #632]	; (800b9fc <_printf_float+0x308>)
 800b784:	2b47      	cmp	r3, #71	; 0x47
 800b786:	d900      	bls.n	800b78a <_printf_float+0x96>
 800b788:	4d9d      	ldr	r5, [pc, #628]	; (800ba00 <_printf_float+0x30c>)
 800b78a:	2303      	movs	r3, #3
 800b78c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b78e:	6123      	str	r3, [r4, #16]
 800b790:	3301      	adds	r3, #1
 800b792:	439a      	bics	r2, r3
 800b794:	2300      	movs	r3, #0
 800b796:	6022      	str	r2, [r4, #0]
 800b798:	930b      	str	r3, [sp, #44]	; 0x2c
 800b79a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b79c:	0021      	movs	r1, r4
 800b79e:	9300      	str	r3, [sp, #0]
 800b7a0:	0038      	movs	r0, r7
 800b7a2:	9b08      	ldr	r3, [sp, #32]
 800b7a4:	aa13      	add	r2, sp, #76	; 0x4c
 800b7a6:	f000 f9fb 	bl	800bba0 <_printf_common>
 800b7aa:	3001      	adds	r0, #1
 800b7ac:	d000      	beq.n	800b7b0 <_printf_float+0xbc>
 800b7ae:	e0a3      	b.n	800b8f8 <_printf_float+0x204>
 800b7b0:	2001      	movs	r0, #1
 800b7b2:	4240      	negs	r0, r0
 800b7b4:	b015      	add	sp, #84	; 0x54
 800b7b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7b8:	3307      	adds	r3, #7
 800b7ba:	e7b6      	b.n	800b72a <_printf_float+0x36>
 800b7bc:	0032      	movs	r2, r6
 800b7be:	002b      	movs	r3, r5
 800b7c0:	0030      	movs	r0, r6
 800b7c2:	0029      	movs	r1, r5
 800b7c4:	f7f7 fb44 	bl	8002e50 <__aeabi_dcmpun>
 800b7c8:	2800      	cmp	r0, #0
 800b7ca:	d00b      	beq.n	800b7e4 <_printf_float+0xf0>
 800b7cc:	2d00      	cmp	r5, #0
 800b7ce:	da03      	bge.n	800b7d8 <_printf_float+0xe4>
 800b7d0:	0023      	movs	r3, r4
 800b7d2:	222d      	movs	r2, #45	; 0x2d
 800b7d4:	3343      	adds	r3, #67	; 0x43
 800b7d6:	701a      	strb	r2, [r3, #0]
 800b7d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7da:	4d8a      	ldr	r5, [pc, #552]	; (800ba04 <_printf_float+0x310>)
 800b7dc:	2b47      	cmp	r3, #71	; 0x47
 800b7de:	d9d4      	bls.n	800b78a <_printf_float+0x96>
 800b7e0:	4d89      	ldr	r5, [pc, #548]	; (800ba08 <_printf_float+0x314>)
 800b7e2:	e7d2      	b.n	800b78a <_printf_float+0x96>
 800b7e4:	2220      	movs	r2, #32
 800b7e6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b7e8:	6863      	ldr	r3, [r4, #4]
 800b7ea:	4391      	bics	r1, r2
 800b7ec:	910e      	str	r1, [sp, #56]	; 0x38
 800b7ee:	1c5a      	adds	r2, r3, #1
 800b7f0:	d14a      	bne.n	800b888 <_printf_float+0x194>
 800b7f2:	3307      	adds	r3, #7
 800b7f4:	6063      	str	r3, [r4, #4]
 800b7f6:	2380      	movs	r3, #128	; 0x80
 800b7f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b7fa:	00db      	lsls	r3, r3, #3
 800b7fc:	4313      	orrs	r3, r2
 800b7fe:	2200      	movs	r2, #0
 800b800:	9206      	str	r2, [sp, #24]
 800b802:	aa12      	add	r2, sp, #72	; 0x48
 800b804:	9205      	str	r2, [sp, #20]
 800b806:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b808:	6023      	str	r3, [r4, #0]
 800b80a:	9204      	str	r2, [sp, #16]
 800b80c:	aa11      	add	r2, sp, #68	; 0x44
 800b80e:	9203      	str	r2, [sp, #12]
 800b810:	2223      	movs	r2, #35	; 0x23
 800b812:	a908      	add	r1, sp, #32
 800b814:	9301      	str	r3, [sp, #4]
 800b816:	6863      	ldr	r3, [r4, #4]
 800b818:	1852      	adds	r2, r2, r1
 800b81a:	9202      	str	r2, [sp, #8]
 800b81c:	9300      	str	r3, [sp, #0]
 800b81e:	0032      	movs	r2, r6
 800b820:	002b      	movs	r3, r5
 800b822:	0038      	movs	r0, r7
 800b824:	f7ff febe 	bl	800b5a4 <__cvt>
 800b828:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b82a:	0005      	movs	r5, r0
 800b82c:	2b47      	cmp	r3, #71	; 0x47
 800b82e:	d109      	bne.n	800b844 <_printf_float+0x150>
 800b830:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b832:	1cda      	adds	r2, r3, #3
 800b834:	db02      	blt.n	800b83c <_printf_float+0x148>
 800b836:	6862      	ldr	r2, [r4, #4]
 800b838:	4293      	cmp	r3, r2
 800b83a:	dd49      	ble.n	800b8d0 <_printf_float+0x1dc>
 800b83c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b83e:	3b02      	subs	r3, #2
 800b840:	b2db      	uxtb	r3, r3
 800b842:	930a      	str	r3, [sp, #40]	; 0x28
 800b844:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b846:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b848:	2b65      	cmp	r3, #101	; 0x65
 800b84a:	d824      	bhi.n	800b896 <_printf_float+0x1a2>
 800b84c:	0020      	movs	r0, r4
 800b84e:	001a      	movs	r2, r3
 800b850:	3901      	subs	r1, #1
 800b852:	3050      	adds	r0, #80	; 0x50
 800b854:	9111      	str	r1, [sp, #68]	; 0x44
 800b856:	f7ff ff08 	bl	800b66a <__exponent>
 800b85a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b85c:	900b      	str	r0, [sp, #44]	; 0x2c
 800b85e:	1813      	adds	r3, r2, r0
 800b860:	6123      	str	r3, [r4, #16]
 800b862:	2a01      	cmp	r2, #1
 800b864:	dc02      	bgt.n	800b86c <_printf_float+0x178>
 800b866:	6822      	ldr	r2, [r4, #0]
 800b868:	07d2      	lsls	r2, r2, #31
 800b86a:	d501      	bpl.n	800b870 <_printf_float+0x17c>
 800b86c:	3301      	adds	r3, #1
 800b86e:	6123      	str	r3, [r4, #16]
 800b870:	2323      	movs	r3, #35	; 0x23
 800b872:	aa08      	add	r2, sp, #32
 800b874:	189b      	adds	r3, r3, r2
 800b876:	781b      	ldrb	r3, [r3, #0]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d100      	bne.n	800b87e <_printf_float+0x18a>
 800b87c:	e78d      	b.n	800b79a <_printf_float+0xa6>
 800b87e:	0023      	movs	r3, r4
 800b880:	222d      	movs	r2, #45	; 0x2d
 800b882:	3343      	adds	r3, #67	; 0x43
 800b884:	701a      	strb	r2, [r3, #0]
 800b886:	e788      	b.n	800b79a <_printf_float+0xa6>
 800b888:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b88a:	2a47      	cmp	r2, #71	; 0x47
 800b88c:	d1b3      	bne.n	800b7f6 <_printf_float+0x102>
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d1b1      	bne.n	800b7f6 <_printf_float+0x102>
 800b892:	3301      	adds	r3, #1
 800b894:	e7ae      	b.n	800b7f4 <_printf_float+0x100>
 800b896:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b898:	2b66      	cmp	r3, #102	; 0x66
 800b89a:	d11b      	bne.n	800b8d4 <_printf_float+0x1e0>
 800b89c:	6863      	ldr	r3, [r4, #4]
 800b89e:	2900      	cmp	r1, #0
 800b8a0:	dd09      	ble.n	800b8b6 <_printf_float+0x1c2>
 800b8a2:	6121      	str	r1, [r4, #16]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d102      	bne.n	800b8ae <_printf_float+0x1ba>
 800b8a8:	6822      	ldr	r2, [r4, #0]
 800b8aa:	07d2      	lsls	r2, r2, #31
 800b8ac:	d50b      	bpl.n	800b8c6 <_printf_float+0x1d2>
 800b8ae:	3301      	adds	r3, #1
 800b8b0:	185b      	adds	r3, r3, r1
 800b8b2:	6123      	str	r3, [r4, #16]
 800b8b4:	e007      	b.n	800b8c6 <_printf_float+0x1d2>
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d103      	bne.n	800b8c2 <_printf_float+0x1ce>
 800b8ba:	2201      	movs	r2, #1
 800b8bc:	6821      	ldr	r1, [r4, #0]
 800b8be:	4211      	tst	r1, r2
 800b8c0:	d000      	beq.n	800b8c4 <_printf_float+0x1d0>
 800b8c2:	1c9a      	adds	r2, r3, #2
 800b8c4:	6122      	str	r2, [r4, #16]
 800b8c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b8c8:	65a3      	str	r3, [r4, #88]	; 0x58
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	930b      	str	r3, [sp, #44]	; 0x2c
 800b8ce:	e7cf      	b.n	800b870 <_printf_float+0x17c>
 800b8d0:	2367      	movs	r3, #103	; 0x67
 800b8d2:	930a      	str	r3, [sp, #40]	; 0x28
 800b8d4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b8d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b8d8:	4299      	cmp	r1, r3
 800b8da:	db06      	blt.n	800b8ea <_printf_float+0x1f6>
 800b8dc:	6823      	ldr	r3, [r4, #0]
 800b8de:	6121      	str	r1, [r4, #16]
 800b8e0:	07db      	lsls	r3, r3, #31
 800b8e2:	d5f0      	bpl.n	800b8c6 <_printf_float+0x1d2>
 800b8e4:	3101      	adds	r1, #1
 800b8e6:	6121      	str	r1, [r4, #16]
 800b8e8:	e7ed      	b.n	800b8c6 <_printf_float+0x1d2>
 800b8ea:	2201      	movs	r2, #1
 800b8ec:	2900      	cmp	r1, #0
 800b8ee:	dc01      	bgt.n	800b8f4 <_printf_float+0x200>
 800b8f0:	1892      	adds	r2, r2, r2
 800b8f2:	1a52      	subs	r2, r2, r1
 800b8f4:	189b      	adds	r3, r3, r2
 800b8f6:	e7dc      	b.n	800b8b2 <_printf_float+0x1be>
 800b8f8:	6822      	ldr	r2, [r4, #0]
 800b8fa:	0553      	lsls	r3, r2, #21
 800b8fc:	d408      	bmi.n	800b910 <_printf_float+0x21c>
 800b8fe:	6923      	ldr	r3, [r4, #16]
 800b900:	002a      	movs	r2, r5
 800b902:	0038      	movs	r0, r7
 800b904:	9908      	ldr	r1, [sp, #32]
 800b906:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b908:	47a8      	blx	r5
 800b90a:	3001      	adds	r0, #1
 800b90c:	d12a      	bne.n	800b964 <_printf_float+0x270>
 800b90e:	e74f      	b.n	800b7b0 <_printf_float+0xbc>
 800b910:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b912:	2b65      	cmp	r3, #101	; 0x65
 800b914:	d800      	bhi.n	800b918 <_printf_float+0x224>
 800b916:	e0ec      	b.n	800baf2 <_printf_float+0x3fe>
 800b918:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800b91a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800b91c:	2200      	movs	r2, #0
 800b91e:	2300      	movs	r3, #0
 800b920:	f7f4 fd94 	bl	800044c <__aeabi_dcmpeq>
 800b924:	2800      	cmp	r0, #0
 800b926:	d034      	beq.n	800b992 <_printf_float+0x29e>
 800b928:	2301      	movs	r3, #1
 800b92a:	0038      	movs	r0, r7
 800b92c:	4a37      	ldr	r2, [pc, #220]	; (800ba0c <_printf_float+0x318>)
 800b92e:	9908      	ldr	r1, [sp, #32]
 800b930:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b932:	47a8      	blx	r5
 800b934:	3001      	adds	r0, #1
 800b936:	d100      	bne.n	800b93a <_printf_float+0x246>
 800b938:	e73a      	b.n	800b7b0 <_printf_float+0xbc>
 800b93a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b93c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b93e:	429a      	cmp	r2, r3
 800b940:	db02      	blt.n	800b948 <_printf_float+0x254>
 800b942:	6823      	ldr	r3, [r4, #0]
 800b944:	07db      	lsls	r3, r3, #31
 800b946:	d50d      	bpl.n	800b964 <_printf_float+0x270>
 800b948:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b94a:	0038      	movs	r0, r7
 800b94c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b94e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b950:	9908      	ldr	r1, [sp, #32]
 800b952:	47a8      	blx	r5
 800b954:	2500      	movs	r5, #0
 800b956:	3001      	adds	r0, #1
 800b958:	d100      	bne.n	800b95c <_printf_float+0x268>
 800b95a:	e729      	b.n	800b7b0 <_printf_float+0xbc>
 800b95c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b95e:	3b01      	subs	r3, #1
 800b960:	42ab      	cmp	r3, r5
 800b962:	dc0a      	bgt.n	800b97a <_printf_float+0x286>
 800b964:	6823      	ldr	r3, [r4, #0]
 800b966:	079b      	lsls	r3, r3, #30
 800b968:	d500      	bpl.n	800b96c <_printf_float+0x278>
 800b96a:	e116      	b.n	800bb9a <_printf_float+0x4a6>
 800b96c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b96e:	68e0      	ldr	r0, [r4, #12]
 800b970:	4298      	cmp	r0, r3
 800b972:	db00      	blt.n	800b976 <_printf_float+0x282>
 800b974:	e71e      	b.n	800b7b4 <_printf_float+0xc0>
 800b976:	0018      	movs	r0, r3
 800b978:	e71c      	b.n	800b7b4 <_printf_float+0xc0>
 800b97a:	0022      	movs	r2, r4
 800b97c:	2301      	movs	r3, #1
 800b97e:	0038      	movs	r0, r7
 800b980:	9908      	ldr	r1, [sp, #32]
 800b982:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b984:	321a      	adds	r2, #26
 800b986:	47b0      	blx	r6
 800b988:	3001      	adds	r0, #1
 800b98a:	d100      	bne.n	800b98e <_printf_float+0x29a>
 800b98c:	e710      	b.n	800b7b0 <_printf_float+0xbc>
 800b98e:	3501      	adds	r5, #1
 800b990:	e7e4      	b.n	800b95c <_printf_float+0x268>
 800b992:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b994:	2b00      	cmp	r3, #0
 800b996:	dc3b      	bgt.n	800ba10 <_printf_float+0x31c>
 800b998:	2301      	movs	r3, #1
 800b99a:	0038      	movs	r0, r7
 800b99c:	4a1b      	ldr	r2, [pc, #108]	; (800ba0c <_printf_float+0x318>)
 800b99e:	9908      	ldr	r1, [sp, #32]
 800b9a0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b9a2:	47b0      	blx	r6
 800b9a4:	3001      	adds	r0, #1
 800b9a6:	d100      	bne.n	800b9aa <_printf_float+0x2b6>
 800b9a8:	e702      	b.n	800b7b0 <_printf_float+0xbc>
 800b9aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b9ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b9ae:	4313      	orrs	r3, r2
 800b9b0:	d102      	bne.n	800b9b8 <_printf_float+0x2c4>
 800b9b2:	6823      	ldr	r3, [r4, #0]
 800b9b4:	07db      	lsls	r3, r3, #31
 800b9b6:	d5d5      	bpl.n	800b964 <_printf_float+0x270>
 800b9b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b9ba:	0038      	movs	r0, r7
 800b9bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b9be:	9908      	ldr	r1, [sp, #32]
 800b9c0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b9c2:	47b0      	blx	r6
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	3001      	adds	r0, #1
 800b9c8:	d100      	bne.n	800b9cc <_printf_float+0x2d8>
 800b9ca:	e6f1      	b.n	800b7b0 <_printf_float+0xbc>
 800b9cc:	930a      	str	r3, [sp, #40]	; 0x28
 800b9ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b9d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b9d2:	425b      	negs	r3, r3
 800b9d4:	4293      	cmp	r3, r2
 800b9d6:	dc01      	bgt.n	800b9dc <_printf_float+0x2e8>
 800b9d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b9da:	e791      	b.n	800b900 <_printf_float+0x20c>
 800b9dc:	0022      	movs	r2, r4
 800b9de:	2301      	movs	r3, #1
 800b9e0:	0038      	movs	r0, r7
 800b9e2:	9908      	ldr	r1, [sp, #32]
 800b9e4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b9e6:	321a      	adds	r2, #26
 800b9e8:	47b0      	blx	r6
 800b9ea:	3001      	adds	r0, #1
 800b9ec:	d100      	bne.n	800b9f0 <_printf_float+0x2fc>
 800b9ee:	e6df      	b.n	800b7b0 <_printf_float+0xbc>
 800b9f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9f2:	3301      	adds	r3, #1
 800b9f4:	e7ea      	b.n	800b9cc <_printf_float+0x2d8>
 800b9f6:	46c0      	nop			; (mov r8, r8)
 800b9f8:	7fefffff 	.word	0x7fefffff
 800b9fc:	0800ffb1 	.word	0x0800ffb1
 800ba00:	0800ffb5 	.word	0x0800ffb5
 800ba04:	0800ffb9 	.word	0x0800ffb9
 800ba08:	0800ffbd 	.word	0x0800ffbd
 800ba0c:	0801025b 	.word	0x0801025b
 800ba10:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ba12:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ba14:	920a      	str	r2, [sp, #40]	; 0x28
 800ba16:	429a      	cmp	r2, r3
 800ba18:	dd00      	ble.n	800ba1c <_printf_float+0x328>
 800ba1a:	930a      	str	r3, [sp, #40]	; 0x28
 800ba1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	dc3d      	bgt.n	800ba9e <_printf_float+0x3aa>
 800ba22:	2300      	movs	r3, #0
 800ba24:	930e      	str	r3, [sp, #56]	; 0x38
 800ba26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba28:	43db      	mvns	r3, r3
 800ba2a:	17db      	asrs	r3, r3, #31
 800ba2c:	930f      	str	r3, [sp, #60]	; 0x3c
 800ba2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ba30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ba32:	930b      	str	r3, [sp, #44]	; 0x2c
 800ba34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ba36:	4013      	ands	r3, r2
 800ba38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ba3a:	1ad3      	subs	r3, r2, r3
 800ba3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ba3e:	4293      	cmp	r3, r2
 800ba40:	dc36      	bgt.n	800bab0 <_printf_float+0x3bc>
 800ba42:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ba44:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ba46:	429a      	cmp	r2, r3
 800ba48:	db40      	blt.n	800bacc <_printf_float+0x3d8>
 800ba4a:	6823      	ldr	r3, [r4, #0]
 800ba4c:	07db      	lsls	r3, r3, #31
 800ba4e:	d43d      	bmi.n	800bacc <_printf_float+0x3d8>
 800ba50:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800ba52:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ba54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba56:	1af3      	subs	r3, r6, r3
 800ba58:	1ab6      	subs	r6, r6, r2
 800ba5a:	429e      	cmp	r6, r3
 800ba5c:	dd00      	ble.n	800ba60 <_printf_float+0x36c>
 800ba5e:	001e      	movs	r6, r3
 800ba60:	2e00      	cmp	r6, #0
 800ba62:	dc3c      	bgt.n	800bade <_printf_float+0x3ea>
 800ba64:	2300      	movs	r3, #0
 800ba66:	930a      	str	r3, [sp, #40]	; 0x28
 800ba68:	43f3      	mvns	r3, r6
 800ba6a:	17db      	asrs	r3, r3, #31
 800ba6c:	930b      	str	r3, [sp, #44]	; 0x2c
 800ba6e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ba70:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ba72:	1a9b      	subs	r3, r3, r2
 800ba74:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ba76:	4032      	ands	r2, r6
 800ba78:	1a9b      	subs	r3, r3, r2
 800ba7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ba7c:	4293      	cmp	r3, r2
 800ba7e:	dc00      	bgt.n	800ba82 <_printf_float+0x38e>
 800ba80:	e770      	b.n	800b964 <_printf_float+0x270>
 800ba82:	0022      	movs	r2, r4
 800ba84:	2301      	movs	r3, #1
 800ba86:	0038      	movs	r0, r7
 800ba88:	9908      	ldr	r1, [sp, #32]
 800ba8a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ba8c:	321a      	adds	r2, #26
 800ba8e:	47a8      	blx	r5
 800ba90:	3001      	adds	r0, #1
 800ba92:	d100      	bne.n	800ba96 <_printf_float+0x3a2>
 800ba94:	e68c      	b.n	800b7b0 <_printf_float+0xbc>
 800ba96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba98:	3301      	adds	r3, #1
 800ba9a:	930a      	str	r3, [sp, #40]	; 0x28
 800ba9c:	e7e7      	b.n	800ba6e <_printf_float+0x37a>
 800ba9e:	002a      	movs	r2, r5
 800baa0:	0038      	movs	r0, r7
 800baa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800baa4:	9908      	ldr	r1, [sp, #32]
 800baa6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800baa8:	47b0      	blx	r6
 800baaa:	3001      	adds	r0, #1
 800baac:	d1b9      	bne.n	800ba22 <_printf_float+0x32e>
 800baae:	e67f      	b.n	800b7b0 <_printf_float+0xbc>
 800bab0:	0022      	movs	r2, r4
 800bab2:	2301      	movs	r3, #1
 800bab4:	0038      	movs	r0, r7
 800bab6:	9908      	ldr	r1, [sp, #32]
 800bab8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800baba:	321a      	adds	r2, #26
 800babc:	47b0      	blx	r6
 800babe:	3001      	adds	r0, #1
 800bac0:	d100      	bne.n	800bac4 <_printf_float+0x3d0>
 800bac2:	e675      	b.n	800b7b0 <_printf_float+0xbc>
 800bac4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bac6:	3301      	adds	r3, #1
 800bac8:	930e      	str	r3, [sp, #56]	; 0x38
 800baca:	e7b0      	b.n	800ba2e <_printf_float+0x33a>
 800bacc:	0038      	movs	r0, r7
 800bace:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bad0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bad2:	9908      	ldr	r1, [sp, #32]
 800bad4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800bad6:	47b0      	blx	r6
 800bad8:	3001      	adds	r0, #1
 800bada:	d1b9      	bne.n	800ba50 <_printf_float+0x35c>
 800badc:	e668      	b.n	800b7b0 <_printf_float+0xbc>
 800bade:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bae0:	0038      	movs	r0, r7
 800bae2:	18ea      	adds	r2, r5, r3
 800bae4:	9908      	ldr	r1, [sp, #32]
 800bae6:	0033      	movs	r3, r6
 800bae8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800baea:	47a8      	blx	r5
 800baec:	3001      	adds	r0, #1
 800baee:	d1b9      	bne.n	800ba64 <_printf_float+0x370>
 800baf0:	e65e      	b.n	800b7b0 <_printf_float+0xbc>
 800baf2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800baf4:	2b01      	cmp	r3, #1
 800baf6:	dc02      	bgt.n	800bafe <_printf_float+0x40a>
 800baf8:	2301      	movs	r3, #1
 800bafa:	421a      	tst	r2, r3
 800bafc:	d03a      	beq.n	800bb74 <_printf_float+0x480>
 800bafe:	2301      	movs	r3, #1
 800bb00:	002a      	movs	r2, r5
 800bb02:	0038      	movs	r0, r7
 800bb04:	9908      	ldr	r1, [sp, #32]
 800bb06:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800bb08:	47b0      	blx	r6
 800bb0a:	3001      	adds	r0, #1
 800bb0c:	d100      	bne.n	800bb10 <_printf_float+0x41c>
 800bb0e:	e64f      	b.n	800b7b0 <_printf_float+0xbc>
 800bb10:	0038      	movs	r0, r7
 800bb12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bb16:	9908      	ldr	r1, [sp, #32]
 800bb18:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800bb1a:	47b0      	blx	r6
 800bb1c:	3001      	adds	r0, #1
 800bb1e:	d100      	bne.n	800bb22 <_printf_float+0x42e>
 800bb20:	e646      	b.n	800b7b0 <_printf_float+0xbc>
 800bb22:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800bb24:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800bb26:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bb28:	2200      	movs	r2, #0
 800bb2a:	001e      	movs	r6, r3
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	f7f4 fc8d 	bl	800044c <__aeabi_dcmpeq>
 800bb32:	2800      	cmp	r0, #0
 800bb34:	d11c      	bne.n	800bb70 <_printf_float+0x47c>
 800bb36:	0033      	movs	r3, r6
 800bb38:	1c6a      	adds	r2, r5, #1
 800bb3a:	3b01      	subs	r3, #1
 800bb3c:	0038      	movs	r0, r7
 800bb3e:	9908      	ldr	r1, [sp, #32]
 800bb40:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800bb42:	47a8      	blx	r5
 800bb44:	3001      	adds	r0, #1
 800bb46:	d10f      	bne.n	800bb68 <_printf_float+0x474>
 800bb48:	e632      	b.n	800b7b0 <_printf_float+0xbc>
 800bb4a:	0022      	movs	r2, r4
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	0038      	movs	r0, r7
 800bb50:	9908      	ldr	r1, [sp, #32]
 800bb52:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800bb54:	321a      	adds	r2, #26
 800bb56:	47b0      	blx	r6
 800bb58:	3001      	adds	r0, #1
 800bb5a:	d100      	bne.n	800bb5e <_printf_float+0x46a>
 800bb5c:	e628      	b.n	800b7b0 <_printf_float+0xbc>
 800bb5e:	3501      	adds	r5, #1
 800bb60:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bb62:	3b01      	subs	r3, #1
 800bb64:	42ab      	cmp	r3, r5
 800bb66:	dcf0      	bgt.n	800bb4a <_printf_float+0x456>
 800bb68:	0022      	movs	r2, r4
 800bb6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb6c:	3250      	adds	r2, #80	; 0x50
 800bb6e:	e6c8      	b.n	800b902 <_printf_float+0x20e>
 800bb70:	2500      	movs	r5, #0
 800bb72:	e7f5      	b.n	800bb60 <_printf_float+0x46c>
 800bb74:	002a      	movs	r2, r5
 800bb76:	e7e1      	b.n	800bb3c <_printf_float+0x448>
 800bb78:	0022      	movs	r2, r4
 800bb7a:	2301      	movs	r3, #1
 800bb7c:	0038      	movs	r0, r7
 800bb7e:	9908      	ldr	r1, [sp, #32]
 800bb80:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800bb82:	3219      	adds	r2, #25
 800bb84:	47b0      	blx	r6
 800bb86:	3001      	adds	r0, #1
 800bb88:	d100      	bne.n	800bb8c <_printf_float+0x498>
 800bb8a:	e611      	b.n	800b7b0 <_printf_float+0xbc>
 800bb8c:	3501      	adds	r5, #1
 800bb8e:	68e3      	ldr	r3, [r4, #12]
 800bb90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bb92:	1a9b      	subs	r3, r3, r2
 800bb94:	42ab      	cmp	r3, r5
 800bb96:	dcef      	bgt.n	800bb78 <_printf_float+0x484>
 800bb98:	e6e8      	b.n	800b96c <_printf_float+0x278>
 800bb9a:	2500      	movs	r5, #0
 800bb9c:	e7f7      	b.n	800bb8e <_printf_float+0x49a>
 800bb9e:	46c0      	nop			; (mov r8, r8)

0800bba0 <_printf_common>:
 800bba0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bba2:	0016      	movs	r6, r2
 800bba4:	9301      	str	r3, [sp, #4]
 800bba6:	688a      	ldr	r2, [r1, #8]
 800bba8:	690b      	ldr	r3, [r1, #16]
 800bbaa:	000c      	movs	r4, r1
 800bbac:	9000      	str	r0, [sp, #0]
 800bbae:	4293      	cmp	r3, r2
 800bbb0:	da00      	bge.n	800bbb4 <_printf_common+0x14>
 800bbb2:	0013      	movs	r3, r2
 800bbb4:	0022      	movs	r2, r4
 800bbb6:	6033      	str	r3, [r6, #0]
 800bbb8:	3243      	adds	r2, #67	; 0x43
 800bbba:	7812      	ldrb	r2, [r2, #0]
 800bbbc:	2a00      	cmp	r2, #0
 800bbbe:	d001      	beq.n	800bbc4 <_printf_common+0x24>
 800bbc0:	3301      	adds	r3, #1
 800bbc2:	6033      	str	r3, [r6, #0]
 800bbc4:	6823      	ldr	r3, [r4, #0]
 800bbc6:	069b      	lsls	r3, r3, #26
 800bbc8:	d502      	bpl.n	800bbd0 <_printf_common+0x30>
 800bbca:	6833      	ldr	r3, [r6, #0]
 800bbcc:	3302      	adds	r3, #2
 800bbce:	6033      	str	r3, [r6, #0]
 800bbd0:	6822      	ldr	r2, [r4, #0]
 800bbd2:	2306      	movs	r3, #6
 800bbd4:	0015      	movs	r5, r2
 800bbd6:	401d      	ands	r5, r3
 800bbd8:	421a      	tst	r2, r3
 800bbda:	d027      	beq.n	800bc2c <_printf_common+0x8c>
 800bbdc:	0023      	movs	r3, r4
 800bbde:	3343      	adds	r3, #67	; 0x43
 800bbe0:	781b      	ldrb	r3, [r3, #0]
 800bbe2:	1e5a      	subs	r2, r3, #1
 800bbe4:	4193      	sbcs	r3, r2
 800bbe6:	6822      	ldr	r2, [r4, #0]
 800bbe8:	0692      	lsls	r2, r2, #26
 800bbea:	d430      	bmi.n	800bc4e <_printf_common+0xae>
 800bbec:	0022      	movs	r2, r4
 800bbee:	9901      	ldr	r1, [sp, #4]
 800bbf0:	9800      	ldr	r0, [sp, #0]
 800bbf2:	9d08      	ldr	r5, [sp, #32]
 800bbf4:	3243      	adds	r2, #67	; 0x43
 800bbf6:	47a8      	blx	r5
 800bbf8:	3001      	adds	r0, #1
 800bbfa:	d025      	beq.n	800bc48 <_printf_common+0xa8>
 800bbfc:	2206      	movs	r2, #6
 800bbfe:	6823      	ldr	r3, [r4, #0]
 800bc00:	2500      	movs	r5, #0
 800bc02:	4013      	ands	r3, r2
 800bc04:	2b04      	cmp	r3, #4
 800bc06:	d105      	bne.n	800bc14 <_printf_common+0x74>
 800bc08:	6833      	ldr	r3, [r6, #0]
 800bc0a:	68e5      	ldr	r5, [r4, #12]
 800bc0c:	1aed      	subs	r5, r5, r3
 800bc0e:	43eb      	mvns	r3, r5
 800bc10:	17db      	asrs	r3, r3, #31
 800bc12:	401d      	ands	r5, r3
 800bc14:	68a3      	ldr	r3, [r4, #8]
 800bc16:	6922      	ldr	r2, [r4, #16]
 800bc18:	4293      	cmp	r3, r2
 800bc1a:	dd01      	ble.n	800bc20 <_printf_common+0x80>
 800bc1c:	1a9b      	subs	r3, r3, r2
 800bc1e:	18ed      	adds	r5, r5, r3
 800bc20:	2600      	movs	r6, #0
 800bc22:	42b5      	cmp	r5, r6
 800bc24:	d120      	bne.n	800bc68 <_printf_common+0xc8>
 800bc26:	2000      	movs	r0, #0
 800bc28:	e010      	b.n	800bc4c <_printf_common+0xac>
 800bc2a:	3501      	adds	r5, #1
 800bc2c:	68e3      	ldr	r3, [r4, #12]
 800bc2e:	6832      	ldr	r2, [r6, #0]
 800bc30:	1a9b      	subs	r3, r3, r2
 800bc32:	42ab      	cmp	r3, r5
 800bc34:	ddd2      	ble.n	800bbdc <_printf_common+0x3c>
 800bc36:	0022      	movs	r2, r4
 800bc38:	2301      	movs	r3, #1
 800bc3a:	9901      	ldr	r1, [sp, #4]
 800bc3c:	9800      	ldr	r0, [sp, #0]
 800bc3e:	9f08      	ldr	r7, [sp, #32]
 800bc40:	3219      	adds	r2, #25
 800bc42:	47b8      	blx	r7
 800bc44:	3001      	adds	r0, #1
 800bc46:	d1f0      	bne.n	800bc2a <_printf_common+0x8a>
 800bc48:	2001      	movs	r0, #1
 800bc4a:	4240      	negs	r0, r0
 800bc4c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bc4e:	2030      	movs	r0, #48	; 0x30
 800bc50:	18e1      	adds	r1, r4, r3
 800bc52:	3143      	adds	r1, #67	; 0x43
 800bc54:	7008      	strb	r0, [r1, #0]
 800bc56:	0021      	movs	r1, r4
 800bc58:	1c5a      	adds	r2, r3, #1
 800bc5a:	3145      	adds	r1, #69	; 0x45
 800bc5c:	7809      	ldrb	r1, [r1, #0]
 800bc5e:	18a2      	adds	r2, r4, r2
 800bc60:	3243      	adds	r2, #67	; 0x43
 800bc62:	3302      	adds	r3, #2
 800bc64:	7011      	strb	r1, [r2, #0]
 800bc66:	e7c1      	b.n	800bbec <_printf_common+0x4c>
 800bc68:	0022      	movs	r2, r4
 800bc6a:	2301      	movs	r3, #1
 800bc6c:	9901      	ldr	r1, [sp, #4]
 800bc6e:	9800      	ldr	r0, [sp, #0]
 800bc70:	9f08      	ldr	r7, [sp, #32]
 800bc72:	321a      	adds	r2, #26
 800bc74:	47b8      	blx	r7
 800bc76:	3001      	adds	r0, #1
 800bc78:	d0e6      	beq.n	800bc48 <_printf_common+0xa8>
 800bc7a:	3601      	adds	r6, #1
 800bc7c:	e7d1      	b.n	800bc22 <_printf_common+0x82>
	...

0800bc80 <_printf_i>:
 800bc80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc82:	b08b      	sub	sp, #44	; 0x2c
 800bc84:	9206      	str	r2, [sp, #24]
 800bc86:	000a      	movs	r2, r1
 800bc88:	3243      	adds	r2, #67	; 0x43
 800bc8a:	9307      	str	r3, [sp, #28]
 800bc8c:	9005      	str	r0, [sp, #20]
 800bc8e:	9204      	str	r2, [sp, #16]
 800bc90:	7e0a      	ldrb	r2, [r1, #24]
 800bc92:	000c      	movs	r4, r1
 800bc94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bc96:	2a78      	cmp	r2, #120	; 0x78
 800bc98:	d809      	bhi.n	800bcae <_printf_i+0x2e>
 800bc9a:	2a62      	cmp	r2, #98	; 0x62
 800bc9c:	d80b      	bhi.n	800bcb6 <_printf_i+0x36>
 800bc9e:	2a00      	cmp	r2, #0
 800bca0:	d100      	bne.n	800bca4 <_printf_i+0x24>
 800bca2:	e0be      	b.n	800be22 <_printf_i+0x1a2>
 800bca4:	497c      	ldr	r1, [pc, #496]	; (800be98 <_printf_i+0x218>)
 800bca6:	9103      	str	r1, [sp, #12]
 800bca8:	2a58      	cmp	r2, #88	; 0x58
 800bcaa:	d100      	bne.n	800bcae <_printf_i+0x2e>
 800bcac:	e093      	b.n	800bdd6 <_printf_i+0x156>
 800bcae:	0026      	movs	r6, r4
 800bcb0:	3642      	adds	r6, #66	; 0x42
 800bcb2:	7032      	strb	r2, [r6, #0]
 800bcb4:	e022      	b.n	800bcfc <_printf_i+0x7c>
 800bcb6:	0010      	movs	r0, r2
 800bcb8:	3863      	subs	r0, #99	; 0x63
 800bcba:	2815      	cmp	r0, #21
 800bcbc:	d8f7      	bhi.n	800bcae <_printf_i+0x2e>
 800bcbe:	f7f4 fa35 	bl	800012c <__gnu_thumb1_case_shi>
 800bcc2:	0016      	.short	0x0016
 800bcc4:	fff6001f 	.word	0xfff6001f
 800bcc8:	fff6fff6 	.word	0xfff6fff6
 800bccc:	001ffff6 	.word	0x001ffff6
 800bcd0:	fff6fff6 	.word	0xfff6fff6
 800bcd4:	fff6fff6 	.word	0xfff6fff6
 800bcd8:	003600a3 	.word	0x003600a3
 800bcdc:	fff60083 	.word	0xfff60083
 800bce0:	00b4fff6 	.word	0x00b4fff6
 800bce4:	0036fff6 	.word	0x0036fff6
 800bce8:	fff6fff6 	.word	0xfff6fff6
 800bcec:	0087      	.short	0x0087
 800bcee:	0026      	movs	r6, r4
 800bcf0:	681a      	ldr	r2, [r3, #0]
 800bcf2:	3642      	adds	r6, #66	; 0x42
 800bcf4:	1d11      	adds	r1, r2, #4
 800bcf6:	6019      	str	r1, [r3, #0]
 800bcf8:	6813      	ldr	r3, [r2, #0]
 800bcfa:	7033      	strb	r3, [r6, #0]
 800bcfc:	2301      	movs	r3, #1
 800bcfe:	e0a2      	b.n	800be46 <_printf_i+0x1c6>
 800bd00:	6818      	ldr	r0, [r3, #0]
 800bd02:	6809      	ldr	r1, [r1, #0]
 800bd04:	1d02      	adds	r2, r0, #4
 800bd06:	060d      	lsls	r5, r1, #24
 800bd08:	d50b      	bpl.n	800bd22 <_printf_i+0xa2>
 800bd0a:	6805      	ldr	r5, [r0, #0]
 800bd0c:	601a      	str	r2, [r3, #0]
 800bd0e:	2d00      	cmp	r5, #0
 800bd10:	da03      	bge.n	800bd1a <_printf_i+0x9a>
 800bd12:	232d      	movs	r3, #45	; 0x2d
 800bd14:	9a04      	ldr	r2, [sp, #16]
 800bd16:	426d      	negs	r5, r5
 800bd18:	7013      	strb	r3, [r2, #0]
 800bd1a:	4b5f      	ldr	r3, [pc, #380]	; (800be98 <_printf_i+0x218>)
 800bd1c:	270a      	movs	r7, #10
 800bd1e:	9303      	str	r3, [sp, #12]
 800bd20:	e01b      	b.n	800bd5a <_printf_i+0xda>
 800bd22:	6805      	ldr	r5, [r0, #0]
 800bd24:	601a      	str	r2, [r3, #0]
 800bd26:	0649      	lsls	r1, r1, #25
 800bd28:	d5f1      	bpl.n	800bd0e <_printf_i+0x8e>
 800bd2a:	b22d      	sxth	r5, r5
 800bd2c:	e7ef      	b.n	800bd0e <_printf_i+0x8e>
 800bd2e:	680d      	ldr	r5, [r1, #0]
 800bd30:	6819      	ldr	r1, [r3, #0]
 800bd32:	1d08      	adds	r0, r1, #4
 800bd34:	6018      	str	r0, [r3, #0]
 800bd36:	062e      	lsls	r6, r5, #24
 800bd38:	d501      	bpl.n	800bd3e <_printf_i+0xbe>
 800bd3a:	680d      	ldr	r5, [r1, #0]
 800bd3c:	e003      	b.n	800bd46 <_printf_i+0xc6>
 800bd3e:	066d      	lsls	r5, r5, #25
 800bd40:	d5fb      	bpl.n	800bd3a <_printf_i+0xba>
 800bd42:	680d      	ldr	r5, [r1, #0]
 800bd44:	b2ad      	uxth	r5, r5
 800bd46:	4b54      	ldr	r3, [pc, #336]	; (800be98 <_printf_i+0x218>)
 800bd48:	2708      	movs	r7, #8
 800bd4a:	9303      	str	r3, [sp, #12]
 800bd4c:	2a6f      	cmp	r2, #111	; 0x6f
 800bd4e:	d000      	beq.n	800bd52 <_printf_i+0xd2>
 800bd50:	3702      	adds	r7, #2
 800bd52:	0023      	movs	r3, r4
 800bd54:	2200      	movs	r2, #0
 800bd56:	3343      	adds	r3, #67	; 0x43
 800bd58:	701a      	strb	r2, [r3, #0]
 800bd5a:	6863      	ldr	r3, [r4, #4]
 800bd5c:	60a3      	str	r3, [r4, #8]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	db03      	blt.n	800bd6a <_printf_i+0xea>
 800bd62:	2104      	movs	r1, #4
 800bd64:	6822      	ldr	r2, [r4, #0]
 800bd66:	438a      	bics	r2, r1
 800bd68:	6022      	str	r2, [r4, #0]
 800bd6a:	2d00      	cmp	r5, #0
 800bd6c:	d102      	bne.n	800bd74 <_printf_i+0xf4>
 800bd6e:	9e04      	ldr	r6, [sp, #16]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d00c      	beq.n	800bd8e <_printf_i+0x10e>
 800bd74:	9e04      	ldr	r6, [sp, #16]
 800bd76:	0028      	movs	r0, r5
 800bd78:	0039      	movs	r1, r7
 800bd7a:	f7f4 fa67 	bl	800024c <__aeabi_uidivmod>
 800bd7e:	9b03      	ldr	r3, [sp, #12]
 800bd80:	3e01      	subs	r6, #1
 800bd82:	5c5b      	ldrb	r3, [r3, r1]
 800bd84:	7033      	strb	r3, [r6, #0]
 800bd86:	002b      	movs	r3, r5
 800bd88:	0005      	movs	r5, r0
 800bd8a:	429f      	cmp	r7, r3
 800bd8c:	d9f3      	bls.n	800bd76 <_printf_i+0xf6>
 800bd8e:	2f08      	cmp	r7, #8
 800bd90:	d109      	bne.n	800bda6 <_printf_i+0x126>
 800bd92:	6823      	ldr	r3, [r4, #0]
 800bd94:	07db      	lsls	r3, r3, #31
 800bd96:	d506      	bpl.n	800bda6 <_printf_i+0x126>
 800bd98:	6862      	ldr	r2, [r4, #4]
 800bd9a:	6923      	ldr	r3, [r4, #16]
 800bd9c:	429a      	cmp	r2, r3
 800bd9e:	dc02      	bgt.n	800bda6 <_printf_i+0x126>
 800bda0:	2330      	movs	r3, #48	; 0x30
 800bda2:	3e01      	subs	r6, #1
 800bda4:	7033      	strb	r3, [r6, #0]
 800bda6:	9b04      	ldr	r3, [sp, #16]
 800bda8:	1b9b      	subs	r3, r3, r6
 800bdaa:	6123      	str	r3, [r4, #16]
 800bdac:	9b07      	ldr	r3, [sp, #28]
 800bdae:	0021      	movs	r1, r4
 800bdb0:	9300      	str	r3, [sp, #0]
 800bdb2:	9805      	ldr	r0, [sp, #20]
 800bdb4:	9b06      	ldr	r3, [sp, #24]
 800bdb6:	aa09      	add	r2, sp, #36	; 0x24
 800bdb8:	f7ff fef2 	bl	800bba0 <_printf_common>
 800bdbc:	3001      	adds	r0, #1
 800bdbe:	d147      	bne.n	800be50 <_printf_i+0x1d0>
 800bdc0:	2001      	movs	r0, #1
 800bdc2:	4240      	negs	r0, r0
 800bdc4:	b00b      	add	sp, #44	; 0x2c
 800bdc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bdc8:	2220      	movs	r2, #32
 800bdca:	6809      	ldr	r1, [r1, #0]
 800bdcc:	430a      	orrs	r2, r1
 800bdce:	6022      	str	r2, [r4, #0]
 800bdd0:	2278      	movs	r2, #120	; 0x78
 800bdd2:	4932      	ldr	r1, [pc, #200]	; (800be9c <_printf_i+0x21c>)
 800bdd4:	9103      	str	r1, [sp, #12]
 800bdd6:	0021      	movs	r1, r4
 800bdd8:	3145      	adds	r1, #69	; 0x45
 800bdda:	700a      	strb	r2, [r1, #0]
 800bddc:	6819      	ldr	r1, [r3, #0]
 800bdde:	6822      	ldr	r2, [r4, #0]
 800bde0:	c920      	ldmia	r1!, {r5}
 800bde2:	0610      	lsls	r0, r2, #24
 800bde4:	d402      	bmi.n	800bdec <_printf_i+0x16c>
 800bde6:	0650      	lsls	r0, r2, #25
 800bde8:	d500      	bpl.n	800bdec <_printf_i+0x16c>
 800bdea:	b2ad      	uxth	r5, r5
 800bdec:	6019      	str	r1, [r3, #0]
 800bdee:	07d3      	lsls	r3, r2, #31
 800bdf0:	d502      	bpl.n	800bdf8 <_printf_i+0x178>
 800bdf2:	2320      	movs	r3, #32
 800bdf4:	4313      	orrs	r3, r2
 800bdf6:	6023      	str	r3, [r4, #0]
 800bdf8:	2710      	movs	r7, #16
 800bdfa:	2d00      	cmp	r5, #0
 800bdfc:	d1a9      	bne.n	800bd52 <_printf_i+0xd2>
 800bdfe:	2220      	movs	r2, #32
 800be00:	6823      	ldr	r3, [r4, #0]
 800be02:	4393      	bics	r3, r2
 800be04:	6023      	str	r3, [r4, #0]
 800be06:	e7a4      	b.n	800bd52 <_printf_i+0xd2>
 800be08:	681a      	ldr	r2, [r3, #0]
 800be0a:	680d      	ldr	r5, [r1, #0]
 800be0c:	1d10      	adds	r0, r2, #4
 800be0e:	6949      	ldr	r1, [r1, #20]
 800be10:	6018      	str	r0, [r3, #0]
 800be12:	6813      	ldr	r3, [r2, #0]
 800be14:	062e      	lsls	r6, r5, #24
 800be16:	d501      	bpl.n	800be1c <_printf_i+0x19c>
 800be18:	6019      	str	r1, [r3, #0]
 800be1a:	e002      	b.n	800be22 <_printf_i+0x1a2>
 800be1c:	066d      	lsls	r5, r5, #25
 800be1e:	d5fb      	bpl.n	800be18 <_printf_i+0x198>
 800be20:	8019      	strh	r1, [r3, #0]
 800be22:	2300      	movs	r3, #0
 800be24:	9e04      	ldr	r6, [sp, #16]
 800be26:	6123      	str	r3, [r4, #16]
 800be28:	e7c0      	b.n	800bdac <_printf_i+0x12c>
 800be2a:	681a      	ldr	r2, [r3, #0]
 800be2c:	1d11      	adds	r1, r2, #4
 800be2e:	6019      	str	r1, [r3, #0]
 800be30:	6816      	ldr	r6, [r2, #0]
 800be32:	2100      	movs	r1, #0
 800be34:	0030      	movs	r0, r6
 800be36:	6862      	ldr	r2, [r4, #4]
 800be38:	f000 fd7b 	bl	800c932 <memchr>
 800be3c:	2800      	cmp	r0, #0
 800be3e:	d001      	beq.n	800be44 <_printf_i+0x1c4>
 800be40:	1b80      	subs	r0, r0, r6
 800be42:	6060      	str	r0, [r4, #4]
 800be44:	6863      	ldr	r3, [r4, #4]
 800be46:	6123      	str	r3, [r4, #16]
 800be48:	2300      	movs	r3, #0
 800be4a:	9a04      	ldr	r2, [sp, #16]
 800be4c:	7013      	strb	r3, [r2, #0]
 800be4e:	e7ad      	b.n	800bdac <_printf_i+0x12c>
 800be50:	0032      	movs	r2, r6
 800be52:	6923      	ldr	r3, [r4, #16]
 800be54:	9906      	ldr	r1, [sp, #24]
 800be56:	9805      	ldr	r0, [sp, #20]
 800be58:	9d07      	ldr	r5, [sp, #28]
 800be5a:	47a8      	blx	r5
 800be5c:	3001      	adds	r0, #1
 800be5e:	d0af      	beq.n	800bdc0 <_printf_i+0x140>
 800be60:	6823      	ldr	r3, [r4, #0]
 800be62:	079b      	lsls	r3, r3, #30
 800be64:	d415      	bmi.n	800be92 <_printf_i+0x212>
 800be66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be68:	68e0      	ldr	r0, [r4, #12]
 800be6a:	4298      	cmp	r0, r3
 800be6c:	daaa      	bge.n	800bdc4 <_printf_i+0x144>
 800be6e:	0018      	movs	r0, r3
 800be70:	e7a8      	b.n	800bdc4 <_printf_i+0x144>
 800be72:	0022      	movs	r2, r4
 800be74:	2301      	movs	r3, #1
 800be76:	9906      	ldr	r1, [sp, #24]
 800be78:	9805      	ldr	r0, [sp, #20]
 800be7a:	9e07      	ldr	r6, [sp, #28]
 800be7c:	3219      	adds	r2, #25
 800be7e:	47b0      	blx	r6
 800be80:	3001      	adds	r0, #1
 800be82:	d09d      	beq.n	800bdc0 <_printf_i+0x140>
 800be84:	3501      	adds	r5, #1
 800be86:	68e3      	ldr	r3, [r4, #12]
 800be88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be8a:	1a9b      	subs	r3, r3, r2
 800be8c:	42ab      	cmp	r3, r5
 800be8e:	dcf0      	bgt.n	800be72 <_printf_i+0x1f2>
 800be90:	e7e9      	b.n	800be66 <_printf_i+0x1e6>
 800be92:	2500      	movs	r5, #0
 800be94:	e7f7      	b.n	800be86 <_printf_i+0x206>
 800be96:	46c0      	nop			; (mov r8, r8)
 800be98:	0800ffc1 	.word	0x0800ffc1
 800be9c:	0800ffd2 	.word	0x0800ffd2

0800bea0 <_scanf_float>:
 800bea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bea2:	b08b      	sub	sp, #44	; 0x2c
 800bea4:	0016      	movs	r6, r2
 800bea6:	9002      	str	r0, [sp, #8]
 800bea8:	22ae      	movs	r2, #174	; 0xae
 800beaa:	2000      	movs	r0, #0
 800beac:	9307      	str	r3, [sp, #28]
 800beae:	688b      	ldr	r3, [r1, #8]
 800beb0:	000f      	movs	r7, r1
 800beb2:	1e59      	subs	r1, r3, #1
 800beb4:	0052      	lsls	r2, r2, #1
 800beb6:	9006      	str	r0, [sp, #24]
 800beb8:	4291      	cmp	r1, r2
 800beba:	d905      	bls.n	800bec8 <_scanf_float+0x28>
 800bebc:	3b5e      	subs	r3, #94	; 0x5e
 800bebe:	3bff      	subs	r3, #255	; 0xff
 800bec0:	9306      	str	r3, [sp, #24]
 800bec2:	235e      	movs	r3, #94	; 0x5e
 800bec4:	33ff      	adds	r3, #255	; 0xff
 800bec6:	60bb      	str	r3, [r7, #8]
 800bec8:	23f0      	movs	r3, #240	; 0xf0
 800beca:	683a      	ldr	r2, [r7, #0]
 800becc:	00db      	lsls	r3, r3, #3
 800bece:	4313      	orrs	r3, r2
 800bed0:	603b      	str	r3, [r7, #0]
 800bed2:	003b      	movs	r3, r7
 800bed4:	2400      	movs	r4, #0
 800bed6:	331c      	adds	r3, #28
 800bed8:	001d      	movs	r5, r3
 800beda:	9304      	str	r3, [sp, #16]
 800bedc:	9403      	str	r4, [sp, #12]
 800bede:	9409      	str	r4, [sp, #36]	; 0x24
 800bee0:	9408      	str	r4, [sp, #32]
 800bee2:	9401      	str	r4, [sp, #4]
 800bee4:	9405      	str	r4, [sp, #20]
 800bee6:	68ba      	ldr	r2, [r7, #8]
 800bee8:	2a00      	cmp	r2, #0
 800beea:	d00a      	beq.n	800bf02 <_scanf_float+0x62>
 800beec:	6833      	ldr	r3, [r6, #0]
 800beee:	781b      	ldrb	r3, [r3, #0]
 800bef0:	2b4e      	cmp	r3, #78	; 0x4e
 800bef2:	d844      	bhi.n	800bf7e <_scanf_float+0xde>
 800bef4:	0018      	movs	r0, r3
 800bef6:	2b40      	cmp	r3, #64	; 0x40
 800bef8:	d82c      	bhi.n	800bf54 <_scanf_float+0xb4>
 800befa:	382b      	subs	r0, #43	; 0x2b
 800befc:	b2c1      	uxtb	r1, r0
 800befe:	290e      	cmp	r1, #14
 800bf00:	d92a      	bls.n	800bf58 <_scanf_float+0xb8>
 800bf02:	9b01      	ldr	r3, [sp, #4]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d003      	beq.n	800bf10 <_scanf_float+0x70>
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	4aa3      	ldr	r2, [pc, #652]	; (800c198 <_scanf_float+0x2f8>)
 800bf0c:	4013      	ands	r3, r2
 800bf0e:	603b      	str	r3, [r7, #0]
 800bf10:	9b03      	ldr	r3, [sp, #12]
 800bf12:	3b01      	subs	r3, #1
 800bf14:	2b01      	cmp	r3, #1
 800bf16:	d900      	bls.n	800bf1a <_scanf_float+0x7a>
 800bf18:	e0f9      	b.n	800c10e <_scanf_float+0x26e>
 800bf1a:	24be      	movs	r4, #190	; 0xbe
 800bf1c:	0064      	lsls	r4, r4, #1
 800bf1e:	9b04      	ldr	r3, [sp, #16]
 800bf20:	429d      	cmp	r5, r3
 800bf22:	d900      	bls.n	800bf26 <_scanf_float+0x86>
 800bf24:	e0e9      	b.n	800c0fa <_scanf_float+0x25a>
 800bf26:	2301      	movs	r3, #1
 800bf28:	9303      	str	r3, [sp, #12]
 800bf2a:	e183      	b.n	800c234 <_scanf_float+0x394>
 800bf2c:	0018      	movs	r0, r3
 800bf2e:	3861      	subs	r0, #97	; 0x61
 800bf30:	280d      	cmp	r0, #13
 800bf32:	d8e6      	bhi.n	800bf02 <_scanf_float+0x62>
 800bf34:	f7f4 f8fa 	bl	800012c <__gnu_thumb1_case_shi>
 800bf38:	ffe50083 	.word	0xffe50083
 800bf3c:	ffe5ffe5 	.word	0xffe5ffe5
 800bf40:	00a200b6 	.word	0x00a200b6
 800bf44:	ffe5ffe5 	.word	0xffe5ffe5
 800bf48:	ffe50089 	.word	0xffe50089
 800bf4c:	ffe5ffe5 	.word	0xffe5ffe5
 800bf50:	0065ffe5 	.word	0x0065ffe5
 800bf54:	3841      	subs	r0, #65	; 0x41
 800bf56:	e7eb      	b.n	800bf30 <_scanf_float+0x90>
 800bf58:	280e      	cmp	r0, #14
 800bf5a:	d8d2      	bhi.n	800bf02 <_scanf_float+0x62>
 800bf5c:	f7f4 f8e6 	bl	800012c <__gnu_thumb1_case_shi>
 800bf60:	ffd1004b 	.word	0xffd1004b
 800bf64:	0098004b 	.word	0x0098004b
 800bf68:	0020ffd1 	.word	0x0020ffd1
 800bf6c:	00400040 	.word	0x00400040
 800bf70:	00400040 	.word	0x00400040
 800bf74:	00400040 	.word	0x00400040
 800bf78:	00400040 	.word	0x00400040
 800bf7c:	0040      	.short	0x0040
 800bf7e:	2b6e      	cmp	r3, #110	; 0x6e
 800bf80:	d809      	bhi.n	800bf96 <_scanf_float+0xf6>
 800bf82:	2b60      	cmp	r3, #96	; 0x60
 800bf84:	d8d2      	bhi.n	800bf2c <_scanf_float+0x8c>
 800bf86:	2b54      	cmp	r3, #84	; 0x54
 800bf88:	d07d      	beq.n	800c086 <_scanf_float+0x1e6>
 800bf8a:	2b59      	cmp	r3, #89	; 0x59
 800bf8c:	d1b9      	bne.n	800bf02 <_scanf_float+0x62>
 800bf8e:	2c07      	cmp	r4, #7
 800bf90:	d1b7      	bne.n	800bf02 <_scanf_float+0x62>
 800bf92:	2408      	movs	r4, #8
 800bf94:	e02c      	b.n	800bff0 <_scanf_float+0x150>
 800bf96:	2b74      	cmp	r3, #116	; 0x74
 800bf98:	d075      	beq.n	800c086 <_scanf_float+0x1e6>
 800bf9a:	2b79      	cmp	r3, #121	; 0x79
 800bf9c:	d0f7      	beq.n	800bf8e <_scanf_float+0xee>
 800bf9e:	e7b0      	b.n	800bf02 <_scanf_float+0x62>
 800bfa0:	6839      	ldr	r1, [r7, #0]
 800bfa2:	05c8      	lsls	r0, r1, #23
 800bfa4:	d51c      	bpl.n	800bfe0 <_scanf_float+0x140>
 800bfa6:	2380      	movs	r3, #128	; 0x80
 800bfa8:	4399      	bics	r1, r3
 800bfaa:	9b01      	ldr	r3, [sp, #4]
 800bfac:	6039      	str	r1, [r7, #0]
 800bfae:	3301      	adds	r3, #1
 800bfb0:	9301      	str	r3, [sp, #4]
 800bfb2:	9b06      	ldr	r3, [sp, #24]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d003      	beq.n	800bfc0 <_scanf_float+0x120>
 800bfb8:	3b01      	subs	r3, #1
 800bfba:	3201      	adds	r2, #1
 800bfbc:	9306      	str	r3, [sp, #24]
 800bfbe:	60ba      	str	r2, [r7, #8]
 800bfc0:	68bb      	ldr	r3, [r7, #8]
 800bfc2:	3b01      	subs	r3, #1
 800bfc4:	60bb      	str	r3, [r7, #8]
 800bfc6:	693b      	ldr	r3, [r7, #16]
 800bfc8:	3301      	adds	r3, #1
 800bfca:	613b      	str	r3, [r7, #16]
 800bfcc:	6873      	ldr	r3, [r6, #4]
 800bfce:	3b01      	subs	r3, #1
 800bfd0:	6073      	str	r3, [r6, #4]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	dc00      	bgt.n	800bfd8 <_scanf_float+0x138>
 800bfd6:	e086      	b.n	800c0e6 <_scanf_float+0x246>
 800bfd8:	6833      	ldr	r3, [r6, #0]
 800bfda:	3301      	adds	r3, #1
 800bfdc:	6033      	str	r3, [r6, #0]
 800bfde:	e782      	b.n	800bee6 <_scanf_float+0x46>
 800bfe0:	9a03      	ldr	r2, [sp, #12]
 800bfe2:	1912      	adds	r2, r2, r4
 800bfe4:	2a00      	cmp	r2, #0
 800bfe6:	d18c      	bne.n	800bf02 <_scanf_float+0x62>
 800bfe8:	683a      	ldr	r2, [r7, #0]
 800bfea:	496c      	ldr	r1, [pc, #432]	; (800c19c <_scanf_float+0x2fc>)
 800bfec:	400a      	ands	r2, r1
 800bfee:	603a      	str	r2, [r7, #0]
 800bff0:	702b      	strb	r3, [r5, #0]
 800bff2:	3501      	adds	r5, #1
 800bff4:	e7e4      	b.n	800bfc0 <_scanf_float+0x120>
 800bff6:	2180      	movs	r1, #128	; 0x80
 800bff8:	683a      	ldr	r2, [r7, #0]
 800bffa:	420a      	tst	r2, r1
 800bffc:	d081      	beq.n	800bf02 <_scanf_float+0x62>
 800bffe:	438a      	bics	r2, r1
 800c000:	e7f5      	b.n	800bfee <_scanf_float+0x14e>
 800c002:	9a03      	ldr	r2, [sp, #12]
 800c004:	2a00      	cmp	r2, #0
 800c006:	d10f      	bne.n	800c028 <_scanf_float+0x188>
 800c008:	9a01      	ldr	r2, [sp, #4]
 800c00a:	2a00      	cmp	r2, #0
 800c00c:	d10f      	bne.n	800c02e <_scanf_float+0x18e>
 800c00e:	683a      	ldr	r2, [r7, #0]
 800c010:	21e0      	movs	r1, #224	; 0xe0
 800c012:	0010      	movs	r0, r2
 800c014:	00c9      	lsls	r1, r1, #3
 800c016:	4008      	ands	r0, r1
 800c018:	4288      	cmp	r0, r1
 800c01a:	d108      	bne.n	800c02e <_scanf_float+0x18e>
 800c01c:	4960      	ldr	r1, [pc, #384]	; (800c1a0 <_scanf_float+0x300>)
 800c01e:	400a      	ands	r2, r1
 800c020:	603a      	str	r2, [r7, #0]
 800c022:	2201      	movs	r2, #1
 800c024:	9203      	str	r2, [sp, #12]
 800c026:	e7e3      	b.n	800bff0 <_scanf_float+0x150>
 800c028:	9a03      	ldr	r2, [sp, #12]
 800c02a:	2a02      	cmp	r2, #2
 800c02c:	d059      	beq.n	800c0e2 <_scanf_float+0x242>
 800c02e:	2c01      	cmp	r4, #1
 800c030:	d002      	beq.n	800c038 <_scanf_float+0x198>
 800c032:	2c04      	cmp	r4, #4
 800c034:	d000      	beq.n	800c038 <_scanf_float+0x198>
 800c036:	e764      	b.n	800bf02 <_scanf_float+0x62>
 800c038:	3401      	adds	r4, #1
 800c03a:	b2e4      	uxtb	r4, r4
 800c03c:	e7d8      	b.n	800bff0 <_scanf_float+0x150>
 800c03e:	9a03      	ldr	r2, [sp, #12]
 800c040:	2a01      	cmp	r2, #1
 800c042:	d000      	beq.n	800c046 <_scanf_float+0x1a6>
 800c044:	e75d      	b.n	800bf02 <_scanf_float+0x62>
 800c046:	2202      	movs	r2, #2
 800c048:	e7ec      	b.n	800c024 <_scanf_float+0x184>
 800c04a:	2c00      	cmp	r4, #0
 800c04c:	d110      	bne.n	800c070 <_scanf_float+0x1d0>
 800c04e:	9a01      	ldr	r2, [sp, #4]
 800c050:	2a00      	cmp	r2, #0
 800c052:	d000      	beq.n	800c056 <_scanf_float+0x1b6>
 800c054:	e758      	b.n	800bf08 <_scanf_float+0x68>
 800c056:	683a      	ldr	r2, [r7, #0]
 800c058:	21e0      	movs	r1, #224	; 0xe0
 800c05a:	0010      	movs	r0, r2
 800c05c:	00c9      	lsls	r1, r1, #3
 800c05e:	4008      	ands	r0, r1
 800c060:	4288      	cmp	r0, r1
 800c062:	d000      	beq.n	800c066 <_scanf_float+0x1c6>
 800c064:	e754      	b.n	800bf10 <_scanf_float+0x70>
 800c066:	494e      	ldr	r1, [pc, #312]	; (800c1a0 <_scanf_float+0x300>)
 800c068:	3401      	adds	r4, #1
 800c06a:	400a      	ands	r2, r1
 800c06c:	603a      	str	r2, [r7, #0]
 800c06e:	e7bf      	b.n	800bff0 <_scanf_float+0x150>
 800c070:	21fd      	movs	r1, #253	; 0xfd
 800c072:	1ee2      	subs	r2, r4, #3
 800c074:	420a      	tst	r2, r1
 800c076:	d000      	beq.n	800c07a <_scanf_float+0x1da>
 800c078:	e743      	b.n	800bf02 <_scanf_float+0x62>
 800c07a:	e7dd      	b.n	800c038 <_scanf_float+0x198>
 800c07c:	2c02      	cmp	r4, #2
 800c07e:	d000      	beq.n	800c082 <_scanf_float+0x1e2>
 800c080:	e73f      	b.n	800bf02 <_scanf_float+0x62>
 800c082:	2403      	movs	r4, #3
 800c084:	e7b4      	b.n	800bff0 <_scanf_float+0x150>
 800c086:	2c06      	cmp	r4, #6
 800c088:	d000      	beq.n	800c08c <_scanf_float+0x1ec>
 800c08a:	e73a      	b.n	800bf02 <_scanf_float+0x62>
 800c08c:	2407      	movs	r4, #7
 800c08e:	e7af      	b.n	800bff0 <_scanf_float+0x150>
 800c090:	683a      	ldr	r2, [r7, #0]
 800c092:	0591      	lsls	r1, r2, #22
 800c094:	d400      	bmi.n	800c098 <_scanf_float+0x1f8>
 800c096:	e734      	b.n	800bf02 <_scanf_float+0x62>
 800c098:	4942      	ldr	r1, [pc, #264]	; (800c1a4 <_scanf_float+0x304>)
 800c09a:	400a      	ands	r2, r1
 800c09c:	603a      	str	r2, [r7, #0]
 800c09e:	9a01      	ldr	r2, [sp, #4]
 800c0a0:	9205      	str	r2, [sp, #20]
 800c0a2:	e7a5      	b.n	800bff0 <_scanf_float+0x150>
 800c0a4:	21a0      	movs	r1, #160	; 0xa0
 800c0a6:	2080      	movs	r0, #128	; 0x80
 800c0a8:	683a      	ldr	r2, [r7, #0]
 800c0aa:	00c9      	lsls	r1, r1, #3
 800c0ac:	4011      	ands	r1, r2
 800c0ae:	00c0      	lsls	r0, r0, #3
 800c0b0:	4281      	cmp	r1, r0
 800c0b2:	d006      	beq.n	800c0c2 <_scanf_float+0x222>
 800c0b4:	4202      	tst	r2, r0
 800c0b6:	d100      	bne.n	800c0ba <_scanf_float+0x21a>
 800c0b8:	e723      	b.n	800bf02 <_scanf_float+0x62>
 800c0ba:	9901      	ldr	r1, [sp, #4]
 800c0bc:	2900      	cmp	r1, #0
 800c0be:	d100      	bne.n	800c0c2 <_scanf_float+0x222>
 800c0c0:	e726      	b.n	800bf10 <_scanf_float+0x70>
 800c0c2:	0591      	lsls	r1, r2, #22
 800c0c4:	d404      	bmi.n	800c0d0 <_scanf_float+0x230>
 800c0c6:	9901      	ldr	r1, [sp, #4]
 800c0c8:	9805      	ldr	r0, [sp, #20]
 800c0ca:	9509      	str	r5, [sp, #36]	; 0x24
 800c0cc:	1a09      	subs	r1, r1, r0
 800c0ce:	9108      	str	r1, [sp, #32]
 800c0d0:	4933      	ldr	r1, [pc, #204]	; (800c1a0 <_scanf_float+0x300>)
 800c0d2:	400a      	ands	r2, r1
 800c0d4:	21c0      	movs	r1, #192	; 0xc0
 800c0d6:	0049      	lsls	r1, r1, #1
 800c0d8:	430a      	orrs	r2, r1
 800c0da:	603a      	str	r2, [r7, #0]
 800c0dc:	2200      	movs	r2, #0
 800c0de:	9201      	str	r2, [sp, #4]
 800c0e0:	e786      	b.n	800bff0 <_scanf_float+0x150>
 800c0e2:	2203      	movs	r2, #3
 800c0e4:	e79e      	b.n	800c024 <_scanf_float+0x184>
 800c0e6:	23c0      	movs	r3, #192	; 0xc0
 800c0e8:	005b      	lsls	r3, r3, #1
 800c0ea:	0031      	movs	r1, r6
 800c0ec:	58fb      	ldr	r3, [r7, r3]
 800c0ee:	9802      	ldr	r0, [sp, #8]
 800c0f0:	4798      	blx	r3
 800c0f2:	2800      	cmp	r0, #0
 800c0f4:	d100      	bne.n	800c0f8 <_scanf_float+0x258>
 800c0f6:	e6f6      	b.n	800bee6 <_scanf_float+0x46>
 800c0f8:	e703      	b.n	800bf02 <_scanf_float+0x62>
 800c0fa:	3d01      	subs	r5, #1
 800c0fc:	593b      	ldr	r3, [r7, r4]
 800c0fe:	0032      	movs	r2, r6
 800c100:	7829      	ldrb	r1, [r5, #0]
 800c102:	9802      	ldr	r0, [sp, #8]
 800c104:	4798      	blx	r3
 800c106:	693b      	ldr	r3, [r7, #16]
 800c108:	3b01      	subs	r3, #1
 800c10a:	613b      	str	r3, [r7, #16]
 800c10c:	e707      	b.n	800bf1e <_scanf_float+0x7e>
 800c10e:	1e63      	subs	r3, r4, #1
 800c110:	2b06      	cmp	r3, #6
 800c112:	d80e      	bhi.n	800c132 <_scanf_float+0x292>
 800c114:	9503      	str	r5, [sp, #12]
 800c116:	2c02      	cmp	r4, #2
 800c118:	d920      	bls.n	800c15c <_scanf_float+0x2bc>
 800c11a:	1b63      	subs	r3, r4, r5
 800c11c:	b2db      	uxtb	r3, r3
 800c11e:	9306      	str	r3, [sp, #24]
 800c120:	9b03      	ldr	r3, [sp, #12]
 800c122:	9a06      	ldr	r2, [sp, #24]
 800c124:	189b      	adds	r3, r3, r2
 800c126:	b2db      	uxtb	r3, r3
 800c128:	2b03      	cmp	r3, #3
 800c12a:	d827      	bhi.n	800c17c <_scanf_float+0x2dc>
 800c12c:	3c03      	subs	r4, #3
 800c12e:	b2e4      	uxtb	r4, r4
 800c130:	1b2d      	subs	r5, r5, r4
 800c132:	683b      	ldr	r3, [r7, #0]
 800c134:	05da      	lsls	r2, r3, #23
 800c136:	d552      	bpl.n	800c1de <_scanf_float+0x33e>
 800c138:	055b      	lsls	r3, r3, #21
 800c13a:	d535      	bpl.n	800c1a8 <_scanf_float+0x308>
 800c13c:	24be      	movs	r4, #190	; 0xbe
 800c13e:	0064      	lsls	r4, r4, #1
 800c140:	9b04      	ldr	r3, [sp, #16]
 800c142:	429d      	cmp	r5, r3
 800c144:	d800      	bhi.n	800c148 <_scanf_float+0x2a8>
 800c146:	e6ee      	b.n	800bf26 <_scanf_float+0x86>
 800c148:	3d01      	subs	r5, #1
 800c14a:	593b      	ldr	r3, [r7, r4]
 800c14c:	0032      	movs	r2, r6
 800c14e:	7829      	ldrb	r1, [r5, #0]
 800c150:	9802      	ldr	r0, [sp, #8]
 800c152:	4798      	blx	r3
 800c154:	693b      	ldr	r3, [r7, #16]
 800c156:	3b01      	subs	r3, #1
 800c158:	613b      	str	r3, [r7, #16]
 800c15a:	e7f1      	b.n	800c140 <_scanf_float+0x2a0>
 800c15c:	24be      	movs	r4, #190	; 0xbe
 800c15e:	0064      	lsls	r4, r4, #1
 800c160:	9b04      	ldr	r3, [sp, #16]
 800c162:	429d      	cmp	r5, r3
 800c164:	d800      	bhi.n	800c168 <_scanf_float+0x2c8>
 800c166:	e6de      	b.n	800bf26 <_scanf_float+0x86>
 800c168:	3d01      	subs	r5, #1
 800c16a:	593b      	ldr	r3, [r7, r4]
 800c16c:	0032      	movs	r2, r6
 800c16e:	7829      	ldrb	r1, [r5, #0]
 800c170:	9802      	ldr	r0, [sp, #8]
 800c172:	4798      	blx	r3
 800c174:	693b      	ldr	r3, [r7, #16]
 800c176:	3b01      	subs	r3, #1
 800c178:	613b      	str	r3, [r7, #16]
 800c17a:	e7f1      	b.n	800c160 <_scanf_float+0x2c0>
 800c17c:	9b03      	ldr	r3, [sp, #12]
 800c17e:	0032      	movs	r2, r6
 800c180:	3b01      	subs	r3, #1
 800c182:	7819      	ldrb	r1, [r3, #0]
 800c184:	9303      	str	r3, [sp, #12]
 800c186:	23be      	movs	r3, #190	; 0xbe
 800c188:	005b      	lsls	r3, r3, #1
 800c18a:	58fb      	ldr	r3, [r7, r3]
 800c18c:	9802      	ldr	r0, [sp, #8]
 800c18e:	4798      	blx	r3
 800c190:	693b      	ldr	r3, [r7, #16]
 800c192:	3b01      	subs	r3, #1
 800c194:	613b      	str	r3, [r7, #16]
 800c196:	e7c3      	b.n	800c120 <_scanf_float+0x280>
 800c198:	fffffeff 	.word	0xfffffeff
 800c19c:	fffffe7f 	.word	0xfffffe7f
 800c1a0:	fffff87f 	.word	0xfffff87f
 800c1a4:	fffffd7f 	.word	0xfffffd7f
 800c1a8:	693b      	ldr	r3, [r7, #16]
 800c1aa:	1e6c      	subs	r4, r5, #1
 800c1ac:	7821      	ldrb	r1, [r4, #0]
 800c1ae:	3b01      	subs	r3, #1
 800c1b0:	613b      	str	r3, [r7, #16]
 800c1b2:	2965      	cmp	r1, #101	; 0x65
 800c1b4:	d00c      	beq.n	800c1d0 <_scanf_float+0x330>
 800c1b6:	2945      	cmp	r1, #69	; 0x45
 800c1b8:	d00a      	beq.n	800c1d0 <_scanf_float+0x330>
 800c1ba:	23be      	movs	r3, #190	; 0xbe
 800c1bc:	005b      	lsls	r3, r3, #1
 800c1be:	58fb      	ldr	r3, [r7, r3]
 800c1c0:	0032      	movs	r2, r6
 800c1c2:	9802      	ldr	r0, [sp, #8]
 800c1c4:	4798      	blx	r3
 800c1c6:	693b      	ldr	r3, [r7, #16]
 800c1c8:	1eac      	subs	r4, r5, #2
 800c1ca:	3b01      	subs	r3, #1
 800c1cc:	7821      	ldrb	r1, [r4, #0]
 800c1ce:	613b      	str	r3, [r7, #16]
 800c1d0:	23be      	movs	r3, #190	; 0xbe
 800c1d2:	005b      	lsls	r3, r3, #1
 800c1d4:	0032      	movs	r2, r6
 800c1d6:	58fb      	ldr	r3, [r7, r3]
 800c1d8:	9802      	ldr	r0, [sp, #8]
 800c1da:	4798      	blx	r3
 800c1dc:	0025      	movs	r5, r4
 800c1de:	683a      	ldr	r2, [r7, #0]
 800c1e0:	2310      	movs	r3, #16
 800c1e2:	0011      	movs	r1, r2
 800c1e4:	4019      	ands	r1, r3
 800c1e6:	9103      	str	r1, [sp, #12]
 800c1e8:	421a      	tst	r2, r3
 800c1ea:	d15b      	bne.n	800c2a4 <_scanf_float+0x404>
 800c1ec:	22c0      	movs	r2, #192	; 0xc0
 800c1ee:	7029      	strb	r1, [r5, #0]
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	00d2      	lsls	r2, r2, #3
 800c1f4:	4013      	ands	r3, r2
 800c1f6:	2280      	movs	r2, #128	; 0x80
 800c1f8:	00d2      	lsls	r2, r2, #3
 800c1fa:	4293      	cmp	r3, r2
 800c1fc:	d11d      	bne.n	800c23a <_scanf_float+0x39a>
 800c1fe:	9b05      	ldr	r3, [sp, #20]
 800c200:	9a01      	ldr	r2, [sp, #4]
 800c202:	9901      	ldr	r1, [sp, #4]
 800c204:	1a9a      	subs	r2, r3, r2
 800c206:	428b      	cmp	r3, r1
 800c208:	d124      	bne.n	800c254 <_scanf_float+0x3b4>
 800c20a:	2200      	movs	r2, #0
 800c20c:	9904      	ldr	r1, [sp, #16]
 800c20e:	9802      	ldr	r0, [sp, #8]
 800c210:	f7ff f9c0 	bl	800b594 <_strtod_r>
 800c214:	9b07      	ldr	r3, [sp, #28]
 800c216:	683a      	ldr	r2, [r7, #0]
 800c218:	0004      	movs	r4, r0
 800c21a:	000d      	movs	r5, r1
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	0791      	lsls	r1, r2, #30
 800c220:	d525      	bpl.n	800c26e <_scanf_float+0x3ce>
 800c222:	9907      	ldr	r1, [sp, #28]
 800c224:	1d1a      	adds	r2, r3, #4
 800c226:	600a      	str	r2, [r1, #0]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	601c      	str	r4, [r3, #0]
 800c22c:	605d      	str	r5, [r3, #4]
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	3301      	adds	r3, #1
 800c232:	60fb      	str	r3, [r7, #12]
 800c234:	9803      	ldr	r0, [sp, #12]
 800c236:	b00b      	add	sp, #44	; 0x2c
 800c238:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c23a:	9b08      	ldr	r3, [sp, #32]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d0e4      	beq.n	800c20a <_scanf_float+0x36a>
 800c240:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c242:	9a03      	ldr	r2, [sp, #12]
 800c244:	1c59      	adds	r1, r3, #1
 800c246:	9802      	ldr	r0, [sp, #8]
 800c248:	230a      	movs	r3, #10
 800c24a:	f002 fb37 	bl	800e8bc <_strtol_r>
 800c24e:	9b08      	ldr	r3, [sp, #32]
 800c250:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c252:	1ac2      	subs	r2, r0, r3
 800c254:	003b      	movs	r3, r7
 800c256:	3370      	adds	r3, #112	; 0x70
 800c258:	33ff      	adds	r3, #255	; 0xff
 800c25a:	429d      	cmp	r5, r3
 800c25c:	d302      	bcc.n	800c264 <_scanf_float+0x3c4>
 800c25e:	003d      	movs	r5, r7
 800c260:	356f      	adds	r5, #111	; 0x6f
 800c262:	35ff      	adds	r5, #255	; 0xff
 800c264:	0028      	movs	r0, r5
 800c266:	4910      	ldr	r1, [pc, #64]	; (800c2a8 <_scanf_float+0x408>)
 800c268:	f000 f966 	bl	800c538 <siprintf>
 800c26c:	e7cd      	b.n	800c20a <_scanf_float+0x36a>
 800c26e:	1d19      	adds	r1, r3, #4
 800c270:	0752      	lsls	r2, r2, #29
 800c272:	d502      	bpl.n	800c27a <_scanf_float+0x3da>
 800c274:	9a07      	ldr	r2, [sp, #28]
 800c276:	6011      	str	r1, [r2, #0]
 800c278:	e7d6      	b.n	800c228 <_scanf_float+0x388>
 800c27a:	9a07      	ldr	r2, [sp, #28]
 800c27c:	0020      	movs	r0, r4
 800c27e:	6011      	str	r1, [r2, #0]
 800c280:	681e      	ldr	r6, [r3, #0]
 800c282:	0022      	movs	r2, r4
 800c284:	002b      	movs	r3, r5
 800c286:	0029      	movs	r1, r5
 800c288:	f7f6 fde2 	bl	8002e50 <__aeabi_dcmpun>
 800c28c:	2800      	cmp	r0, #0
 800c28e:	d004      	beq.n	800c29a <_scanf_float+0x3fa>
 800c290:	4806      	ldr	r0, [pc, #24]	; (800c2ac <_scanf_float+0x40c>)
 800c292:	f000 fb69 	bl	800c968 <nanf>
 800c296:	6030      	str	r0, [r6, #0]
 800c298:	e7c9      	b.n	800c22e <_scanf_float+0x38e>
 800c29a:	0020      	movs	r0, r4
 800c29c:	0029      	movs	r1, r5
 800c29e:	f7f6 fec9 	bl	8003034 <__aeabi_d2f>
 800c2a2:	e7f8      	b.n	800c296 <_scanf_float+0x3f6>
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	e63f      	b.n	800bf28 <_scanf_float+0x88>
 800c2a8:	0800ffe3 	.word	0x0800ffe3
 800c2ac:	0800fe57 	.word	0x0800fe57

0800c2b0 <std>:
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	b510      	push	{r4, lr}
 800c2b4:	0004      	movs	r4, r0
 800c2b6:	6003      	str	r3, [r0, #0]
 800c2b8:	6043      	str	r3, [r0, #4]
 800c2ba:	6083      	str	r3, [r0, #8]
 800c2bc:	8181      	strh	r1, [r0, #12]
 800c2be:	6643      	str	r3, [r0, #100]	; 0x64
 800c2c0:	81c2      	strh	r2, [r0, #14]
 800c2c2:	6103      	str	r3, [r0, #16]
 800c2c4:	6143      	str	r3, [r0, #20]
 800c2c6:	6183      	str	r3, [r0, #24]
 800c2c8:	0019      	movs	r1, r3
 800c2ca:	2208      	movs	r2, #8
 800c2cc:	305c      	adds	r0, #92	; 0x5c
 800c2ce:	f000 fa6f 	bl	800c7b0 <memset>
 800c2d2:	4b0b      	ldr	r3, [pc, #44]	; (800c300 <std+0x50>)
 800c2d4:	6224      	str	r4, [r4, #32]
 800c2d6:	6263      	str	r3, [r4, #36]	; 0x24
 800c2d8:	4b0a      	ldr	r3, [pc, #40]	; (800c304 <std+0x54>)
 800c2da:	62a3      	str	r3, [r4, #40]	; 0x28
 800c2dc:	4b0a      	ldr	r3, [pc, #40]	; (800c308 <std+0x58>)
 800c2de:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c2e0:	4b0a      	ldr	r3, [pc, #40]	; (800c30c <std+0x5c>)
 800c2e2:	6323      	str	r3, [r4, #48]	; 0x30
 800c2e4:	4b0a      	ldr	r3, [pc, #40]	; (800c310 <std+0x60>)
 800c2e6:	429c      	cmp	r4, r3
 800c2e8:	d005      	beq.n	800c2f6 <std+0x46>
 800c2ea:	4b0a      	ldr	r3, [pc, #40]	; (800c314 <std+0x64>)
 800c2ec:	429c      	cmp	r4, r3
 800c2ee:	d002      	beq.n	800c2f6 <std+0x46>
 800c2f0:	4b09      	ldr	r3, [pc, #36]	; (800c318 <std+0x68>)
 800c2f2:	429c      	cmp	r4, r3
 800c2f4:	d103      	bne.n	800c2fe <std+0x4e>
 800c2f6:	0020      	movs	r0, r4
 800c2f8:	3058      	adds	r0, #88	; 0x58
 800c2fa:	f000 fb17 	bl	800c92c <__retarget_lock_init_recursive>
 800c2fe:	bd10      	pop	{r4, pc}
 800c300:	0800c5c9 	.word	0x0800c5c9
 800c304:	0800c5f5 	.word	0x0800c5f5
 800c308:	0800c62d 	.word	0x0800c62d
 800c30c:	0800c659 	.word	0x0800c659
 800c310:	20000a1c 	.word	0x20000a1c
 800c314:	20000a84 	.word	0x20000a84
 800c318:	20000aec 	.word	0x20000aec

0800c31c <stdio_exit_handler>:
 800c31c:	b510      	push	{r4, lr}
 800c31e:	4a03      	ldr	r2, [pc, #12]	; (800c32c <stdio_exit_handler+0x10>)
 800c320:	4903      	ldr	r1, [pc, #12]	; (800c330 <stdio_exit_handler+0x14>)
 800c322:	4804      	ldr	r0, [pc, #16]	; (800c334 <stdio_exit_handler+0x18>)
 800c324:	f000 f87c 	bl	800c420 <_fwalk_sglue>
 800c328:	bd10      	pop	{r4, pc}
 800c32a:	46c0      	nop			; (mov r8, r8)
 800c32c:	200000e8 	.word	0x200000e8
 800c330:	0800f591 	.word	0x0800f591
 800c334:	20000260 	.word	0x20000260

0800c338 <cleanup_stdio>:
 800c338:	6841      	ldr	r1, [r0, #4]
 800c33a:	4b0b      	ldr	r3, [pc, #44]	; (800c368 <cleanup_stdio+0x30>)
 800c33c:	b510      	push	{r4, lr}
 800c33e:	0004      	movs	r4, r0
 800c340:	4299      	cmp	r1, r3
 800c342:	d001      	beq.n	800c348 <cleanup_stdio+0x10>
 800c344:	f003 f924 	bl	800f590 <_fflush_r>
 800c348:	68a1      	ldr	r1, [r4, #8]
 800c34a:	4b08      	ldr	r3, [pc, #32]	; (800c36c <cleanup_stdio+0x34>)
 800c34c:	4299      	cmp	r1, r3
 800c34e:	d002      	beq.n	800c356 <cleanup_stdio+0x1e>
 800c350:	0020      	movs	r0, r4
 800c352:	f003 f91d 	bl	800f590 <_fflush_r>
 800c356:	68e1      	ldr	r1, [r4, #12]
 800c358:	4b05      	ldr	r3, [pc, #20]	; (800c370 <cleanup_stdio+0x38>)
 800c35a:	4299      	cmp	r1, r3
 800c35c:	d002      	beq.n	800c364 <cleanup_stdio+0x2c>
 800c35e:	0020      	movs	r0, r4
 800c360:	f003 f916 	bl	800f590 <_fflush_r>
 800c364:	bd10      	pop	{r4, pc}
 800c366:	46c0      	nop			; (mov r8, r8)
 800c368:	20000a1c 	.word	0x20000a1c
 800c36c:	20000a84 	.word	0x20000a84
 800c370:	20000aec 	.word	0x20000aec

0800c374 <global_stdio_init.part.0>:
 800c374:	b510      	push	{r4, lr}
 800c376:	4b09      	ldr	r3, [pc, #36]	; (800c39c <global_stdio_init.part.0+0x28>)
 800c378:	4a09      	ldr	r2, [pc, #36]	; (800c3a0 <global_stdio_init.part.0+0x2c>)
 800c37a:	2104      	movs	r1, #4
 800c37c:	601a      	str	r2, [r3, #0]
 800c37e:	4809      	ldr	r0, [pc, #36]	; (800c3a4 <global_stdio_init.part.0+0x30>)
 800c380:	2200      	movs	r2, #0
 800c382:	f7ff ff95 	bl	800c2b0 <std>
 800c386:	2201      	movs	r2, #1
 800c388:	2109      	movs	r1, #9
 800c38a:	4807      	ldr	r0, [pc, #28]	; (800c3a8 <global_stdio_init.part.0+0x34>)
 800c38c:	f7ff ff90 	bl	800c2b0 <std>
 800c390:	2202      	movs	r2, #2
 800c392:	2112      	movs	r1, #18
 800c394:	4805      	ldr	r0, [pc, #20]	; (800c3ac <global_stdio_init.part.0+0x38>)
 800c396:	f7ff ff8b 	bl	800c2b0 <std>
 800c39a:	bd10      	pop	{r4, pc}
 800c39c:	20000b54 	.word	0x20000b54
 800c3a0:	0800c31d 	.word	0x0800c31d
 800c3a4:	20000a1c 	.word	0x20000a1c
 800c3a8:	20000a84 	.word	0x20000a84
 800c3ac:	20000aec 	.word	0x20000aec

0800c3b0 <__sfp_lock_acquire>:
 800c3b0:	b510      	push	{r4, lr}
 800c3b2:	4802      	ldr	r0, [pc, #8]	; (800c3bc <__sfp_lock_acquire+0xc>)
 800c3b4:	f000 fabb 	bl	800c92e <__retarget_lock_acquire_recursive>
 800c3b8:	bd10      	pop	{r4, pc}
 800c3ba:	46c0      	nop			; (mov r8, r8)
 800c3bc:	20000b5d 	.word	0x20000b5d

0800c3c0 <__sfp_lock_release>:
 800c3c0:	b510      	push	{r4, lr}
 800c3c2:	4802      	ldr	r0, [pc, #8]	; (800c3cc <__sfp_lock_release+0xc>)
 800c3c4:	f000 fab4 	bl	800c930 <__retarget_lock_release_recursive>
 800c3c8:	bd10      	pop	{r4, pc}
 800c3ca:	46c0      	nop			; (mov r8, r8)
 800c3cc:	20000b5d 	.word	0x20000b5d

0800c3d0 <__sinit>:
 800c3d0:	b510      	push	{r4, lr}
 800c3d2:	0004      	movs	r4, r0
 800c3d4:	f7ff ffec 	bl	800c3b0 <__sfp_lock_acquire>
 800c3d8:	6a23      	ldr	r3, [r4, #32]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d002      	beq.n	800c3e4 <__sinit+0x14>
 800c3de:	f7ff ffef 	bl	800c3c0 <__sfp_lock_release>
 800c3e2:	bd10      	pop	{r4, pc}
 800c3e4:	4b04      	ldr	r3, [pc, #16]	; (800c3f8 <__sinit+0x28>)
 800c3e6:	6223      	str	r3, [r4, #32]
 800c3e8:	4b04      	ldr	r3, [pc, #16]	; (800c3fc <__sinit+0x2c>)
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d1f6      	bne.n	800c3de <__sinit+0xe>
 800c3f0:	f7ff ffc0 	bl	800c374 <global_stdio_init.part.0>
 800c3f4:	e7f3      	b.n	800c3de <__sinit+0xe>
 800c3f6:	46c0      	nop			; (mov r8, r8)
 800c3f8:	0800c339 	.word	0x0800c339
 800c3fc:	20000b54 	.word	0x20000b54

0800c400 <fiprintf>:
 800c400:	b40e      	push	{r1, r2, r3}
 800c402:	b517      	push	{r0, r1, r2, r4, lr}
 800c404:	4c05      	ldr	r4, [pc, #20]	; (800c41c <fiprintf+0x1c>)
 800c406:	ab05      	add	r3, sp, #20
 800c408:	cb04      	ldmia	r3!, {r2}
 800c40a:	0001      	movs	r1, r0
 800c40c:	6820      	ldr	r0, [r4, #0]
 800c40e:	9301      	str	r3, [sp, #4]
 800c410:	f002 fdb6 	bl	800ef80 <_vfiprintf_r>
 800c414:	bc1e      	pop	{r1, r2, r3, r4}
 800c416:	bc08      	pop	{r3}
 800c418:	b003      	add	sp, #12
 800c41a:	4718      	bx	r3
 800c41c:	200002ac 	.word	0x200002ac

0800c420 <_fwalk_sglue>:
 800c420:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c422:	0014      	movs	r4, r2
 800c424:	2600      	movs	r6, #0
 800c426:	9000      	str	r0, [sp, #0]
 800c428:	9101      	str	r1, [sp, #4]
 800c42a:	68a5      	ldr	r5, [r4, #8]
 800c42c:	6867      	ldr	r7, [r4, #4]
 800c42e:	3f01      	subs	r7, #1
 800c430:	d504      	bpl.n	800c43c <_fwalk_sglue+0x1c>
 800c432:	6824      	ldr	r4, [r4, #0]
 800c434:	2c00      	cmp	r4, #0
 800c436:	d1f8      	bne.n	800c42a <_fwalk_sglue+0xa>
 800c438:	0030      	movs	r0, r6
 800c43a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c43c:	89ab      	ldrh	r3, [r5, #12]
 800c43e:	2b01      	cmp	r3, #1
 800c440:	d908      	bls.n	800c454 <_fwalk_sglue+0x34>
 800c442:	220e      	movs	r2, #14
 800c444:	5eab      	ldrsh	r3, [r5, r2]
 800c446:	3301      	adds	r3, #1
 800c448:	d004      	beq.n	800c454 <_fwalk_sglue+0x34>
 800c44a:	0029      	movs	r1, r5
 800c44c:	9800      	ldr	r0, [sp, #0]
 800c44e:	9b01      	ldr	r3, [sp, #4]
 800c450:	4798      	blx	r3
 800c452:	4306      	orrs	r6, r0
 800c454:	3568      	adds	r5, #104	; 0x68
 800c456:	e7ea      	b.n	800c42e <_fwalk_sglue+0xe>

0800c458 <iprintf>:
 800c458:	b40f      	push	{r0, r1, r2, r3}
 800c45a:	b507      	push	{r0, r1, r2, lr}
 800c45c:	4905      	ldr	r1, [pc, #20]	; (800c474 <iprintf+0x1c>)
 800c45e:	ab04      	add	r3, sp, #16
 800c460:	6808      	ldr	r0, [r1, #0]
 800c462:	cb04      	ldmia	r3!, {r2}
 800c464:	6881      	ldr	r1, [r0, #8]
 800c466:	9301      	str	r3, [sp, #4]
 800c468:	f002 fd8a 	bl	800ef80 <_vfiprintf_r>
 800c46c:	b003      	add	sp, #12
 800c46e:	bc08      	pop	{r3}
 800c470:	b004      	add	sp, #16
 800c472:	4718      	bx	r3
 800c474:	200002ac 	.word	0x200002ac

0800c478 <_puts_r>:
 800c478:	6a03      	ldr	r3, [r0, #32]
 800c47a:	b570      	push	{r4, r5, r6, lr}
 800c47c:	0005      	movs	r5, r0
 800c47e:	000e      	movs	r6, r1
 800c480:	6884      	ldr	r4, [r0, #8]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d101      	bne.n	800c48a <_puts_r+0x12>
 800c486:	f7ff ffa3 	bl	800c3d0 <__sinit>
 800c48a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c48c:	07db      	lsls	r3, r3, #31
 800c48e:	d405      	bmi.n	800c49c <_puts_r+0x24>
 800c490:	89a3      	ldrh	r3, [r4, #12]
 800c492:	059b      	lsls	r3, r3, #22
 800c494:	d402      	bmi.n	800c49c <_puts_r+0x24>
 800c496:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c498:	f000 fa49 	bl	800c92e <__retarget_lock_acquire_recursive>
 800c49c:	89a3      	ldrh	r3, [r4, #12]
 800c49e:	071b      	lsls	r3, r3, #28
 800c4a0:	d502      	bpl.n	800c4a8 <_puts_r+0x30>
 800c4a2:	6923      	ldr	r3, [r4, #16]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d11f      	bne.n	800c4e8 <_puts_r+0x70>
 800c4a8:	0021      	movs	r1, r4
 800c4aa:	0028      	movs	r0, r5
 800c4ac:	f000 f91c 	bl	800c6e8 <__swsetup_r>
 800c4b0:	2800      	cmp	r0, #0
 800c4b2:	d019      	beq.n	800c4e8 <_puts_r+0x70>
 800c4b4:	2501      	movs	r5, #1
 800c4b6:	426d      	negs	r5, r5
 800c4b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c4ba:	07db      	lsls	r3, r3, #31
 800c4bc:	d405      	bmi.n	800c4ca <_puts_r+0x52>
 800c4be:	89a3      	ldrh	r3, [r4, #12]
 800c4c0:	059b      	lsls	r3, r3, #22
 800c4c2:	d402      	bmi.n	800c4ca <_puts_r+0x52>
 800c4c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c4c6:	f000 fa33 	bl	800c930 <__retarget_lock_release_recursive>
 800c4ca:	0028      	movs	r0, r5
 800c4cc:	bd70      	pop	{r4, r5, r6, pc}
 800c4ce:	3601      	adds	r6, #1
 800c4d0:	60a3      	str	r3, [r4, #8]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	da04      	bge.n	800c4e0 <_puts_r+0x68>
 800c4d6:	69a2      	ldr	r2, [r4, #24]
 800c4d8:	429a      	cmp	r2, r3
 800c4da:	dc16      	bgt.n	800c50a <_puts_r+0x92>
 800c4dc:	290a      	cmp	r1, #10
 800c4de:	d014      	beq.n	800c50a <_puts_r+0x92>
 800c4e0:	6823      	ldr	r3, [r4, #0]
 800c4e2:	1c5a      	adds	r2, r3, #1
 800c4e4:	6022      	str	r2, [r4, #0]
 800c4e6:	7019      	strb	r1, [r3, #0]
 800c4e8:	68a3      	ldr	r3, [r4, #8]
 800c4ea:	7831      	ldrb	r1, [r6, #0]
 800c4ec:	3b01      	subs	r3, #1
 800c4ee:	2900      	cmp	r1, #0
 800c4f0:	d1ed      	bne.n	800c4ce <_puts_r+0x56>
 800c4f2:	60a3      	str	r3, [r4, #8]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	da0f      	bge.n	800c518 <_puts_r+0xa0>
 800c4f8:	0028      	movs	r0, r5
 800c4fa:	0022      	movs	r2, r4
 800c4fc:	310a      	adds	r1, #10
 800c4fe:	f000 f8b1 	bl	800c664 <__swbuf_r>
 800c502:	250a      	movs	r5, #10
 800c504:	3001      	adds	r0, #1
 800c506:	d1d7      	bne.n	800c4b8 <_puts_r+0x40>
 800c508:	e7d4      	b.n	800c4b4 <_puts_r+0x3c>
 800c50a:	0022      	movs	r2, r4
 800c50c:	0028      	movs	r0, r5
 800c50e:	f000 f8a9 	bl	800c664 <__swbuf_r>
 800c512:	3001      	adds	r0, #1
 800c514:	d1e8      	bne.n	800c4e8 <_puts_r+0x70>
 800c516:	e7cd      	b.n	800c4b4 <_puts_r+0x3c>
 800c518:	250a      	movs	r5, #10
 800c51a:	6823      	ldr	r3, [r4, #0]
 800c51c:	1c5a      	adds	r2, r3, #1
 800c51e:	6022      	str	r2, [r4, #0]
 800c520:	701d      	strb	r5, [r3, #0]
 800c522:	e7c9      	b.n	800c4b8 <_puts_r+0x40>

0800c524 <puts>:
 800c524:	b510      	push	{r4, lr}
 800c526:	4b03      	ldr	r3, [pc, #12]	; (800c534 <puts+0x10>)
 800c528:	0001      	movs	r1, r0
 800c52a:	6818      	ldr	r0, [r3, #0]
 800c52c:	f7ff ffa4 	bl	800c478 <_puts_r>
 800c530:	bd10      	pop	{r4, pc}
 800c532:	46c0      	nop			; (mov r8, r8)
 800c534:	200002ac 	.word	0x200002ac

0800c538 <siprintf>:
 800c538:	b40e      	push	{r1, r2, r3}
 800c53a:	b500      	push	{lr}
 800c53c:	490b      	ldr	r1, [pc, #44]	; (800c56c <siprintf+0x34>)
 800c53e:	b09c      	sub	sp, #112	; 0x70
 800c540:	ab1d      	add	r3, sp, #116	; 0x74
 800c542:	9002      	str	r0, [sp, #8]
 800c544:	9006      	str	r0, [sp, #24]
 800c546:	9107      	str	r1, [sp, #28]
 800c548:	9104      	str	r1, [sp, #16]
 800c54a:	4809      	ldr	r0, [pc, #36]	; (800c570 <siprintf+0x38>)
 800c54c:	4909      	ldr	r1, [pc, #36]	; (800c574 <siprintf+0x3c>)
 800c54e:	cb04      	ldmia	r3!, {r2}
 800c550:	9105      	str	r1, [sp, #20]
 800c552:	6800      	ldr	r0, [r0, #0]
 800c554:	a902      	add	r1, sp, #8
 800c556:	9301      	str	r3, [sp, #4]
 800c558:	f002 fa24 	bl	800e9a4 <_svfiprintf_r>
 800c55c:	2200      	movs	r2, #0
 800c55e:	9b02      	ldr	r3, [sp, #8]
 800c560:	701a      	strb	r2, [r3, #0]
 800c562:	b01c      	add	sp, #112	; 0x70
 800c564:	bc08      	pop	{r3}
 800c566:	b003      	add	sp, #12
 800c568:	4718      	bx	r3
 800c56a:	46c0      	nop			; (mov r8, r8)
 800c56c:	7fffffff 	.word	0x7fffffff
 800c570:	200002ac 	.word	0x200002ac
 800c574:	ffff0208 	.word	0xffff0208

0800c578 <siscanf>:
 800c578:	b40e      	push	{r1, r2, r3}
 800c57a:	b530      	push	{r4, r5, lr}
 800c57c:	2381      	movs	r3, #129	; 0x81
 800c57e:	b09c      	sub	sp, #112	; 0x70
 800c580:	466a      	mov	r2, sp
 800c582:	ac1f      	add	r4, sp, #124	; 0x7c
 800c584:	009b      	lsls	r3, r3, #2
 800c586:	cc20      	ldmia	r4!, {r5}
 800c588:	8293      	strh	r3, [r2, #20]
 800c58a:	9002      	str	r0, [sp, #8]
 800c58c:	9006      	str	r0, [sp, #24]
 800c58e:	f7f3 fdbb 	bl	8000108 <strlen>
 800c592:	4b0b      	ldr	r3, [pc, #44]	; (800c5c0 <siscanf+0x48>)
 800c594:	466a      	mov	r2, sp
 800c596:	930b      	str	r3, [sp, #44]	; 0x2c
 800c598:	2300      	movs	r3, #0
 800c59a:	9003      	str	r0, [sp, #12]
 800c59c:	9007      	str	r0, [sp, #28]
 800c59e:	4809      	ldr	r0, [pc, #36]	; (800c5c4 <siscanf+0x4c>)
 800c5a0:	930f      	str	r3, [sp, #60]	; 0x3c
 800c5a2:	9314      	str	r3, [sp, #80]	; 0x50
 800c5a4:	3b01      	subs	r3, #1
 800c5a6:	82d3      	strh	r3, [r2, #22]
 800c5a8:	a902      	add	r1, sp, #8
 800c5aa:	0023      	movs	r3, r4
 800c5ac:	002a      	movs	r2, r5
 800c5ae:	6800      	ldr	r0, [r0, #0]
 800c5b0:	9401      	str	r4, [sp, #4]
 800c5b2:	f002 fb53 	bl	800ec5c <__ssvfiscanf_r>
 800c5b6:	b01c      	add	sp, #112	; 0x70
 800c5b8:	bc30      	pop	{r4, r5}
 800c5ba:	bc08      	pop	{r3}
 800c5bc:	b003      	add	sp, #12
 800c5be:	4718      	bx	r3
 800c5c0:	0800c5f1 	.word	0x0800c5f1
 800c5c4:	200002ac 	.word	0x200002ac

0800c5c8 <__sread>:
 800c5c8:	b570      	push	{r4, r5, r6, lr}
 800c5ca:	000c      	movs	r4, r1
 800c5cc:	250e      	movs	r5, #14
 800c5ce:	5f49      	ldrsh	r1, [r1, r5]
 800c5d0:	f000 f948 	bl	800c864 <_read_r>
 800c5d4:	2800      	cmp	r0, #0
 800c5d6:	db03      	blt.n	800c5e0 <__sread+0x18>
 800c5d8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800c5da:	181b      	adds	r3, r3, r0
 800c5dc:	6563      	str	r3, [r4, #84]	; 0x54
 800c5de:	bd70      	pop	{r4, r5, r6, pc}
 800c5e0:	89a3      	ldrh	r3, [r4, #12]
 800c5e2:	4a02      	ldr	r2, [pc, #8]	; (800c5ec <__sread+0x24>)
 800c5e4:	4013      	ands	r3, r2
 800c5e6:	81a3      	strh	r3, [r4, #12]
 800c5e8:	e7f9      	b.n	800c5de <__sread+0x16>
 800c5ea:	46c0      	nop			; (mov r8, r8)
 800c5ec:	ffffefff 	.word	0xffffefff

0800c5f0 <__seofread>:
 800c5f0:	2000      	movs	r0, #0
 800c5f2:	4770      	bx	lr

0800c5f4 <__swrite>:
 800c5f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5f6:	001f      	movs	r7, r3
 800c5f8:	898b      	ldrh	r3, [r1, #12]
 800c5fa:	0005      	movs	r5, r0
 800c5fc:	000c      	movs	r4, r1
 800c5fe:	0016      	movs	r6, r2
 800c600:	05db      	lsls	r3, r3, #23
 800c602:	d505      	bpl.n	800c610 <__swrite+0x1c>
 800c604:	230e      	movs	r3, #14
 800c606:	5ec9      	ldrsh	r1, [r1, r3]
 800c608:	2200      	movs	r2, #0
 800c60a:	2302      	movs	r3, #2
 800c60c:	f000 f916 	bl	800c83c <_lseek_r>
 800c610:	89a3      	ldrh	r3, [r4, #12]
 800c612:	4a05      	ldr	r2, [pc, #20]	; (800c628 <__swrite+0x34>)
 800c614:	0028      	movs	r0, r5
 800c616:	4013      	ands	r3, r2
 800c618:	81a3      	strh	r3, [r4, #12]
 800c61a:	0032      	movs	r2, r6
 800c61c:	230e      	movs	r3, #14
 800c61e:	5ee1      	ldrsh	r1, [r4, r3]
 800c620:	003b      	movs	r3, r7
 800c622:	f000 f945 	bl	800c8b0 <_write_r>
 800c626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c628:	ffffefff 	.word	0xffffefff

0800c62c <__sseek>:
 800c62c:	b570      	push	{r4, r5, r6, lr}
 800c62e:	000c      	movs	r4, r1
 800c630:	250e      	movs	r5, #14
 800c632:	5f49      	ldrsh	r1, [r1, r5]
 800c634:	f000 f902 	bl	800c83c <_lseek_r>
 800c638:	89a3      	ldrh	r3, [r4, #12]
 800c63a:	1c42      	adds	r2, r0, #1
 800c63c:	d103      	bne.n	800c646 <__sseek+0x1a>
 800c63e:	4a05      	ldr	r2, [pc, #20]	; (800c654 <__sseek+0x28>)
 800c640:	4013      	ands	r3, r2
 800c642:	81a3      	strh	r3, [r4, #12]
 800c644:	bd70      	pop	{r4, r5, r6, pc}
 800c646:	2280      	movs	r2, #128	; 0x80
 800c648:	0152      	lsls	r2, r2, #5
 800c64a:	4313      	orrs	r3, r2
 800c64c:	81a3      	strh	r3, [r4, #12]
 800c64e:	6560      	str	r0, [r4, #84]	; 0x54
 800c650:	e7f8      	b.n	800c644 <__sseek+0x18>
 800c652:	46c0      	nop			; (mov r8, r8)
 800c654:	ffffefff 	.word	0xffffefff

0800c658 <__sclose>:
 800c658:	b510      	push	{r4, lr}
 800c65a:	230e      	movs	r3, #14
 800c65c:	5ec9      	ldrsh	r1, [r1, r3]
 800c65e:	f000 f8db 	bl	800c818 <_close_r>
 800c662:	bd10      	pop	{r4, pc}

0800c664 <__swbuf_r>:
 800c664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c666:	0006      	movs	r6, r0
 800c668:	000d      	movs	r5, r1
 800c66a:	0014      	movs	r4, r2
 800c66c:	2800      	cmp	r0, #0
 800c66e:	d004      	beq.n	800c67a <__swbuf_r+0x16>
 800c670:	6a03      	ldr	r3, [r0, #32]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d101      	bne.n	800c67a <__swbuf_r+0x16>
 800c676:	f7ff feab 	bl	800c3d0 <__sinit>
 800c67a:	69a3      	ldr	r3, [r4, #24]
 800c67c:	60a3      	str	r3, [r4, #8]
 800c67e:	89a3      	ldrh	r3, [r4, #12]
 800c680:	071b      	lsls	r3, r3, #28
 800c682:	d528      	bpl.n	800c6d6 <__swbuf_r+0x72>
 800c684:	6923      	ldr	r3, [r4, #16]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d025      	beq.n	800c6d6 <__swbuf_r+0x72>
 800c68a:	6923      	ldr	r3, [r4, #16]
 800c68c:	6820      	ldr	r0, [r4, #0]
 800c68e:	b2ef      	uxtb	r7, r5
 800c690:	1ac0      	subs	r0, r0, r3
 800c692:	6963      	ldr	r3, [r4, #20]
 800c694:	b2ed      	uxtb	r5, r5
 800c696:	4283      	cmp	r3, r0
 800c698:	dc05      	bgt.n	800c6a6 <__swbuf_r+0x42>
 800c69a:	0021      	movs	r1, r4
 800c69c:	0030      	movs	r0, r6
 800c69e:	f002 ff77 	bl	800f590 <_fflush_r>
 800c6a2:	2800      	cmp	r0, #0
 800c6a4:	d11d      	bne.n	800c6e2 <__swbuf_r+0x7e>
 800c6a6:	68a3      	ldr	r3, [r4, #8]
 800c6a8:	3001      	adds	r0, #1
 800c6aa:	3b01      	subs	r3, #1
 800c6ac:	60a3      	str	r3, [r4, #8]
 800c6ae:	6823      	ldr	r3, [r4, #0]
 800c6b0:	1c5a      	adds	r2, r3, #1
 800c6b2:	6022      	str	r2, [r4, #0]
 800c6b4:	701f      	strb	r7, [r3, #0]
 800c6b6:	6963      	ldr	r3, [r4, #20]
 800c6b8:	4283      	cmp	r3, r0
 800c6ba:	d004      	beq.n	800c6c6 <__swbuf_r+0x62>
 800c6bc:	89a3      	ldrh	r3, [r4, #12]
 800c6be:	07db      	lsls	r3, r3, #31
 800c6c0:	d507      	bpl.n	800c6d2 <__swbuf_r+0x6e>
 800c6c2:	2d0a      	cmp	r5, #10
 800c6c4:	d105      	bne.n	800c6d2 <__swbuf_r+0x6e>
 800c6c6:	0021      	movs	r1, r4
 800c6c8:	0030      	movs	r0, r6
 800c6ca:	f002 ff61 	bl	800f590 <_fflush_r>
 800c6ce:	2800      	cmp	r0, #0
 800c6d0:	d107      	bne.n	800c6e2 <__swbuf_r+0x7e>
 800c6d2:	0028      	movs	r0, r5
 800c6d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6d6:	0021      	movs	r1, r4
 800c6d8:	0030      	movs	r0, r6
 800c6da:	f000 f805 	bl	800c6e8 <__swsetup_r>
 800c6de:	2800      	cmp	r0, #0
 800c6e0:	d0d3      	beq.n	800c68a <__swbuf_r+0x26>
 800c6e2:	2501      	movs	r5, #1
 800c6e4:	426d      	negs	r5, r5
 800c6e6:	e7f4      	b.n	800c6d2 <__swbuf_r+0x6e>

0800c6e8 <__swsetup_r>:
 800c6e8:	4b30      	ldr	r3, [pc, #192]	; (800c7ac <__swsetup_r+0xc4>)
 800c6ea:	b570      	push	{r4, r5, r6, lr}
 800c6ec:	0005      	movs	r5, r0
 800c6ee:	6818      	ldr	r0, [r3, #0]
 800c6f0:	000c      	movs	r4, r1
 800c6f2:	2800      	cmp	r0, #0
 800c6f4:	d004      	beq.n	800c700 <__swsetup_r+0x18>
 800c6f6:	6a03      	ldr	r3, [r0, #32]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d101      	bne.n	800c700 <__swsetup_r+0x18>
 800c6fc:	f7ff fe68 	bl	800c3d0 <__sinit>
 800c700:	230c      	movs	r3, #12
 800c702:	5ee2      	ldrsh	r2, [r4, r3]
 800c704:	b293      	uxth	r3, r2
 800c706:	0711      	lsls	r1, r2, #28
 800c708:	d423      	bmi.n	800c752 <__swsetup_r+0x6a>
 800c70a:	06d9      	lsls	r1, r3, #27
 800c70c:	d407      	bmi.n	800c71e <__swsetup_r+0x36>
 800c70e:	2309      	movs	r3, #9
 800c710:	2001      	movs	r0, #1
 800c712:	602b      	str	r3, [r5, #0]
 800c714:	3337      	adds	r3, #55	; 0x37
 800c716:	4313      	orrs	r3, r2
 800c718:	81a3      	strh	r3, [r4, #12]
 800c71a:	4240      	negs	r0, r0
 800c71c:	bd70      	pop	{r4, r5, r6, pc}
 800c71e:	075b      	lsls	r3, r3, #29
 800c720:	d513      	bpl.n	800c74a <__swsetup_r+0x62>
 800c722:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c724:	2900      	cmp	r1, #0
 800c726:	d008      	beq.n	800c73a <__swsetup_r+0x52>
 800c728:	0023      	movs	r3, r4
 800c72a:	3344      	adds	r3, #68	; 0x44
 800c72c:	4299      	cmp	r1, r3
 800c72e:	d002      	beq.n	800c736 <__swsetup_r+0x4e>
 800c730:	0028      	movs	r0, r5
 800c732:	f000 ffc1 	bl	800d6b8 <_free_r>
 800c736:	2300      	movs	r3, #0
 800c738:	6363      	str	r3, [r4, #52]	; 0x34
 800c73a:	2224      	movs	r2, #36	; 0x24
 800c73c:	89a3      	ldrh	r3, [r4, #12]
 800c73e:	4393      	bics	r3, r2
 800c740:	81a3      	strh	r3, [r4, #12]
 800c742:	2300      	movs	r3, #0
 800c744:	6063      	str	r3, [r4, #4]
 800c746:	6923      	ldr	r3, [r4, #16]
 800c748:	6023      	str	r3, [r4, #0]
 800c74a:	2308      	movs	r3, #8
 800c74c:	89a2      	ldrh	r2, [r4, #12]
 800c74e:	4313      	orrs	r3, r2
 800c750:	81a3      	strh	r3, [r4, #12]
 800c752:	6923      	ldr	r3, [r4, #16]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d10b      	bne.n	800c770 <__swsetup_r+0x88>
 800c758:	21a0      	movs	r1, #160	; 0xa0
 800c75a:	2280      	movs	r2, #128	; 0x80
 800c75c:	89a3      	ldrh	r3, [r4, #12]
 800c75e:	0089      	lsls	r1, r1, #2
 800c760:	0092      	lsls	r2, r2, #2
 800c762:	400b      	ands	r3, r1
 800c764:	4293      	cmp	r3, r2
 800c766:	d003      	beq.n	800c770 <__swsetup_r+0x88>
 800c768:	0021      	movs	r1, r4
 800c76a:	0028      	movs	r0, r5
 800c76c:	f002 ff64 	bl	800f638 <__smakebuf_r>
 800c770:	220c      	movs	r2, #12
 800c772:	5ea3      	ldrsh	r3, [r4, r2]
 800c774:	2001      	movs	r0, #1
 800c776:	001a      	movs	r2, r3
 800c778:	b299      	uxth	r1, r3
 800c77a:	4002      	ands	r2, r0
 800c77c:	4203      	tst	r3, r0
 800c77e:	d00f      	beq.n	800c7a0 <__swsetup_r+0xb8>
 800c780:	2200      	movs	r2, #0
 800c782:	60a2      	str	r2, [r4, #8]
 800c784:	6962      	ldr	r2, [r4, #20]
 800c786:	4252      	negs	r2, r2
 800c788:	61a2      	str	r2, [r4, #24]
 800c78a:	2000      	movs	r0, #0
 800c78c:	6922      	ldr	r2, [r4, #16]
 800c78e:	4282      	cmp	r2, r0
 800c790:	d1c4      	bne.n	800c71c <__swsetup_r+0x34>
 800c792:	0609      	lsls	r1, r1, #24
 800c794:	d5c2      	bpl.n	800c71c <__swsetup_r+0x34>
 800c796:	2240      	movs	r2, #64	; 0x40
 800c798:	4313      	orrs	r3, r2
 800c79a:	81a3      	strh	r3, [r4, #12]
 800c79c:	3801      	subs	r0, #1
 800c79e:	e7bd      	b.n	800c71c <__swsetup_r+0x34>
 800c7a0:	0788      	lsls	r0, r1, #30
 800c7a2:	d400      	bmi.n	800c7a6 <__swsetup_r+0xbe>
 800c7a4:	6962      	ldr	r2, [r4, #20]
 800c7a6:	60a2      	str	r2, [r4, #8]
 800c7a8:	e7ef      	b.n	800c78a <__swsetup_r+0xa2>
 800c7aa:	46c0      	nop			; (mov r8, r8)
 800c7ac:	200002ac 	.word	0x200002ac

0800c7b0 <memset>:
 800c7b0:	0003      	movs	r3, r0
 800c7b2:	1882      	adds	r2, r0, r2
 800c7b4:	4293      	cmp	r3, r2
 800c7b6:	d100      	bne.n	800c7ba <memset+0xa>
 800c7b8:	4770      	bx	lr
 800c7ba:	7019      	strb	r1, [r3, #0]
 800c7bc:	3301      	adds	r3, #1
 800c7be:	e7f9      	b.n	800c7b4 <memset+0x4>

0800c7c0 <strncmp>:
 800c7c0:	b530      	push	{r4, r5, lr}
 800c7c2:	0005      	movs	r5, r0
 800c7c4:	1e10      	subs	r0, r2, #0
 800c7c6:	d00b      	beq.n	800c7e0 <strncmp+0x20>
 800c7c8:	2400      	movs	r4, #0
 800c7ca:	3a01      	subs	r2, #1
 800c7cc:	5d2b      	ldrb	r3, [r5, r4]
 800c7ce:	5d08      	ldrb	r0, [r1, r4]
 800c7d0:	4283      	cmp	r3, r0
 800c7d2:	d104      	bne.n	800c7de <strncmp+0x1e>
 800c7d4:	42a2      	cmp	r2, r4
 800c7d6:	d002      	beq.n	800c7de <strncmp+0x1e>
 800c7d8:	3401      	adds	r4, #1
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d1f6      	bne.n	800c7cc <strncmp+0xc>
 800c7de:	1a18      	subs	r0, r3, r0
 800c7e0:	bd30      	pop	{r4, r5, pc}

0800c7e2 <strstr>:
 800c7e2:	780a      	ldrb	r2, [r1, #0]
 800c7e4:	b530      	push	{r4, r5, lr}
 800c7e6:	2a00      	cmp	r2, #0
 800c7e8:	d10c      	bne.n	800c804 <strstr+0x22>
 800c7ea:	bd30      	pop	{r4, r5, pc}
 800c7ec:	429a      	cmp	r2, r3
 800c7ee:	d108      	bne.n	800c802 <strstr+0x20>
 800c7f0:	2301      	movs	r3, #1
 800c7f2:	5ccc      	ldrb	r4, [r1, r3]
 800c7f4:	2c00      	cmp	r4, #0
 800c7f6:	d0f8      	beq.n	800c7ea <strstr+0x8>
 800c7f8:	5cc5      	ldrb	r5, [r0, r3]
 800c7fa:	42a5      	cmp	r5, r4
 800c7fc:	d101      	bne.n	800c802 <strstr+0x20>
 800c7fe:	3301      	adds	r3, #1
 800c800:	e7f7      	b.n	800c7f2 <strstr+0x10>
 800c802:	3001      	adds	r0, #1
 800c804:	7803      	ldrb	r3, [r0, #0]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d1f0      	bne.n	800c7ec <strstr+0xa>
 800c80a:	0018      	movs	r0, r3
 800c80c:	e7ed      	b.n	800c7ea <strstr+0x8>
	...

0800c810 <_localeconv_r>:
 800c810:	4800      	ldr	r0, [pc, #0]	; (800c814 <_localeconv_r+0x4>)
 800c812:	4770      	bx	lr
 800c814:	200001e4 	.word	0x200001e4

0800c818 <_close_r>:
 800c818:	2300      	movs	r3, #0
 800c81a:	b570      	push	{r4, r5, r6, lr}
 800c81c:	4d06      	ldr	r5, [pc, #24]	; (800c838 <_close_r+0x20>)
 800c81e:	0004      	movs	r4, r0
 800c820:	0008      	movs	r0, r1
 800c822:	602b      	str	r3, [r5, #0]
 800c824:	f7f9 f99d 	bl	8005b62 <_close>
 800c828:	1c43      	adds	r3, r0, #1
 800c82a:	d103      	bne.n	800c834 <_close_r+0x1c>
 800c82c:	682b      	ldr	r3, [r5, #0]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d000      	beq.n	800c834 <_close_r+0x1c>
 800c832:	6023      	str	r3, [r4, #0]
 800c834:	bd70      	pop	{r4, r5, r6, pc}
 800c836:	46c0      	nop			; (mov r8, r8)
 800c838:	20000b58 	.word	0x20000b58

0800c83c <_lseek_r>:
 800c83c:	b570      	push	{r4, r5, r6, lr}
 800c83e:	0004      	movs	r4, r0
 800c840:	0008      	movs	r0, r1
 800c842:	0011      	movs	r1, r2
 800c844:	001a      	movs	r2, r3
 800c846:	2300      	movs	r3, #0
 800c848:	4d05      	ldr	r5, [pc, #20]	; (800c860 <_lseek_r+0x24>)
 800c84a:	602b      	str	r3, [r5, #0]
 800c84c:	f7f9 f9aa 	bl	8005ba4 <_lseek>
 800c850:	1c43      	adds	r3, r0, #1
 800c852:	d103      	bne.n	800c85c <_lseek_r+0x20>
 800c854:	682b      	ldr	r3, [r5, #0]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d000      	beq.n	800c85c <_lseek_r+0x20>
 800c85a:	6023      	str	r3, [r4, #0]
 800c85c:	bd70      	pop	{r4, r5, r6, pc}
 800c85e:	46c0      	nop			; (mov r8, r8)
 800c860:	20000b58 	.word	0x20000b58

0800c864 <_read_r>:
 800c864:	b570      	push	{r4, r5, r6, lr}
 800c866:	0004      	movs	r4, r0
 800c868:	0008      	movs	r0, r1
 800c86a:	0011      	movs	r1, r2
 800c86c:	001a      	movs	r2, r3
 800c86e:	2300      	movs	r3, #0
 800c870:	4d05      	ldr	r5, [pc, #20]	; (800c888 <_read_r+0x24>)
 800c872:	602b      	str	r3, [r5, #0]
 800c874:	f7f9 f93c 	bl	8005af0 <_read>
 800c878:	1c43      	adds	r3, r0, #1
 800c87a:	d103      	bne.n	800c884 <_read_r+0x20>
 800c87c:	682b      	ldr	r3, [r5, #0]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d000      	beq.n	800c884 <_read_r+0x20>
 800c882:	6023      	str	r3, [r4, #0]
 800c884:	bd70      	pop	{r4, r5, r6, pc}
 800c886:	46c0      	nop			; (mov r8, r8)
 800c888:	20000b58 	.word	0x20000b58

0800c88c <_sbrk_r>:
 800c88c:	2300      	movs	r3, #0
 800c88e:	b570      	push	{r4, r5, r6, lr}
 800c890:	4d06      	ldr	r5, [pc, #24]	; (800c8ac <_sbrk_r+0x20>)
 800c892:	0004      	movs	r4, r0
 800c894:	0008      	movs	r0, r1
 800c896:	602b      	str	r3, [r5, #0]
 800c898:	f7f9 f990 	bl	8005bbc <_sbrk>
 800c89c:	1c43      	adds	r3, r0, #1
 800c89e:	d103      	bne.n	800c8a8 <_sbrk_r+0x1c>
 800c8a0:	682b      	ldr	r3, [r5, #0]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d000      	beq.n	800c8a8 <_sbrk_r+0x1c>
 800c8a6:	6023      	str	r3, [r4, #0]
 800c8a8:	bd70      	pop	{r4, r5, r6, pc}
 800c8aa:	46c0      	nop			; (mov r8, r8)
 800c8ac:	20000b58 	.word	0x20000b58

0800c8b0 <_write_r>:
 800c8b0:	b570      	push	{r4, r5, r6, lr}
 800c8b2:	0004      	movs	r4, r0
 800c8b4:	0008      	movs	r0, r1
 800c8b6:	0011      	movs	r1, r2
 800c8b8:	001a      	movs	r2, r3
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	4d05      	ldr	r5, [pc, #20]	; (800c8d4 <_write_r+0x24>)
 800c8be:	602b      	str	r3, [r5, #0]
 800c8c0:	f7f9 f933 	bl	8005b2a <_write>
 800c8c4:	1c43      	adds	r3, r0, #1
 800c8c6:	d103      	bne.n	800c8d0 <_write_r+0x20>
 800c8c8:	682b      	ldr	r3, [r5, #0]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d000      	beq.n	800c8d0 <_write_r+0x20>
 800c8ce:	6023      	str	r3, [r4, #0]
 800c8d0:	bd70      	pop	{r4, r5, r6, pc}
 800c8d2:	46c0      	nop			; (mov r8, r8)
 800c8d4:	20000b58 	.word	0x20000b58

0800c8d8 <__errno>:
 800c8d8:	4b01      	ldr	r3, [pc, #4]	; (800c8e0 <__errno+0x8>)
 800c8da:	6818      	ldr	r0, [r3, #0]
 800c8dc:	4770      	bx	lr
 800c8de:	46c0      	nop			; (mov r8, r8)
 800c8e0:	200002ac 	.word	0x200002ac

0800c8e4 <__libc_init_array>:
 800c8e4:	b570      	push	{r4, r5, r6, lr}
 800c8e6:	2600      	movs	r6, #0
 800c8e8:	4c0c      	ldr	r4, [pc, #48]	; (800c91c <__libc_init_array+0x38>)
 800c8ea:	4d0d      	ldr	r5, [pc, #52]	; (800c920 <__libc_init_array+0x3c>)
 800c8ec:	1b64      	subs	r4, r4, r5
 800c8ee:	10a4      	asrs	r4, r4, #2
 800c8f0:	42a6      	cmp	r6, r4
 800c8f2:	d109      	bne.n	800c908 <__libc_init_array+0x24>
 800c8f4:	2600      	movs	r6, #0
 800c8f6:	f003 f88d 	bl	800fa14 <_init>
 800c8fa:	4c0a      	ldr	r4, [pc, #40]	; (800c924 <__libc_init_array+0x40>)
 800c8fc:	4d0a      	ldr	r5, [pc, #40]	; (800c928 <__libc_init_array+0x44>)
 800c8fe:	1b64      	subs	r4, r4, r5
 800c900:	10a4      	asrs	r4, r4, #2
 800c902:	42a6      	cmp	r6, r4
 800c904:	d105      	bne.n	800c912 <__libc_init_array+0x2e>
 800c906:	bd70      	pop	{r4, r5, r6, pc}
 800c908:	00b3      	lsls	r3, r6, #2
 800c90a:	58eb      	ldr	r3, [r5, r3]
 800c90c:	4798      	blx	r3
 800c90e:	3601      	adds	r6, #1
 800c910:	e7ee      	b.n	800c8f0 <__libc_init_array+0xc>
 800c912:	00b3      	lsls	r3, r6, #2
 800c914:	58eb      	ldr	r3, [r5, r3]
 800c916:	4798      	blx	r3
 800c918:	3601      	adds	r6, #1
 800c91a:	e7f2      	b.n	800c902 <__libc_init_array+0x1e>
 800c91c:	08010268 	.word	0x08010268
 800c920:	08010268 	.word	0x08010268
 800c924:	0801026c 	.word	0x0801026c
 800c928:	08010268 	.word	0x08010268

0800c92c <__retarget_lock_init_recursive>:
 800c92c:	4770      	bx	lr

0800c92e <__retarget_lock_acquire_recursive>:
 800c92e:	4770      	bx	lr

0800c930 <__retarget_lock_release_recursive>:
 800c930:	4770      	bx	lr

0800c932 <memchr>:
 800c932:	b2c9      	uxtb	r1, r1
 800c934:	1882      	adds	r2, r0, r2
 800c936:	4290      	cmp	r0, r2
 800c938:	d101      	bne.n	800c93e <memchr+0xc>
 800c93a:	2000      	movs	r0, #0
 800c93c:	4770      	bx	lr
 800c93e:	7803      	ldrb	r3, [r0, #0]
 800c940:	428b      	cmp	r3, r1
 800c942:	d0fb      	beq.n	800c93c <memchr+0xa>
 800c944:	3001      	adds	r0, #1
 800c946:	e7f6      	b.n	800c936 <memchr+0x4>

0800c948 <memcpy>:
 800c948:	2300      	movs	r3, #0
 800c94a:	b510      	push	{r4, lr}
 800c94c:	429a      	cmp	r2, r3
 800c94e:	d100      	bne.n	800c952 <memcpy+0xa>
 800c950:	bd10      	pop	{r4, pc}
 800c952:	5ccc      	ldrb	r4, [r1, r3]
 800c954:	54c4      	strb	r4, [r0, r3]
 800c956:	3301      	adds	r3, #1
 800c958:	e7f8      	b.n	800c94c <memcpy+0x4>
	...

0800c95c <nan>:
 800c95c:	2000      	movs	r0, #0
 800c95e:	4901      	ldr	r1, [pc, #4]	; (800c964 <nan+0x8>)
 800c960:	4770      	bx	lr
 800c962:	46c0      	nop			; (mov r8, r8)
 800c964:	7ff80000 	.word	0x7ff80000

0800c968 <nanf>:
 800c968:	4800      	ldr	r0, [pc, #0]	; (800c96c <nanf+0x4>)
 800c96a:	4770      	bx	lr
 800c96c:	7fc00000 	.word	0x7fc00000

0800c970 <abort>:
 800c970:	2006      	movs	r0, #6
 800c972:	b510      	push	{r4, lr}
 800c974:	f002 ff56 	bl	800f824 <raise>
 800c978:	2001      	movs	r0, #1
 800c97a:	f7f9 f8ad 	bl	8005ad8 <_exit>

0800c97e <quorem>:
 800c97e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c980:	6902      	ldr	r2, [r0, #16]
 800c982:	690b      	ldr	r3, [r1, #16]
 800c984:	b089      	sub	sp, #36	; 0x24
 800c986:	0007      	movs	r7, r0
 800c988:	9104      	str	r1, [sp, #16]
 800c98a:	2000      	movs	r0, #0
 800c98c:	429a      	cmp	r2, r3
 800c98e:	db69      	blt.n	800ca64 <quorem+0xe6>
 800c990:	3b01      	subs	r3, #1
 800c992:	009c      	lsls	r4, r3, #2
 800c994:	9301      	str	r3, [sp, #4]
 800c996:	000b      	movs	r3, r1
 800c998:	3314      	adds	r3, #20
 800c99a:	9306      	str	r3, [sp, #24]
 800c99c:	191b      	adds	r3, r3, r4
 800c99e:	9305      	str	r3, [sp, #20]
 800c9a0:	003b      	movs	r3, r7
 800c9a2:	3314      	adds	r3, #20
 800c9a4:	9303      	str	r3, [sp, #12]
 800c9a6:	191c      	adds	r4, r3, r4
 800c9a8:	9b05      	ldr	r3, [sp, #20]
 800c9aa:	6826      	ldr	r6, [r4, #0]
 800c9ac:	681d      	ldr	r5, [r3, #0]
 800c9ae:	0030      	movs	r0, r6
 800c9b0:	3501      	adds	r5, #1
 800c9b2:	0029      	movs	r1, r5
 800c9b4:	f7f3 fbc4 	bl	8000140 <__udivsi3>
 800c9b8:	9002      	str	r0, [sp, #8]
 800c9ba:	42ae      	cmp	r6, r5
 800c9bc:	d329      	bcc.n	800ca12 <quorem+0x94>
 800c9be:	9b06      	ldr	r3, [sp, #24]
 800c9c0:	2600      	movs	r6, #0
 800c9c2:	469c      	mov	ip, r3
 800c9c4:	9d03      	ldr	r5, [sp, #12]
 800c9c6:	9606      	str	r6, [sp, #24]
 800c9c8:	4662      	mov	r2, ip
 800c9ca:	ca08      	ldmia	r2!, {r3}
 800c9cc:	6828      	ldr	r0, [r5, #0]
 800c9ce:	4694      	mov	ip, r2
 800c9d0:	9a02      	ldr	r2, [sp, #8]
 800c9d2:	b299      	uxth	r1, r3
 800c9d4:	4351      	muls	r1, r2
 800c9d6:	0c1b      	lsrs	r3, r3, #16
 800c9d8:	4353      	muls	r3, r2
 800c9da:	1989      	adds	r1, r1, r6
 800c9dc:	0c0a      	lsrs	r2, r1, #16
 800c9de:	189b      	adds	r3, r3, r2
 800c9e0:	9307      	str	r3, [sp, #28]
 800c9e2:	0c1e      	lsrs	r6, r3, #16
 800c9e4:	9b06      	ldr	r3, [sp, #24]
 800c9e6:	b282      	uxth	r2, r0
 800c9e8:	18d2      	adds	r2, r2, r3
 800c9ea:	466b      	mov	r3, sp
 800c9ec:	b289      	uxth	r1, r1
 800c9ee:	8b9b      	ldrh	r3, [r3, #28]
 800c9f0:	1a52      	subs	r2, r2, r1
 800c9f2:	0c01      	lsrs	r1, r0, #16
 800c9f4:	1ac9      	subs	r1, r1, r3
 800c9f6:	1413      	asrs	r3, r2, #16
 800c9f8:	18cb      	adds	r3, r1, r3
 800c9fa:	1419      	asrs	r1, r3, #16
 800c9fc:	b292      	uxth	r2, r2
 800c9fe:	041b      	lsls	r3, r3, #16
 800ca00:	4313      	orrs	r3, r2
 800ca02:	c508      	stmia	r5!, {r3}
 800ca04:	9b05      	ldr	r3, [sp, #20]
 800ca06:	9106      	str	r1, [sp, #24]
 800ca08:	4563      	cmp	r3, ip
 800ca0a:	d2dd      	bcs.n	800c9c8 <quorem+0x4a>
 800ca0c:	6823      	ldr	r3, [r4, #0]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d030      	beq.n	800ca74 <quorem+0xf6>
 800ca12:	0038      	movs	r0, r7
 800ca14:	9904      	ldr	r1, [sp, #16]
 800ca16:	f001 fcd9 	bl	800e3cc <__mcmp>
 800ca1a:	2800      	cmp	r0, #0
 800ca1c:	db21      	blt.n	800ca62 <quorem+0xe4>
 800ca1e:	0038      	movs	r0, r7
 800ca20:	2600      	movs	r6, #0
 800ca22:	9b02      	ldr	r3, [sp, #8]
 800ca24:	9c04      	ldr	r4, [sp, #16]
 800ca26:	3301      	adds	r3, #1
 800ca28:	9302      	str	r3, [sp, #8]
 800ca2a:	3014      	adds	r0, #20
 800ca2c:	3414      	adds	r4, #20
 800ca2e:	6803      	ldr	r3, [r0, #0]
 800ca30:	cc02      	ldmia	r4!, {r1}
 800ca32:	b29d      	uxth	r5, r3
 800ca34:	19ad      	adds	r5, r5, r6
 800ca36:	b28a      	uxth	r2, r1
 800ca38:	1aaa      	subs	r2, r5, r2
 800ca3a:	0c09      	lsrs	r1, r1, #16
 800ca3c:	0c1b      	lsrs	r3, r3, #16
 800ca3e:	1a5b      	subs	r3, r3, r1
 800ca40:	1411      	asrs	r1, r2, #16
 800ca42:	185b      	adds	r3, r3, r1
 800ca44:	141e      	asrs	r6, r3, #16
 800ca46:	b292      	uxth	r2, r2
 800ca48:	041b      	lsls	r3, r3, #16
 800ca4a:	4313      	orrs	r3, r2
 800ca4c:	c008      	stmia	r0!, {r3}
 800ca4e:	9b05      	ldr	r3, [sp, #20]
 800ca50:	42a3      	cmp	r3, r4
 800ca52:	d2ec      	bcs.n	800ca2e <quorem+0xb0>
 800ca54:	9b01      	ldr	r3, [sp, #4]
 800ca56:	9a03      	ldr	r2, [sp, #12]
 800ca58:	009b      	lsls	r3, r3, #2
 800ca5a:	18d3      	adds	r3, r2, r3
 800ca5c:	681a      	ldr	r2, [r3, #0]
 800ca5e:	2a00      	cmp	r2, #0
 800ca60:	d015      	beq.n	800ca8e <quorem+0x110>
 800ca62:	9802      	ldr	r0, [sp, #8]
 800ca64:	b009      	add	sp, #36	; 0x24
 800ca66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca68:	6823      	ldr	r3, [r4, #0]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d106      	bne.n	800ca7c <quorem+0xfe>
 800ca6e:	9b01      	ldr	r3, [sp, #4]
 800ca70:	3b01      	subs	r3, #1
 800ca72:	9301      	str	r3, [sp, #4]
 800ca74:	9b03      	ldr	r3, [sp, #12]
 800ca76:	3c04      	subs	r4, #4
 800ca78:	42a3      	cmp	r3, r4
 800ca7a:	d3f5      	bcc.n	800ca68 <quorem+0xea>
 800ca7c:	9b01      	ldr	r3, [sp, #4]
 800ca7e:	613b      	str	r3, [r7, #16]
 800ca80:	e7c7      	b.n	800ca12 <quorem+0x94>
 800ca82:	681a      	ldr	r2, [r3, #0]
 800ca84:	2a00      	cmp	r2, #0
 800ca86:	d106      	bne.n	800ca96 <quorem+0x118>
 800ca88:	9a01      	ldr	r2, [sp, #4]
 800ca8a:	3a01      	subs	r2, #1
 800ca8c:	9201      	str	r2, [sp, #4]
 800ca8e:	9a03      	ldr	r2, [sp, #12]
 800ca90:	3b04      	subs	r3, #4
 800ca92:	429a      	cmp	r2, r3
 800ca94:	d3f5      	bcc.n	800ca82 <quorem+0x104>
 800ca96:	9b01      	ldr	r3, [sp, #4]
 800ca98:	613b      	str	r3, [r7, #16]
 800ca9a:	e7e2      	b.n	800ca62 <quorem+0xe4>

0800ca9c <_dtoa_r>:
 800ca9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca9e:	0014      	movs	r4, r2
 800caa0:	001d      	movs	r5, r3
 800caa2:	69c6      	ldr	r6, [r0, #28]
 800caa4:	b09d      	sub	sp, #116	; 0x74
 800caa6:	9408      	str	r4, [sp, #32]
 800caa8:	9509      	str	r5, [sp, #36]	; 0x24
 800caaa:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800caac:	9004      	str	r0, [sp, #16]
 800caae:	2e00      	cmp	r6, #0
 800cab0:	d10f      	bne.n	800cad2 <_dtoa_r+0x36>
 800cab2:	2010      	movs	r0, #16
 800cab4:	f7fd fe4a 	bl	800a74c <malloc>
 800cab8:	9b04      	ldr	r3, [sp, #16]
 800caba:	1e02      	subs	r2, r0, #0
 800cabc:	61d8      	str	r0, [r3, #28]
 800cabe:	d104      	bne.n	800caca <_dtoa_r+0x2e>
 800cac0:	21ef      	movs	r1, #239	; 0xef
 800cac2:	4bc6      	ldr	r3, [pc, #792]	; (800cddc <_dtoa_r+0x340>)
 800cac4:	48c6      	ldr	r0, [pc, #792]	; (800cde0 <_dtoa_r+0x344>)
 800cac6:	f7fd fe23 	bl	800a710 <__assert_func>
 800caca:	6046      	str	r6, [r0, #4]
 800cacc:	6086      	str	r6, [r0, #8]
 800cace:	6006      	str	r6, [r0, #0]
 800cad0:	60c6      	str	r6, [r0, #12]
 800cad2:	9b04      	ldr	r3, [sp, #16]
 800cad4:	69db      	ldr	r3, [r3, #28]
 800cad6:	6819      	ldr	r1, [r3, #0]
 800cad8:	2900      	cmp	r1, #0
 800cada:	d00b      	beq.n	800caf4 <_dtoa_r+0x58>
 800cadc:	685a      	ldr	r2, [r3, #4]
 800cade:	2301      	movs	r3, #1
 800cae0:	4093      	lsls	r3, r2
 800cae2:	604a      	str	r2, [r1, #4]
 800cae4:	608b      	str	r3, [r1, #8]
 800cae6:	9804      	ldr	r0, [sp, #16]
 800cae8:	f001 f9e2 	bl	800deb0 <_Bfree>
 800caec:	2200      	movs	r2, #0
 800caee:	9b04      	ldr	r3, [sp, #16]
 800caf0:	69db      	ldr	r3, [r3, #28]
 800caf2:	601a      	str	r2, [r3, #0]
 800caf4:	2d00      	cmp	r5, #0
 800caf6:	da1e      	bge.n	800cb36 <_dtoa_r+0x9a>
 800caf8:	2301      	movs	r3, #1
 800cafa:	603b      	str	r3, [r7, #0]
 800cafc:	006b      	lsls	r3, r5, #1
 800cafe:	085b      	lsrs	r3, r3, #1
 800cb00:	9309      	str	r3, [sp, #36]	; 0x24
 800cb02:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800cb04:	4bb7      	ldr	r3, [pc, #732]	; (800cde4 <_dtoa_r+0x348>)
 800cb06:	4ab7      	ldr	r2, [pc, #732]	; (800cde4 <_dtoa_r+0x348>)
 800cb08:	403b      	ands	r3, r7
 800cb0a:	4293      	cmp	r3, r2
 800cb0c:	d116      	bne.n	800cb3c <_dtoa_r+0xa0>
 800cb0e:	4bb6      	ldr	r3, [pc, #728]	; (800cde8 <_dtoa_r+0x34c>)
 800cb10:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800cb12:	6013      	str	r3, [r2, #0]
 800cb14:	033b      	lsls	r3, r7, #12
 800cb16:	0b1b      	lsrs	r3, r3, #12
 800cb18:	4323      	orrs	r3, r4
 800cb1a:	d101      	bne.n	800cb20 <_dtoa_r+0x84>
 800cb1c:	f000 fdb5 	bl	800d68a <_dtoa_r+0xbee>
 800cb20:	4bb2      	ldr	r3, [pc, #712]	; (800cdec <_dtoa_r+0x350>)
 800cb22:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800cb24:	9306      	str	r3, [sp, #24]
 800cb26:	2a00      	cmp	r2, #0
 800cb28:	d002      	beq.n	800cb30 <_dtoa_r+0x94>
 800cb2a:	4bb1      	ldr	r3, [pc, #708]	; (800cdf0 <_dtoa_r+0x354>)
 800cb2c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800cb2e:	6013      	str	r3, [r2, #0]
 800cb30:	9806      	ldr	r0, [sp, #24]
 800cb32:	b01d      	add	sp, #116	; 0x74
 800cb34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb36:	2300      	movs	r3, #0
 800cb38:	603b      	str	r3, [r7, #0]
 800cb3a:	e7e2      	b.n	800cb02 <_dtoa_r+0x66>
 800cb3c:	9a08      	ldr	r2, [sp, #32]
 800cb3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb40:	9210      	str	r2, [sp, #64]	; 0x40
 800cb42:	9311      	str	r3, [sp, #68]	; 0x44
 800cb44:	9810      	ldr	r0, [sp, #64]	; 0x40
 800cb46:	9911      	ldr	r1, [sp, #68]	; 0x44
 800cb48:	2200      	movs	r2, #0
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	f7f3 fc7e 	bl	800044c <__aeabi_dcmpeq>
 800cb50:	1e06      	subs	r6, r0, #0
 800cb52:	d009      	beq.n	800cb68 <_dtoa_r+0xcc>
 800cb54:	2301      	movs	r3, #1
 800cb56:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800cb58:	6013      	str	r3, [r2, #0]
 800cb5a:	4ba6      	ldr	r3, [pc, #664]	; (800cdf4 <_dtoa_r+0x358>)
 800cb5c:	9306      	str	r3, [sp, #24]
 800cb5e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d0e5      	beq.n	800cb30 <_dtoa_r+0x94>
 800cb64:	4ba4      	ldr	r3, [pc, #656]	; (800cdf8 <_dtoa_r+0x35c>)
 800cb66:	e7e1      	b.n	800cb2c <_dtoa_r+0x90>
 800cb68:	ab1a      	add	r3, sp, #104	; 0x68
 800cb6a:	9301      	str	r3, [sp, #4]
 800cb6c:	ab1b      	add	r3, sp, #108	; 0x6c
 800cb6e:	9300      	str	r3, [sp, #0]
 800cb70:	9804      	ldr	r0, [sp, #16]
 800cb72:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cb74:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cb76:	f001 fd45 	bl	800e604 <__d2b>
 800cb7a:	007a      	lsls	r2, r7, #1
 800cb7c:	9005      	str	r0, [sp, #20]
 800cb7e:	0d52      	lsrs	r2, r2, #21
 800cb80:	d100      	bne.n	800cb84 <_dtoa_r+0xe8>
 800cb82:	e07b      	b.n	800cc7c <_dtoa_r+0x1e0>
 800cb84:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cb86:	9617      	str	r6, [sp, #92]	; 0x5c
 800cb88:	0319      	lsls	r1, r3, #12
 800cb8a:	4b9c      	ldr	r3, [pc, #624]	; (800cdfc <_dtoa_r+0x360>)
 800cb8c:	0b09      	lsrs	r1, r1, #12
 800cb8e:	430b      	orrs	r3, r1
 800cb90:	499b      	ldr	r1, [pc, #620]	; (800ce00 <_dtoa_r+0x364>)
 800cb92:	1857      	adds	r7, r2, r1
 800cb94:	9810      	ldr	r0, [sp, #64]	; 0x40
 800cb96:	9911      	ldr	r1, [sp, #68]	; 0x44
 800cb98:	0019      	movs	r1, r3
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	4b99      	ldr	r3, [pc, #612]	; (800ce04 <_dtoa_r+0x368>)
 800cb9e:	f7f5 fdd5 	bl	800274c <__aeabi_dsub>
 800cba2:	4a99      	ldr	r2, [pc, #612]	; (800ce08 <_dtoa_r+0x36c>)
 800cba4:	4b99      	ldr	r3, [pc, #612]	; (800ce0c <_dtoa_r+0x370>)
 800cba6:	f7f5 fb0f 	bl	80021c8 <__aeabi_dmul>
 800cbaa:	4a99      	ldr	r2, [pc, #612]	; (800ce10 <_dtoa_r+0x374>)
 800cbac:	4b99      	ldr	r3, [pc, #612]	; (800ce14 <_dtoa_r+0x378>)
 800cbae:	f7f4 fbb1 	bl	8001314 <__aeabi_dadd>
 800cbb2:	0004      	movs	r4, r0
 800cbb4:	0038      	movs	r0, r7
 800cbb6:	000d      	movs	r5, r1
 800cbb8:	f7f6 f99e 	bl	8002ef8 <__aeabi_i2d>
 800cbbc:	4a96      	ldr	r2, [pc, #600]	; (800ce18 <_dtoa_r+0x37c>)
 800cbbe:	4b97      	ldr	r3, [pc, #604]	; (800ce1c <_dtoa_r+0x380>)
 800cbc0:	f7f5 fb02 	bl	80021c8 <__aeabi_dmul>
 800cbc4:	0002      	movs	r2, r0
 800cbc6:	000b      	movs	r3, r1
 800cbc8:	0020      	movs	r0, r4
 800cbca:	0029      	movs	r1, r5
 800cbcc:	f7f4 fba2 	bl	8001314 <__aeabi_dadd>
 800cbd0:	0004      	movs	r4, r0
 800cbd2:	000d      	movs	r5, r1
 800cbd4:	f7f6 f95a 	bl	8002e8c <__aeabi_d2iz>
 800cbd8:	2200      	movs	r2, #0
 800cbda:	9003      	str	r0, [sp, #12]
 800cbdc:	2300      	movs	r3, #0
 800cbde:	0020      	movs	r0, r4
 800cbe0:	0029      	movs	r1, r5
 800cbe2:	f7f3 fc39 	bl	8000458 <__aeabi_dcmplt>
 800cbe6:	2800      	cmp	r0, #0
 800cbe8:	d00b      	beq.n	800cc02 <_dtoa_r+0x166>
 800cbea:	9803      	ldr	r0, [sp, #12]
 800cbec:	f7f6 f984 	bl	8002ef8 <__aeabi_i2d>
 800cbf0:	002b      	movs	r3, r5
 800cbf2:	0022      	movs	r2, r4
 800cbf4:	f7f3 fc2a 	bl	800044c <__aeabi_dcmpeq>
 800cbf8:	4243      	negs	r3, r0
 800cbfa:	4158      	adcs	r0, r3
 800cbfc:	9b03      	ldr	r3, [sp, #12]
 800cbfe:	1a1b      	subs	r3, r3, r0
 800cc00:	9303      	str	r3, [sp, #12]
 800cc02:	2301      	movs	r3, #1
 800cc04:	9316      	str	r3, [sp, #88]	; 0x58
 800cc06:	9b03      	ldr	r3, [sp, #12]
 800cc08:	2b16      	cmp	r3, #22
 800cc0a:	d810      	bhi.n	800cc2e <_dtoa_r+0x192>
 800cc0c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800cc0e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800cc10:	9a03      	ldr	r2, [sp, #12]
 800cc12:	4b83      	ldr	r3, [pc, #524]	; (800ce20 <_dtoa_r+0x384>)
 800cc14:	00d2      	lsls	r2, r2, #3
 800cc16:	189b      	adds	r3, r3, r2
 800cc18:	681a      	ldr	r2, [r3, #0]
 800cc1a:	685b      	ldr	r3, [r3, #4]
 800cc1c:	f7f3 fc1c 	bl	8000458 <__aeabi_dcmplt>
 800cc20:	2800      	cmp	r0, #0
 800cc22:	d047      	beq.n	800ccb4 <_dtoa_r+0x218>
 800cc24:	9b03      	ldr	r3, [sp, #12]
 800cc26:	3b01      	subs	r3, #1
 800cc28:	9303      	str	r3, [sp, #12]
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	9316      	str	r3, [sp, #88]	; 0x58
 800cc2e:	2200      	movs	r2, #0
 800cc30:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800cc32:	920a      	str	r2, [sp, #40]	; 0x28
 800cc34:	1bdb      	subs	r3, r3, r7
 800cc36:	1e5a      	subs	r2, r3, #1
 800cc38:	d53e      	bpl.n	800ccb8 <_dtoa_r+0x21c>
 800cc3a:	2201      	movs	r2, #1
 800cc3c:	1ad3      	subs	r3, r2, r3
 800cc3e:	930a      	str	r3, [sp, #40]	; 0x28
 800cc40:	2300      	movs	r3, #0
 800cc42:	930c      	str	r3, [sp, #48]	; 0x30
 800cc44:	9b03      	ldr	r3, [sp, #12]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	db38      	blt.n	800ccbc <_dtoa_r+0x220>
 800cc4a:	9a03      	ldr	r2, [sp, #12]
 800cc4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cc4e:	4694      	mov	ip, r2
 800cc50:	4463      	add	r3, ip
 800cc52:	930c      	str	r3, [sp, #48]	; 0x30
 800cc54:	2300      	movs	r3, #0
 800cc56:	9213      	str	r2, [sp, #76]	; 0x4c
 800cc58:	930d      	str	r3, [sp, #52]	; 0x34
 800cc5a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cc5c:	2401      	movs	r4, #1
 800cc5e:	2b09      	cmp	r3, #9
 800cc60:	d867      	bhi.n	800cd32 <_dtoa_r+0x296>
 800cc62:	2b05      	cmp	r3, #5
 800cc64:	dd02      	ble.n	800cc6c <_dtoa_r+0x1d0>
 800cc66:	2400      	movs	r4, #0
 800cc68:	3b04      	subs	r3, #4
 800cc6a:	9322      	str	r3, [sp, #136]	; 0x88
 800cc6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cc6e:	1e98      	subs	r0, r3, #2
 800cc70:	2803      	cmp	r0, #3
 800cc72:	d867      	bhi.n	800cd44 <_dtoa_r+0x2a8>
 800cc74:	f7f3 fa50 	bl	8000118 <__gnu_thumb1_case_uqi>
 800cc78:	5b383a2b 	.word	0x5b383a2b
 800cc7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cc7e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800cc80:	18f6      	adds	r6, r6, r3
 800cc82:	4b68      	ldr	r3, [pc, #416]	; (800ce24 <_dtoa_r+0x388>)
 800cc84:	18f2      	adds	r2, r6, r3
 800cc86:	2a20      	cmp	r2, #32
 800cc88:	dd0f      	ble.n	800ccaa <_dtoa_r+0x20e>
 800cc8a:	2340      	movs	r3, #64	; 0x40
 800cc8c:	1a9b      	subs	r3, r3, r2
 800cc8e:	409f      	lsls	r7, r3
 800cc90:	4b65      	ldr	r3, [pc, #404]	; (800ce28 <_dtoa_r+0x38c>)
 800cc92:	0038      	movs	r0, r7
 800cc94:	18f3      	adds	r3, r6, r3
 800cc96:	40dc      	lsrs	r4, r3
 800cc98:	4320      	orrs	r0, r4
 800cc9a:	f7f6 f95d 	bl	8002f58 <__aeabi_ui2d>
 800cc9e:	2201      	movs	r2, #1
 800cca0:	4b62      	ldr	r3, [pc, #392]	; (800ce2c <_dtoa_r+0x390>)
 800cca2:	1e77      	subs	r7, r6, #1
 800cca4:	18cb      	adds	r3, r1, r3
 800cca6:	9217      	str	r2, [sp, #92]	; 0x5c
 800cca8:	e776      	b.n	800cb98 <_dtoa_r+0xfc>
 800ccaa:	2320      	movs	r3, #32
 800ccac:	0020      	movs	r0, r4
 800ccae:	1a9b      	subs	r3, r3, r2
 800ccb0:	4098      	lsls	r0, r3
 800ccb2:	e7f2      	b.n	800cc9a <_dtoa_r+0x1fe>
 800ccb4:	9016      	str	r0, [sp, #88]	; 0x58
 800ccb6:	e7ba      	b.n	800cc2e <_dtoa_r+0x192>
 800ccb8:	920c      	str	r2, [sp, #48]	; 0x30
 800ccba:	e7c3      	b.n	800cc44 <_dtoa_r+0x1a8>
 800ccbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ccbe:	9a03      	ldr	r2, [sp, #12]
 800ccc0:	1a9b      	subs	r3, r3, r2
 800ccc2:	930a      	str	r3, [sp, #40]	; 0x28
 800ccc4:	4253      	negs	r3, r2
 800ccc6:	930d      	str	r3, [sp, #52]	; 0x34
 800ccc8:	2300      	movs	r3, #0
 800ccca:	9313      	str	r3, [sp, #76]	; 0x4c
 800cccc:	e7c5      	b.n	800cc5a <_dtoa_r+0x1be>
 800ccce:	2300      	movs	r3, #0
 800ccd0:	930f      	str	r3, [sp, #60]	; 0x3c
 800ccd2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ccd4:	930b      	str	r3, [sp, #44]	; 0x2c
 800ccd6:	9307      	str	r3, [sp, #28]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	dc13      	bgt.n	800cd04 <_dtoa_r+0x268>
 800ccdc:	2301      	movs	r3, #1
 800ccde:	001a      	movs	r2, r3
 800cce0:	930b      	str	r3, [sp, #44]	; 0x2c
 800cce2:	9307      	str	r3, [sp, #28]
 800cce4:	9223      	str	r2, [sp, #140]	; 0x8c
 800cce6:	e00d      	b.n	800cd04 <_dtoa_r+0x268>
 800cce8:	2301      	movs	r3, #1
 800ccea:	e7f1      	b.n	800ccd0 <_dtoa_r+0x234>
 800ccec:	2300      	movs	r3, #0
 800ccee:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800ccf0:	930f      	str	r3, [sp, #60]	; 0x3c
 800ccf2:	4694      	mov	ip, r2
 800ccf4:	9b03      	ldr	r3, [sp, #12]
 800ccf6:	4463      	add	r3, ip
 800ccf8:	930b      	str	r3, [sp, #44]	; 0x2c
 800ccfa:	3301      	adds	r3, #1
 800ccfc:	9307      	str	r3, [sp, #28]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	dc00      	bgt.n	800cd04 <_dtoa_r+0x268>
 800cd02:	2301      	movs	r3, #1
 800cd04:	9a04      	ldr	r2, [sp, #16]
 800cd06:	2100      	movs	r1, #0
 800cd08:	69d0      	ldr	r0, [r2, #28]
 800cd0a:	2204      	movs	r2, #4
 800cd0c:	0015      	movs	r5, r2
 800cd0e:	3514      	adds	r5, #20
 800cd10:	429d      	cmp	r5, r3
 800cd12:	d91b      	bls.n	800cd4c <_dtoa_r+0x2b0>
 800cd14:	6041      	str	r1, [r0, #4]
 800cd16:	9804      	ldr	r0, [sp, #16]
 800cd18:	f001 f886 	bl	800de28 <_Balloc>
 800cd1c:	9006      	str	r0, [sp, #24]
 800cd1e:	2800      	cmp	r0, #0
 800cd20:	d117      	bne.n	800cd52 <_dtoa_r+0x2b6>
 800cd22:	21b0      	movs	r1, #176	; 0xb0
 800cd24:	4b42      	ldr	r3, [pc, #264]	; (800ce30 <_dtoa_r+0x394>)
 800cd26:	482e      	ldr	r0, [pc, #184]	; (800cde0 <_dtoa_r+0x344>)
 800cd28:	9a06      	ldr	r2, [sp, #24]
 800cd2a:	31ff      	adds	r1, #255	; 0xff
 800cd2c:	e6cb      	b.n	800cac6 <_dtoa_r+0x2a>
 800cd2e:	2301      	movs	r3, #1
 800cd30:	e7dd      	b.n	800ccee <_dtoa_r+0x252>
 800cd32:	2300      	movs	r3, #0
 800cd34:	940f      	str	r4, [sp, #60]	; 0x3c
 800cd36:	9322      	str	r3, [sp, #136]	; 0x88
 800cd38:	3b01      	subs	r3, #1
 800cd3a:	930b      	str	r3, [sp, #44]	; 0x2c
 800cd3c:	9307      	str	r3, [sp, #28]
 800cd3e:	2200      	movs	r2, #0
 800cd40:	3313      	adds	r3, #19
 800cd42:	e7cf      	b.n	800cce4 <_dtoa_r+0x248>
 800cd44:	2301      	movs	r3, #1
 800cd46:	930f      	str	r3, [sp, #60]	; 0x3c
 800cd48:	3b02      	subs	r3, #2
 800cd4a:	e7f6      	b.n	800cd3a <_dtoa_r+0x29e>
 800cd4c:	3101      	adds	r1, #1
 800cd4e:	0052      	lsls	r2, r2, #1
 800cd50:	e7dc      	b.n	800cd0c <_dtoa_r+0x270>
 800cd52:	9b04      	ldr	r3, [sp, #16]
 800cd54:	9a06      	ldr	r2, [sp, #24]
 800cd56:	69db      	ldr	r3, [r3, #28]
 800cd58:	601a      	str	r2, [r3, #0]
 800cd5a:	9b07      	ldr	r3, [sp, #28]
 800cd5c:	2b0e      	cmp	r3, #14
 800cd5e:	d900      	bls.n	800cd62 <_dtoa_r+0x2c6>
 800cd60:	e0e5      	b.n	800cf2e <_dtoa_r+0x492>
 800cd62:	2c00      	cmp	r4, #0
 800cd64:	d100      	bne.n	800cd68 <_dtoa_r+0x2cc>
 800cd66:	e0e2      	b.n	800cf2e <_dtoa_r+0x492>
 800cd68:	9b03      	ldr	r3, [sp, #12]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	dd64      	ble.n	800ce38 <_dtoa_r+0x39c>
 800cd6e:	210f      	movs	r1, #15
 800cd70:	9a03      	ldr	r2, [sp, #12]
 800cd72:	4b2b      	ldr	r3, [pc, #172]	; (800ce20 <_dtoa_r+0x384>)
 800cd74:	400a      	ands	r2, r1
 800cd76:	00d2      	lsls	r2, r2, #3
 800cd78:	189b      	adds	r3, r3, r2
 800cd7a:	681e      	ldr	r6, [r3, #0]
 800cd7c:	685f      	ldr	r7, [r3, #4]
 800cd7e:	9b03      	ldr	r3, [sp, #12]
 800cd80:	2402      	movs	r4, #2
 800cd82:	111d      	asrs	r5, r3, #4
 800cd84:	05db      	lsls	r3, r3, #23
 800cd86:	d50a      	bpl.n	800cd9e <_dtoa_r+0x302>
 800cd88:	4b2a      	ldr	r3, [pc, #168]	; (800ce34 <_dtoa_r+0x398>)
 800cd8a:	400d      	ands	r5, r1
 800cd8c:	6a1a      	ldr	r2, [r3, #32]
 800cd8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd90:	9810      	ldr	r0, [sp, #64]	; 0x40
 800cd92:	9911      	ldr	r1, [sp, #68]	; 0x44
 800cd94:	f7f4 fe1e 	bl	80019d4 <__aeabi_ddiv>
 800cd98:	9008      	str	r0, [sp, #32]
 800cd9a:	9109      	str	r1, [sp, #36]	; 0x24
 800cd9c:	3401      	adds	r4, #1
 800cd9e:	4b25      	ldr	r3, [pc, #148]	; (800ce34 <_dtoa_r+0x398>)
 800cda0:	930e      	str	r3, [sp, #56]	; 0x38
 800cda2:	2d00      	cmp	r5, #0
 800cda4:	d108      	bne.n	800cdb8 <_dtoa_r+0x31c>
 800cda6:	9808      	ldr	r0, [sp, #32]
 800cda8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cdaa:	0032      	movs	r2, r6
 800cdac:	003b      	movs	r3, r7
 800cdae:	f7f4 fe11 	bl	80019d4 <__aeabi_ddiv>
 800cdb2:	9008      	str	r0, [sp, #32]
 800cdb4:	9109      	str	r1, [sp, #36]	; 0x24
 800cdb6:	e05a      	b.n	800ce6e <_dtoa_r+0x3d2>
 800cdb8:	2301      	movs	r3, #1
 800cdba:	421d      	tst	r5, r3
 800cdbc:	d009      	beq.n	800cdd2 <_dtoa_r+0x336>
 800cdbe:	18e4      	adds	r4, r4, r3
 800cdc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cdc2:	0030      	movs	r0, r6
 800cdc4:	681a      	ldr	r2, [r3, #0]
 800cdc6:	685b      	ldr	r3, [r3, #4]
 800cdc8:	0039      	movs	r1, r7
 800cdca:	f7f5 f9fd 	bl	80021c8 <__aeabi_dmul>
 800cdce:	0006      	movs	r6, r0
 800cdd0:	000f      	movs	r7, r1
 800cdd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cdd4:	106d      	asrs	r5, r5, #1
 800cdd6:	3308      	adds	r3, #8
 800cdd8:	e7e2      	b.n	800cda0 <_dtoa_r+0x304>
 800cdda:	46c0      	nop			; (mov r8, r8)
 800cddc:	0800fffd 	.word	0x0800fffd
 800cde0:	08010014 	.word	0x08010014
 800cde4:	7ff00000 	.word	0x7ff00000
 800cde8:	0000270f 	.word	0x0000270f
 800cdec:	0800fff9 	.word	0x0800fff9
 800cdf0:	0800fffc 	.word	0x0800fffc
 800cdf4:	0801025b 	.word	0x0801025b
 800cdf8:	0801025c 	.word	0x0801025c
 800cdfc:	3ff00000 	.word	0x3ff00000
 800ce00:	fffffc01 	.word	0xfffffc01
 800ce04:	3ff80000 	.word	0x3ff80000
 800ce08:	636f4361 	.word	0x636f4361
 800ce0c:	3fd287a7 	.word	0x3fd287a7
 800ce10:	8b60c8b3 	.word	0x8b60c8b3
 800ce14:	3fc68a28 	.word	0x3fc68a28
 800ce18:	509f79fb 	.word	0x509f79fb
 800ce1c:	3fd34413 	.word	0x3fd34413
 800ce20:	08010160 	.word	0x08010160
 800ce24:	00000432 	.word	0x00000432
 800ce28:	00000412 	.word	0x00000412
 800ce2c:	fe100000 	.word	0xfe100000
 800ce30:	0801006c 	.word	0x0801006c
 800ce34:	08010138 	.word	0x08010138
 800ce38:	9b03      	ldr	r3, [sp, #12]
 800ce3a:	2402      	movs	r4, #2
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d016      	beq.n	800ce6e <_dtoa_r+0x3d2>
 800ce40:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ce42:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ce44:	220f      	movs	r2, #15
 800ce46:	425d      	negs	r5, r3
 800ce48:	402a      	ands	r2, r5
 800ce4a:	4bdd      	ldr	r3, [pc, #884]	; (800d1c0 <_dtoa_r+0x724>)
 800ce4c:	00d2      	lsls	r2, r2, #3
 800ce4e:	189b      	adds	r3, r3, r2
 800ce50:	681a      	ldr	r2, [r3, #0]
 800ce52:	685b      	ldr	r3, [r3, #4]
 800ce54:	f7f5 f9b8 	bl	80021c8 <__aeabi_dmul>
 800ce58:	2701      	movs	r7, #1
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	9008      	str	r0, [sp, #32]
 800ce5e:	9109      	str	r1, [sp, #36]	; 0x24
 800ce60:	4ed8      	ldr	r6, [pc, #864]	; (800d1c4 <_dtoa_r+0x728>)
 800ce62:	112d      	asrs	r5, r5, #4
 800ce64:	2d00      	cmp	r5, #0
 800ce66:	d000      	beq.n	800ce6a <_dtoa_r+0x3ce>
 800ce68:	e091      	b.n	800cf8e <_dtoa_r+0x4f2>
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d1a1      	bne.n	800cdb2 <_dtoa_r+0x316>
 800ce6e:	9e08      	ldr	r6, [sp, #32]
 800ce70:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ce72:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d100      	bne.n	800ce7a <_dtoa_r+0x3de>
 800ce78:	e094      	b.n	800cfa4 <_dtoa_r+0x508>
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	0030      	movs	r0, r6
 800ce7e:	0039      	movs	r1, r7
 800ce80:	4bd1      	ldr	r3, [pc, #836]	; (800d1c8 <_dtoa_r+0x72c>)
 800ce82:	f7f3 fae9 	bl	8000458 <__aeabi_dcmplt>
 800ce86:	2800      	cmp	r0, #0
 800ce88:	d100      	bne.n	800ce8c <_dtoa_r+0x3f0>
 800ce8a:	e08b      	b.n	800cfa4 <_dtoa_r+0x508>
 800ce8c:	9b07      	ldr	r3, [sp, #28]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d100      	bne.n	800ce94 <_dtoa_r+0x3f8>
 800ce92:	e087      	b.n	800cfa4 <_dtoa_r+0x508>
 800ce94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	dd45      	ble.n	800cf26 <_dtoa_r+0x48a>
 800ce9a:	9b03      	ldr	r3, [sp, #12]
 800ce9c:	2200      	movs	r2, #0
 800ce9e:	3b01      	subs	r3, #1
 800cea0:	930e      	str	r3, [sp, #56]	; 0x38
 800cea2:	0030      	movs	r0, r6
 800cea4:	4bc9      	ldr	r3, [pc, #804]	; (800d1cc <_dtoa_r+0x730>)
 800cea6:	0039      	movs	r1, r7
 800cea8:	f7f5 f98e 	bl	80021c8 <__aeabi_dmul>
 800ceac:	9008      	str	r0, [sp, #32]
 800ceae:	9109      	str	r1, [sp, #36]	; 0x24
 800ceb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ceb2:	3401      	adds	r4, #1
 800ceb4:	0020      	movs	r0, r4
 800ceb6:	9e08      	ldr	r6, [sp, #32]
 800ceb8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ceba:	9312      	str	r3, [sp, #72]	; 0x48
 800cebc:	f7f6 f81c 	bl	8002ef8 <__aeabi_i2d>
 800cec0:	0032      	movs	r2, r6
 800cec2:	003b      	movs	r3, r7
 800cec4:	f7f5 f980 	bl	80021c8 <__aeabi_dmul>
 800cec8:	2200      	movs	r2, #0
 800ceca:	4bc1      	ldr	r3, [pc, #772]	; (800d1d0 <_dtoa_r+0x734>)
 800cecc:	f7f4 fa22 	bl	8001314 <__aeabi_dadd>
 800ced0:	4ac0      	ldr	r2, [pc, #768]	; (800d1d4 <_dtoa_r+0x738>)
 800ced2:	9014      	str	r0, [sp, #80]	; 0x50
 800ced4:	9115      	str	r1, [sp, #84]	; 0x54
 800ced6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ced8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800ceda:	4694      	mov	ip, r2
 800cedc:	9308      	str	r3, [sp, #32]
 800cede:	9409      	str	r4, [sp, #36]	; 0x24
 800cee0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cee2:	4463      	add	r3, ip
 800cee4:	9318      	str	r3, [sp, #96]	; 0x60
 800cee6:	9309      	str	r3, [sp, #36]	; 0x24
 800cee8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d15e      	bne.n	800cfac <_dtoa_r+0x510>
 800ceee:	2200      	movs	r2, #0
 800cef0:	4bb9      	ldr	r3, [pc, #740]	; (800d1d8 <_dtoa_r+0x73c>)
 800cef2:	0030      	movs	r0, r6
 800cef4:	0039      	movs	r1, r7
 800cef6:	f7f5 fc29 	bl	800274c <__aeabi_dsub>
 800cefa:	9a08      	ldr	r2, [sp, #32]
 800cefc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800cefe:	0004      	movs	r4, r0
 800cf00:	000d      	movs	r5, r1
 800cf02:	f7f3 fabd 	bl	8000480 <__aeabi_dcmpgt>
 800cf06:	2800      	cmp	r0, #0
 800cf08:	d000      	beq.n	800cf0c <_dtoa_r+0x470>
 800cf0a:	e2b3      	b.n	800d474 <_dtoa_r+0x9d8>
 800cf0c:	48b3      	ldr	r0, [pc, #716]	; (800d1dc <_dtoa_r+0x740>)
 800cf0e:	9915      	ldr	r1, [sp, #84]	; 0x54
 800cf10:	4684      	mov	ip, r0
 800cf12:	4461      	add	r1, ip
 800cf14:	000b      	movs	r3, r1
 800cf16:	0020      	movs	r0, r4
 800cf18:	0029      	movs	r1, r5
 800cf1a:	9a08      	ldr	r2, [sp, #32]
 800cf1c:	f7f3 fa9c 	bl	8000458 <__aeabi_dcmplt>
 800cf20:	2800      	cmp	r0, #0
 800cf22:	d000      	beq.n	800cf26 <_dtoa_r+0x48a>
 800cf24:	e2a3      	b.n	800d46e <_dtoa_r+0x9d2>
 800cf26:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cf28:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800cf2a:	9308      	str	r3, [sp, #32]
 800cf2c:	9409      	str	r4, [sp, #36]	; 0x24
 800cf2e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	da00      	bge.n	800cf36 <_dtoa_r+0x49a>
 800cf34:	e179      	b.n	800d22a <_dtoa_r+0x78e>
 800cf36:	9a03      	ldr	r2, [sp, #12]
 800cf38:	2a0e      	cmp	r2, #14
 800cf3a:	dd00      	ble.n	800cf3e <_dtoa_r+0x4a2>
 800cf3c:	e175      	b.n	800d22a <_dtoa_r+0x78e>
 800cf3e:	4ba0      	ldr	r3, [pc, #640]	; (800d1c0 <_dtoa_r+0x724>)
 800cf40:	00d2      	lsls	r2, r2, #3
 800cf42:	189b      	adds	r3, r3, r2
 800cf44:	681e      	ldr	r6, [r3, #0]
 800cf46:	685f      	ldr	r7, [r3, #4]
 800cf48:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	db00      	blt.n	800cf50 <_dtoa_r+0x4b4>
 800cf4e:	e0e5      	b.n	800d11c <_dtoa_r+0x680>
 800cf50:	9b07      	ldr	r3, [sp, #28]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	dd00      	ble.n	800cf58 <_dtoa_r+0x4bc>
 800cf56:	e0e1      	b.n	800d11c <_dtoa_r+0x680>
 800cf58:	d000      	beq.n	800cf5c <_dtoa_r+0x4c0>
 800cf5a:	e288      	b.n	800d46e <_dtoa_r+0x9d2>
 800cf5c:	2200      	movs	r2, #0
 800cf5e:	0030      	movs	r0, r6
 800cf60:	0039      	movs	r1, r7
 800cf62:	4b9d      	ldr	r3, [pc, #628]	; (800d1d8 <_dtoa_r+0x73c>)
 800cf64:	f7f5 f930 	bl	80021c8 <__aeabi_dmul>
 800cf68:	9a08      	ldr	r2, [sp, #32]
 800cf6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf6c:	f7f3 fa92 	bl	8000494 <__aeabi_dcmpge>
 800cf70:	9e07      	ldr	r6, [sp, #28]
 800cf72:	0037      	movs	r7, r6
 800cf74:	2800      	cmp	r0, #0
 800cf76:	d000      	beq.n	800cf7a <_dtoa_r+0x4de>
 800cf78:	e25f      	b.n	800d43a <_dtoa_r+0x99e>
 800cf7a:	9b06      	ldr	r3, [sp, #24]
 800cf7c:	9a06      	ldr	r2, [sp, #24]
 800cf7e:	3301      	adds	r3, #1
 800cf80:	9308      	str	r3, [sp, #32]
 800cf82:	2331      	movs	r3, #49	; 0x31
 800cf84:	7013      	strb	r3, [r2, #0]
 800cf86:	9b03      	ldr	r3, [sp, #12]
 800cf88:	3301      	adds	r3, #1
 800cf8a:	9303      	str	r3, [sp, #12]
 800cf8c:	e25a      	b.n	800d444 <_dtoa_r+0x9a8>
 800cf8e:	423d      	tst	r5, r7
 800cf90:	d005      	beq.n	800cf9e <_dtoa_r+0x502>
 800cf92:	6832      	ldr	r2, [r6, #0]
 800cf94:	6873      	ldr	r3, [r6, #4]
 800cf96:	f7f5 f917 	bl	80021c8 <__aeabi_dmul>
 800cf9a:	003b      	movs	r3, r7
 800cf9c:	3401      	adds	r4, #1
 800cf9e:	106d      	asrs	r5, r5, #1
 800cfa0:	3608      	adds	r6, #8
 800cfa2:	e75f      	b.n	800ce64 <_dtoa_r+0x3c8>
 800cfa4:	9b03      	ldr	r3, [sp, #12]
 800cfa6:	930e      	str	r3, [sp, #56]	; 0x38
 800cfa8:	9b07      	ldr	r3, [sp, #28]
 800cfaa:	e783      	b.n	800ceb4 <_dtoa_r+0x418>
 800cfac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cfae:	4b84      	ldr	r3, [pc, #528]	; (800d1c0 <_dtoa_r+0x724>)
 800cfb0:	3a01      	subs	r2, #1
 800cfb2:	00d2      	lsls	r2, r2, #3
 800cfb4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800cfb6:	189b      	adds	r3, r3, r2
 800cfb8:	9c08      	ldr	r4, [sp, #32]
 800cfba:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800cfbc:	681a      	ldr	r2, [r3, #0]
 800cfbe:	685b      	ldr	r3, [r3, #4]
 800cfc0:	2900      	cmp	r1, #0
 800cfc2:	d051      	beq.n	800d068 <_dtoa_r+0x5cc>
 800cfc4:	2000      	movs	r0, #0
 800cfc6:	4986      	ldr	r1, [pc, #536]	; (800d1e0 <_dtoa_r+0x744>)
 800cfc8:	f7f4 fd04 	bl	80019d4 <__aeabi_ddiv>
 800cfcc:	0022      	movs	r2, r4
 800cfce:	002b      	movs	r3, r5
 800cfd0:	f7f5 fbbc 	bl	800274c <__aeabi_dsub>
 800cfd4:	9a06      	ldr	r2, [sp, #24]
 800cfd6:	0004      	movs	r4, r0
 800cfd8:	4694      	mov	ip, r2
 800cfda:	000d      	movs	r5, r1
 800cfdc:	9b06      	ldr	r3, [sp, #24]
 800cfde:	9314      	str	r3, [sp, #80]	; 0x50
 800cfe0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cfe2:	4463      	add	r3, ip
 800cfe4:	9318      	str	r3, [sp, #96]	; 0x60
 800cfe6:	0039      	movs	r1, r7
 800cfe8:	0030      	movs	r0, r6
 800cfea:	f7f5 ff4f 	bl	8002e8c <__aeabi_d2iz>
 800cfee:	9012      	str	r0, [sp, #72]	; 0x48
 800cff0:	f7f5 ff82 	bl	8002ef8 <__aeabi_i2d>
 800cff4:	0002      	movs	r2, r0
 800cff6:	000b      	movs	r3, r1
 800cff8:	0030      	movs	r0, r6
 800cffa:	0039      	movs	r1, r7
 800cffc:	f7f5 fba6 	bl	800274c <__aeabi_dsub>
 800d000:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d002:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d004:	3301      	adds	r3, #1
 800d006:	9308      	str	r3, [sp, #32]
 800d008:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d00a:	0006      	movs	r6, r0
 800d00c:	3330      	adds	r3, #48	; 0x30
 800d00e:	7013      	strb	r3, [r2, #0]
 800d010:	0022      	movs	r2, r4
 800d012:	002b      	movs	r3, r5
 800d014:	000f      	movs	r7, r1
 800d016:	f7f3 fa1f 	bl	8000458 <__aeabi_dcmplt>
 800d01a:	2800      	cmp	r0, #0
 800d01c:	d174      	bne.n	800d108 <_dtoa_r+0x66c>
 800d01e:	0032      	movs	r2, r6
 800d020:	003b      	movs	r3, r7
 800d022:	2000      	movs	r0, #0
 800d024:	4968      	ldr	r1, [pc, #416]	; (800d1c8 <_dtoa_r+0x72c>)
 800d026:	f7f5 fb91 	bl	800274c <__aeabi_dsub>
 800d02a:	0022      	movs	r2, r4
 800d02c:	002b      	movs	r3, r5
 800d02e:	f7f3 fa13 	bl	8000458 <__aeabi_dcmplt>
 800d032:	2800      	cmp	r0, #0
 800d034:	d000      	beq.n	800d038 <_dtoa_r+0x59c>
 800d036:	e0d7      	b.n	800d1e8 <_dtoa_r+0x74c>
 800d038:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d03a:	9a08      	ldr	r2, [sp, #32]
 800d03c:	4293      	cmp	r3, r2
 800d03e:	d100      	bne.n	800d042 <_dtoa_r+0x5a6>
 800d040:	e771      	b.n	800cf26 <_dtoa_r+0x48a>
 800d042:	2200      	movs	r2, #0
 800d044:	0020      	movs	r0, r4
 800d046:	0029      	movs	r1, r5
 800d048:	4b60      	ldr	r3, [pc, #384]	; (800d1cc <_dtoa_r+0x730>)
 800d04a:	f7f5 f8bd 	bl	80021c8 <__aeabi_dmul>
 800d04e:	4b5f      	ldr	r3, [pc, #380]	; (800d1cc <_dtoa_r+0x730>)
 800d050:	0004      	movs	r4, r0
 800d052:	000d      	movs	r5, r1
 800d054:	0030      	movs	r0, r6
 800d056:	0039      	movs	r1, r7
 800d058:	2200      	movs	r2, #0
 800d05a:	f7f5 f8b5 	bl	80021c8 <__aeabi_dmul>
 800d05e:	9b08      	ldr	r3, [sp, #32]
 800d060:	0006      	movs	r6, r0
 800d062:	000f      	movs	r7, r1
 800d064:	9314      	str	r3, [sp, #80]	; 0x50
 800d066:	e7be      	b.n	800cfe6 <_dtoa_r+0x54a>
 800d068:	0020      	movs	r0, r4
 800d06a:	0029      	movs	r1, r5
 800d06c:	f7f5 f8ac 	bl	80021c8 <__aeabi_dmul>
 800d070:	9a06      	ldr	r2, [sp, #24]
 800d072:	9b06      	ldr	r3, [sp, #24]
 800d074:	4694      	mov	ip, r2
 800d076:	9308      	str	r3, [sp, #32]
 800d078:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d07a:	9014      	str	r0, [sp, #80]	; 0x50
 800d07c:	9115      	str	r1, [sp, #84]	; 0x54
 800d07e:	4463      	add	r3, ip
 800d080:	9319      	str	r3, [sp, #100]	; 0x64
 800d082:	0030      	movs	r0, r6
 800d084:	0039      	movs	r1, r7
 800d086:	f7f5 ff01 	bl	8002e8c <__aeabi_d2iz>
 800d08a:	9018      	str	r0, [sp, #96]	; 0x60
 800d08c:	f7f5 ff34 	bl	8002ef8 <__aeabi_i2d>
 800d090:	0002      	movs	r2, r0
 800d092:	000b      	movs	r3, r1
 800d094:	0030      	movs	r0, r6
 800d096:	0039      	movs	r1, r7
 800d098:	f7f5 fb58 	bl	800274c <__aeabi_dsub>
 800d09c:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800d09e:	9b08      	ldr	r3, [sp, #32]
 800d0a0:	3630      	adds	r6, #48	; 0x30
 800d0a2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d0a4:	701e      	strb	r6, [r3, #0]
 800d0a6:	3301      	adds	r3, #1
 800d0a8:	0004      	movs	r4, r0
 800d0aa:	000d      	movs	r5, r1
 800d0ac:	9308      	str	r3, [sp, #32]
 800d0ae:	4293      	cmp	r3, r2
 800d0b0:	d12d      	bne.n	800d10e <_dtoa_r+0x672>
 800d0b2:	9814      	ldr	r0, [sp, #80]	; 0x50
 800d0b4:	9915      	ldr	r1, [sp, #84]	; 0x54
 800d0b6:	9a06      	ldr	r2, [sp, #24]
 800d0b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d0ba:	4694      	mov	ip, r2
 800d0bc:	4463      	add	r3, ip
 800d0be:	2200      	movs	r2, #0
 800d0c0:	9308      	str	r3, [sp, #32]
 800d0c2:	4b47      	ldr	r3, [pc, #284]	; (800d1e0 <_dtoa_r+0x744>)
 800d0c4:	f7f4 f926 	bl	8001314 <__aeabi_dadd>
 800d0c8:	0002      	movs	r2, r0
 800d0ca:	000b      	movs	r3, r1
 800d0cc:	0020      	movs	r0, r4
 800d0ce:	0029      	movs	r1, r5
 800d0d0:	f7f3 f9d6 	bl	8000480 <__aeabi_dcmpgt>
 800d0d4:	2800      	cmp	r0, #0
 800d0d6:	d000      	beq.n	800d0da <_dtoa_r+0x63e>
 800d0d8:	e086      	b.n	800d1e8 <_dtoa_r+0x74c>
 800d0da:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d0dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d0de:	2000      	movs	r0, #0
 800d0e0:	493f      	ldr	r1, [pc, #252]	; (800d1e0 <_dtoa_r+0x744>)
 800d0e2:	f7f5 fb33 	bl	800274c <__aeabi_dsub>
 800d0e6:	0002      	movs	r2, r0
 800d0e8:	000b      	movs	r3, r1
 800d0ea:	0020      	movs	r0, r4
 800d0ec:	0029      	movs	r1, r5
 800d0ee:	f7f3 f9b3 	bl	8000458 <__aeabi_dcmplt>
 800d0f2:	2800      	cmp	r0, #0
 800d0f4:	d100      	bne.n	800d0f8 <_dtoa_r+0x65c>
 800d0f6:	e716      	b.n	800cf26 <_dtoa_r+0x48a>
 800d0f8:	9b08      	ldr	r3, [sp, #32]
 800d0fa:	001a      	movs	r2, r3
 800d0fc:	3a01      	subs	r2, #1
 800d0fe:	9208      	str	r2, [sp, #32]
 800d100:	7812      	ldrb	r2, [r2, #0]
 800d102:	2a30      	cmp	r2, #48	; 0x30
 800d104:	d0f8      	beq.n	800d0f8 <_dtoa_r+0x65c>
 800d106:	9308      	str	r3, [sp, #32]
 800d108:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d10a:	9303      	str	r3, [sp, #12]
 800d10c:	e046      	b.n	800d19c <_dtoa_r+0x700>
 800d10e:	2200      	movs	r2, #0
 800d110:	4b2e      	ldr	r3, [pc, #184]	; (800d1cc <_dtoa_r+0x730>)
 800d112:	f7f5 f859 	bl	80021c8 <__aeabi_dmul>
 800d116:	0006      	movs	r6, r0
 800d118:	000f      	movs	r7, r1
 800d11a:	e7b2      	b.n	800d082 <_dtoa_r+0x5e6>
 800d11c:	9b06      	ldr	r3, [sp, #24]
 800d11e:	9a06      	ldr	r2, [sp, #24]
 800d120:	930a      	str	r3, [sp, #40]	; 0x28
 800d122:	9b07      	ldr	r3, [sp, #28]
 800d124:	9c08      	ldr	r4, [sp, #32]
 800d126:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800d128:	3b01      	subs	r3, #1
 800d12a:	189b      	adds	r3, r3, r2
 800d12c:	930b      	str	r3, [sp, #44]	; 0x2c
 800d12e:	0032      	movs	r2, r6
 800d130:	003b      	movs	r3, r7
 800d132:	0020      	movs	r0, r4
 800d134:	0029      	movs	r1, r5
 800d136:	f7f4 fc4d 	bl	80019d4 <__aeabi_ddiv>
 800d13a:	f7f5 fea7 	bl	8002e8c <__aeabi_d2iz>
 800d13e:	9007      	str	r0, [sp, #28]
 800d140:	f7f5 feda 	bl	8002ef8 <__aeabi_i2d>
 800d144:	0032      	movs	r2, r6
 800d146:	003b      	movs	r3, r7
 800d148:	f7f5 f83e 	bl	80021c8 <__aeabi_dmul>
 800d14c:	0002      	movs	r2, r0
 800d14e:	000b      	movs	r3, r1
 800d150:	0020      	movs	r0, r4
 800d152:	0029      	movs	r1, r5
 800d154:	f7f5 fafa 	bl	800274c <__aeabi_dsub>
 800d158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d15a:	001a      	movs	r2, r3
 800d15c:	3201      	adds	r2, #1
 800d15e:	920a      	str	r2, [sp, #40]	; 0x28
 800d160:	9208      	str	r2, [sp, #32]
 800d162:	9a07      	ldr	r2, [sp, #28]
 800d164:	3230      	adds	r2, #48	; 0x30
 800d166:	701a      	strb	r2, [r3, #0]
 800d168:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d16a:	429a      	cmp	r2, r3
 800d16c:	d14f      	bne.n	800d20e <_dtoa_r+0x772>
 800d16e:	0002      	movs	r2, r0
 800d170:	000b      	movs	r3, r1
 800d172:	f7f4 f8cf 	bl	8001314 <__aeabi_dadd>
 800d176:	0032      	movs	r2, r6
 800d178:	003b      	movs	r3, r7
 800d17a:	0004      	movs	r4, r0
 800d17c:	000d      	movs	r5, r1
 800d17e:	f7f3 f97f 	bl	8000480 <__aeabi_dcmpgt>
 800d182:	2800      	cmp	r0, #0
 800d184:	d12e      	bne.n	800d1e4 <_dtoa_r+0x748>
 800d186:	0032      	movs	r2, r6
 800d188:	003b      	movs	r3, r7
 800d18a:	0020      	movs	r0, r4
 800d18c:	0029      	movs	r1, r5
 800d18e:	f7f3 f95d 	bl	800044c <__aeabi_dcmpeq>
 800d192:	2800      	cmp	r0, #0
 800d194:	d002      	beq.n	800d19c <_dtoa_r+0x700>
 800d196:	9b07      	ldr	r3, [sp, #28]
 800d198:	07de      	lsls	r6, r3, #31
 800d19a:	d423      	bmi.n	800d1e4 <_dtoa_r+0x748>
 800d19c:	9905      	ldr	r1, [sp, #20]
 800d19e:	9804      	ldr	r0, [sp, #16]
 800d1a0:	f000 fe86 	bl	800deb0 <_Bfree>
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	9a08      	ldr	r2, [sp, #32]
 800d1a8:	7013      	strb	r3, [r2, #0]
 800d1aa:	9b03      	ldr	r3, [sp, #12]
 800d1ac:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800d1ae:	3301      	adds	r3, #1
 800d1b0:	6013      	str	r3, [r2, #0]
 800d1b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d100      	bne.n	800d1ba <_dtoa_r+0x71e>
 800d1b8:	e4ba      	b.n	800cb30 <_dtoa_r+0x94>
 800d1ba:	9a08      	ldr	r2, [sp, #32]
 800d1bc:	601a      	str	r2, [r3, #0]
 800d1be:	e4b7      	b.n	800cb30 <_dtoa_r+0x94>
 800d1c0:	08010160 	.word	0x08010160
 800d1c4:	08010138 	.word	0x08010138
 800d1c8:	3ff00000 	.word	0x3ff00000
 800d1cc:	40240000 	.word	0x40240000
 800d1d0:	401c0000 	.word	0x401c0000
 800d1d4:	fcc00000 	.word	0xfcc00000
 800d1d8:	40140000 	.word	0x40140000
 800d1dc:	7cc00000 	.word	0x7cc00000
 800d1e0:	3fe00000 	.word	0x3fe00000
 800d1e4:	9b03      	ldr	r3, [sp, #12]
 800d1e6:	930e      	str	r3, [sp, #56]	; 0x38
 800d1e8:	9b08      	ldr	r3, [sp, #32]
 800d1ea:	9308      	str	r3, [sp, #32]
 800d1ec:	3b01      	subs	r3, #1
 800d1ee:	781a      	ldrb	r2, [r3, #0]
 800d1f0:	2a39      	cmp	r2, #57	; 0x39
 800d1f2:	d108      	bne.n	800d206 <_dtoa_r+0x76a>
 800d1f4:	9a06      	ldr	r2, [sp, #24]
 800d1f6:	429a      	cmp	r2, r3
 800d1f8:	d1f7      	bne.n	800d1ea <_dtoa_r+0x74e>
 800d1fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d1fc:	9906      	ldr	r1, [sp, #24]
 800d1fe:	3201      	adds	r2, #1
 800d200:	920e      	str	r2, [sp, #56]	; 0x38
 800d202:	2230      	movs	r2, #48	; 0x30
 800d204:	700a      	strb	r2, [r1, #0]
 800d206:	781a      	ldrb	r2, [r3, #0]
 800d208:	3201      	adds	r2, #1
 800d20a:	701a      	strb	r2, [r3, #0]
 800d20c:	e77c      	b.n	800d108 <_dtoa_r+0x66c>
 800d20e:	2200      	movs	r2, #0
 800d210:	4ba9      	ldr	r3, [pc, #676]	; (800d4b8 <_dtoa_r+0xa1c>)
 800d212:	f7f4 ffd9 	bl	80021c8 <__aeabi_dmul>
 800d216:	2200      	movs	r2, #0
 800d218:	2300      	movs	r3, #0
 800d21a:	0004      	movs	r4, r0
 800d21c:	000d      	movs	r5, r1
 800d21e:	f7f3 f915 	bl	800044c <__aeabi_dcmpeq>
 800d222:	2800      	cmp	r0, #0
 800d224:	d100      	bne.n	800d228 <_dtoa_r+0x78c>
 800d226:	e782      	b.n	800d12e <_dtoa_r+0x692>
 800d228:	e7b8      	b.n	800d19c <_dtoa_r+0x700>
 800d22a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800d22c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800d22e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d230:	2f00      	cmp	r7, #0
 800d232:	d012      	beq.n	800d25a <_dtoa_r+0x7be>
 800d234:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800d236:	2a01      	cmp	r2, #1
 800d238:	dc6e      	bgt.n	800d318 <_dtoa_r+0x87c>
 800d23a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d23c:	2a00      	cmp	r2, #0
 800d23e:	d065      	beq.n	800d30c <_dtoa_r+0x870>
 800d240:	4a9e      	ldr	r2, [pc, #632]	; (800d4bc <_dtoa_r+0xa20>)
 800d242:	189b      	adds	r3, r3, r2
 800d244:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d246:	2101      	movs	r1, #1
 800d248:	18d2      	adds	r2, r2, r3
 800d24a:	920a      	str	r2, [sp, #40]	; 0x28
 800d24c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d24e:	9804      	ldr	r0, [sp, #16]
 800d250:	18d3      	adds	r3, r2, r3
 800d252:	930c      	str	r3, [sp, #48]	; 0x30
 800d254:	f000 ff28 	bl	800e0a8 <__i2b>
 800d258:	0007      	movs	r7, r0
 800d25a:	2c00      	cmp	r4, #0
 800d25c:	d00e      	beq.n	800d27c <_dtoa_r+0x7e0>
 800d25e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d260:	2b00      	cmp	r3, #0
 800d262:	dd0b      	ble.n	800d27c <_dtoa_r+0x7e0>
 800d264:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d266:	0023      	movs	r3, r4
 800d268:	4294      	cmp	r4, r2
 800d26a:	dd00      	ble.n	800d26e <_dtoa_r+0x7d2>
 800d26c:	0013      	movs	r3, r2
 800d26e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d270:	1ae4      	subs	r4, r4, r3
 800d272:	1ad2      	subs	r2, r2, r3
 800d274:	920a      	str	r2, [sp, #40]	; 0x28
 800d276:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d278:	1ad3      	subs	r3, r2, r3
 800d27a:	930c      	str	r3, [sp, #48]	; 0x30
 800d27c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d01e      	beq.n	800d2c0 <_dtoa_r+0x824>
 800d282:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d284:	2b00      	cmp	r3, #0
 800d286:	d05c      	beq.n	800d342 <_dtoa_r+0x8a6>
 800d288:	2d00      	cmp	r5, #0
 800d28a:	dd10      	ble.n	800d2ae <_dtoa_r+0x812>
 800d28c:	0039      	movs	r1, r7
 800d28e:	002a      	movs	r2, r5
 800d290:	9804      	ldr	r0, [sp, #16]
 800d292:	f000 ffd1 	bl	800e238 <__pow5mult>
 800d296:	9a05      	ldr	r2, [sp, #20]
 800d298:	0001      	movs	r1, r0
 800d29a:	0007      	movs	r7, r0
 800d29c:	9804      	ldr	r0, [sp, #16]
 800d29e:	f000 ff1b 	bl	800e0d8 <__multiply>
 800d2a2:	0006      	movs	r6, r0
 800d2a4:	9905      	ldr	r1, [sp, #20]
 800d2a6:	9804      	ldr	r0, [sp, #16]
 800d2a8:	f000 fe02 	bl	800deb0 <_Bfree>
 800d2ac:	9605      	str	r6, [sp, #20]
 800d2ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d2b0:	1b5a      	subs	r2, r3, r5
 800d2b2:	42ab      	cmp	r3, r5
 800d2b4:	d004      	beq.n	800d2c0 <_dtoa_r+0x824>
 800d2b6:	9905      	ldr	r1, [sp, #20]
 800d2b8:	9804      	ldr	r0, [sp, #16]
 800d2ba:	f000 ffbd 	bl	800e238 <__pow5mult>
 800d2be:	9005      	str	r0, [sp, #20]
 800d2c0:	2101      	movs	r1, #1
 800d2c2:	9804      	ldr	r0, [sp, #16]
 800d2c4:	f000 fef0 	bl	800e0a8 <__i2b>
 800d2c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d2ca:	0006      	movs	r6, r0
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	dd3a      	ble.n	800d346 <_dtoa_r+0x8aa>
 800d2d0:	001a      	movs	r2, r3
 800d2d2:	0001      	movs	r1, r0
 800d2d4:	9804      	ldr	r0, [sp, #16]
 800d2d6:	f000 ffaf 	bl	800e238 <__pow5mult>
 800d2da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d2dc:	0006      	movs	r6, r0
 800d2de:	2500      	movs	r5, #0
 800d2e0:	2b01      	cmp	r3, #1
 800d2e2:	dc38      	bgt.n	800d356 <_dtoa_r+0x8ba>
 800d2e4:	2500      	movs	r5, #0
 800d2e6:	9b08      	ldr	r3, [sp, #32]
 800d2e8:	42ab      	cmp	r3, r5
 800d2ea:	d130      	bne.n	800d34e <_dtoa_r+0x8b2>
 800d2ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2ee:	031b      	lsls	r3, r3, #12
 800d2f0:	42ab      	cmp	r3, r5
 800d2f2:	d12c      	bne.n	800d34e <_dtoa_r+0x8b2>
 800d2f4:	4b72      	ldr	r3, [pc, #456]	; (800d4c0 <_dtoa_r+0xa24>)
 800d2f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d2f8:	4213      	tst	r3, r2
 800d2fa:	d028      	beq.n	800d34e <_dtoa_r+0x8b2>
 800d2fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d2fe:	3501      	adds	r5, #1
 800d300:	3301      	adds	r3, #1
 800d302:	930a      	str	r3, [sp, #40]	; 0x28
 800d304:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d306:	3301      	adds	r3, #1
 800d308:	930c      	str	r3, [sp, #48]	; 0x30
 800d30a:	e020      	b.n	800d34e <_dtoa_r+0x8b2>
 800d30c:	2336      	movs	r3, #54	; 0x36
 800d30e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d310:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800d312:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d314:	1a9b      	subs	r3, r3, r2
 800d316:	e795      	b.n	800d244 <_dtoa_r+0x7a8>
 800d318:	9b07      	ldr	r3, [sp, #28]
 800d31a:	1e5d      	subs	r5, r3, #1
 800d31c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d31e:	42ab      	cmp	r3, r5
 800d320:	db07      	blt.n	800d332 <_dtoa_r+0x896>
 800d322:	1b5d      	subs	r5, r3, r5
 800d324:	9b07      	ldr	r3, [sp, #28]
 800d326:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d328:	2b00      	cmp	r3, #0
 800d32a:	da8b      	bge.n	800d244 <_dtoa_r+0x7a8>
 800d32c:	1ae4      	subs	r4, r4, r3
 800d32e:	2300      	movs	r3, #0
 800d330:	e788      	b.n	800d244 <_dtoa_r+0x7a8>
 800d332:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d334:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d336:	1aeb      	subs	r3, r5, r3
 800d338:	18d3      	adds	r3, r2, r3
 800d33a:	950d      	str	r5, [sp, #52]	; 0x34
 800d33c:	9313      	str	r3, [sp, #76]	; 0x4c
 800d33e:	2500      	movs	r5, #0
 800d340:	e7f0      	b.n	800d324 <_dtoa_r+0x888>
 800d342:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d344:	e7b7      	b.n	800d2b6 <_dtoa_r+0x81a>
 800d346:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d348:	2500      	movs	r5, #0
 800d34a:	2b01      	cmp	r3, #1
 800d34c:	ddca      	ble.n	800d2e4 <_dtoa_r+0x848>
 800d34e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d350:	2001      	movs	r0, #1
 800d352:	2b00      	cmp	r3, #0
 800d354:	d008      	beq.n	800d368 <_dtoa_r+0x8cc>
 800d356:	6933      	ldr	r3, [r6, #16]
 800d358:	3303      	adds	r3, #3
 800d35a:	009b      	lsls	r3, r3, #2
 800d35c:	18f3      	adds	r3, r6, r3
 800d35e:	6858      	ldr	r0, [r3, #4]
 800d360:	f000 fe5a 	bl	800e018 <__hi0bits>
 800d364:	2320      	movs	r3, #32
 800d366:	1a18      	subs	r0, r3, r0
 800d368:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d36a:	1818      	adds	r0, r3, r0
 800d36c:	0002      	movs	r2, r0
 800d36e:	231f      	movs	r3, #31
 800d370:	401a      	ands	r2, r3
 800d372:	4218      	tst	r0, r3
 800d374:	d047      	beq.n	800d406 <_dtoa_r+0x96a>
 800d376:	3301      	adds	r3, #1
 800d378:	1a9b      	subs	r3, r3, r2
 800d37a:	2b04      	cmp	r3, #4
 800d37c:	dd3f      	ble.n	800d3fe <_dtoa_r+0x962>
 800d37e:	231c      	movs	r3, #28
 800d380:	1a9b      	subs	r3, r3, r2
 800d382:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d384:	18e4      	adds	r4, r4, r3
 800d386:	18d2      	adds	r2, r2, r3
 800d388:	920a      	str	r2, [sp, #40]	; 0x28
 800d38a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d38c:	18d3      	adds	r3, r2, r3
 800d38e:	930c      	str	r3, [sp, #48]	; 0x30
 800d390:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d392:	2b00      	cmp	r3, #0
 800d394:	dd05      	ble.n	800d3a2 <_dtoa_r+0x906>
 800d396:	001a      	movs	r2, r3
 800d398:	9905      	ldr	r1, [sp, #20]
 800d39a:	9804      	ldr	r0, [sp, #16]
 800d39c:	f000 ffa8 	bl	800e2f0 <__lshift>
 800d3a0:	9005      	str	r0, [sp, #20]
 800d3a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	dd05      	ble.n	800d3b4 <_dtoa_r+0x918>
 800d3a8:	0031      	movs	r1, r6
 800d3aa:	001a      	movs	r2, r3
 800d3ac:	9804      	ldr	r0, [sp, #16]
 800d3ae:	f000 ff9f 	bl	800e2f0 <__lshift>
 800d3b2:	0006      	movs	r6, r0
 800d3b4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d027      	beq.n	800d40a <_dtoa_r+0x96e>
 800d3ba:	0031      	movs	r1, r6
 800d3bc:	9805      	ldr	r0, [sp, #20]
 800d3be:	f001 f805 	bl	800e3cc <__mcmp>
 800d3c2:	2800      	cmp	r0, #0
 800d3c4:	da21      	bge.n	800d40a <_dtoa_r+0x96e>
 800d3c6:	9b03      	ldr	r3, [sp, #12]
 800d3c8:	220a      	movs	r2, #10
 800d3ca:	3b01      	subs	r3, #1
 800d3cc:	9303      	str	r3, [sp, #12]
 800d3ce:	9905      	ldr	r1, [sp, #20]
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	9804      	ldr	r0, [sp, #16]
 800d3d4:	f000 fd90 	bl	800def8 <__multadd>
 800d3d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d3da:	9005      	str	r0, [sp, #20]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d100      	bne.n	800d3e2 <_dtoa_r+0x946>
 800d3e0:	e15d      	b.n	800d69e <_dtoa_r+0xc02>
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	0039      	movs	r1, r7
 800d3e6:	220a      	movs	r2, #10
 800d3e8:	9804      	ldr	r0, [sp, #16]
 800d3ea:	f000 fd85 	bl	800def8 <__multadd>
 800d3ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d3f0:	0007      	movs	r7, r0
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	dc49      	bgt.n	800d48a <_dtoa_r+0x9ee>
 800d3f6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d3f8:	2b02      	cmp	r3, #2
 800d3fa:	dc0e      	bgt.n	800d41a <_dtoa_r+0x97e>
 800d3fc:	e045      	b.n	800d48a <_dtoa_r+0x9ee>
 800d3fe:	2b04      	cmp	r3, #4
 800d400:	d0c6      	beq.n	800d390 <_dtoa_r+0x8f4>
 800d402:	331c      	adds	r3, #28
 800d404:	e7bd      	b.n	800d382 <_dtoa_r+0x8e6>
 800d406:	0013      	movs	r3, r2
 800d408:	e7fb      	b.n	800d402 <_dtoa_r+0x966>
 800d40a:	9b07      	ldr	r3, [sp, #28]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	dc36      	bgt.n	800d47e <_dtoa_r+0x9e2>
 800d410:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d412:	2b02      	cmp	r3, #2
 800d414:	dd33      	ble.n	800d47e <_dtoa_r+0x9e2>
 800d416:	9b07      	ldr	r3, [sp, #28]
 800d418:	930b      	str	r3, [sp, #44]	; 0x2c
 800d41a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d10c      	bne.n	800d43a <_dtoa_r+0x99e>
 800d420:	0031      	movs	r1, r6
 800d422:	2205      	movs	r2, #5
 800d424:	9804      	ldr	r0, [sp, #16]
 800d426:	f000 fd67 	bl	800def8 <__multadd>
 800d42a:	0006      	movs	r6, r0
 800d42c:	0001      	movs	r1, r0
 800d42e:	9805      	ldr	r0, [sp, #20]
 800d430:	f000 ffcc 	bl	800e3cc <__mcmp>
 800d434:	2800      	cmp	r0, #0
 800d436:	dd00      	ble.n	800d43a <_dtoa_r+0x99e>
 800d438:	e59f      	b.n	800cf7a <_dtoa_r+0x4de>
 800d43a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d43c:	43db      	mvns	r3, r3
 800d43e:	9303      	str	r3, [sp, #12]
 800d440:	9b06      	ldr	r3, [sp, #24]
 800d442:	9308      	str	r3, [sp, #32]
 800d444:	2500      	movs	r5, #0
 800d446:	0031      	movs	r1, r6
 800d448:	9804      	ldr	r0, [sp, #16]
 800d44a:	f000 fd31 	bl	800deb0 <_Bfree>
 800d44e:	2f00      	cmp	r7, #0
 800d450:	d100      	bne.n	800d454 <_dtoa_r+0x9b8>
 800d452:	e6a3      	b.n	800d19c <_dtoa_r+0x700>
 800d454:	2d00      	cmp	r5, #0
 800d456:	d005      	beq.n	800d464 <_dtoa_r+0x9c8>
 800d458:	42bd      	cmp	r5, r7
 800d45a:	d003      	beq.n	800d464 <_dtoa_r+0x9c8>
 800d45c:	0029      	movs	r1, r5
 800d45e:	9804      	ldr	r0, [sp, #16]
 800d460:	f000 fd26 	bl	800deb0 <_Bfree>
 800d464:	0039      	movs	r1, r7
 800d466:	9804      	ldr	r0, [sp, #16]
 800d468:	f000 fd22 	bl	800deb0 <_Bfree>
 800d46c:	e696      	b.n	800d19c <_dtoa_r+0x700>
 800d46e:	2600      	movs	r6, #0
 800d470:	0037      	movs	r7, r6
 800d472:	e7e2      	b.n	800d43a <_dtoa_r+0x99e>
 800d474:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d476:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800d478:	9303      	str	r3, [sp, #12]
 800d47a:	0037      	movs	r7, r6
 800d47c:	e57d      	b.n	800cf7a <_dtoa_r+0x4de>
 800d47e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d480:	2b00      	cmp	r3, #0
 800d482:	d100      	bne.n	800d486 <_dtoa_r+0x9ea>
 800d484:	e0c3      	b.n	800d60e <_dtoa_r+0xb72>
 800d486:	9b07      	ldr	r3, [sp, #28]
 800d488:	930b      	str	r3, [sp, #44]	; 0x2c
 800d48a:	2c00      	cmp	r4, #0
 800d48c:	dd05      	ble.n	800d49a <_dtoa_r+0x9fe>
 800d48e:	0039      	movs	r1, r7
 800d490:	0022      	movs	r2, r4
 800d492:	9804      	ldr	r0, [sp, #16]
 800d494:	f000 ff2c 	bl	800e2f0 <__lshift>
 800d498:	0007      	movs	r7, r0
 800d49a:	0038      	movs	r0, r7
 800d49c:	2d00      	cmp	r5, #0
 800d49e:	d024      	beq.n	800d4ea <_dtoa_r+0xa4e>
 800d4a0:	6879      	ldr	r1, [r7, #4]
 800d4a2:	9804      	ldr	r0, [sp, #16]
 800d4a4:	f000 fcc0 	bl	800de28 <_Balloc>
 800d4a8:	1e04      	subs	r4, r0, #0
 800d4aa:	d111      	bne.n	800d4d0 <_dtoa_r+0xa34>
 800d4ac:	0022      	movs	r2, r4
 800d4ae:	4b05      	ldr	r3, [pc, #20]	; (800d4c4 <_dtoa_r+0xa28>)
 800d4b0:	4805      	ldr	r0, [pc, #20]	; (800d4c8 <_dtoa_r+0xa2c>)
 800d4b2:	4906      	ldr	r1, [pc, #24]	; (800d4cc <_dtoa_r+0xa30>)
 800d4b4:	f7ff fb07 	bl	800cac6 <_dtoa_r+0x2a>
 800d4b8:	40240000 	.word	0x40240000
 800d4bc:	00000433 	.word	0x00000433
 800d4c0:	7ff00000 	.word	0x7ff00000
 800d4c4:	0801006c 	.word	0x0801006c
 800d4c8:	08010014 	.word	0x08010014
 800d4cc:	000002ef 	.word	0x000002ef
 800d4d0:	0039      	movs	r1, r7
 800d4d2:	693a      	ldr	r2, [r7, #16]
 800d4d4:	310c      	adds	r1, #12
 800d4d6:	3202      	adds	r2, #2
 800d4d8:	0092      	lsls	r2, r2, #2
 800d4da:	300c      	adds	r0, #12
 800d4dc:	f7ff fa34 	bl	800c948 <memcpy>
 800d4e0:	2201      	movs	r2, #1
 800d4e2:	0021      	movs	r1, r4
 800d4e4:	9804      	ldr	r0, [sp, #16]
 800d4e6:	f000 ff03 	bl	800e2f0 <__lshift>
 800d4ea:	9b06      	ldr	r3, [sp, #24]
 800d4ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d4ee:	9307      	str	r3, [sp, #28]
 800d4f0:	3b01      	subs	r3, #1
 800d4f2:	189b      	adds	r3, r3, r2
 800d4f4:	2201      	movs	r2, #1
 800d4f6:	003d      	movs	r5, r7
 800d4f8:	0007      	movs	r7, r0
 800d4fa:	930e      	str	r3, [sp, #56]	; 0x38
 800d4fc:	9b08      	ldr	r3, [sp, #32]
 800d4fe:	4013      	ands	r3, r2
 800d500:	930d      	str	r3, [sp, #52]	; 0x34
 800d502:	0031      	movs	r1, r6
 800d504:	9805      	ldr	r0, [sp, #20]
 800d506:	f7ff fa3a 	bl	800c97e <quorem>
 800d50a:	0029      	movs	r1, r5
 800d50c:	0004      	movs	r4, r0
 800d50e:	900b      	str	r0, [sp, #44]	; 0x2c
 800d510:	9805      	ldr	r0, [sp, #20]
 800d512:	f000 ff5b 	bl	800e3cc <__mcmp>
 800d516:	003a      	movs	r2, r7
 800d518:	900c      	str	r0, [sp, #48]	; 0x30
 800d51a:	0031      	movs	r1, r6
 800d51c:	9804      	ldr	r0, [sp, #16]
 800d51e:	f000 ff71 	bl	800e404 <__mdiff>
 800d522:	2201      	movs	r2, #1
 800d524:	68c3      	ldr	r3, [r0, #12]
 800d526:	3430      	adds	r4, #48	; 0x30
 800d528:	9008      	str	r0, [sp, #32]
 800d52a:	920a      	str	r2, [sp, #40]	; 0x28
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d104      	bne.n	800d53a <_dtoa_r+0xa9e>
 800d530:	0001      	movs	r1, r0
 800d532:	9805      	ldr	r0, [sp, #20]
 800d534:	f000 ff4a 	bl	800e3cc <__mcmp>
 800d538:	900a      	str	r0, [sp, #40]	; 0x28
 800d53a:	9908      	ldr	r1, [sp, #32]
 800d53c:	9804      	ldr	r0, [sp, #16]
 800d53e:	f000 fcb7 	bl	800deb0 <_Bfree>
 800d542:	9b07      	ldr	r3, [sp, #28]
 800d544:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d546:	3301      	adds	r3, #1
 800d548:	9308      	str	r3, [sp, #32]
 800d54a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d54c:	4313      	orrs	r3, r2
 800d54e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d550:	4313      	orrs	r3, r2
 800d552:	d109      	bne.n	800d568 <_dtoa_r+0xacc>
 800d554:	2c39      	cmp	r4, #57	; 0x39
 800d556:	d022      	beq.n	800d59e <_dtoa_r+0xb02>
 800d558:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	dd01      	ble.n	800d562 <_dtoa_r+0xac6>
 800d55e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800d560:	3431      	adds	r4, #49	; 0x31
 800d562:	9b07      	ldr	r3, [sp, #28]
 800d564:	701c      	strb	r4, [r3, #0]
 800d566:	e76e      	b.n	800d446 <_dtoa_r+0x9aa>
 800d568:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	db04      	blt.n	800d578 <_dtoa_r+0xadc>
 800d56e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800d570:	4313      	orrs	r3, r2
 800d572:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d574:	4313      	orrs	r3, r2
 800d576:	d11e      	bne.n	800d5b6 <_dtoa_r+0xb1a>
 800d578:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	ddf1      	ble.n	800d562 <_dtoa_r+0xac6>
 800d57e:	9905      	ldr	r1, [sp, #20]
 800d580:	2201      	movs	r2, #1
 800d582:	9804      	ldr	r0, [sp, #16]
 800d584:	f000 feb4 	bl	800e2f0 <__lshift>
 800d588:	0031      	movs	r1, r6
 800d58a:	9005      	str	r0, [sp, #20]
 800d58c:	f000 ff1e 	bl	800e3cc <__mcmp>
 800d590:	2800      	cmp	r0, #0
 800d592:	dc02      	bgt.n	800d59a <_dtoa_r+0xafe>
 800d594:	d1e5      	bne.n	800d562 <_dtoa_r+0xac6>
 800d596:	07e3      	lsls	r3, r4, #31
 800d598:	d5e3      	bpl.n	800d562 <_dtoa_r+0xac6>
 800d59a:	2c39      	cmp	r4, #57	; 0x39
 800d59c:	d1df      	bne.n	800d55e <_dtoa_r+0xac2>
 800d59e:	2339      	movs	r3, #57	; 0x39
 800d5a0:	9a07      	ldr	r2, [sp, #28]
 800d5a2:	7013      	strb	r3, [r2, #0]
 800d5a4:	9b08      	ldr	r3, [sp, #32]
 800d5a6:	9308      	str	r3, [sp, #32]
 800d5a8:	3b01      	subs	r3, #1
 800d5aa:	781a      	ldrb	r2, [r3, #0]
 800d5ac:	2a39      	cmp	r2, #57	; 0x39
 800d5ae:	d063      	beq.n	800d678 <_dtoa_r+0xbdc>
 800d5b0:	3201      	adds	r2, #1
 800d5b2:	701a      	strb	r2, [r3, #0]
 800d5b4:	e747      	b.n	800d446 <_dtoa_r+0x9aa>
 800d5b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	dd03      	ble.n	800d5c4 <_dtoa_r+0xb28>
 800d5bc:	2c39      	cmp	r4, #57	; 0x39
 800d5be:	d0ee      	beq.n	800d59e <_dtoa_r+0xb02>
 800d5c0:	3401      	adds	r4, #1
 800d5c2:	e7ce      	b.n	800d562 <_dtoa_r+0xac6>
 800d5c4:	9b07      	ldr	r3, [sp, #28]
 800d5c6:	9a07      	ldr	r2, [sp, #28]
 800d5c8:	701c      	strb	r4, [r3, #0]
 800d5ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d5cc:	4293      	cmp	r3, r2
 800d5ce:	d03e      	beq.n	800d64e <_dtoa_r+0xbb2>
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	220a      	movs	r2, #10
 800d5d4:	9905      	ldr	r1, [sp, #20]
 800d5d6:	9804      	ldr	r0, [sp, #16]
 800d5d8:	f000 fc8e 	bl	800def8 <__multadd>
 800d5dc:	2300      	movs	r3, #0
 800d5de:	9005      	str	r0, [sp, #20]
 800d5e0:	220a      	movs	r2, #10
 800d5e2:	0029      	movs	r1, r5
 800d5e4:	9804      	ldr	r0, [sp, #16]
 800d5e6:	42bd      	cmp	r5, r7
 800d5e8:	d106      	bne.n	800d5f8 <_dtoa_r+0xb5c>
 800d5ea:	f000 fc85 	bl	800def8 <__multadd>
 800d5ee:	0005      	movs	r5, r0
 800d5f0:	0007      	movs	r7, r0
 800d5f2:	9b08      	ldr	r3, [sp, #32]
 800d5f4:	9307      	str	r3, [sp, #28]
 800d5f6:	e784      	b.n	800d502 <_dtoa_r+0xa66>
 800d5f8:	f000 fc7e 	bl	800def8 <__multadd>
 800d5fc:	0039      	movs	r1, r7
 800d5fe:	0005      	movs	r5, r0
 800d600:	2300      	movs	r3, #0
 800d602:	220a      	movs	r2, #10
 800d604:	9804      	ldr	r0, [sp, #16]
 800d606:	f000 fc77 	bl	800def8 <__multadd>
 800d60a:	0007      	movs	r7, r0
 800d60c:	e7f1      	b.n	800d5f2 <_dtoa_r+0xb56>
 800d60e:	9b07      	ldr	r3, [sp, #28]
 800d610:	930b      	str	r3, [sp, #44]	; 0x2c
 800d612:	2500      	movs	r5, #0
 800d614:	0031      	movs	r1, r6
 800d616:	9805      	ldr	r0, [sp, #20]
 800d618:	f7ff f9b1 	bl	800c97e <quorem>
 800d61c:	9b06      	ldr	r3, [sp, #24]
 800d61e:	3030      	adds	r0, #48	; 0x30
 800d620:	5558      	strb	r0, [r3, r5]
 800d622:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d624:	3501      	adds	r5, #1
 800d626:	0004      	movs	r4, r0
 800d628:	42ab      	cmp	r3, r5
 800d62a:	dd07      	ble.n	800d63c <_dtoa_r+0xba0>
 800d62c:	2300      	movs	r3, #0
 800d62e:	220a      	movs	r2, #10
 800d630:	9905      	ldr	r1, [sp, #20]
 800d632:	9804      	ldr	r0, [sp, #16]
 800d634:	f000 fc60 	bl	800def8 <__multadd>
 800d638:	9005      	str	r0, [sp, #20]
 800d63a:	e7eb      	b.n	800d614 <_dtoa_r+0xb78>
 800d63c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d63e:	2301      	movs	r3, #1
 800d640:	2a00      	cmp	r2, #0
 800d642:	dd00      	ble.n	800d646 <_dtoa_r+0xbaa>
 800d644:	0013      	movs	r3, r2
 800d646:	2500      	movs	r5, #0
 800d648:	9a06      	ldr	r2, [sp, #24]
 800d64a:	18d3      	adds	r3, r2, r3
 800d64c:	9308      	str	r3, [sp, #32]
 800d64e:	9905      	ldr	r1, [sp, #20]
 800d650:	2201      	movs	r2, #1
 800d652:	9804      	ldr	r0, [sp, #16]
 800d654:	f000 fe4c 	bl	800e2f0 <__lshift>
 800d658:	0031      	movs	r1, r6
 800d65a:	9005      	str	r0, [sp, #20]
 800d65c:	f000 feb6 	bl	800e3cc <__mcmp>
 800d660:	2800      	cmp	r0, #0
 800d662:	dc9f      	bgt.n	800d5a4 <_dtoa_r+0xb08>
 800d664:	d101      	bne.n	800d66a <_dtoa_r+0xbce>
 800d666:	07e4      	lsls	r4, r4, #31
 800d668:	d49c      	bmi.n	800d5a4 <_dtoa_r+0xb08>
 800d66a:	9b08      	ldr	r3, [sp, #32]
 800d66c:	9308      	str	r3, [sp, #32]
 800d66e:	3b01      	subs	r3, #1
 800d670:	781a      	ldrb	r2, [r3, #0]
 800d672:	2a30      	cmp	r2, #48	; 0x30
 800d674:	d0fa      	beq.n	800d66c <_dtoa_r+0xbd0>
 800d676:	e6e6      	b.n	800d446 <_dtoa_r+0x9aa>
 800d678:	9a06      	ldr	r2, [sp, #24]
 800d67a:	429a      	cmp	r2, r3
 800d67c:	d193      	bne.n	800d5a6 <_dtoa_r+0xb0a>
 800d67e:	9b03      	ldr	r3, [sp, #12]
 800d680:	3301      	adds	r3, #1
 800d682:	9303      	str	r3, [sp, #12]
 800d684:	2331      	movs	r3, #49	; 0x31
 800d686:	7013      	strb	r3, [r2, #0]
 800d688:	e6dd      	b.n	800d446 <_dtoa_r+0x9aa>
 800d68a:	4b09      	ldr	r3, [pc, #36]	; (800d6b0 <_dtoa_r+0xc14>)
 800d68c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800d68e:	9306      	str	r3, [sp, #24]
 800d690:	4b08      	ldr	r3, [pc, #32]	; (800d6b4 <_dtoa_r+0xc18>)
 800d692:	2a00      	cmp	r2, #0
 800d694:	d001      	beq.n	800d69a <_dtoa_r+0xbfe>
 800d696:	f7ff fa49 	bl	800cb2c <_dtoa_r+0x90>
 800d69a:	f7ff fa49 	bl	800cb30 <_dtoa_r+0x94>
 800d69e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	dcb6      	bgt.n	800d612 <_dtoa_r+0xb76>
 800d6a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d6a6:	2b02      	cmp	r3, #2
 800d6a8:	dd00      	ble.n	800d6ac <_dtoa_r+0xc10>
 800d6aa:	e6b6      	b.n	800d41a <_dtoa_r+0x97e>
 800d6ac:	e7b1      	b.n	800d612 <_dtoa_r+0xb76>
 800d6ae:	46c0      	nop			; (mov r8, r8)
 800d6b0:	0800fff0 	.word	0x0800fff0
 800d6b4:	0800fff8 	.word	0x0800fff8

0800d6b8 <_free_r>:
 800d6b8:	b570      	push	{r4, r5, r6, lr}
 800d6ba:	0005      	movs	r5, r0
 800d6bc:	2900      	cmp	r1, #0
 800d6be:	d010      	beq.n	800d6e2 <_free_r+0x2a>
 800d6c0:	1f0c      	subs	r4, r1, #4
 800d6c2:	6823      	ldr	r3, [r4, #0]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	da00      	bge.n	800d6ca <_free_r+0x12>
 800d6c8:	18e4      	adds	r4, r4, r3
 800d6ca:	0028      	movs	r0, r5
 800d6cc:	f7fd f8f6 	bl	800a8bc <__malloc_lock>
 800d6d0:	4a1d      	ldr	r2, [pc, #116]	; (800d748 <_free_r+0x90>)
 800d6d2:	6813      	ldr	r3, [r2, #0]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d105      	bne.n	800d6e4 <_free_r+0x2c>
 800d6d8:	6063      	str	r3, [r4, #4]
 800d6da:	6014      	str	r4, [r2, #0]
 800d6dc:	0028      	movs	r0, r5
 800d6de:	f7fd f8f5 	bl	800a8cc <__malloc_unlock>
 800d6e2:	bd70      	pop	{r4, r5, r6, pc}
 800d6e4:	42a3      	cmp	r3, r4
 800d6e6:	d908      	bls.n	800d6fa <_free_r+0x42>
 800d6e8:	6820      	ldr	r0, [r4, #0]
 800d6ea:	1821      	adds	r1, r4, r0
 800d6ec:	428b      	cmp	r3, r1
 800d6ee:	d1f3      	bne.n	800d6d8 <_free_r+0x20>
 800d6f0:	6819      	ldr	r1, [r3, #0]
 800d6f2:	685b      	ldr	r3, [r3, #4]
 800d6f4:	1809      	adds	r1, r1, r0
 800d6f6:	6021      	str	r1, [r4, #0]
 800d6f8:	e7ee      	b.n	800d6d8 <_free_r+0x20>
 800d6fa:	001a      	movs	r2, r3
 800d6fc:	685b      	ldr	r3, [r3, #4]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d001      	beq.n	800d706 <_free_r+0x4e>
 800d702:	42a3      	cmp	r3, r4
 800d704:	d9f9      	bls.n	800d6fa <_free_r+0x42>
 800d706:	6811      	ldr	r1, [r2, #0]
 800d708:	1850      	adds	r0, r2, r1
 800d70a:	42a0      	cmp	r0, r4
 800d70c:	d10b      	bne.n	800d726 <_free_r+0x6e>
 800d70e:	6820      	ldr	r0, [r4, #0]
 800d710:	1809      	adds	r1, r1, r0
 800d712:	1850      	adds	r0, r2, r1
 800d714:	6011      	str	r1, [r2, #0]
 800d716:	4283      	cmp	r3, r0
 800d718:	d1e0      	bne.n	800d6dc <_free_r+0x24>
 800d71a:	6818      	ldr	r0, [r3, #0]
 800d71c:	685b      	ldr	r3, [r3, #4]
 800d71e:	1841      	adds	r1, r0, r1
 800d720:	6011      	str	r1, [r2, #0]
 800d722:	6053      	str	r3, [r2, #4]
 800d724:	e7da      	b.n	800d6dc <_free_r+0x24>
 800d726:	42a0      	cmp	r0, r4
 800d728:	d902      	bls.n	800d730 <_free_r+0x78>
 800d72a:	230c      	movs	r3, #12
 800d72c:	602b      	str	r3, [r5, #0]
 800d72e:	e7d5      	b.n	800d6dc <_free_r+0x24>
 800d730:	6820      	ldr	r0, [r4, #0]
 800d732:	1821      	adds	r1, r4, r0
 800d734:	428b      	cmp	r3, r1
 800d736:	d103      	bne.n	800d740 <_free_r+0x88>
 800d738:	6819      	ldr	r1, [r3, #0]
 800d73a:	685b      	ldr	r3, [r3, #4]
 800d73c:	1809      	adds	r1, r1, r0
 800d73e:	6021      	str	r1, [r4, #0]
 800d740:	6063      	str	r3, [r4, #4]
 800d742:	6054      	str	r4, [r2, #4]
 800d744:	e7ca      	b.n	800d6dc <_free_r+0x24>
 800d746:	46c0      	nop			; (mov r8, r8)
 800d748:	20000a14 	.word	0x20000a14

0800d74c <rshift>:
 800d74c:	0002      	movs	r2, r0
 800d74e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d750:	6904      	ldr	r4, [r0, #16]
 800d752:	114b      	asrs	r3, r1, #5
 800d754:	b085      	sub	sp, #20
 800d756:	3214      	adds	r2, #20
 800d758:	9302      	str	r3, [sp, #8]
 800d75a:	114d      	asrs	r5, r1, #5
 800d75c:	0013      	movs	r3, r2
 800d75e:	42ac      	cmp	r4, r5
 800d760:	dd32      	ble.n	800d7c8 <rshift+0x7c>
 800d762:	261f      	movs	r6, #31
 800d764:	000f      	movs	r7, r1
 800d766:	114b      	asrs	r3, r1, #5
 800d768:	009b      	lsls	r3, r3, #2
 800d76a:	00a5      	lsls	r5, r4, #2
 800d76c:	18d3      	adds	r3, r2, r3
 800d76e:	4037      	ands	r7, r6
 800d770:	1955      	adds	r5, r2, r5
 800d772:	9300      	str	r3, [sp, #0]
 800d774:	9701      	str	r7, [sp, #4]
 800d776:	4231      	tst	r1, r6
 800d778:	d10d      	bne.n	800d796 <rshift+0x4a>
 800d77a:	0016      	movs	r6, r2
 800d77c:	0019      	movs	r1, r3
 800d77e:	428d      	cmp	r5, r1
 800d780:	d836      	bhi.n	800d7f0 <rshift+0xa4>
 800d782:	9900      	ldr	r1, [sp, #0]
 800d784:	2300      	movs	r3, #0
 800d786:	3903      	subs	r1, #3
 800d788:	428d      	cmp	r5, r1
 800d78a:	d302      	bcc.n	800d792 <rshift+0x46>
 800d78c:	9b02      	ldr	r3, [sp, #8]
 800d78e:	1ae4      	subs	r4, r4, r3
 800d790:	00a3      	lsls	r3, r4, #2
 800d792:	18d3      	adds	r3, r2, r3
 800d794:	e018      	b.n	800d7c8 <rshift+0x7c>
 800d796:	2120      	movs	r1, #32
 800d798:	9e01      	ldr	r6, [sp, #4]
 800d79a:	9f01      	ldr	r7, [sp, #4]
 800d79c:	1b89      	subs	r1, r1, r6
 800d79e:	9e00      	ldr	r6, [sp, #0]
 800d7a0:	9103      	str	r1, [sp, #12]
 800d7a2:	ce02      	ldmia	r6!, {r1}
 800d7a4:	4694      	mov	ip, r2
 800d7a6:	40f9      	lsrs	r1, r7
 800d7a8:	42b5      	cmp	r5, r6
 800d7aa:	d816      	bhi.n	800d7da <rshift+0x8e>
 800d7ac:	9e00      	ldr	r6, [sp, #0]
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	3601      	adds	r6, #1
 800d7b2:	42b5      	cmp	r5, r6
 800d7b4:	d303      	bcc.n	800d7be <rshift+0x72>
 800d7b6:	9b02      	ldr	r3, [sp, #8]
 800d7b8:	1ae3      	subs	r3, r4, r3
 800d7ba:	009b      	lsls	r3, r3, #2
 800d7bc:	3b04      	subs	r3, #4
 800d7be:	18d3      	adds	r3, r2, r3
 800d7c0:	6019      	str	r1, [r3, #0]
 800d7c2:	2900      	cmp	r1, #0
 800d7c4:	d000      	beq.n	800d7c8 <rshift+0x7c>
 800d7c6:	3304      	adds	r3, #4
 800d7c8:	1a99      	subs	r1, r3, r2
 800d7ca:	1089      	asrs	r1, r1, #2
 800d7cc:	6101      	str	r1, [r0, #16]
 800d7ce:	4293      	cmp	r3, r2
 800d7d0:	d101      	bne.n	800d7d6 <rshift+0x8a>
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	6143      	str	r3, [r0, #20]
 800d7d6:	b005      	add	sp, #20
 800d7d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d7da:	6837      	ldr	r7, [r6, #0]
 800d7dc:	9b03      	ldr	r3, [sp, #12]
 800d7de:	409f      	lsls	r7, r3
 800d7e0:	430f      	orrs	r7, r1
 800d7e2:	4661      	mov	r1, ip
 800d7e4:	c180      	stmia	r1!, {r7}
 800d7e6:	468c      	mov	ip, r1
 800d7e8:	9b01      	ldr	r3, [sp, #4]
 800d7ea:	ce02      	ldmia	r6!, {r1}
 800d7ec:	40d9      	lsrs	r1, r3
 800d7ee:	e7db      	b.n	800d7a8 <rshift+0x5c>
 800d7f0:	c980      	ldmia	r1!, {r7}
 800d7f2:	c680      	stmia	r6!, {r7}
 800d7f4:	e7c3      	b.n	800d77e <rshift+0x32>

0800d7f6 <__hexdig_fun>:
 800d7f6:	0002      	movs	r2, r0
 800d7f8:	3a30      	subs	r2, #48	; 0x30
 800d7fa:	0003      	movs	r3, r0
 800d7fc:	2a09      	cmp	r2, #9
 800d7fe:	d802      	bhi.n	800d806 <__hexdig_fun+0x10>
 800d800:	3b20      	subs	r3, #32
 800d802:	b2d8      	uxtb	r0, r3
 800d804:	4770      	bx	lr
 800d806:	0002      	movs	r2, r0
 800d808:	3a61      	subs	r2, #97	; 0x61
 800d80a:	2a05      	cmp	r2, #5
 800d80c:	d801      	bhi.n	800d812 <__hexdig_fun+0x1c>
 800d80e:	3b47      	subs	r3, #71	; 0x47
 800d810:	e7f7      	b.n	800d802 <__hexdig_fun+0xc>
 800d812:	001a      	movs	r2, r3
 800d814:	3a41      	subs	r2, #65	; 0x41
 800d816:	2000      	movs	r0, #0
 800d818:	2a05      	cmp	r2, #5
 800d81a:	d8f3      	bhi.n	800d804 <__hexdig_fun+0xe>
 800d81c:	3b27      	subs	r3, #39	; 0x27
 800d81e:	e7f0      	b.n	800d802 <__hexdig_fun+0xc>

0800d820 <__gethex>:
 800d820:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d822:	b089      	sub	sp, #36	; 0x24
 800d824:	9307      	str	r3, [sp, #28]
 800d826:	2302      	movs	r3, #2
 800d828:	9201      	str	r2, [sp, #4]
 800d82a:	680a      	ldr	r2, [r1, #0]
 800d82c:	425b      	negs	r3, r3
 800d82e:	9003      	str	r0, [sp, #12]
 800d830:	9106      	str	r1, [sp, #24]
 800d832:	1c96      	adds	r6, r2, #2
 800d834:	1a9b      	subs	r3, r3, r2
 800d836:	199a      	adds	r2, r3, r6
 800d838:	9600      	str	r6, [sp, #0]
 800d83a:	9205      	str	r2, [sp, #20]
 800d83c:	9a00      	ldr	r2, [sp, #0]
 800d83e:	3601      	adds	r6, #1
 800d840:	7810      	ldrb	r0, [r2, #0]
 800d842:	2830      	cmp	r0, #48	; 0x30
 800d844:	d0f7      	beq.n	800d836 <__gethex+0x16>
 800d846:	f7ff ffd6 	bl	800d7f6 <__hexdig_fun>
 800d84a:	2300      	movs	r3, #0
 800d84c:	001d      	movs	r5, r3
 800d84e:	9302      	str	r3, [sp, #8]
 800d850:	4298      	cmp	r0, r3
 800d852:	d11d      	bne.n	800d890 <__gethex+0x70>
 800d854:	2201      	movs	r2, #1
 800d856:	49a6      	ldr	r1, [pc, #664]	; (800daf0 <__gethex+0x2d0>)
 800d858:	9800      	ldr	r0, [sp, #0]
 800d85a:	f7fe ffb1 	bl	800c7c0 <strncmp>
 800d85e:	0007      	movs	r7, r0
 800d860:	42a8      	cmp	r0, r5
 800d862:	d169      	bne.n	800d938 <__gethex+0x118>
 800d864:	9b00      	ldr	r3, [sp, #0]
 800d866:	0034      	movs	r4, r6
 800d868:	7858      	ldrb	r0, [r3, #1]
 800d86a:	f7ff ffc4 	bl	800d7f6 <__hexdig_fun>
 800d86e:	2301      	movs	r3, #1
 800d870:	9302      	str	r3, [sp, #8]
 800d872:	42a8      	cmp	r0, r5
 800d874:	d02f      	beq.n	800d8d6 <__gethex+0xb6>
 800d876:	9600      	str	r6, [sp, #0]
 800d878:	9b00      	ldr	r3, [sp, #0]
 800d87a:	7818      	ldrb	r0, [r3, #0]
 800d87c:	2830      	cmp	r0, #48	; 0x30
 800d87e:	d009      	beq.n	800d894 <__gethex+0x74>
 800d880:	f7ff ffb9 	bl	800d7f6 <__hexdig_fun>
 800d884:	4242      	negs	r2, r0
 800d886:	4142      	adcs	r2, r0
 800d888:	2301      	movs	r3, #1
 800d88a:	0035      	movs	r5, r6
 800d88c:	9202      	str	r2, [sp, #8]
 800d88e:	9305      	str	r3, [sp, #20]
 800d890:	9c00      	ldr	r4, [sp, #0]
 800d892:	e004      	b.n	800d89e <__gethex+0x7e>
 800d894:	9b00      	ldr	r3, [sp, #0]
 800d896:	3301      	adds	r3, #1
 800d898:	9300      	str	r3, [sp, #0]
 800d89a:	e7ed      	b.n	800d878 <__gethex+0x58>
 800d89c:	3401      	adds	r4, #1
 800d89e:	7820      	ldrb	r0, [r4, #0]
 800d8a0:	f7ff ffa9 	bl	800d7f6 <__hexdig_fun>
 800d8a4:	1e07      	subs	r7, r0, #0
 800d8a6:	d1f9      	bne.n	800d89c <__gethex+0x7c>
 800d8a8:	2201      	movs	r2, #1
 800d8aa:	0020      	movs	r0, r4
 800d8ac:	4990      	ldr	r1, [pc, #576]	; (800daf0 <__gethex+0x2d0>)
 800d8ae:	f7fe ff87 	bl	800c7c0 <strncmp>
 800d8b2:	2800      	cmp	r0, #0
 800d8b4:	d10d      	bne.n	800d8d2 <__gethex+0xb2>
 800d8b6:	2d00      	cmp	r5, #0
 800d8b8:	d106      	bne.n	800d8c8 <__gethex+0xa8>
 800d8ba:	3401      	adds	r4, #1
 800d8bc:	0025      	movs	r5, r4
 800d8be:	7820      	ldrb	r0, [r4, #0]
 800d8c0:	f7ff ff99 	bl	800d7f6 <__hexdig_fun>
 800d8c4:	2800      	cmp	r0, #0
 800d8c6:	d102      	bne.n	800d8ce <__gethex+0xae>
 800d8c8:	1b2d      	subs	r5, r5, r4
 800d8ca:	00af      	lsls	r7, r5, #2
 800d8cc:	e003      	b.n	800d8d6 <__gethex+0xb6>
 800d8ce:	3401      	adds	r4, #1
 800d8d0:	e7f5      	b.n	800d8be <__gethex+0x9e>
 800d8d2:	2d00      	cmp	r5, #0
 800d8d4:	d1f8      	bne.n	800d8c8 <__gethex+0xa8>
 800d8d6:	2220      	movs	r2, #32
 800d8d8:	7823      	ldrb	r3, [r4, #0]
 800d8da:	0026      	movs	r6, r4
 800d8dc:	4393      	bics	r3, r2
 800d8de:	2b50      	cmp	r3, #80	; 0x50
 800d8e0:	d11d      	bne.n	800d91e <__gethex+0xfe>
 800d8e2:	7863      	ldrb	r3, [r4, #1]
 800d8e4:	2b2b      	cmp	r3, #43	; 0x2b
 800d8e6:	d02c      	beq.n	800d942 <__gethex+0x122>
 800d8e8:	2b2d      	cmp	r3, #45	; 0x2d
 800d8ea:	d02e      	beq.n	800d94a <__gethex+0x12a>
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	1c66      	adds	r6, r4, #1
 800d8f0:	9304      	str	r3, [sp, #16]
 800d8f2:	7830      	ldrb	r0, [r6, #0]
 800d8f4:	f7ff ff7f 	bl	800d7f6 <__hexdig_fun>
 800d8f8:	1e43      	subs	r3, r0, #1
 800d8fa:	b2db      	uxtb	r3, r3
 800d8fc:	2b18      	cmp	r3, #24
 800d8fe:	d82b      	bhi.n	800d958 <__gethex+0x138>
 800d900:	3810      	subs	r0, #16
 800d902:	0005      	movs	r5, r0
 800d904:	7870      	ldrb	r0, [r6, #1]
 800d906:	f7ff ff76 	bl	800d7f6 <__hexdig_fun>
 800d90a:	1e43      	subs	r3, r0, #1
 800d90c:	b2db      	uxtb	r3, r3
 800d90e:	3601      	adds	r6, #1
 800d910:	2b18      	cmp	r3, #24
 800d912:	d91c      	bls.n	800d94e <__gethex+0x12e>
 800d914:	9b04      	ldr	r3, [sp, #16]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d000      	beq.n	800d91c <__gethex+0xfc>
 800d91a:	426d      	negs	r5, r5
 800d91c:	197f      	adds	r7, r7, r5
 800d91e:	9b06      	ldr	r3, [sp, #24]
 800d920:	601e      	str	r6, [r3, #0]
 800d922:	9b02      	ldr	r3, [sp, #8]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d019      	beq.n	800d95c <__gethex+0x13c>
 800d928:	2600      	movs	r6, #0
 800d92a:	9b05      	ldr	r3, [sp, #20]
 800d92c:	42b3      	cmp	r3, r6
 800d92e:	d100      	bne.n	800d932 <__gethex+0x112>
 800d930:	3606      	adds	r6, #6
 800d932:	0030      	movs	r0, r6
 800d934:	b009      	add	sp, #36	; 0x24
 800d936:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d938:	2301      	movs	r3, #1
 800d93a:	2700      	movs	r7, #0
 800d93c:	9c00      	ldr	r4, [sp, #0]
 800d93e:	9302      	str	r3, [sp, #8]
 800d940:	e7c9      	b.n	800d8d6 <__gethex+0xb6>
 800d942:	2300      	movs	r3, #0
 800d944:	9304      	str	r3, [sp, #16]
 800d946:	1ca6      	adds	r6, r4, #2
 800d948:	e7d3      	b.n	800d8f2 <__gethex+0xd2>
 800d94a:	2301      	movs	r3, #1
 800d94c:	e7fa      	b.n	800d944 <__gethex+0x124>
 800d94e:	230a      	movs	r3, #10
 800d950:	435d      	muls	r5, r3
 800d952:	182d      	adds	r5, r5, r0
 800d954:	3d10      	subs	r5, #16
 800d956:	e7d5      	b.n	800d904 <__gethex+0xe4>
 800d958:	0026      	movs	r6, r4
 800d95a:	e7e0      	b.n	800d91e <__gethex+0xfe>
 800d95c:	9b00      	ldr	r3, [sp, #0]
 800d95e:	9902      	ldr	r1, [sp, #8]
 800d960:	1ae3      	subs	r3, r4, r3
 800d962:	3b01      	subs	r3, #1
 800d964:	2b07      	cmp	r3, #7
 800d966:	dc0a      	bgt.n	800d97e <__gethex+0x15e>
 800d968:	9803      	ldr	r0, [sp, #12]
 800d96a:	f000 fa5d 	bl	800de28 <_Balloc>
 800d96e:	1e05      	subs	r5, r0, #0
 800d970:	d108      	bne.n	800d984 <__gethex+0x164>
 800d972:	002a      	movs	r2, r5
 800d974:	21e4      	movs	r1, #228	; 0xe4
 800d976:	4b5f      	ldr	r3, [pc, #380]	; (800daf4 <__gethex+0x2d4>)
 800d978:	485f      	ldr	r0, [pc, #380]	; (800daf8 <__gethex+0x2d8>)
 800d97a:	f7fc fec9 	bl	800a710 <__assert_func>
 800d97e:	3101      	adds	r1, #1
 800d980:	105b      	asrs	r3, r3, #1
 800d982:	e7ef      	b.n	800d964 <__gethex+0x144>
 800d984:	0003      	movs	r3, r0
 800d986:	3314      	adds	r3, #20
 800d988:	9302      	str	r3, [sp, #8]
 800d98a:	9305      	str	r3, [sp, #20]
 800d98c:	2300      	movs	r3, #0
 800d98e:	001e      	movs	r6, r3
 800d990:	9304      	str	r3, [sp, #16]
 800d992:	9b00      	ldr	r3, [sp, #0]
 800d994:	42a3      	cmp	r3, r4
 800d996:	d33f      	bcc.n	800da18 <__gethex+0x1f8>
 800d998:	9c05      	ldr	r4, [sp, #20]
 800d99a:	9b02      	ldr	r3, [sp, #8]
 800d99c:	c440      	stmia	r4!, {r6}
 800d99e:	1ae4      	subs	r4, r4, r3
 800d9a0:	10a4      	asrs	r4, r4, #2
 800d9a2:	0030      	movs	r0, r6
 800d9a4:	612c      	str	r4, [r5, #16]
 800d9a6:	f000 fb37 	bl	800e018 <__hi0bits>
 800d9aa:	9b01      	ldr	r3, [sp, #4]
 800d9ac:	0164      	lsls	r4, r4, #5
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	1a26      	subs	r6, r4, r0
 800d9b2:	9300      	str	r3, [sp, #0]
 800d9b4:	429e      	cmp	r6, r3
 800d9b6:	dd51      	ble.n	800da5c <__gethex+0x23c>
 800d9b8:	1af6      	subs	r6, r6, r3
 800d9ba:	0031      	movs	r1, r6
 800d9bc:	0028      	movs	r0, r5
 800d9be:	f000 fecb 	bl	800e758 <__any_on>
 800d9c2:	1e04      	subs	r4, r0, #0
 800d9c4:	d016      	beq.n	800d9f4 <__gethex+0x1d4>
 800d9c6:	2401      	movs	r4, #1
 800d9c8:	231f      	movs	r3, #31
 800d9ca:	0020      	movs	r0, r4
 800d9cc:	1e72      	subs	r2, r6, #1
 800d9ce:	4013      	ands	r3, r2
 800d9d0:	4098      	lsls	r0, r3
 800d9d2:	0003      	movs	r3, r0
 800d9d4:	1151      	asrs	r1, r2, #5
 800d9d6:	9802      	ldr	r0, [sp, #8]
 800d9d8:	0089      	lsls	r1, r1, #2
 800d9da:	5809      	ldr	r1, [r1, r0]
 800d9dc:	4219      	tst	r1, r3
 800d9de:	d009      	beq.n	800d9f4 <__gethex+0x1d4>
 800d9e0:	42a2      	cmp	r2, r4
 800d9e2:	dd06      	ble.n	800d9f2 <__gethex+0x1d2>
 800d9e4:	0028      	movs	r0, r5
 800d9e6:	1eb1      	subs	r1, r6, #2
 800d9e8:	f000 feb6 	bl	800e758 <__any_on>
 800d9ec:	3402      	adds	r4, #2
 800d9ee:	2800      	cmp	r0, #0
 800d9f0:	d100      	bne.n	800d9f4 <__gethex+0x1d4>
 800d9f2:	2402      	movs	r4, #2
 800d9f4:	0031      	movs	r1, r6
 800d9f6:	0028      	movs	r0, r5
 800d9f8:	f7ff fea8 	bl	800d74c <rshift>
 800d9fc:	19bf      	adds	r7, r7, r6
 800d9fe:	9b01      	ldr	r3, [sp, #4]
 800da00:	689b      	ldr	r3, [r3, #8]
 800da02:	42bb      	cmp	r3, r7
 800da04:	da3a      	bge.n	800da7c <__gethex+0x25c>
 800da06:	0029      	movs	r1, r5
 800da08:	9803      	ldr	r0, [sp, #12]
 800da0a:	f000 fa51 	bl	800deb0 <_Bfree>
 800da0e:	2300      	movs	r3, #0
 800da10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800da12:	26a3      	movs	r6, #163	; 0xa3
 800da14:	6013      	str	r3, [r2, #0]
 800da16:	e78c      	b.n	800d932 <__gethex+0x112>
 800da18:	3c01      	subs	r4, #1
 800da1a:	7823      	ldrb	r3, [r4, #0]
 800da1c:	2b2e      	cmp	r3, #46	; 0x2e
 800da1e:	d012      	beq.n	800da46 <__gethex+0x226>
 800da20:	9b04      	ldr	r3, [sp, #16]
 800da22:	2b20      	cmp	r3, #32
 800da24:	d104      	bne.n	800da30 <__gethex+0x210>
 800da26:	9b05      	ldr	r3, [sp, #20]
 800da28:	c340      	stmia	r3!, {r6}
 800da2a:	2600      	movs	r6, #0
 800da2c:	9305      	str	r3, [sp, #20]
 800da2e:	9604      	str	r6, [sp, #16]
 800da30:	7820      	ldrb	r0, [r4, #0]
 800da32:	f7ff fee0 	bl	800d7f6 <__hexdig_fun>
 800da36:	230f      	movs	r3, #15
 800da38:	4018      	ands	r0, r3
 800da3a:	9b04      	ldr	r3, [sp, #16]
 800da3c:	4098      	lsls	r0, r3
 800da3e:	3304      	adds	r3, #4
 800da40:	4306      	orrs	r6, r0
 800da42:	9304      	str	r3, [sp, #16]
 800da44:	e7a5      	b.n	800d992 <__gethex+0x172>
 800da46:	9b00      	ldr	r3, [sp, #0]
 800da48:	42a3      	cmp	r3, r4
 800da4a:	d8e9      	bhi.n	800da20 <__gethex+0x200>
 800da4c:	2201      	movs	r2, #1
 800da4e:	0020      	movs	r0, r4
 800da50:	4927      	ldr	r1, [pc, #156]	; (800daf0 <__gethex+0x2d0>)
 800da52:	f7fe feb5 	bl	800c7c0 <strncmp>
 800da56:	2800      	cmp	r0, #0
 800da58:	d1e2      	bne.n	800da20 <__gethex+0x200>
 800da5a:	e79a      	b.n	800d992 <__gethex+0x172>
 800da5c:	9b00      	ldr	r3, [sp, #0]
 800da5e:	2400      	movs	r4, #0
 800da60:	429e      	cmp	r6, r3
 800da62:	dacc      	bge.n	800d9fe <__gethex+0x1de>
 800da64:	1b9e      	subs	r6, r3, r6
 800da66:	0029      	movs	r1, r5
 800da68:	0032      	movs	r2, r6
 800da6a:	9803      	ldr	r0, [sp, #12]
 800da6c:	f000 fc40 	bl	800e2f0 <__lshift>
 800da70:	0003      	movs	r3, r0
 800da72:	3314      	adds	r3, #20
 800da74:	0005      	movs	r5, r0
 800da76:	1bbf      	subs	r7, r7, r6
 800da78:	9302      	str	r3, [sp, #8]
 800da7a:	e7c0      	b.n	800d9fe <__gethex+0x1de>
 800da7c:	9b01      	ldr	r3, [sp, #4]
 800da7e:	685e      	ldr	r6, [r3, #4]
 800da80:	42be      	cmp	r6, r7
 800da82:	dd70      	ble.n	800db66 <__gethex+0x346>
 800da84:	9b00      	ldr	r3, [sp, #0]
 800da86:	1bf6      	subs	r6, r6, r7
 800da88:	42b3      	cmp	r3, r6
 800da8a:	dc37      	bgt.n	800dafc <__gethex+0x2dc>
 800da8c:	9b01      	ldr	r3, [sp, #4]
 800da8e:	68db      	ldr	r3, [r3, #12]
 800da90:	2b02      	cmp	r3, #2
 800da92:	d024      	beq.n	800dade <__gethex+0x2be>
 800da94:	2b03      	cmp	r3, #3
 800da96:	d026      	beq.n	800dae6 <__gethex+0x2c6>
 800da98:	2b01      	cmp	r3, #1
 800da9a:	d117      	bne.n	800dacc <__gethex+0x2ac>
 800da9c:	9b00      	ldr	r3, [sp, #0]
 800da9e:	42b3      	cmp	r3, r6
 800daa0:	d114      	bne.n	800dacc <__gethex+0x2ac>
 800daa2:	2b01      	cmp	r3, #1
 800daa4:	d10b      	bne.n	800dabe <__gethex+0x29e>
 800daa6:	9b01      	ldr	r3, [sp, #4]
 800daa8:	9a07      	ldr	r2, [sp, #28]
 800daaa:	685b      	ldr	r3, [r3, #4]
 800daac:	2662      	movs	r6, #98	; 0x62
 800daae:	6013      	str	r3, [r2, #0]
 800dab0:	2301      	movs	r3, #1
 800dab2:	9a02      	ldr	r2, [sp, #8]
 800dab4:	612b      	str	r3, [r5, #16]
 800dab6:	6013      	str	r3, [r2, #0]
 800dab8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800daba:	601d      	str	r5, [r3, #0]
 800dabc:	e739      	b.n	800d932 <__gethex+0x112>
 800dabe:	9900      	ldr	r1, [sp, #0]
 800dac0:	0028      	movs	r0, r5
 800dac2:	3901      	subs	r1, #1
 800dac4:	f000 fe48 	bl	800e758 <__any_on>
 800dac8:	2800      	cmp	r0, #0
 800daca:	d1ec      	bne.n	800daa6 <__gethex+0x286>
 800dacc:	0029      	movs	r1, r5
 800dace:	9803      	ldr	r0, [sp, #12]
 800dad0:	f000 f9ee 	bl	800deb0 <_Bfree>
 800dad4:	2300      	movs	r3, #0
 800dad6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dad8:	2650      	movs	r6, #80	; 0x50
 800dada:	6013      	str	r3, [r2, #0]
 800dadc:	e729      	b.n	800d932 <__gethex+0x112>
 800dade:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d1f3      	bne.n	800dacc <__gethex+0x2ac>
 800dae4:	e7df      	b.n	800daa6 <__gethex+0x286>
 800dae6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d1dc      	bne.n	800daa6 <__gethex+0x286>
 800daec:	e7ee      	b.n	800dacc <__gethex+0x2ac>
 800daee:	46c0      	nop			; (mov r8, r8)
 800daf0:	0800fe58 	.word	0x0800fe58
 800daf4:	0801006c 	.word	0x0801006c
 800daf8:	0801007d 	.word	0x0801007d
 800dafc:	1e77      	subs	r7, r6, #1
 800dafe:	2c00      	cmp	r4, #0
 800db00:	d12f      	bne.n	800db62 <__gethex+0x342>
 800db02:	2f00      	cmp	r7, #0
 800db04:	d004      	beq.n	800db10 <__gethex+0x2f0>
 800db06:	0039      	movs	r1, r7
 800db08:	0028      	movs	r0, r5
 800db0a:	f000 fe25 	bl	800e758 <__any_on>
 800db0e:	0004      	movs	r4, r0
 800db10:	231f      	movs	r3, #31
 800db12:	117a      	asrs	r2, r7, #5
 800db14:	401f      	ands	r7, r3
 800db16:	3b1e      	subs	r3, #30
 800db18:	40bb      	lsls	r3, r7
 800db1a:	9902      	ldr	r1, [sp, #8]
 800db1c:	0092      	lsls	r2, r2, #2
 800db1e:	5852      	ldr	r2, [r2, r1]
 800db20:	421a      	tst	r2, r3
 800db22:	d001      	beq.n	800db28 <__gethex+0x308>
 800db24:	2302      	movs	r3, #2
 800db26:	431c      	orrs	r4, r3
 800db28:	9b00      	ldr	r3, [sp, #0]
 800db2a:	0031      	movs	r1, r6
 800db2c:	1b9b      	subs	r3, r3, r6
 800db2e:	2602      	movs	r6, #2
 800db30:	0028      	movs	r0, r5
 800db32:	9300      	str	r3, [sp, #0]
 800db34:	f7ff fe0a 	bl	800d74c <rshift>
 800db38:	9b01      	ldr	r3, [sp, #4]
 800db3a:	685f      	ldr	r7, [r3, #4]
 800db3c:	2c00      	cmp	r4, #0
 800db3e:	d041      	beq.n	800dbc4 <__gethex+0x3a4>
 800db40:	9b01      	ldr	r3, [sp, #4]
 800db42:	68db      	ldr	r3, [r3, #12]
 800db44:	2b02      	cmp	r3, #2
 800db46:	d010      	beq.n	800db6a <__gethex+0x34a>
 800db48:	2b03      	cmp	r3, #3
 800db4a:	d012      	beq.n	800db72 <__gethex+0x352>
 800db4c:	2b01      	cmp	r3, #1
 800db4e:	d106      	bne.n	800db5e <__gethex+0x33e>
 800db50:	07a2      	lsls	r2, r4, #30
 800db52:	d504      	bpl.n	800db5e <__gethex+0x33e>
 800db54:	9a02      	ldr	r2, [sp, #8]
 800db56:	6812      	ldr	r2, [r2, #0]
 800db58:	4314      	orrs	r4, r2
 800db5a:	421c      	tst	r4, r3
 800db5c:	d10c      	bne.n	800db78 <__gethex+0x358>
 800db5e:	2310      	movs	r3, #16
 800db60:	e02f      	b.n	800dbc2 <__gethex+0x3a2>
 800db62:	2401      	movs	r4, #1
 800db64:	e7d4      	b.n	800db10 <__gethex+0x2f0>
 800db66:	2601      	movs	r6, #1
 800db68:	e7e8      	b.n	800db3c <__gethex+0x31c>
 800db6a:	2301      	movs	r3, #1
 800db6c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800db6e:	1a9b      	subs	r3, r3, r2
 800db70:	930f      	str	r3, [sp, #60]	; 0x3c
 800db72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800db74:	2b00      	cmp	r3, #0
 800db76:	d0f2      	beq.n	800db5e <__gethex+0x33e>
 800db78:	692b      	ldr	r3, [r5, #16]
 800db7a:	2000      	movs	r0, #0
 800db7c:	9302      	str	r3, [sp, #8]
 800db7e:	009b      	lsls	r3, r3, #2
 800db80:	9304      	str	r3, [sp, #16]
 800db82:	002b      	movs	r3, r5
 800db84:	9a04      	ldr	r2, [sp, #16]
 800db86:	3314      	adds	r3, #20
 800db88:	1899      	adds	r1, r3, r2
 800db8a:	681a      	ldr	r2, [r3, #0]
 800db8c:	1c54      	adds	r4, r2, #1
 800db8e:	d01e      	beq.n	800dbce <__gethex+0x3ae>
 800db90:	3201      	adds	r2, #1
 800db92:	601a      	str	r2, [r3, #0]
 800db94:	002b      	movs	r3, r5
 800db96:	3314      	adds	r3, #20
 800db98:	2e02      	cmp	r6, #2
 800db9a:	d141      	bne.n	800dc20 <__gethex+0x400>
 800db9c:	9a01      	ldr	r2, [sp, #4]
 800db9e:	9900      	ldr	r1, [sp, #0]
 800dba0:	6812      	ldr	r2, [r2, #0]
 800dba2:	3a01      	subs	r2, #1
 800dba4:	428a      	cmp	r2, r1
 800dba6:	d10b      	bne.n	800dbc0 <__gethex+0x3a0>
 800dba8:	221f      	movs	r2, #31
 800dbaa:	9800      	ldr	r0, [sp, #0]
 800dbac:	1149      	asrs	r1, r1, #5
 800dbae:	4002      	ands	r2, r0
 800dbb0:	2001      	movs	r0, #1
 800dbb2:	0004      	movs	r4, r0
 800dbb4:	4094      	lsls	r4, r2
 800dbb6:	0089      	lsls	r1, r1, #2
 800dbb8:	58cb      	ldr	r3, [r1, r3]
 800dbba:	4223      	tst	r3, r4
 800dbbc:	d000      	beq.n	800dbc0 <__gethex+0x3a0>
 800dbbe:	2601      	movs	r6, #1
 800dbc0:	2320      	movs	r3, #32
 800dbc2:	431e      	orrs	r6, r3
 800dbc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dbc6:	601d      	str	r5, [r3, #0]
 800dbc8:	9b07      	ldr	r3, [sp, #28]
 800dbca:	601f      	str	r7, [r3, #0]
 800dbcc:	e6b1      	b.n	800d932 <__gethex+0x112>
 800dbce:	c301      	stmia	r3!, {r0}
 800dbd0:	4299      	cmp	r1, r3
 800dbd2:	d8da      	bhi.n	800db8a <__gethex+0x36a>
 800dbd4:	68ab      	ldr	r3, [r5, #8]
 800dbd6:	9a02      	ldr	r2, [sp, #8]
 800dbd8:	429a      	cmp	r2, r3
 800dbda:	db18      	blt.n	800dc0e <__gethex+0x3ee>
 800dbdc:	6869      	ldr	r1, [r5, #4]
 800dbde:	9803      	ldr	r0, [sp, #12]
 800dbe0:	3101      	adds	r1, #1
 800dbe2:	f000 f921 	bl	800de28 <_Balloc>
 800dbe6:	1e04      	subs	r4, r0, #0
 800dbe8:	d104      	bne.n	800dbf4 <__gethex+0x3d4>
 800dbea:	0022      	movs	r2, r4
 800dbec:	2184      	movs	r1, #132	; 0x84
 800dbee:	4b1c      	ldr	r3, [pc, #112]	; (800dc60 <__gethex+0x440>)
 800dbf0:	481c      	ldr	r0, [pc, #112]	; (800dc64 <__gethex+0x444>)
 800dbf2:	e6c2      	b.n	800d97a <__gethex+0x15a>
 800dbf4:	0029      	movs	r1, r5
 800dbf6:	692a      	ldr	r2, [r5, #16]
 800dbf8:	310c      	adds	r1, #12
 800dbfa:	3202      	adds	r2, #2
 800dbfc:	0092      	lsls	r2, r2, #2
 800dbfe:	300c      	adds	r0, #12
 800dc00:	f7fe fea2 	bl	800c948 <memcpy>
 800dc04:	0029      	movs	r1, r5
 800dc06:	9803      	ldr	r0, [sp, #12]
 800dc08:	f000 f952 	bl	800deb0 <_Bfree>
 800dc0c:	0025      	movs	r5, r4
 800dc0e:	692b      	ldr	r3, [r5, #16]
 800dc10:	1c5a      	adds	r2, r3, #1
 800dc12:	612a      	str	r2, [r5, #16]
 800dc14:	2201      	movs	r2, #1
 800dc16:	3304      	adds	r3, #4
 800dc18:	009b      	lsls	r3, r3, #2
 800dc1a:	18eb      	adds	r3, r5, r3
 800dc1c:	605a      	str	r2, [r3, #4]
 800dc1e:	e7b9      	b.n	800db94 <__gethex+0x374>
 800dc20:	692a      	ldr	r2, [r5, #16]
 800dc22:	9902      	ldr	r1, [sp, #8]
 800dc24:	428a      	cmp	r2, r1
 800dc26:	dd09      	ble.n	800dc3c <__gethex+0x41c>
 800dc28:	2101      	movs	r1, #1
 800dc2a:	0028      	movs	r0, r5
 800dc2c:	f7ff fd8e 	bl	800d74c <rshift>
 800dc30:	9b01      	ldr	r3, [sp, #4]
 800dc32:	3701      	adds	r7, #1
 800dc34:	689b      	ldr	r3, [r3, #8]
 800dc36:	42bb      	cmp	r3, r7
 800dc38:	dac1      	bge.n	800dbbe <__gethex+0x39e>
 800dc3a:	e6e4      	b.n	800da06 <__gethex+0x1e6>
 800dc3c:	221f      	movs	r2, #31
 800dc3e:	9c00      	ldr	r4, [sp, #0]
 800dc40:	9900      	ldr	r1, [sp, #0]
 800dc42:	2601      	movs	r6, #1
 800dc44:	4014      	ands	r4, r2
 800dc46:	4211      	tst	r1, r2
 800dc48:	d0ba      	beq.n	800dbc0 <__gethex+0x3a0>
 800dc4a:	9a04      	ldr	r2, [sp, #16]
 800dc4c:	189b      	adds	r3, r3, r2
 800dc4e:	3b04      	subs	r3, #4
 800dc50:	6818      	ldr	r0, [r3, #0]
 800dc52:	f000 f9e1 	bl	800e018 <__hi0bits>
 800dc56:	2320      	movs	r3, #32
 800dc58:	1b1b      	subs	r3, r3, r4
 800dc5a:	4298      	cmp	r0, r3
 800dc5c:	dbe4      	blt.n	800dc28 <__gethex+0x408>
 800dc5e:	e7af      	b.n	800dbc0 <__gethex+0x3a0>
 800dc60:	0801006c 	.word	0x0801006c
 800dc64:	0801007d 	.word	0x0801007d

0800dc68 <L_shift>:
 800dc68:	2308      	movs	r3, #8
 800dc6a:	b570      	push	{r4, r5, r6, lr}
 800dc6c:	2520      	movs	r5, #32
 800dc6e:	1a9a      	subs	r2, r3, r2
 800dc70:	0092      	lsls	r2, r2, #2
 800dc72:	1aad      	subs	r5, r5, r2
 800dc74:	6843      	ldr	r3, [r0, #4]
 800dc76:	6804      	ldr	r4, [r0, #0]
 800dc78:	001e      	movs	r6, r3
 800dc7a:	40ae      	lsls	r6, r5
 800dc7c:	40d3      	lsrs	r3, r2
 800dc7e:	4334      	orrs	r4, r6
 800dc80:	6004      	str	r4, [r0, #0]
 800dc82:	6043      	str	r3, [r0, #4]
 800dc84:	3004      	adds	r0, #4
 800dc86:	4288      	cmp	r0, r1
 800dc88:	d3f4      	bcc.n	800dc74 <L_shift+0xc>
 800dc8a:	bd70      	pop	{r4, r5, r6, pc}

0800dc8c <__match>:
 800dc8c:	b530      	push	{r4, r5, lr}
 800dc8e:	6803      	ldr	r3, [r0, #0]
 800dc90:	780c      	ldrb	r4, [r1, #0]
 800dc92:	3301      	adds	r3, #1
 800dc94:	2c00      	cmp	r4, #0
 800dc96:	d102      	bne.n	800dc9e <__match+0x12>
 800dc98:	6003      	str	r3, [r0, #0]
 800dc9a:	2001      	movs	r0, #1
 800dc9c:	bd30      	pop	{r4, r5, pc}
 800dc9e:	781a      	ldrb	r2, [r3, #0]
 800dca0:	0015      	movs	r5, r2
 800dca2:	3d41      	subs	r5, #65	; 0x41
 800dca4:	2d19      	cmp	r5, #25
 800dca6:	d800      	bhi.n	800dcaa <__match+0x1e>
 800dca8:	3220      	adds	r2, #32
 800dcaa:	3101      	adds	r1, #1
 800dcac:	42a2      	cmp	r2, r4
 800dcae:	d0ef      	beq.n	800dc90 <__match+0x4>
 800dcb0:	2000      	movs	r0, #0
 800dcb2:	e7f3      	b.n	800dc9c <__match+0x10>

0800dcb4 <__hexnan>:
 800dcb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dcb6:	680b      	ldr	r3, [r1, #0]
 800dcb8:	b08b      	sub	sp, #44	; 0x2c
 800dcba:	9201      	str	r2, [sp, #4]
 800dcbc:	9901      	ldr	r1, [sp, #4]
 800dcbe:	115a      	asrs	r2, r3, #5
 800dcc0:	0092      	lsls	r2, r2, #2
 800dcc2:	188a      	adds	r2, r1, r2
 800dcc4:	9202      	str	r2, [sp, #8]
 800dcc6:	0019      	movs	r1, r3
 800dcc8:	221f      	movs	r2, #31
 800dcca:	4011      	ands	r1, r2
 800dccc:	9008      	str	r0, [sp, #32]
 800dcce:	9106      	str	r1, [sp, #24]
 800dcd0:	4213      	tst	r3, r2
 800dcd2:	d002      	beq.n	800dcda <__hexnan+0x26>
 800dcd4:	9b02      	ldr	r3, [sp, #8]
 800dcd6:	3304      	adds	r3, #4
 800dcd8:	9302      	str	r3, [sp, #8]
 800dcda:	9b02      	ldr	r3, [sp, #8]
 800dcdc:	2500      	movs	r5, #0
 800dcde:	1f1f      	subs	r7, r3, #4
 800dce0:	003e      	movs	r6, r7
 800dce2:	003c      	movs	r4, r7
 800dce4:	9b08      	ldr	r3, [sp, #32]
 800dce6:	603d      	str	r5, [r7, #0]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	9507      	str	r5, [sp, #28]
 800dcec:	9305      	str	r3, [sp, #20]
 800dcee:	9503      	str	r5, [sp, #12]
 800dcf0:	9b05      	ldr	r3, [sp, #20]
 800dcf2:	3301      	adds	r3, #1
 800dcf4:	9309      	str	r3, [sp, #36]	; 0x24
 800dcf6:	9b05      	ldr	r3, [sp, #20]
 800dcf8:	785b      	ldrb	r3, [r3, #1]
 800dcfa:	9304      	str	r3, [sp, #16]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d028      	beq.n	800dd52 <__hexnan+0x9e>
 800dd00:	9804      	ldr	r0, [sp, #16]
 800dd02:	f7ff fd78 	bl	800d7f6 <__hexdig_fun>
 800dd06:	2800      	cmp	r0, #0
 800dd08:	d154      	bne.n	800ddb4 <__hexnan+0x100>
 800dd0a:	9b04      	ldr	r3, [sp, #16]
 800dd0c:	2b20      	cmp	r3, #32
 800dd0e:	d819      	bhi.n	800dd44 <__hexnan+0x90>
 800dd10:	9b03      	ldr	r3, [sp, #12]
 800dd12:	9a07      	ldr	r2, [sp, #28]
 800dd14:	4293      	cmp	r3, r2
 800dd16:	dd12      	ble.n	800dd3e <__hexnan+0x8a>
 800dd18:	42b4      	cmp	r4, r6
 800dd1a:	d206      	bcs.n	800dd2a <__hexnan+0x76>
 800dd1c:	2d07      	cmp	r5, #7
 800dd1e:	dc04      	bgt.n	800dd2a <__hexnan+0x76>
 800dd20:	002a      	movs	r2, r5
 800dd22:	0031      	movs	r1, r6
 800dd24:	0020      	movs	r0, r4
 800dd26:	f7ff ff9f 	bl	800dc68 <L_shift>
 800dd2a:	9b01      	ldr	r3, [sp, #4]
 800dd2c:	2508      	movs	r5, #8
 800dd2e:	429c      	cmp	r4, r3
 800dd30:	d905      	bls.n	800dd3e <__hexnan+0x8a>
 800dd32:	1f26      	subs	r6, r4, #4
 800dd34:	2500      	movs	r5, #0
 800dd36:	0034      	movs	r4, r6
 800dd38:	9b03      	ldr	r3, [sp, #12]
 800dd3a:	6035      	str	r5, [r6, #0]
 800dd3c:	9307      	str	r3, [sp, #28]
 800dd3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd40:	9305      	str	r3, [sp, #20]
 800dd42:	e7d5      	b.n	800dcf0 <__hexnan+0x3c>
 800dd44:	9b04      	ldr	r3, [sp, #16]
 800dd46:	2b29      	cmp	r3, #41	; 0x29
 800dd48:	d159      	bne.n	800ddfe <__hexnan+0x14a>
 800dd4a:	9b05      	ldr	r3, [sp, #20]
 800dd4c:	9a08      	ldr	r2, [sp, #32]
 800dd4e:	3302      	adds	r3, #2
 800dd50:	6013      	str	r3, [r2, #0]
 800dd52:	9b03      	ldr	r3, [sp, #12]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d052      	beq.n	800ddfe <__hexnan+0x14a>
 800dd58:	42b4      	cmp	r4, r6
 800dd5a:	d206      	bcs.n	800dd6a <__hexnan+0xb6>
 800dd5c:	2d07      	cmp	r5, #7
 800dd5e:	dc04      	bgt.n	800dd6a <__hexnan+0xb6>
 800dd60:	002a      	movs	r2, r5
 800dd62:	0031      	movs	r1, r6
 800dd64:	0020      	movs	r0, r4
 800dd66:	f7ff ff7f 	bl	800dc68 <L_shift>
 800dd6a:	9b01      	ldr	r3, [sp, #4]
 800dd6c:	429c      	cmp	r4, r3
 800dd6e:	d935      	bls.n	800dddc <__hexnan+0x128>
 800dd70:	001a      	movs	r2, r3
 800dd72:	0023      	movs	r3, r4
 800dd74:	cb02      	ldmia	r3!, {r1}
 800dd76:	c202      	stmia	r2!, {r1}
 800dd78:	429f      	cmp	r7, r3
 800dd7a:	d2fb      	bcs.n	800dd74 <__hexnan+0xc0>
 800dd7c:	9b02      	ldr	r3, [sp, #8]
 800dd7e:	1c62      	adds	r2, r4, #1
 800dd80:	1ed9      	subs	r1, r3, #3
 800dd82:	2304      	movs	r3, #4
 800dd84:	4291      	cmp	r1, r2
 800dd86:	d305      	bcc.n	800dd94 <__hexnan+0xe0>
 800dd88:	9b02      	ldr	r3, [sp, #8]
 800dd8a:	3b04      	subs	r3, #4
 800dd8c:	1b1b      	subs	r3, r3, r4
 800dd8e:	089b      	lsrs	r3, r3, #2
 800dd90:	3301      	adds	r3, #1
 800dd92:	009b      	lsls	r3, r3, #2
 800dd94:	9a01      	ldr	r2, [sp, #4]
 800dd96:	18d3      	adds	r3, r2, r3
 800dd98:	2200      	movs	r2, #0
 800dd9a:	c304      	stmia	r3!, {r2}
 800dd9c:	429f      	cmp	r7, r3
 800dd9e:	d2fc      	bcs.n	800dd9a <__hexnan+0xe6>
 800dda0:	683b      	ldr	r3, [r7, #0]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d104      	bne.n	800ddb0 <__hexnan+0xfc>
 800dda6:	9b01      	ldr	r3, [sp, #4]
 800dda8:	429f      	cmp	r7, r3
 800ddaa:	d126      	bne.n	800ddfa <__hexnan+0x146>
 800ddac:	2301      	movs	r3, #1
 800ddae:	603b      	str	r3, [r7, #0]
 800ddb0:	2005      	movs	r0, #5
 800ddb2:	e025      	b.n	800de00 <__hexnan+0x14c>
 800ddb4:	9b03      	ldr	r3, [sp, #12]
 800ddb6:	3501      	adds	r5, #1
 800ddb8:	3301      	adds	r3, #1
 800ddba:	9303      	str	r3, [sp, #12]
 800ddbc:	2d08      	cmp	r5, #8
 800ddbe:	dd06      	ble.n	800ddce <__hexnan+0x11a>
 800ddc0:	9b01      	ldr	r3, [sp, #4]
 800ddc2:	429c      	cmp	r4, r3
 800ddc4:	d9bb      	bls.n	800dd3e <__hexnan+0x8a>
 800ddc6:	2300      	movs	r3, #0
 800ddc8:	2501      	movs	r5, #1
 800ddca:	3c04      	subs	r4, #4
 800ddcc:	6023      	str	r3, [r4, #0]
 800ddce:	220f      	movs	r2, #15
 800ddd0:	6823      	ldr	r3, [r4, #0]
 800ddd2:	4010      	ands	r0, r2
 800ddd4:	011b      	lsls	r3, r3, #4
 800ddd6:	4303      	orrs	r3, r0
 800ddd8:	6023      	str	r3, [r4, #0]
 800ddda:	e7b0      	b.n	800dd3e <__hexnan+0x8a>
 800dddc:	9b06      	ldr	r3, [sp, #24]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d0de      	beq.n	800dda0 <__hexnan+0xec>
 800dde2:	2320      	movs	r3, #32
 800dde4:	9a06      	ldr	r2, [sp, #24]
 800dde6:	9902      	ldr	r1, [sp, #8]
 800dde8:	1a9b      	subs	r3, r3, r2
 800ddea:	2201      	movs	r2, #1
 800ddec:	4252      	negs	r2, r2
 800ddee:	40da      	lsrs	r2, r3
 800ddf0:	3904      	subs	r1, #4
 800ddf2:	680b      	ldr	r3, [r1, #0]
 800ddf4:	4013      	ands	r3, r2
 800ddf6:	600b      	str	r3, [r1, #0]
 800ddf8:	e7d2      	b.n	800dda0 <__hexnan+0xec>
 800ddfa:	3f04      	subs	r7, #4
 800ddfc:	e7d0      	b.n	800dda0 <__hexnan+0xec>
 800ddfe:	2004      	movs	r0, #4
 800de00:	b00b      	add	sp, #44	; 0x2c
 800de02:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800de04 <__ascii_mbtowc>:
 800de04:	b082      	sub	sp, #8
 800de06:	2900      	cmp	r1, #0
 800de08:	d100      	bne.n	800de0c <__ascii_mbtowc+0x8>
 800de0a:	a901      	add	r1, sp, #4
 800de0c:	1e10      	subs	r0, r2, #0
 800de0e:	d006      	beq.n	800de1e <__ascii_mbtowc+0x1a>
 800de10:	2b00      	cmp	r3, #0
 800de12:	d006      	beq.n	800de22 <__ascii_mbtowc+0x1e>
 800de14:	7813      	ldrb	r3, [r2, #0]
 800de16:	600b      	str	r3, [r1, #0]
 800de18:	7810      	ldrb	r0, [r2, #0]
 800de1a:	1e43      	subs	r3, r0, #1
 800de1c:	4198      	sbcs	r0, r3
 800de1e:	b002      	add	sp, #8
 800de20:	4770      	bx	lr
 800de22:	2002      	movs	r0, #2
 800de24:	4240      	negs	r0, r0
 800de26:	e7fa      	b.n	800de1e <__ascii_mbtowc+0x1a>

0800de28 <_Balloc>:
 800de28:	b570      	push	{r4, r5, r6, lr}
 800de2a:	69c5      	ldr	r5, [r0, #28]
 800de2c:	0006      	movs	r6, r0
 800de2e:	000c      	movs	r4, r1
 800de30:	2d00      	cmp	r5, #0
 800de32:	d10e      	bne.n	800de52 <_Balloc+0x2a>
 800de34:	2010      	movs	r0, #16
 800de36:	f7fc fc89 	bl	800a74c <malloc>
 800de3a:	1e02      	subs	r2, r0, #0
 800de3c:	61f0      	str	r0, [r6, #28]
 800de3e:	d104      	bne.n	800de4a <_Balloc+0x22>
 800de40:	216b      	movs	r1, #107	; 0x6b
 800de42:	4b19      	ldr	r3, [pc, #100]	; (800dea8 <_Balloc+0x80>)
 800de44:	4819      	ldr	r0, [pc, #100]	; (800deac <_Balloc+0x84>)
 800de46:	f7fc fc63 	bl	800a710 <__assert_func>
 800de4a:	6045      	str	r5, [r0, #4]
 800de4c:	6085      	str	r5, [r0, #8]
 800de4e:	6005      	str	r5, [r0, #0]
 800de50:	60c5      	str	r5, [r0, #12]
 800de52:	69f5      	ldr	r5, [r6, #28]
 800de54:	68eb      	ldr	r3, [r5, #12]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d013      	beq.n	800de82 <_Balloc+0x5a>
 800de5a:	69f3      	ldr	r3, [r6, #28]
 800de5c:	00a2      	lsls	r2, r4, #2
 800de5e:	68db      	ldr	r3, [r3, #12]
 800de60:	189b      	adds	r3, r3, r2
 800de62:	6818      	ldr	r0, [r3, #0]
 800de64:	2800      	cmp	r0, #0
 800de66:	d118      	bne.n	800de9a <_Balloc+0x72>
 800de68:	2101      	movs	r1, #1
 800de6a:	000d      	movs	r5, r1
 800de6c:	40a5      	lsls	r5, r4
 800de6e:	1d6a      	adds	r2, r5, #5
 800de70:	0030      	movs	r0, r6
 800de72:	0092      	lsls	r2, r2, #2
 800de74:	f001 fd1a 	bl	800f8ac <_calloc_r>
 800de78:	2800      	cmp	r0, #0
 800de7a:	d00c      	beq.n	800de96 <_Balloc+0x6e>
 800de7c:	6044      	str	r4, [r0, #4]
 800de7e:	6085      	str	r5, [r0, #8]
 800de80:	e00d      	b.n	800de9e <_Balloc+0x76>
 800de82:	2221      	movs	r2, #33	; 0x21
 800de84:	2104      	movs	r1, #4
 800de86:	0030      	movs	r0, r6
 800de88:	f001 fd10 	bl	800f8ac <_calloc_r>
 800de8c:	69f3      	ldr	r3, [r6, #28]
 800de8e:	60e8      	str	r0, [r5, #12]
 800de90:	68db      	ldr	r3, [r3, #12]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d1e1      	bne.n	800de5a <_Balloc+0x32>
 800de96:	2000      	movs	r0, #0
 800de98:	bd70      	pop	{r4, r5, r6, pc}
 800de9a:	6802      	ldr	r2, [r0, #0]
 800de9c:	601a      	str	r2, [r3, #0]
 800de9e:	2300      	movs	r3, #0
 800dea0:	6103      	str	r3, [r0, #16]
 800dea2:	60c3      	str	r3, [r0, #12]
 800dea4:	e7f8      	b.n	800de98 <_Balloc+0x70>
 800dea6:	46c0      	nop			; (mov r8, r8)
 800dea8:	0800fffd 	.word	0x0800fffd
 800deac:	080100dd 	.word	0x080100dd

0800deb0 <_Bfree>:
 800deb0:	b570      	push	{r4, r5, r6, lr}
 800deb2:	69c6      	ldr	r6, [r0, #28]
 800deb4:	0005      	movs	r5, r0
 800deb6:	000c      	movs	r4, r1
 800deb8:	2e00      	cmp	r6, #0
 800deba:	d10e      	bne.n	800deda <_Bfree+0x2a>
 800debc:	2010      	movs	r0, #16
 800debe:	f7fc fc45 	bl	800a74c <malloc>
 800dec2:	1e02      	subs	r2, r0, #0
 800dec4:	61e8      	str	r0, [r5, #28]
 800dec6:	d104      	bne.n	800ded2 <_Bfree+0x22>
 800dec8:	218f      	movs	r1, #143	; 0x8f
 800deca:	4b09      	ldr	r3, [pc, #36]	; (800def0 <_Bfree+0x40>)
 800decc:	4809      	ldr	r0, [pc, #36]	; (800def4 <_Bfree+0x44>)
 800dece:	f7fc fc1f 	bl	800a710 <__assert_func>
 800ded2:	6046      	str	r6, [r0, #4]
 800ded4:	6086      	str	r6, [r0, #8]
 800ded6:	6006      	str	r6, [r0, #0]
 800ded8:	60c6      	str	r6, [r0, #12]
 800deda:	2c00      	cmp	r4, #0
 800dedc:	d007      	beq.n	800deee <_Bfree+0x3e>
 800dede:	69eb      	ldr	r3, [r5, #28]
 800dee0:	6862      	ldr	r2, [r4, #4]
 800dee2:	68db      	ldr	r3, [r3, #12]
 800dee4:	0092      	lsls	r2, r2, #2
 800dee6:	189b      	adds	r3, r3, r2
 800dee8:	681a      	ldr	r2, [r3, #0]
 800deea:	6022      	str	r2, [r4, #0]
 800deec:	601c      	str	r4, [r3, #0]
 800deee:	bd70      	pop	{r4, r5, r6, pc}
 800def0:	0800fffd 	.word	0x0800fffd
 800def4:	080100dd 	.word	0x080100dd

0800def8 <__multadd>:
 800def8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800defa:	000e      	movs	r6, r1
 800defc:	9001      	str	r0, [sp, #4]
 800defe:	000c      	movs	r4, r1
 800df00:	001d      	movs	r5, r3
 800df02:	2000      	movs	r0, #0
 800df04:	690f      	ldr	r7, [r1, #16]
 800df06:	3614      	adds	r6, #20
 800df08:	6833      	ldr	r3, [r6, #0]
 800df0a:	3001      	adds	r0, #1
 800df0c:	b299      	uxth	r1, r3
 800df0e:	4351      	muls	r1, r2
 800df10:	0c1b      	lsrs	r3, r3, #16
 800df12:	4353      	muls	r3, r2
 800df14:	1949      	adds	r1, r1, r5
 800df16:	0c0d      	lsrs	r5, r1, #16
 800df18:	195b      	adds	r3, r3, r5
 800df1a:	0c1d      	lsrs	r5, r3, #16
 800df1c:	b289      	uxth	r1, r1
 800df1e:	041b      	lsls	r3, r3, #16
 800df20:	185b      	adds	r3, r3, r1
 800df22:	c608      	stmia	r6!, {r3}
 800df24:	4287      	cmp	r7, r0
 800df26:	dcef      	bgt.n	800df08 <__multadd+0x10>
 800df28:	2d00      	cmp	r5, #0
 800df2a:	d022      	beq.n	800df72 <__multadd+0x7a>
 800df2c:	68a3      	ldr	r3, [r4, #8]
 800df2e:	42bb      	cmp	r3, r7
 800df30:	dc19      	bgt.n	800df66 <__multadd+0x6e>
 800df32:	6861      	ldr	r1, [r4, #4]
 800df34:	9801      	ldr	r0, [sp, #4]
 800df36:	3101      	adds	r1, #1
 800df38:	f7ff ff76 	bl	800de28 <_Balloc>
 800df3c:	1e06      	subs	r6, r0, #0
 800df3e:	d105      	bne.n	800df4c <__multadd+0x54>
 800df40:	0032      	movs	r2, r6
 800df42:	21ba      	movs	r1, #186	; 0xba
 800df44:	4b0c      	ldr	r3, [pc, #48]	; (800df78 <__multadd+0x80>)
 800df46:	480d      	ldr	r0, [pc, #52]	; (800df7c <__multadd+0x84>)
 800df48:	f7fc fbe2 	bl	800a710 <__assert_func>
 800df4c:	0021      	movs	r1, r4
 800df4e:	6922      	ldr	r2, [r4, #16]
 800df50:	310c      	adds	r1, #12
 800df52:	3202      	adds	r2, #2
 800df54:	0092      	lsls	r2, r2, #2
 800df56:	300c      	adds	r0, #12
 800df58:	f7fe fcf6 	bl	800c948 <memcpy>
 800df5c:	0021      	movs	r1, r4
 800df5e:	9801      	ldr	r0, [sp, #4]
 800df60:	f7ff ffa6 	bl	800deb0 <_Bfree>
 800df64:	0034      	movs	r4, r6
 800df66:	1d3b      	adds	r3, r7, #4
 800df68:	009b      	lsls	r3, r3, #2
 800df6a:	18e3      	adds	r3, r4, r3
 800df6c:	605d      	str	r5, [r3, #4]
 800df6e:	1c7b      	adds	r3, r7, #1
 800df70:	6123      	str	r3, [r4, #16]
 800df72:	0020      	movs	r0, r4
 800df74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800df76:	46c0      	nop			; (mov r8, r8)
 800df78:	0801006c 	.word	0x0801006c
 800df7c:	080100dd 	.word	0x080100dd

0800df80 <__s2b>:
 800df80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800df82:	0006      	movs	r6, r0
 800df84:	0018      	movs	r0, r3
 800df86:	000c      	movs	r4, r1
 800df88:	3008      	adds	r0, #8
 800df8a:	2109      	movs	r1, #9
 800df8c:	9301      	str	r3, [sp, #4]
 800df8e:	0015      	movs	r5, r2
 800df90:	f7f2 f960 	bl	8000254 <__divsi3>
 800df94:	2301      	movs	r3, #1
 800df96:	2100      	movs	r1, #0
 800df98:	4283      	cmp	r3, r0
 800df9a:	db0a      	blt.n	800dfb2 <__s2b+0x32>
 800df9c:	0030      	movs	r0, r6
 800df9e:	f7ff ff43 	bl	800de28 <_Balloc>
 800dfa2:	1e01      	subs	r1, r0, #0
 800dfa4:	d108      	bne.n	800dfb8 <__s2b+0x38>
 800dfa6:	000a      	movs	r2, r1
 800dfa8:	4b19      	ldr	r3, [pc, #100]	; (800e010 <__s2b+0x90>)
 800dfaa:	481a      	ldr	r0, [pc, #104]	; (800e014 <__s2b+0x94>)
 800dfac:	31d3      	adds	r1, #211	; 0xd3
 800dfae:	f7fc fbaf 	bl	800a710 <__assert_func>
 800dfb2:	005b      	lsls	r3, r3, #1
 800dfb4:	3101      	adds	r1, #1
 800dfb6:	e7ef      	b.n	800df98 <__s2b+0x18>
 800dfb8:	9b08      	ldr	r3, [sp, #32]
 800dfba:	6143      	str	r3, [r0, #20]
 800dfbc:	2301      	movs	r3, #1
 800dfbe:	6103      	str	r3, [r0, #16]
 800dfc0:	2d09      	cmp	r5, #9
 800dfc2:	dd18      	ble.n	800dff6 <__s2b+0x76>
 800dfc4:	0023      	movs	r3, r4
 800dfc6:	3309      	adds	r3, #9
 800dfc8:	001f      	movs	r7, r3
 800dfca:	9300      	str	r3, [sp, #0]
 800dfcc:	1964      	adds	r4, r4, r5
 800dfce:	783b      	ldrb	r3, [r7, #0]
 800dfd0:	220a      	movs	r2, #10
 800dfd2:	0030      	movs	r0, r6
 800dfd4:	3b30      	subs	r3, #48	; 0x30
 800dfd6:	f7ff ff8f 	bl	800def8 <__multadd>
 800dfda:	3701      	adds	r7, #1
 800dfdc:	0001      	movs	r1, r0
 800dfde:	42a7      	cmp	r7, r4
 800dfe0:	d1f5      	bne.n	800dfce <__s2b+0x4e>
 800dfe2:	002c      	movs	r4, r5
 800dfe4:	9b00      	ldr	r3, [sp, #0]
 800dfe6:	3c08      	subs	r4, #8
 800dfe8:	191c      	adds	r4, r3, r4
 800dfea:	002f      	movs	r7, r5
 800dfec:	9b01      	ldr	r3, [sp, #4]
 800dfee:	429f      	cmp	r7, r3
 800dff0:	db04      	blt.n	800dffc <__s2b+0x7c>
 800dff2:	0008      	movs	r0, r1
 800dff4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800dff6:	2509      	movs	r5, #9
 800dff8:	340a      	adds	r4, #10
 800dffa:	e7f6      	b.n	800dfea <__s2b+0x6a>
 800dffc:	1b63      	subs	r3, r4, r5
 800dffe:	5ddb      	ldrb	r3, [r3, r7]
 800e000:	220a      	movs	r2, #10
 800e002:	0030      	movs	r0, r6
 800e004:	3b30      	subs	r3, #48	; 0x30
 800e006:	f7ff ff77 	bl	800def8 <__multadd>
 800e00a:	3701      	adds	r7, #1
 800e00c:	0001      	movs	r1, r0
 800e00e:	e7ed      	b.n	800dfec <__s2b+0x6c>
 800e010:	0801006c 	.word	0x0801006c
 800e014:	080100dd 	.word	0x080100dd

0800e018 <__hi0bits>:
 800e018:	0003      	movs	r3, r0
 800e01a:	0c02      	lsrs	r2, r0, #16
 800e01c:	2000      	movs	r0, #0
 800e01e:	4282      	cmp	r2, r0
 800e020:	d101      	bne.n	800e026 <__hi0bits+0xe>
 800e022:	041b      	lsls	r3, r3, #16
 800e024:	3010      	adds	r0, #16
 800e026:	0e1a      	lsrs	r2, r3, #24
 800e028:	d101      	bne.n	800e02e <__hi0bits+0x16>
 800e02a:	3008      	adds	r0, #8
 800e02c:	021b      	lsls	r3, r3, #8
 800e02e:	0f1a      	lsrs	r2, r3, #28
 800e030:	d101      	bne.n	800e036 <__hi0bits+0x1e>
 800e032:	3004      	adds	r0, #4
 800e034:	011b      	lsls	r3, r3, #4
 800e036:	0f9a      	lsrs	r2, r3, #30
 800e038:	d101      	bne.n	800e03e <__hi0bits+0x26>
 800e03a:	3002      	adds	r0, #2
 800e03c:	009b      	lsls	r3, r3, #2
 800e03e:	2b00      	cmp	r3, #0
 800e040:	db03      	blt.n	800e04a <__hi0bits+0x32>
 800e042:	3001      	adds	r0, #1
 800e044:	005b      	lsls	r3, r3, #1
 800e046:	d400      	bmi.n	800e04a <__hi0bits+0x32>
 800e048:	2020      	movs	r0, #32
 800e04a:	4770      	bx	lr

0800e04c <__lo0bits>:
 800e04c:	6803      	ldr	r3, [r0, #0]
 800e04e:	0001      	movs	r1, r0
 800e050:	2207      	movs	r2, #7
 800e052:	0018      	movs	r0, r3
 800e054:	4010      	ands	r0, r2
 800e056:	4213      	tst	r3, r2
 800e058:	d00d      	beq.n	800e076 <__lo0bits+0x2a>
 800e05a:	3a06      	subs	r2, #6
 800e05c:	2000      	movs	r0, #0
 800e05e:	4213      	tst	r3, r2
 800e060:	d105      	bne.n	800e06e <__lo0bits+0x22>
 800e062:	3002      	adds	r0, #2
 800e064:	4203      	tst	r3, r0
 800e066:	d003      	beq.n	800e070 <__lo0bits+0x24>
 800e068:	40d3      	lsrs	r3, r2
 800e06a:	0010      	movs	r0, r2
 800e06c:	600b      	str	r3, [r1, #0]
 800e06e:	4770      	bx	lr
 800e070:	089b      	lsrs	r3, r3, #2
 800e072:	600b      	str	r3, [r1, #0]
 800e074:	e7fb      	b.n	800e06e <__lo0bits+0x22>
 800e076:	b29a      	uxth	r2, r3
 800e078:	2a00      	cmp	r2, #0
 800e07a:	d101      	bne.n	800e080 <__lo0bits+0x34>
 800e07c:	2010      	movs	r0, #16
 800e07e:	0c1b      	lsrs	r3, r3, #16
 800e080:	b2da      	uxtb	r2, r3
 800e082:	2a00      	cmp	r2, #0
 800e084:	d101      	bne.n	800e08a <__lo0bits+0x3e>
 800e086:	3008      	adds	r0, #8
 800e088:	0a1b      	lsrs	r3, r3, #8
 800e08a:	071a      	lsls	r2, r3, #28
 800e08c:	d101      	bne.n	800e092 <__lo0bits+0x46>
 800e08e:	3004      	adds	r0, #4
 800e090:	091b      	lsrs	r3, r3, #4
 800e092:	079a      	lsls	r2, r3, #30
 800e094:	d101      	bne.n	800e09a <__lo0bits+0x4e>
 800e096:	3002      	adds	r0, #2
 800e098:	089b      	lsrs	r3, r3, #2
 800e09a:	07da      	lsls	r2, r3, #31
 800e09c:	d4e9      	bmi.n	800e072 <__lo0bits+0x26>
 800e09e:	3001      	adds	r0, #1
 800e0a0:	085b      	lsrs	r3, r3, #1
 800e0a2:	d1e6      	bne.n	800e072 <__lo0bits+0x26>
 800e0a4:	2020      	movs	r0, #32
 800e0a6:	e7e2      	b.n	800e06e <__lo0bits+0x22>

0800e0a8 <__i2b>:
 800e0a8:	b510      	push	{r4, lr}
 800e0aa:	000c      	movs	r4, r1
 800e0ac:	2101      	movs	r1, #1
 800e0ae:	f7ff febb 	bl	800de28 <_Balloc>
 800e0b2:	2800      	cmp	r0, #0
 800e0b4:	d107      	bne.n	800e0c6 <__i2b+0x1e>
 800e0b6:	2146      	movs	r1, #70	; 0x46
 800e0b8:	4c05      	ldr	r4, [pc, #20]	; (800e0d0 <__i2b+0x28>)
 800e0ba:	0002      	movs	r2, r0
 800e0bc:	4b05      	ldr	r3, [pc, #20]	; (800e0d4 <__i2b+0x2c>)
 800e0be:	0020      	movs	r0, r4
 800e0c0:	31ff      	adds	r1, #255	; 0xff
 800e0c2:	f7fc fb25 	bl	800a710 <__assert_func>
 800e0c6:	2301      	movs	r3, #1
 800e0c8:	6144      	str	r4, [r0, #20]
 800e0ca:	6103      	str	r3, [r0, #16]
 800e0cc:	bd10      	pop	{r4, pc}
 800e0ce:	46c0      	nop			; (mov r8, r8)
 800e0d0:	080100dd 	.word	0x080100dd
 800e0d4:	0801006c 	.word	0x0801006c

0800e0d8 <__multiply>:
 800e0d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e0da:	0015      	movs	r5, r2
 800e0dc:	690a      	ldr	r2, [r1, #16]
 800e0de:	692b      	ldr	r3, [r5, #16]
 800e0e0:	000c      	movs	r4, r1
 800e0e2:	b08b      	sub	sp, #44	; 0x2c
 800e0e4:	429a      	cmp	r2, r3
 800e0e6:	da01      	bge.n	800e0ec <__multiply+0x14>
 800e0e8:	002c      	movs	r4, r5
 800e0ea:	000d      	movs	r5, r1
 800e0ec:	6927      	ldr	r7, [r4, #16]
 800e0ee:	692e      	ldr	r6, [r5, #16]
 800e0f0:	6861      	ldr	r1, [r4, #4]
 800e0f2:	19bb      	adds	r3, r7, r6
 800e0f4:	9303      	str	r3, [sp, #12]
 800e0f6:	68a3      	ldr	r3, [r4, #8]
 800e0f8:	19ba      	adds	r2, r7, r6
 800e0fa:	4293      	cmp	r3, r2
 800e0fc:	da00      	bge.n	800e100 <__multiply+0x28>
 800e0fe:	3101      	adds	r1, #1
 800e100:	f7ff fe92 	bl	800de28 <_Balloc>
 800e104:	9002      	str	r0, [sp, #8]
 800e106:	2800      	cmp	r0, #0
 800e108:	d106      	bne.n	800e118 <__multiply+0x40>
 800e10a:	21b1      	movs	r1, #177	; 0xb1
 800e10c:	4b48      	ldr	r3, [pc, #288]	; (800e230 <__multiply+0x158>)
 800e10e:	4849      	ldr	r0, [pc, #292]	; (800e234 <__multiply+0x15c>)
 800e110:	9a02      	ldr	r2, [sp, #8]
 800e112:	0049      	lsls	r1, r1, #1
 800e114:	f7fc fafc 	bl	800a710 <__assert_func>
 800e118:	9b02      	ldr	r3, [sp, #8]
 800e11a:	2200      	movs	r2, #0
 800e11c:	3314      	adds	r3, #20
 800e11e:	469c      	mov	ip, r3
 800e120:	19bb      	adds	r3, r7, r6
 800e122:	009b      	lsls	r3, r3, #2
 800e124:	4463      	add	r3, ip
 800e126:	9304      	str	r3, [sp, #16]
 800e128:	4663      	mov	r3, ip
 800e12a:	9904      	ldr	r1, [sp, #16]
 800e12c:	428b      	cmp	r3, r1
 800e12e:	d32a      	bcc.n	800e186 <__multiply+0xae>
 800e130:	0023      	movs	r3, r4
 800e132:	00bf      	lsls	r7, r7, #2
 800e134:	3314      	adds	r3, #20
 800e136:	3514      	adds	r5, #20
 800e138:	9308      	str	r3, [sp, #32]
 800e13a:	00b6      	lsls	r6, r6, #2
 800e13c:	19db      	adds	r3, r3, r7
 800e13e:	9305      	str	r3, [sp, #20]
 800e140:	19ab      	adds	r3, r5, r6
 800e142:	9309      	str	r3, [sp, #36]	; 0x24
 800e144:	2304      	movs	r3, #4
 800e146:	9306      	str	r3, [sp, #24]
 800e148:	0023      	movs	r3, r4
 800e14a:	9a05      	ldr	r2, [sp, #20]
 800e14c:	3315      	adds	r3, #21
 800e14e:	9501      	str	r5, [sp, #4]
 800e150:	429a      	cmp	r2, r3
 800e152:	d305      	bcc.n	800e160 <__multiply+0x88>
 800e154:	1b13      	subs	r3, r2, r4
 800e156:	3b15      	subs	r3, #21
 800e158:	089b      	lsrs	r3, r3, #2
 800e15a:	3301      	adds	r3, #1
 800e15c:	009b      	lsls	r3, r3, #2
 800e15e:	9306      	str	r3, [sp, #24]
 800e160:	9b01      	ldr	r3, [sp, #4]
 800e162:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e164:	4293      	cmp	r3, r2
 800e166:	d310      	bcc.n	800e18a <__multiply+0xb2>
 800e168:	9b03      	ldr	r3, [sp, #12]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	dd05      	ble.n	800e17a <__multiply+0xa2>
 800e16e:	9b04      	ldr	r3, [sp, #16]
 800e170:	3b04      	subs	r3, #4
 800e172:	9304      	str	r3, [sp, #16]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d056      	beq.n	800e228 <__multiply+0x150>
 800e17a:	9b02      	ldr	r3, [sp, #8]
 800e17c:	9a03      	ldr	r2, [sp, #12]
 800e17e:	0018      	movs	r0, r3
 800e180:	611a      	str	r2, [r3, #16]
 800e182:	b00b      	add	sp, #44	; 0x2c
 800e184:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e186:	c304      	stmia	r3!, {r2}
 800e188:	e7cf      	b.n	800e12a <__multiply+0x52>
 800e18a:	9b01      	ldr	r3, [sp, #4]
 800e18c:	6818      	ldr	r0, [r3, #0]
 800e18e:	b280      	uxth	r0, r0
 800e190:	2800      	cmp	r0, #0
 800e192:	d01e      	beq.n	800e1d2 <__multiply+0xfa>
 800e194:	4667      	mov	r7, ip
 800e196:	2500      	movs	r5, #0
 800e198:	9e08      	ldr	r6, [sp, #32]
 800e19a:	ce02      	ldmia	r6!, {r1}
 800e19c:	683b      	ldr	r3, [r7, #0]
 800e19e:	9307      	str	r3, [sp, #28]
 800e1a0:	b28b      	uxth	r3, r1
 800e1a2:	4343      	muls	r3, r0
 800e1a4:	001a      	movs	r2, r3
 800e1a6:	466b      	mov	r3, sp
 800e1a8:	8b9b      	ldrh	r3, [r3, #28]
 800e1aa:	18d3      	adds	r3, r2, r3
 800e1ac:	195b      	adds	r3, r3, r5
 800e1ae:	0c0d      	lsrs	r5, r1, #16
 800e1b0:	4345      	muls	r5, r0
 800e1b2:	9a07      	ldr	r2, [sp, #28]
 800e1b4:	0c11      	lsrs	r1, r2, #16
 800e1b6:	1869      	adds	r1, r5, r1
 800e1b8:	0c1a      	lsrs	r2, r3, #16
 800e1ba:	188a      	adds	r2, r1, r2
 800e1bc:	b29b      	uxth	r3, r3
 800e1be:	0c15      	lsrs	r5, r2, #16
 800e1c0:	0412      	lsls	r2, r2, #16
 800e1c2:	431a      	orrs	r2, r3
 800e1c4:	9b05      	ldr	r3, [sp, #20]
 800e1c6:	c704      	stmia	r7!, {r2}
 800e1c8:	42b3      	cmp	r3, r6
 800e1ca:	d8e6      	bhi.n	800e19a <__multiply+0xc2>
 800e1cc:	4663      	mov	r3, ip
 800e1ce:	9a06      	ldr	r2, [sp, #24]
 800e1d0:	509d      	str	r5, [r3, r2]
 800e1d2:	9b01      	ldr	r3, [sp, #4]
 800e1d4:	6818      	ldr	r0, [r3, #0]
 800e1d6:	0c00      	lsrs	r0, r0, #16
 800e1d8:	d020      	beq.n	800e21c <__multiply+0x144>
 800e1da:	4663      	mov	r3, ip
 800e1dc:	0025      	movs	r5, r4
 800e1de:	4661      	mov	r1, ip
 800e1e0:	2700      	movs	r7, #0
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	3514      	adds	r5, #20
 800e1e6:	682a      	ldr	r2, [r5, #0]
 800e1e8:	680e      	ldr	r6, [r1, #0]
 800e1ea:	b292      	uxth	r2, r2
 800e1ec:	4342      	muls	r2, r0
 800e1ee:	0c36      	lsrs	r6, r6, #16
 800e1f0:	1992      	adds	r2, r2, r6
 800e1f2:	19d2      	adds	r2, r2, r7
 800e1f4:	0416      	lsls	r6, r2, #16
 800e1f6:	b29b      	uxth	r3, r3
 800e1f8:	431e      	orrs	r6, r3
 800e1fa:	600e      	str	r6, [r1, #0]
 800e1fc:	cd40      	ldmia	r5!, {r6}
 800e1fe:	684b      	ldr	r3, [r1, #4]
 800e200:	0c36      	lsrs	r6, r6, #16
 800e202:	4346      	muls	r6, r0
 800e204:	b29b      	uxth	r3, r3
 800e206:	0c12      	lsrs	r2, r2, #16
 800e208:	18f3      	adds	r3, r6, r3
 800e20a:	189b      	adds	r3, r3, r2
 800e20c:	9a05      	ldr	r2, [sp, #20]
 800e20e:	0c1f      	lsrs	r7, r3, #16
 800e210:	3104      	adds	r1, #4
 800e212:	42aa      	cmp	r2, r5
 800e214:	d8e7      	bhi.n	800e1e6 <__multiply+0x10e>
 800e216:	4662      	mov	r2, ip
 800e218:	9906      	ldr	r1, [sp, #24]
 800e21a:	5053      	str	r3, [r2, r1]
 800e21c:	9b01      	ldr	r3, [sp, #4]
 800e21e:	3304      	adds	r3, #4
 800e220:	9301      	str	r3, [sp, #4]
 800e222:	2304      	movs	r3, #4
 800e224:	449c      	add	ip, r3
 800e226:	e79b      	b.n	800e160 <__multiply+0x88>
 800e228:	9b03      	ldr	r3, [sp, #12]
 800e22a:	3b01      	subs	r3, #1
 800e22c:	9303      	str	r3, [sp, #12]
 800e22e:	e79b      	b.n	800e168 <__multiply+0x90>
 800e230:	0801006c 	.word	0x0801006c
 800e234:	080100dd 	.word	0x080100dd

0800e238 <__pow5mult>:
 800e238:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e23a:	2303      	movs	r3, #3
 800e23c:	0015      	movs	r5, r2
 800e23e:	0007      	movs	r7, r0
 800e240:	000e      	movs	r6, r1
 800e242:	401a      	ands	r2, r3
 800e244:	421d      	tst	r5, r3
 800e246:	d008      	beq.n	800e25a <__pow5mult+0x22>
 800e248:	4925      	ldr	r1, [pc, #148]	; (800e2e0 <__pow5mult+0xa8>)
 800e24a:	3a01      	subs	r2, #1
 800e24c:	0092      	lsls	r2, r2, #2
 800e24e:	5852      	ldr	r2, [r2, r1]
 800e250:	2300      	movs	r3, #0
 800e252:	0031      	movs	r1, r6
 800e254:	f7ff fe50 	bl	800def8 <__multadd>
 800e258:	0006      	movs	r6, r0
 800e25a:	10ad      	asrs	r5, r5, #2
 800e25c:	d03d      	beq.n	800e2da <__pow5mult+0xa2>
 800e25e:	69fc      	ldr	r4, [r7, #28]
 800e260:	2c00      	cmp	r4, #0
 800e262:	d10f      	bne.n	800e284 <__pow5mult+0x4c>
 800e264:	2010      	movs	r0, #16
 800e266:	f7fc fa71 	bl	800a74c <malloc>
 800e26a:	1e02      	subs	r2, r0, #0
 800e26c:	61f8      	str	r0, [r7, #28]
 800e26e:	d105      	bne.n	800e27c <__pow5mult+0x44>
 800e270:	21b4      	movs	r1, #180	; 0xb4
 800e272:	4b1c      	ldr	r3, [pc, #112]	; (800e2e4 <__pow5mult+0xac>)
 800e274:	481c      	ldr	r0, [pc, #112]	; (800e2e8 <__pow5mult+0xb0>)
 800e276:	31ff      	adds	r1, #255	; 0xff
 800e278:	f7fc fa4a 	bl	800a710 <__assert_func>
 800e27c:	6044      	str	r4, [r0, #4]
 800e27e:	6084      	str	r4, [r0, #8]
 800e280:	6004      	str	r4, [r0, #0]
 800e282:	60c4      	str	r4, [r0, #12]
 800e284:	69fb      	ldr	r3, [r7, #28]
 800e286:	689c      	ldr	r4, [r3, #8]
 800e288:	9301      	str	r3, [sp, #4]
 800e28a:	2c00      	cmp	r4, #0
 800e28c:	d108      	bne.n	800e2a0 <__pow5mult+0x68>
 800e28e:	0038      	movs	r0, r7
 800e290:	4916      	ldr	r1, [pc, #88]	; (800e2ec <__pow5mult+0xb4>)
 800e292:	f7ff ff09 	bl	800e0a8 <__i2b>
 800e296:	9b01      	ldr	r3, [sp, #4]
 800e298:	0004      	movs	r4, r0
 800e29a:	6098      	str	r0, [r3, #8]
 800e29c:	2300      	movs	r3, #0
 800e29e:	6003      	str	r3, [r0, #0]
 800e2a0:	2301      	movs	r3, #1
 800e2a2:	421d      	tst	r5, r3
 800e2a4:	d00a      	beq.n	800e2bc <__pow5mult+0x84>
 800e2a6:	0031      	movs	r1, r6
 800e2a8:	0022      	movs	r2, r4
 800e2aa:	0038      	movs	r0, r7
 800e2ac:	f7ff ff14 	bl	800e0d8 <__multiply>
 800e2b0:	0031      	movs	r1, r6
 800e2b2:	9001      	str	r0, [sp, #4]
 800e2b4:	0038      	movs	r0, r7
 800e2b6:	f7ff fdfb 	bl	800deb0 <_Bfree>
 800e2ba:	9e01      	ldr	r6, [sp, #4]
 800e2bc:	106d      	asrs	r5, r5, #1
 800e2be:	d00c      	beq.n	800e2da <__pow5mult+0xa2>
 800e2c0:	6820      	ldr	r0, [r4, #0]
 800e2c2:	2800      	cmp	r0, #0
 800e2c4:	d107      	bne.n	800e2d6 <__pow5mult+0x9e>
 800e2c6:	0022      	movs	r2, r4
 800e2c8:	0021      	movs	r1, r4
 800e2ca:	0038      	movs	r0, r7
 800e2cc:	f7ff ff04 	bl	800e0d8 <__multiply>
 800e2d0:	2300      	movs	r3, #0
 800e2d2:	6020      	str	r0, [r4, #0]
 800e2d4:	6003      	str	r3, [r0, #0]
 800e2d6:	0004      	movs	r4, r0
 800e2d8:	e7e2      	b.n	800e2a0 <__pow5mult+0x68>
 800e2da:	0030      	movs	r0, r6
 800e2dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e2de:	46c0      	nop			; (mov r8, r8)
 800e2e0:	08010228 	.word	0x08010228
 800e2e4:	0800fffd 	.word	0x0800fffd
 800e2e8:	080100dd 	.word	0x080100dd
 800e2ec:	00000271 	.word	0x00000271

0800e2f0 <__lshift>:
 800e2f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e2f2:	000c      	movs	r4, r1
 800e2f4:	0017      	movs	r7, r2
 800e2f6:	6923      	ldr	r3, [r4, #16]
 800e2f8:	1155      	asrs	r5, r2, #5
 800e2fa:	b087      	sub	sp, #28
 800e2fc:	18eb      	adds	r3, r5, r3
 800e2fe:	9302      	str	r3, [sp, #8]
 800e300:	3301      	adds	r3, #1
 800e302:	9301      	str	r3, [sp, #4]
 800e304:	6849      	ldr	r1, [r1, #4]
 800e306:	68a3      	ldr	r3, [r4, #8]
 800e308:	9004      	str	r0, [sp, #16]
 800e30a:	9a01      	ldr	r2, [sp, #4]
 800e30c:	4293      	cmp	r3, r2
 800e30e:	db10      	blt.n	800e332 <__lshift+0x42>
 800e310:	9804      	ldr	r0, [sp, #16]
 800e312:	f7ff fd89 	bl	800de28 <_Balloc>
 800e316:	2300      	movs	r3, #0
 800e318:	0002      	movs	r2, r0
 800e31a:	0006      	movs	r6, r0
 800e31c:	0019      	movs	r1, r3
 800e31e:	3214      	adds	r2, #20
 800e320:	4298      	cmp	r0, r3
 800e322:	d10c      	bne.n	800e33e <__lshift+0x4e>
 800e324:	31df      	adds	r1, #223	; 0xdf
 800e326:	0032      	movs	r2, r6
 800e328:	4b26      	ldr	r3, [pc, #152]	; (800e3c4 <__lshift+0xd4>)
 800e32a:	4827      	ldr	r0, [pc, #156]	; (800e3c8 <__lshift+0xd8>)
 800e32c:	31ff      	adds	r1, #255	; 0xff
 800e32e:	f7fc f9ef 	bl	800a710 <__assert_func>
 800e332:	3101      	adds	r1, #1
 800e334:	005b      	lsls	r3, r3, #1
 800e336:	e7e8      	b.n	800e30a <__lshift+0x1a>
 800e338:	0098      	lsls	r0, r3, #2
 800e33a:	5011      	str	r1, [r2, r0]
 800e33c:	3301      	adds	r3, #1
 800e33e:	42ab      	cmp	r3, r5
 800e340:	dbfa      	blt.n	800e338 <__lshift+0x48>
 800e342:	43eb      	mvns	r3, r5
 800e344:	17db      	asrs	r3, r3, #31
 800e346:	401d      	ands	r5, r3
 800e348:	211f      	movs	r1, #31
 800e34a:	0023      	movs	r3, r4
 800e34c:	0038      	movs	r0, r7
 800e34e:	00ad      	lsls	r5, r5, #2
 800e350:	1955      	adds	r5, r2, r5
 800e352:	6922      	ldr	r2, [r4, #16]
 800e354:	3314      	adds	r3, #20
 800e356:	0092      	lsls	r2, r2, #2
 800e358:	4008      	ands	r0, r1
 800e35a:	4684      	mov	ip, r0
 800e35c:	189a      	adds	r2, r3, r2
 800e35e:	420f      	tst	r7, r1
 800e360:	d02a      	beq.n	800e3b8 <__lshift+0xc8>
 800e362:	3101      	adds	r1, #1
 800e364:	1a09      	subs	r1, r1, r0
 800e366:	9105      	str	r1, [sp, #20]
 800e368:	2100      	movs	r1, #0
 800e36a:	9503      	str	r5, [sp, #12]
 800e36c:	4667      	mov	r7, ip
 800e36e:	6818      	ldr	r0, [r3, #0]
 800e370:	40b8      	lsls	r0, r7
 800e372:	4308      	orrs	r0, r1
 800e374:	9903      	ldr	r1, [sp, #12]
 800e376:	c101      	stmia	r1!, {r0}
 800e378:	9103      	str	r1, [sp, #12]
 800e37a:	9805      	ldr	r0, [sp, #20]
 800e37c:	cb02      	ldmia	r3!, {r1}
 800e37e:	40c1      	lsrs	r1, r0
 800e380:	429a      	cmp	r2, r3
 800e382:	d8f3      	bhi.n	800e36c <__lshift+0x7c>
 800e384:	0020      	movs	r0, r4
 800e386:	3015      	adds	r0, #21
 800e388:	2304      	movs	r3, #4
 800e38a:	4282      	cmp	r2, r0
 800e38c:	d304      	bcc.n	800e398 <__lshift+0xa8>
 800e38e:	1b13      	subs	r3, r2, r4
 800e390:	3b15      	subs	r3, #21
 800e392:	089b      	lsrs	r3, r3, #2
 800e394:	3301      	adds	r3, #1
 800e396:	009b      	lsls	r3, r3, #2
 800e398:	50e9      	str	r1, [r5, r3]
 800e39a:	2900      	cmp	r1, #0
 800e39c:	d002      	beq.n	800e3a4 <__lshift+0xb4>
 800e39e:	9b02      	ldr	r3, [sp, #8]
 800e3a0:	3302      	adds	r3, #2
 800e3a2:	9301      	str	r3, [sp, #4]
 800e3a4:	9b01      	ldr	r3, [sp, #4]
 800e3a6:	9804      	ldr	r0, [sp, #16]
 800e3a8:	3b01      	subs	r3, #1
 800e3aa:	0021      	movs	r1, r4
 800e3ac:	6133      	str	r3, [r6, #16]
 800e3ae:	f7ff fd7f 	bl	800deb0 <_Bfree>
 800e3b2:	0030      	movs	r0, r6
 800e3b4:	b007      	add	sp, #28
 800e3b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3b8:	cb02      	ldmia	r3!, {r1}
 800e3ba:	c502      	stmia	r5!, {r1}
 800e3bc:	429a      	cmp	r2, r3
 800e3be:	d8fb      	bhi.n	800e3b8 <__lshift+0xc8>
 800e3c0:	e7f0      	b.n	800e3a4 <__lshift+0xb4>
 800e3c2:	46c0      	nop			; (mov r8, r8)
 800e3c4:	0801006c 	.word	0x0801006c
 800e3c8:	080100dd 	.word	0x080100dd

0800e3cc <__mcmp>:
 800e3cc:	b530      	push	{r4, r5, lr}
 800e3ce:	690b      	ldr	r3, [r1, #16]
 800e3d0:	6904      	ldr	r4, [r0, #16]
 800e3d2:	0002      	movs	r2, r0
 800e3d4:	1ae0      	subs	r0, r4, r3
 800e3d6:	429c      	cmp	r4, r3
 800e3d8:	d10e      	bne.n	800e3f8 <__mcmp+0x2c>
 800e3da:	3214      	adds	r2, #20
 800e3dc:	009b      	lsls	r3, r3, #2
 800e3de:	3114      	adds	r1, #20
 800e3e0:	0014      	movs	r4, r2
 800e3e2:	18c9      	adds	r1, r1, r3
 800e3e4:	18d2      	adds	r2, r2, r3
 800e3e6:	3a04      	subs	r2, #4
 800e3e8:	3904      	subs	r1, #4
 800e3ea:	6815      	ldr	r5, [r2, #0]
 800e3ec:	680b      	ldr	r3, [r1, #0]
 800e3ee:	429d      	cmp	r5, r3
 800e3f0:	d003      	beq.n	800e3fa <__mcmp+0x2e>
 800e3f2:	2001      	movs	r0, #1
 800e3f4:	429d      	cmp	r5, r3
 800e3f6:	d303      	bcc.n	800e400 <__mcmp+0x34>
 800e3f8:	bd30      	pop	{r4, r5, pc}
 800e3fa:	4294      	cmp	r4, r2
 800e3fc:	d3f3      	bcc.n	800e3e6 <__mcmp+0x1a>
 800e3fe:	e7fb      	b.n	800e3f8 <__mcmp+0x2c>
 800e400:	4240      	negs	r0, r0
 800e402:	e7f9      	b.n	800e3f8 <__mcmp+0x2c>

0800e404 <__mdiff>:
 800e404:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e406:	000e      	movs	r6, r1
 800e408:	0007      	movs	r7, r0
 800e40a:	0011      	movs	r1, r2
 800e40c:	0030      	movs	r0, r6
 800e40e:	b087      	sub	sp, #28
 800e410:	0014      	movs	r4, r2
 800e412:	f7ff ffdb 	bl	800e3cc <__mcmp>
 800e416:	1e05      	subs	r5, r0, #0
 800e418:	d110      	bne.n	800e43c <__mdiff+0x38>
 800e41a:	0001      	movs	r1, r0
 800e41c:	0038      	movs	r0, r7
 800e41e:	f7ff fd03 	bl	800de28 <_Balloc>
 800e422:	1e02      	subs	r2, r0, #0
 800e424:	d104      	bne.n	800e430 <__mdiff+0x2c>
 800e426:	4b3f      	ldr	r3, [pc, #252]	; (800e524 <__mdiff+0x120>)
 800e428:	483f      	ldr	r0, [pc, #252]	; (800e528 <__mdiff+0x124>)
 800e42a:	4940      	ldr	r1, [pc, #256]	; (800e52c <__mdiff+0x128>)
 800e42c:	f7fc f970 	bl	800a710 <__assert_func>
 800e430:	2301      	movs	r3, #1
 800e432:	6145      	str	r5, [r0, #20]
 800e434:	6103      	str	r3, [r0, #16]
 800e436:	0010      	movs	r0, r2
 800e438:	b007      	add	sp, #28
 800e43a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e43c:	2301      	movs	r3, #1
 800e43e:	9301      	str	r3, [sp, #4]
 800e440:	2800      	cmp	r0, #0
 800e442:	db04      	blt.n	800e44e <__mdiff+0x4a>
 800e444:	0023      	movs	r3, r4
 800e446:	0034      	movs	r4, r6
 800e448:	001e      	movs	r6, r3
 800e44a:	2300      	movs	r3, #0
 800e44c:	9301      	str	r3, [sp, #4]
 800e44e:	0038      	movs	r0, r7
 800e450:	6861      	ldr	r1, [r4, #4]
 800e452:	f7ff fce9 	bl	800de28 <_Balloc>
 800e456:	1e02      	subs	r2, r0, #0
 800e458:	d103      	bne.n	800e462 <__mdiff+0x5e>
 800e45a:	4b32      	ldr	r3, [pc, #200]	; (800e524 <__mdiff+0x120>)
 800e45c:	4832      	ldr	r0, [pc, #200]	; (800e528 <__mdiff+0x124>)
 800e45e:	4934      	ldr	r1, [pc, #208]	; (800e530 <__mdiff+0x12c>)
 800e460:	e7e4      	b.n	800e42c <__mdiff+0x28>
 800e462:	9b01      	ldr	r3, [sp, #4]
 800e464:	2700      	movs	r7, #0
 800e466:	60c3      	str	r3, [r0, #12]
 800e468:	6920      	ldr	r0, [r4, #16]
 800e46a:	3414      	adds	r4, #20
 800e46c:	0083      	lsls	r3, r0, #2
 800e46e:	18e3      	adds	r3, r4, r3
 800e470:	0021      	movs	r1, r4
 800e472:	9401      	str	r4, [sp, #4]
 800e474:	0034      	movs	r4, r6
 800e476:	9302      	str	r3, [sp, #8]
 800e478:	6933      	ldr	r3, [r6, #16]
 800e47a:	3414      	adds	r4, #20
 800e47c:	009b      	lsls	r3, r3, #2
 800e47e:	18e3      	adds	r3, r4, r3
 800e480:	9303      	str	r3, [sp, #12]
 800e482:	0013      	movs	r3, r2
 800e484:	3314      	adds	r3, #20
 800e486:	469c      	mov	ip, r3
 800e488:	9305      	str	r3, [sp, #20]
 800e48a:	9104      	str	r1, [sp, #16]
 800e48c:	9b04      	ldr	r3, [sp, #16]
 800e48e:	cc02      	ldmia	r4!, {r1}
 800e490:	cb20      	ldmia	r3!, {r5}
 800e492:	9304      	str	r3, [sp, #16]
 800e494:	b2ab      	uxth	r3, r5
 800e496:	19df      	adds	r7, r3, r7
 800e498:	b28b      	uxth	r3, r1
 800e49a:	1afb      	subs	r3, r7, r3
 800e49c:	0c09      	lsrs	r1, r1, #16
 800e49e:	0c2d      	lsrs	r5, r5, #16
 800e4a0:	1a6d      	subs	r5, r5, r1
 800e4a2:	1419      	asrs	r1, r3, #16
 800e4a4:	1869      	adds	r1, r5, r1
 800e4a6:	b29b      	uxth	r3, r3
 800e4a8:	140f      	asrs	r7, r1, #16
 800e4aa:	0409      	lsls	r1, r1, #16
 800e4ac:	4319      	orrs	r1, r3
 800e4ae:	4663      	mov	r3, ip
 800e4b0:	c302      	stmia	r3!, {r1}
 800e4b2:	469c      	mov	ip, r3
 800e4b4:	9b03      	ldr	r3, [sp, #12]
 800e4b6:	42a3      	cmp	r3, r4
 800e4b8:	d8e8      	bhi.n	800e48c <__mdiff+0x88>
 800e4ba:	0031      	movs	r1, r6
 800e4bc:	9c03      	ldr	r4, [sp, #12]
 800e4be:	3115      	adds	r1, #21
 800e4c0:	2304      	movs	r3, #4
 800e4c2:	428c      	cmp	r4, r1
 800e4c4:	d304      	bcc.n	800e4d0 <__mdiff+0xcc>
 800e4c6:	1ba3      	subs	r3, r4, r6
 800e4c8:	3b15      	subs	r3, #21
 800e4ca:	089b      	lsrs	r3, r3, #2
 800e4cc:	3301      	adds	r3, #1
 800e4ce:	009b      	lsls	r3, r3, #2
 800e4d0:	9901      	ldr	r1, [sp, #4]
 800e4d2:	18cd      	adds	r5, r1, r3
 800e4d4:	9905      	ldr	r1, [sp, #20]
 800e4d6:	002e      	movs	r6, r5
 800e4d8:	18cb      	adds	r3, r1, r3
 800e4da:	469c      	mov	ip, r3
 800e4dc:	9902      	ldr	r1, [sp, #8]
 800e4de:	428e      	cmp	r6, r1
 800e4e0:	d310      	bcc.n	800e504 <__mdiff+0x100>
 800e4e2:	9e02      	ldr	r6, [sp, #8]
 800e4e4:	1ee9      	subs	r1, r5, #3
 800e4e6:	2400      	movs	r4, #0
 800e4e8:	428e      	cmp	r6, r1
 800e4ea:	d304      	bcc.n	800e4f6 <__mdiff+0xf2>
 800e4ec:	0031      	movs	r1, r6
 800e4ee:	3103      	adds	r1, #3
 800e4f0:	1b49      	subs	r1, r1, r5
 800e4f2:	0889      	lsrs	r1, r1, #2
 800e4f4:	008c      	lsls	r4, r1, #2
 800e4f6:	191b      	adds	r3, r3, r4
 800e4f8:	3b04      	subs	r3, #4
 800e4fa:	6819      	ldr	r1, [r3, #0]
 800e4fc:	2900      	cmp	r1, #0
 800e4fe:	d00f      	beq.n	800e520 <__mdiff+0x11c>
 800e500:	6110      	str	r0, [r2, #16]
 800e502:	e798      	b.n	800e436 <__mdiff+0x32>
 800e504:	ce02      	ldmia	r6!, {r1}
 800e506:	b28c      	uxth	r4, r1
 800e508:	19e4      	adds	r4, r4, r7
 800e50a:	0c0f      	lsrs	r7, r1, #16
 800e50c:	1421      	asrs	r1, r4, #16
 800e50e:	1879      	adds	r1, r7, r1
 800e510:	b2a4      	uxth	r4, r4
 800e512:	140f      	asrs	r7, r1, #16
 800e514:	0409      	lsls	r1, r1, #16
 800e516:	4321      	orrs	r1, r4
 800e518:	4664      	mov	r4, ip
 800e51a:	c402      	stmia	r4!, {r1}
 800e51c:	46a4      	mov	ip, r4
 800e51e:	e7dd      	b.n	800e4dc <__mdiff+0xd8>
 800e520:	3801      	subs	r0, #1
 800e522:	e7e9      	b.n	800e4f8 <__mdiff+0xf4>
 800e524:	0801006c 	.word	0x0801006c
 800e528:	080100dd 	.word	0x080100dd
 800e52c:	00000237 	.word	0x00000237
 800e530:	00000245 	.word	0x00000245

0800e534 <__ulp>:
 800e534:	2000      	movs	r0, #0
 800e536:	4b0b      	ldr	r3, [pc, #44]	; (800e564 <__ulp+0x30>)
 800e538:	4019      	ands	r1, r3
 800e53a:	4b0b      	ldr	r3, [pc, #44]	; (800e568 <__ulp+0x34>)
 800e53c:	18c9      	adds	r1, r1, r3
 800e53e:	4281      	cmp	r1, r0
 800e540:	dc06      	bgt.n	800e550 <__ulp+0x1c>
 800e542:	4249      	negs	r1, r1
 800e544:	150b      	asrs	r3, r1, #20
 800e546:	2b13      	cmp	r3, #19
 800e548:	dc03      	bgt.n	800e552 <__ulp+0x1e>
 800e54a:	2180      	movs	r1, #128	; 0x80
 800e54c:	0309      	lsls	r1, r1, #12
 800e54e:	4119      	asrs	r1, r3
 800e550:	4770      	bx	lr
 800e552:	3b14      	subs	r3, #20
 800e554:	2001      	movs	r0, #1
 800e556:	2b1e      	cmp	r3, #30
 800e558:	dc02      	bgt.n	800e560 <__ulp+0x2c>
 800e55a:	2080      	movs	r0, #128	; 0x80
 800e55c:	0600      	lsls	r0, r0, #24
 800e55e:	40d8      	lsrs	r0, r3
 800e560:	2100      	movs	r1, #0
 800e562:	e7f5      	b.n	800e550 <__ulp+0x1c>
 800e564:	7ff00000 	.word	0x7ff00000
 800e568:	fcc00000 	.word	0xfcc00000

0800e56c <__b2d>:
 800e56c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e56e:	0006      	movs	r6, r0
 800e570:	6903      	ldr	r3, [r0, #16]
 800e572:	3614      	adds	r6, #20
 800e574:	009b      	lsls	r3, r3, #2
 800e576:	18f3      	adds	r3, r6, r3
 800e578:	1f1d      	subs	r5, r3, #4
 800e57a:	682c      	ldr	r4, [r5, #0]
 800e57c:	000f      	movs	r7, r1
 800e57e:	0020      	movs	r0, r4
 800e580:	9301      	str	r3, [sp, #4]
 800e582:	f7ff fd49 	bl	800e018 <__hi0bits>
 800e586:	2220      	movs	r2, #32
 800e588:	1a12      	subs	r2, r2, r0
 800e58a:	603a      	str	r2, [r7, #0]
 800e58c:	0003      	movs	r3, r0
 800e58e:	4a1c      	ldr	r2, [pc, #112]	; (800e600 <__b2d+0x94>)
 800e590:	280a      	cmp	r0, #10
 800e592:	dc15      	bgt.n	800e5c0 <__b2d+0x54>
 800e594:	210b      	movs	r1, #11
 800e596:	0027      	movs	r7, r4
 800e598:	1a09      	subs	r1, r1, r0
 800e59a:	40cf      	lsrs	r7, r1
 800e59c:	433a      	orrs	r2, r7
 800e59e:	468c      	mov	ip, r1
 800e5a0:	0011      	movs	r1, r2
 800e5a2:	2200      	movs	r2, #0
 800e5a4:	42ae      	cmp	r6, r5
 800e5a6:	d202      	bcs.n	800e5ae <__b2d+0x42>
 800e5a8:	9a01      	ldr	r2, [sp, #4]
 800e5aa:	3a08      	subs	r2, #8
 800e5ac:	6812      	ldr	r2, [r2, #0]
 800e5ae:	3315      	adds	r3, #21
 800e5b0:	409c      	lsls	r4, r3
 800e5b2:	4663      	mov	r3, ip
 800e5b4:	0027      	movs	r7, r4
 800e5b6:	40da      	lsrs	r2, r3
 800e5b8:	4317      	orrs	r7, r2
 800e5ba:	0038      	movs	r0, r7
 800e5bc:	b003      	add	sp, #12
 800e5be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e5c0:	2700      	movs	r7, #0
 800e5c2:	42ae      	cmp	r6, r5
 800e5c4:	d202      	bcs.n	800e5cc <__b2d+0x60>
 800e5c6:	9d01      	ldr	r5, [sp, #4]
 800e5c8:	3d08      	subs	r5, #8
 800e5ca:	682f      	ldr	r7, [r5, #0]
 800e5cc:	210b      	movs	r1, #11
 800e5ce:	4249      	negs	r1, r1
 800e5d0:	468c      	mov	ip, r1
 800e5d2:	449c      	add	ip, r3
 800e5d4:	2b0b      	cmp	r3, #11
 800e5d6:	d010      	beq.n	800e5fa <__b2d+0x8e>
 800e5d8:	4661      	mov	r1, ip
 800e5da:	2320      	movs	r3, #32
 800e5dc:	408c      	lsls	r4, r1
 800e5de:	1a5b      	subs	r3, r3, r1
 800e5e0:	0039      	movs	r1, r7
 800e5e2:	40d9      	lsrs	r1, r3
 800e5e4:	430c      	orrs	r4, r1
 800e5e6:	4322      	orrs	r2, r4
 800e5e8:	0011      	movs	r1, r2
 800e5ea:	2200      	movs	r2, #0
 800e5ec:	42b5      	cmp	r5, r6
 800e5ee:	d901      	bls.n	800e5f4 <__b2d+0x88>
 800e5f0:	3d04      	subs	r5, #4
 800e5f2:	682a      	ldr	r2, [r5, #0]
 800e5f4:	4664      	mov	r4, ip
 800e5f6:	40a7      	lsls	r7, r4
 800e5f8:	e7dd      	b.n	800e5b6 <__b2d+0x4a>
 800e5fa:	4322      	orrs	r2, r4
 800e5fc:	0011      	movs	r1, r2
 800e5fe:	e7dc      	b.n	800e5ba <__b2d+0x4e>
 800e600:	3ff00000 	.word	0x3ff00000

0800e604 <__d2b>:
 800e604:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e606:	2101      	movs	r1, #1
 800e608:	0014      	movs	r4, r2
 800e60a:	001d      	movs	r5, r3
 800e60c:	9f08      	ldr	r7, [sp, #32]
 800e60e:	f7ff fc0b 	bl	800de28 <_Balloc>
 800e612:	1e06      	subs	r6, r0, #0
 800e614:	d105      	bne.n	800e622 <__d2b+0x1e>
 800e616:	0032      	movs	r2, r6
 800e618:	4b24      	ldr	r3, [pc, #144]	; (800e6ac <__d2b+0xa8>)
 800e61a:	4825      	ldr	r0, [pc, #148]	; (800e6b0 <__d2b+0xac>)
 800e61c:	4925      	ldr	r1, [pc, #148]	; (800e6b4 <__d2b+0xb0>)
 800e61e:	f7fc f877 	bl	800a710 <__assert_func>
 800e622:	032b      	lsls	r3, r5, #12
 800e624:	006d      	lsls	r5, r5, #1
 800e626:	0b1b      	lsrs	r3, r3, #12
 800e628:	0d6d      	lsrs	r5, r5, #21
 800e62a:	d125      	bne.n	800e678 <__d2b+0x74>
 800e62c:	9301      	str	r3, [sp, #4]
 800e62e:	2c00      	cmp	r4, #0
 800e630:	d028      	beq.n	800e684 <__d2b+0x80>
 800e632:	4668      	mov	r0, sp
 800e634:	9400      	str	r4, [sp, #0]
 800e636:	f7ff fd09 	bl	800e04c <__lo0bits>
 800e63a:	9b01      	ldr	r3, [sp, #4]
 800e63c:	9900      	ldr	r1, [sp, #0]
 800e63e:	2800      	cmp	r0, #0
 800e640:	d01e      	beq.n	800e680 <__d2b+0x7c>
 800e642:	2220      	movs	r2, #32
 800e644:	001c      	movs	r4, r3
 800e646:	1a12      	subs	r2, r2, r0
 800e648:	4094      	lsls	r4, r2
 800e64a:	0022      	movs	r2, r4
 800e64c:	40c3      	lsrs	r3, r0
 800e64e:	430a      	orrs	r2, r1
 800e650:	6172      	str	r2, [r6, #20]
 800e652:	9301      	str	r3, [sp, #4]
 800e654:	9c01      	ldr	r4, [sp, #4]
 800e656:	61b4      	str	r4, [r6, #24]
 800e658:	1e63      	subs	r3, r4, #1
 800e65a:	419c      	sbcs	r4, r3
 800e65c:	3401      	adds	r4, #1
 800e65e:	6134      	str	r4, [r6, #16]
 800e660:	2d00      	cmp	r5, #0
 800e662:	d017      	beq.n	800e694 <__d2b+0x90>
 800e664:	2435      	movs	r4, #53	; 0x35
 800e666:	4b14      	ldr	r3, [pc, #80]	; (800e6b8 <__d2b+0xb4>)
 800e668:	18ed      	adds	r5, r5, r3
 800e66a:	182d      	adds	r5, r5, r0
 800e66c:	603d      	str	r5, [r7, #0]
 800e66e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e670:	1a24      	subs	r4, r4, r0
 800e672:	601c      	str	r4, [r3, #0]
 800e674:	0030      	movs	r0, r6
 800e676:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e678:	2280      	movs	r2, #128	; 0x80
 800e67a:	0352      	lsls	r2, r2, #13
 800e67c:	4313      	orrs	r3, r2
 800e67e:	e7d5      	b.n	800e62c <__d2b+0x28>
 800e680:	6171      	str	r1, [r6, #20]
 800e682:	e7e7      	b.n	800e654 <__d2b+0x50>
 800e684:	a801      	add	r0, sp, #4
 800e686:	f7ff fce1 	bl	800e04c <__lo0bits>
 800e68a:	9b01      	ldr	r3, [sp, #4]
 800e68c:	2401      	movs	r4, #1
 800e68e:	6173      	str	r3, [r6, #20]
 800e690:	3020      	adds	r0, #32
 800e692:	e7e4      	b.n	800e65e <__d2b+0x5a>
 800e694:	4b09      	ldr	r3, [pc, #36]	; (800e6bc <__d2b+0xb8>)
 800e696:	18c0      	adds	r0, r0, r3
 800e698:	4b09      	ldr	r3, [pc, #36]	; (800e6c0 <__d2b+0xbc>)
 800e69a:	6038      	str	r0, [r7, #0]
 800e69c:	18e3      	adds	r3, r4, r3
 800e69e:	009b      	lsls	r3, r3, #2
 800e6a0:	18f3      	adds	r3, r6, r3
 800e6a2:	6958      	ldr	r0, [r3, #20]
 800e6a4:	f7ff fcb8 	bl	800e018 <__hi0bits>
 800e6a8:	0164      	lsls	r4, r4, #5
 800e6aa:	e7e0      	b.n	800e66e <__d2b+0x6a>
 800e6ac:	0801006c 	.word	0x0801006c
 800e6b0:	080100dd 	.word	0x080100dd
 800e6b4:	0000030f 	.word	0x0000030f
 800e6b8:	fffffbcd 	.word	0xfffffbcd
 800e6bc:	fffffbce 	.word	0xfffffbce
 800e6c0:	3fffffff 	.word	0x3fffffff

0800e6c4 <__ratio>:
 800e6c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6c6:	b087      	sub	sp, #28
 800e6c8:	000f      	movs	r7, r1
 800e6ca:	a904      	add	r1, sp, #16
 800e6cc:	0006      	movs	r6, r0
 800e6ce:	f7ff ff4d 	bl	800e56c <__b2d>
 800e6d2:	9000      	str	r0, [sp, #0]
 800e6d4:	9101      	str	r1, [sp, #4]
 800e6d6:	9c00      	ldr	r4, [sp, #0]
 800e6d8:	9d01      	ldr	r5, [sp, #4]
 800e6da:	0038      	movs	r0, r7
 800e6dc:	a905      	add	r1, sp, #20
 800e6de:	f7ff ff45 	bl	800e56c <__b2d>
 800e6e2:	9002      	str	r0, [sp, #8]
 800e6e4:	9103      	str	r1, [sp, #12]
 800e6e6:	9a02      	ldr	r2, [sp, #8]
 800e6e8:	9b03      	ldr	r3, [sp, #12]
 800e6ea:	6930      	ldr	r0, [r6, #16]
 800e6ec:	6939      	ldr	r1, [r7, #16]
 800e6ee:	9e04      	ldr	r6, [sp, #16]
 800e6f0:	1a40      	subs	r0, r0, r1
 800e6f2:	9905      	ldr	r1, [sp, #20]
 800e6f4:	0140      	lsls	r0, r0, #5
 800e6f6:	1a71      	subs	r1, r6, r1
 800e6f8:	1841      	adds	r1, r0, r1
 800e6fa:	0508      	lsls	r0, r1, #20
 800e6fc:	2900      	cmp	r1, #0
 800e6fe:	dd07      	ble.n	800e710 <__ratio+0x4c>
 800e700:	9901      	ldr	r1, [sp, #4]
 800e702:	1845      	adds	r5, r0, r1
 800e704:	0020      	movs	r0, r4
 800e706:	0029      	movs	r1, r5
 800e708:	f7f3 f964 	bl	80019d4 <__aeabi_ddiv>
 800e70c:	b007      	add	sp, #28
 800e70e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e710:	9903      	ldr	r1, [sp, #12]
 800e712:	1a0b      	subs	r3, r1, r0
 800e714:	e7f6      	b.n	800e704 <__ratio+0x40>

0800e716 <__copybits>:
 800e716:	b570      	push	{r4, r5, r6, lr}
 800e718:	0014      	movs	r4, r2
 800e71a:	0005      	movs	r5, r0
 800e71c:	3901      	subs	r1, #1
 800e71e:	6913      	ldr	r3, [r2, #16]
 800e720:	1149      	asrs	r1, r1, #5
 800e722:	3101      	adds	r1, #1
 800e724:	0089      	lsls	r1, r1, #2
 800e726:	3414      	adds	r4, #20
 800e728:	009b      	lsls	r3, r3, #2
 800e72a:	1841      	adds	r1, r0, r1
 800e72c:	18e3      	adds	r3, r4, r3
 800e72e:	42a3      	cmp	r3, r4
 800e730:	d80d      	bhi.n	800e74e <__copybits+0x38>
 800e732:	0014      	movs	r4, r2
 800e734:	3411      	adds	r4, #17
 800e736:	2500      	movs	r5, #0
 800e738:	429c      	cmp	r4, r3
 800e73a:	d803      	bhi.n	800e744 <__copybits+0x2e>
 800e73c:	1a9b      	subs	r3, r3, r2
 800e73e:	3b11      	subs	r3, #17
 800e740:	089b      	lsrs	r3, r3, #2
 800e742:	009d      	lsls	r5, r3, #2
 800e744:	2300      	movs	r3, #0
 800e746:	1940      	adds	r0, r0, r5
 800e748:	4281      	cmp	r1, r0
 800e74a:	d803      	bhi.n	800e754 <__copybits+0x3e>
 800e74c:	bd70      	pop	{r4, r5, r6, pc}
 800e74e:	cc40      	ldmia	r4!, {r6}
 800e750:	c540      	stmia	r5!, {r6}
 800e752:	e7ec      	b.n	800e72e <__copybits+0x18>
 800e754:	c008      	stmia	r0!, {r3}
 800e756:	e7f7      	b.n	800e748 <__copybits+0x32>

0800e758 <__any_on>:
 800e758:	0002      	movs	r2, r0
 800e75a:	6900      	ldr	r0, [r0, #16]
 800e75c:	b510      	push	{r4, lr}
 800e75e:	3214      	adds	r2, #20
 800e760:	114b      	asrs	r3, r1, #5
 800e762:	4298      	cmp	r0, r3
 800e764:	db13      	blt.n	800e78e <__any_on+0x36>
 800e766:	dd0c      	ble.n	800e782 <__any_on+0x2a>
 800e768:	241f      	movs	r4, #31
 800e76a:	0008      	movs	r0, r1
 800e76c:	4020      	ands	r0, r4
 800e76e:	4221      	tst	r1, r4
 800e770:	d007      	beq.n	800e782 <__any_on+0x2a>
 800e772:	0099      	lsls	r1, r3, #2
 800e774:	588c      	ldr	r4, [r1, r2]
 800e776:	0021      	movs	r1, r4
 800e778:	40c1      	lsrs	r1, r0
 800e77a:	4081      	lsls	r1, r0
 800e77c:	2001      	movs	r0, #1
 800e77e:	428c      	cmp	r4, r1
 800e780:	d104      	bne.n	800e78c <__any_on+0x34>
 800e782:	009b      	lsls	r3, r3, #2
 800e784:	18d3      	adds	r3, r2, r3
 800e786:	4293      	cmp	r3, r2
 800e788:	d803      	bhi.n	800e792 <__any_on+0x3a>
 800e78a:	2000      	movs	r0, #0
 800e78c:	bd10      	pop	{r4, pc}
 800e78e:	0003      	movs	r3, r0
 800e790:	e7f7      	b.n	800e782 <__any_on+0x2a>
 800e792:	3b04      	subs	r3, #4
 800e794:	6819      	ldr	r1, [r3, #0]
 800e796:	2900      	cmp	r1, #0
 800e798:	d0f5      	beq.n	800e786 <__any_on+0x2e>
 800e79a:	2001      	movs	r0, #1
 800e79c:	e7f6      	b.n	800e78c <__any_on+0x34>

0800e79e <_malloc_usable_size_r>:
 800e79e:	1f0b      	subs	r3, r1, #4
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	1f18      	subs	r0, r3, #4
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	da01      	bge.n	800e7ac <_malloc_usable_size_r+0xe>
 800e7a8:	580b      	ldr	r3, [r1, r0]
 800e7aa:	18c0      	adds	r0, r0, r3
 800e7ac:	4770      	bx	lr
	...

0800e7b0 <_strtol_l.constprop.0>:
 800e7b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e7b2:	b087      	sub	sp, #28
 800e7b4:	001e      	movs	r6, r3
 800e7b6:	9005      	str	r0, [sp, #20]
 800e7b8:	9101      	str	r1, [sp, #4]
 800e7ba:	9202      	str	r2, [sp, #8]
 800e7bc:	2b01      	cmp	r3, #1
 800e7be:	d048      	beq.n	800e852 <_strtol_l.constprop.0+0xa2>
 800e7c0:	000b      	movs	r3, r1
 800e7c2:	2e24      	cmp	r6, #36	; 0x24
 800e7c4:	d845      	bhi.n	800e852 <_strtol_l.constprop.0+0xa2>
 800e7c6:	4a3b      	ldr	r2, [pc, #236]	; (800e8b4 <_strtol_l.constprop.0+0x104>)
 800e7c8:	2108      	movs	r1, #8
 800e7ca:	4694      	mov	ip, r2
 800e7cc:	001a      	movs	r2, r3
 800e7ce:	4660      	mov	r0, ip
 800e7d0:	7814      	ldrb	r4, [r2, #0]
 800e7d2:	3301      	adds	r3, #1
 800e7d4:	5d00      	ldrb	r0, [r0, r4]
 800e7d6:	001d      	movs	r5, r3
 800e7d8:	0007      	movs	r7, r0
 800e7da:	400f      	ands	r7, r1
 800e7dc:	4208      	tst	r0, r1
 800e7de:	d1f5      	bne.n	800e7cc <_strtol_l.constprop.0+0x1c>
 800e7e0:	2c2d      	cmp	r4, #45	; 0x2d
 800e7e2:	d13d      	bne.n	800e860 <_strtol_l.constprop.0+0xb0>
 800e7e4:	2701      	movs	r7, #1
 800e7e6:	781c      	ldrb	r4, [r3, #0]
 800e7e8:	1c95      	adds	r5, r2, #2
 800e7ea:	2e00      	cmp	r6, #0
 800e7ec:	d05e      	beq.n	800e8ac <_strtol_l.constprop.0+0xfc>
 800e7ee:	2e10      	cmp	r6, #16
 800e7f0:	d109      	bne.n	800e806 <_strtol_l.constprop.0+0x56>
 800e7f2:	2c30      	cmp	r4, #48	; 0x30
 800e7f4:	d107      	bne.n	800e806 <_strtol_l.constprop.0+0x56>
 800e7f6:	2220      	movs	r2, #32
 800e7f8:	782b      	ldrb	r3, [r5, #0]
 800e7fa:	4393      	bics	r3, r2
 800e7fc:	2b58      	cmp	r3, #88	; 0x58
 800e7fe:	d150      	bne.n	800e8a2 <_strtol_l.constprop.0+0xf2>
 800e800:	2610      	movs	r6, #16
 800e802:	786c      	ldrb	r4, [r5, #1]
 800e804:	3502      	adds	r5, #2
 800e806:	4b2c      	ldr	r3, [pc, #176]	; (800e8b8 <_strtol_l.constprop.0+0x108>)
 800e808:	0031      	movs	r1, r6
 800e80a:	18fb      	adds	r3, r7, r3
 800e80c:	0018      	movs	r0, r3
 800e80e:	9303      	str	r3, [sp, #12]
 800e810:	f7f1 fd1c 	bl	800024c <__aeabi_uidivmod>
 800e814:	2200      	movs	r2, #0
 800e816:	9104      	str	r1, [sp, #16]
 800e818:	2101      	movs	r1, #1
 800e81a:	4684      	mov	ip, r0
 800e81c:	0010      	movs	r0, r2
 800e81e:	4249      	negs	r1, r1
 800e820:	0023      	movs	r3, r4
 800e822:	3b30      	subs	r3, #48	; 0x30
 800e824:	2b09      	cmp	r3, #9
 800e826:	d903      	bls.n	800e830 <_strtol_l.constprop.0+0x80>
 800e828:	3b11      	subs	r3, #17
 800e82a:	2b19      	cmp	r3, #25
 800e82c:	d81d      	bhi.n	800e86a <_strtol_l.constprop.0+0xba>
 800e82e:	330a      	adds	r3, #10
 800e830:	429e      	cmp	r6, r3
 800e832:	dd1e      	ble.n	800e872 <_strtol_l.constprop.0+0xc2>
 800e834:	1c54      	adds	r4, r2, #1
 800e836:	d009      	beq.n	800e84c <_strtol_l.constprop.0+0x9c>
 800e838:	000a      	movs	r2, r1
 800e83a:	4584      	cmp	ip, r0
 800e83c:	d306      	bcc.n	800e84c <_strtol_l.constprop.0+0x9c>
 800e83e:	d102      	bne.n	800e846 <_strtol_l.constprop.0+0x96>
 800e840:	9c04      	ldr	r4, [sp, #16]
 800e842:	429c      	cmp	r4, r3
 800e844:	db02      	blt.n	800e84c <_strtol_l.constprop.0+0x9c>
 800e846:	2201      	movs	r2, #1
 800e848:	4370      	muls	r0, r6
 800e84a:	1818      	adds	r0, r3, r0
 800e84c:	782c      	ldrb	r4, [r5, #0]
 800e84e:	3501      	adds	r5, #1
 800e850:	e7e6      	b.n	800e820 <_strtol_l.constprop.0+0x70>
 800e852:	f7fe f841 	bl	800c8d8 <__errno>
 800e856:	2316      	movs	r3, #22
 800e858:	6003      	str	r3, [r0, #0]
 800e85a:	2000      	movs	r0, #0
 800e85c:	b007      	add	sp, #28
 800e85e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e860:	2c2b      	cmp	r4, #43	; 0x2b
 800e862:	d1c2      	bne.n	800e7ea <_strtol_l.constprop.0+0x3a>
 800e864:	781c      	ldrb	r4, [r3, #0]
 800e866:	1c95      	adds	r5, r2, #2
 800e868:	e7bf      	b.n	800e7ea <_strtol_l.constprop.0+0x3a>
 800e86a:	0023      	movs	r3, r4
 800e86c:	3b61      	subs	r3, #97	; 0x61
 800e86e:	2b19      	cmp	r3, #25
 800e870:	d9dd      	bls.n	800e82e <_strtol_l.constprop.0+0x7e>
 800e872:	1c53      	adds	r3, r2, #1
 800e874:	d109      	bne.n	800e88a <_strtol_l.constprop.0+0xda>
 800e876:	2322      	movs	r3, #34	; 0x22
 800e878:	9a05      	ldr	r2, [sp, #20]
 800e87a:	9803      	ldr	r0, [sp, #12]
 800e87c:	6013      	str	r3, [r2, #0]
 800e87e:	9b02      	ldr	r3, [sp, #8]
 800e880:	2b00      	cmp	r3, #0
 800e882:	d0eb      	beq.n	800e85c <_strtol_l.constprop.0+0xac>
 800e884:	1e6b      	subs	r3, r5, #1
 800e886:	9301      	str	r3, [sp, #4]
 800e888:	e007      	b.n	800e89a <_strtol_l.constprop.0+0xea>
 800e88a:	2f00      	cmp	r7, #0
 800e88c:	d000      	beq.n	800e890 <_strtol_l.constprop.0+0xe0>
 800e88e:	4240      	negs	r0, r0
 800e890:	9b02      	ldr	r3, [sp, #8]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d0e2      	beq.n	800e85c <_strtol_l.constprop.0+0xac>
 800e896:	2a00      	cmp	r2, #0
 800e898:	d1f4      	bne.n	800e884 <_strtol_l.constprop.0+0xd4>
 800e89a:	9b02      	ldr	r3, [sp, #8]
 800e89c:	9a01      	ldr	r2, [sp, #4]
 800e89e:	601a      	str	r2, [r3, #0]
 800e8a0:	e7dc      	b.n	800e85c <_strtol_l.constprop.0+0xac>
 800e8a2:	2430      	movs	r4, #48	; 0x30
 800e8a4:	2e00      	cmp	r6, #0
 800e8a6:	d1ae      	bne.n	800e806 <_strtol_l.constprop.0+0x56>
 800e8a8:	3608      	adds	r6, #8
 800e8aa:	e7ac      	b.n	800e806 <_strtol_l.constprop.0+0x56>
 800e8ac:	2c30      	cmp	r4, #48	; 0x30
 800e8ae:	d0a2      	beq.n	800e7f6 <_strtol_l.constprop.0+0x46>
 800e8b0:	260a      	movs	r6, #10
 800e8b2:	e7a8      	b.n	800e806 <_strtol_l.constprop.0+0x56>
 800e8b4:	0800feb1 	.word	0x0800feb1
 800e8b8:	7fffffff 	.word	0x7fffffff

0800e8bc <_strtol_r>:
 800e8bc:	b510      	push	{r4, lr}
 800e8be:	f7ff ff77 	bl	800e7b0 <_strtol_l.constprop.0>
 800e8c2:	bd10      	pop	{r4, pc}

0800e8c4 <__ascii_wctomb>:
 800e8c4:	0003      	movs	r3, r0
 800e8c6:	1e08      	subs	r0, r1, #0
 800e8c8:	d005      	beq.n	800e8d6 <__ascii_wctomb+0x12>
 800e8ca:	2aff      	cmp	r2, #255	; 0xff
 800e8cc:	d904      	bls.n	800e8d8 <__ascii_wctomb+0x14>
 800e8ce:	228a      	movs	r2, #138	; 0x8a
 800e8d0:	2001      	movs	r0, #1
 800e8d2:	601a      	str	r2, [r3, #0]
 800e8d4:	4240      	negs	r0, r0
 800e8d6:	4770      	bx	lr
 800e8d8:	2001      	movs	r0, #1
 800e8da:	700a      	strb	r2, [r1, #0]
 800e8dc:	e7fb      	b.n	800e8d6 <__ascii_wctomb+0x12>
	...

0800e8e0 <__ssputs_r>:
 800e8e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e8e2:	b085      	sub	sp, #20
 800e8e4:	9301      	str	r3, [sp, #4]
 800e8e6:	9203      	str	r2, [sp, #12]
 800e8e8:	688e      	ldr	r6, [r1, #8]
 800e8ea:	9a01      	ldr	r2, [sp, #4]
 800e8ec:	0007      	movs	r7, r0
 800e8ee:	000c      	movs	r4, r1
 800e8f0:	680b      	ldr	r3, [r1, #0]
 800e8f2:	4296      	cmp	r6, r2
 800e8f4:	d831      	bhi.n	800e95a <__ssputs_r+0x7a>
 800e8f6:	898a      	ldrh	r2, [r1, #12]
 800e8f8:	2190      	movs	r1, #144	; 0x90
 800e8fa:	00c9      	lsls	r1, r1, #3
 800e8fc:	420a      	tst	r2, r1
 800e8fe:	d029      	beq.n	800e954 <__ssputs_r+0x74>
 800e900:	2003      	movs	r0, #3
 800e902:	6921      	ldr	r1, [r4, #16]
 800e904:	1a5b      	subs	r3, r3, r1
 800e906:	9302      	str	r3, [sp, #8]
 800e908:	6963      	ldr	r3, [r4, #20]
 800e90a:	4343      	muls	r3, r0
 800e90c:	0fdd      	lsrs	r5, r3, #31
 800e90e:	18ed      	adds	r5, r5, r3
 800e910:	9b01      	ldr	r3, [sp, #4]
 800e912:	9802      	ldr	r0, [sp, #8]
 800e914:	3301      	adds	r3, #1
 800e916:	181b      	adds	r3, r3, r0
 800e918:	106d      	asrs	r5, r5, #1
 800e91a:	42ab      	cmp	r3, r5
 800e91c:	d900      	bls.n	800e920 <__ssputs_r+0x40>
 800e91e:	001d      	movs	r5, r3
 800e920:	0552      	lsls	r2, r2, #21
 800e922:	d529      	bpl.n	800e978 <__ssputs_r+0x98>
 800e924:	0029      	movs	r1, r5
 800e926:	0038      	movs	r0, r7
 800e928:	f7fb ff46 	bl	800a7b8 <_malloc_r>
 800e92c:	1e06      	subs	r6, r0, #0
 800e92e:	d02d      	beq.n	800e98c <__ssputs_r+0xac>
 800e930:	9a02      	ldr	r2, [sp, #8]
 800e932:	6921      	ldr	r1, [r4, #16]
 800e934:	f7fe f808 	bl	800c948 <memcpy>
 800e938:	89a2      	ldrh	r2, [r4, #12]
 800e93a:	4b19      	ldr	r3, [pc, #100]	; (800e9a0 <__ssputs_r+0xc0>)
 800e93c:	401a      	ands	r2, r3
 800e93e:	2380      	movs	r3, #128	; 0x80
 800e940:	4313      	orrs	r3, r2
 800e942:	81a3      	strh	r3, [r4, #12]
 800e944:	9b02      	ldr	r3, [sp, #8]
 800e946:	6126      	str	r6, [r4, #16]
 800e948:	18f6      	adds	r6, r6, r3
 800e94a:	6026      	str	r6, [r4, #0]
 800e94c:	6165      	str	r5, [r4, #20]
 800e94e:	9e01      	ldr	r6, [sp, #4]
 800e950:	1aed      	subs	r5, r5, r3
 800e952:	60a5      	str	r5, [r4, #8]
 800e954:	9b01      	ldr	r3, [sp, #4]
 800e956:	429e      	cmp	r6, r3
 800e958:	d900      	bls.n	800e95c <__ssputs_r+0x7c>
 800e95a:	9e01      	ldr	r6, [sp, #4]
 800e95c:	0032      	movs	r2, r6
 800e95e:	9903      	ldr	r1, [sp, #12]
 800e960:	6820      	ldr	r0, [r4, #0]
 800e962:	f000 ff21 	bl	800f7a8 <memmove>
 800e966:	2000      	movs	r0, #0
 800e968:	68a3      	ldr	r3, [r4, #8]
 800e96a:	1b9b      	subs	r3, r3, r6
 800e96c:	60a3      	str	r3, [r4, #8]
 800e96e:	6823      	ldr	r3, [r4, #0]
 800e970:	199b      	adds	r3, r3, r6
 800e972:	6023      	str	r3, [r4, #0]
 800e974:	b005      	add	sp, #20
 800e976:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e978:	002a      	movs	r2, r5
 800e97a:	0038      	movs	r0, r7
 800e97c:	f7fb ffb8 	bl	800a8f0 <_realloc_r>
 800e980:	1e06      	subs	r6, r0, #0
 800e982:	d1df      	bne.n	800e944 <__ssputs_r+0x64>
 800e984:	0038      	movs	r0, r7
 800e986:	6921      	ldr	r1, [r4, #16]
 800e988:	f7fe fe96 	bl	800d6b8 <_free_r>
 800e98c:	230c      	movs	r3, #12
 800e98e:	2001      	movs	r0, #1
 800e990:	603b      	str	r3, [r7, #0]
 800e992:	89a2      	ldrh	r2, [r4, #12]
 800e994:	3334      	adds	r3, #52	; 0x34
 800e996:	4313      	orrs	r3, r2
 800e998:	81a3      	strh	r3, [r4, #12]
 800e99a:	4240      	negs	r0, r0
 800e99c:	e7ea      	b.n	800e974 <__ssputs_r+0x94>
 800e99e:	46c0      	nop			; (mov r8, r8)
 800e9a0:	fffffb7f 	.word	0xfffffb7f

0800e9a4 <_svfiprintf_r>:
 800e9a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e9a6:	b0a1      	sub	sp, #132	; 0x84
 800e9a8:	9003      	str	r0, [sp, #12]
 800e9aa:	001d      	movs	r5, r3
 800e9ac:	898b      	ldrh	r3, [r1, #12]
 800e9ae:	000f      	movs	r7, r1
 800e9b0:	0016      	movs	r6, r2
 800e9b2:	061b      	lsls	r3, r3, #24
 800e9b4:	d511      	bpl.n	800e9da <_svfiprintf_r+0x36>
 800e9b6:	690b      	ldr	r3, [r1, #16]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d10e      	bne.n	800e9da <_svfiprintf_r+0x36>
 800e9bc:	2140      	movs	r1, #64	; 0x40
 800e9be:	f7fb fefb 	bl	800a7b8 <_malloc_r>
 800e9c2:	6038      	str	r0, [r7, #0]
 800e9c4:	6138      	str	r0, [r7, #16]
 800e9c6:	2800      	cmp	r0, #0
 800e9c8:	d105      	bne.n	800e9d6 <_svfiprintf_r+0x32>
 800e9ca:	230c      	movs	r3, #12
 800e9cc:	9a03      	ldr	r2, [sp, #12]
 800e9ce:	3801      	subs	r0, #1
 800e9d0:	6013      	str	r3, [r2, #0]
 800e9d2:	b021      	add	sp, #132	; 0x84
 800e9d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e9d6:	2340      	movs	r3, #64	; 0x40
 800e9d8:	617b      	str	r3, [r7, #20]
 800e9da:	2300      	movs	r3, #0
 800e9dc:	ac08      	add	r4, sp, #32
 800e9de:	6163      	str	r3, [r4, #20]
 800e9e0:	3320      	adds	r3, #32
 800e9e2:	7663      	strb	r3, [r4, #25]
 800e9e4:	3310      	adds	r3, #16
 800e9e6:	76a3      	strb	r3, [r4, #26]
 800e9e8:	9507      	str	r5, [sp, #28]
 800e9ea:	0035      	movs	r5, r6
 800e9ec:	782b      	ldrb	r3, [r5, #0]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d001      	beq.n	800e9f6 <_svfiprintf_r+0x52>
 800e9f2:	2b25      	cmp	r3, #37	; 0x25
 800e9f4:	d148      	bne.n	800ea88 <_svfiprintf_r+0xe4>
 800e9f6:	1bab      	subs	r3, r5, r6
 800e9f8:	9305      	str	r3, [sp, #20]
 800e9fa:	42b5      	cmp	r5, r6
 800e9fc:	d00b      	beq.n	800ea16 <_svfiprintf_r+0x72>
 800e9fe:	0032      	movs	r2, r6
 800ea00:	0039      	movs	r1, r7
 800ea02:	9803      	ldr	r0, [sp, #12]
 800ea04:	f7ff ff6c 	bl	800e8e0 <__ssputs_r>
 800ea08:	3001      	adds	r0, #1
 800ea0a:	d100      	bne.n	800ea0e <_svfiprintf_r+0x6a>
 800ea0c:	e0af      	b.n	800eb6e <_svfiprintf_r+0x1ca>
 800ea0e:	6963      	ldr	r3, [r4, #20]
 800ea10:	9a05      	ldr	r2, [sp, #20]
 800ea12:	189b      	adds	r3, r3, r2
 800ea14:	6163      	str	r3, [r4, #20]
 800ea16:	782b      	ldrb	r3, [r5, #0]
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d100      	bne.n	800ea1e <_svfiprintf_r+0x7a>
 800ea1c:	e0a7      	b.n	800eb6e <_svfiprintf_r+0x1ca>
 800ea1e:	2201      	movs	r2, #1
 800ea20:	2300      	movs	r3, #0
 800ea22:	4252      	negs	r2, r2
 800ea24:	6062      	str	r2, [r4, #4]
 800ea26:	a904      	add	r1, sp, #16
 800ea28:	3254      	adds	r2, #84	; 0x54
 800ea2a:	1852      	adds	r2, r2, r1
 800ea2c:	1c6e      	adds	r6, r5, #1
 800ea2e:	6023      	str	r3, [r4, #0]
 800ea30:	60e3      	str	r3, [r4, #12]
 800ea32:	60a3      	str	r3, [r4, #8]
 800ea34:	7013      	strb	r3, [r2, #0]
 800ea36:	65a3      	str	r3, [r4, #88]	; 0x58
 800ea38:	4b55      	ldr	r3, [pc, #340]	; (800eb90 <_svfiprintf_r+0x1ec>)
 800ea3a:	2205      	movs	r2, #5
 800ea3c:	0018      	movs	r0, r3
 800ea3e:	7831      	ldrb	r1, [r6, #0]
 800ea40:	9305      	str	r3, [sp, #20]
 800ea42:	f7fd ff76 	bl	800c932 <memchr>
 800ea46:	1c75      	adds	r5, r6, #1
 800ea48:	2800      	cmp	r0, #0
 800ea4a:	d11f      	bne.n	800ea8c <_svfiprintf_r+0xe8>
 800ea4c:	6822      	ldr	r2, [r4, #0]
 800ea4e:	06d3      	lsls	r3, r2, #27
 800ea50:	d504      	bpl.n	800ea5c <_svfiprintf_r+0xb8>
 800ea52:	2353      	movs	r3, #83	; 0x53
 800ea54:	a904      	add	r1, sp, #16
 800ea56:	185b      	adds	r3, r3, r1
 800ea58:	2120      	movs	r1, #32
 800ea5a:	7019      	strb	r1, [r3, #0]
 800ea5c:	0713      	lsls	r3, r2, #28
 800ea5e:	d504      	bpl.n	800ea6a <_svfiprintf_r+0xc6>
 800ea60:	2353      	movs	r3, #83	; 0x53
 800ea62:	a904      	add	r1, sp, #16
 800ea64:	185b      	adds	r3, r3, r1
 800ea66:	212b      	movs	r1, #43	; 0x2b
 800ea68:	7019      	strb	r1, [r3, #0]
 800ea6a:	7833      	ldrb	r3, [r6, #0]
 800ea6c:	2b2a      	cmp	r3, #42	; 0x2a
 800ea6e:	d016      	beq.n	800ea9e <_svfiprintf_r+0xfa>
 800ea70:	0035      	movs	r5, r6
 800ea72:	2100      	movs	r1, #0
 800ea74:	200a      	movs	r0, #10
 800ea76:	68e3      	ldr	r3, [r4, #12]
 800ea78:	782a      	ldrb	r2, [r5, #0]
 800ea7a:	1c6e      	adds	r6, r5, #1
 800ea7c:	3a30      	subs	r2, #48	; 0x30
 800ea7e:	2a09      	cmp	r2, #9
 800ea80:	d94e      	bls.n	800eb20 <_svfiprintf_r+0x17c>
 800ea82:	2900      	cmp	r1, #0
 800ea84:	d111      	bne.n	800eaaa <_svfiprintf_r+0x106>
 800ea86:	e017      	b.n	800eab8 <_svfiprintf_r+0x114>
 800ea88:	3501      	adds	r5, #1
 800ea8a:	e7af      	b.n	800e9ec <_svfiprintf_r+0x48>
 800ea8c:	9b05      	ldr	r3, [sp, #20]
 800ea8e:	6822      	ldr	r2, [r4, #0]
 800ea90:	1ac0      	subs	r0, r0, r3
 800ea92:	2301      	movs	r3, #1
 800ea94:	4083      	lsls	r3, r0
 800ea96:	4313      	orrs	r3, r2
 800ea98:	002e      	movs	r6, r5
 800ea9a:	6023      	str	r3, [r4, #0]
 800ea9c:	e7cc      	b.n	800ea38 <_svfiprintf_r+0x94>
 800ea9e:	9b07      	ldr	r3, [sp, #28]
 800eaa0:	1d19      	adds	r1, r3, #4
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	9107      	str	r1, [sp, #28]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	db01      	blt.n	800eaae <_svfiprintf_r+0x10a>
 800eaaa:	930b      	str	r3, [sp, #44]	; 0x2c
 800eaac:	e004      	b.n	800eab8 <_svfiprintf_r+0x114>
 800eaae:	425b      	negs	r3, r3
 800eab0:	60e3      	str	r3, [r4, #12]
 800eab2:	2302      	movs	r3, #2
 800eab4:	4313      	orrs	r3, r2
 800eab6:	6023      	str	r3, [r4, #0]
 800eab8:	782b      	ldrb	r3, [r5, #0]
 800eaba:	2b2e      	cmp	r3, #46	; 0x2e
 800eabc:	d10a      	bne.n	800ead4 <_svfiprintf_r+0x130>
 800eabe:	786b      	ldrb	r3, [r5, #1]
 800eac0:	2b2a      	cmp	r3, #42	; 0x2a
 800eac2:	d135      	bne.n	800eb30 <_svfiprintf_r+0x18c>
 800eac4:	9b07      	ldr	r3, [sp, #28]
 800eac6:	3502      	adds	r5, #2
 800eac8:	1d1a      	adds	r2, r3, #4
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	9207      	str	r2, [sp, #28]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	db2b      	blt.n	800eb2a <_svfiprintf_r+0x186>
 800ead2:	9309      	str	r3, [sp, #36]	; 0x24
 800ead4:	4e2f      	ldr	r6, [pc, #188]	; (800eb94 <_svfiprintf_r+0x1f0>)
 800ead6:	2203      	movs	r2, #3
 800ead8:	0030      	movs	r0, r6
 800eada:	7829      	ldrb	r1, [r5, #0]
 800eadc:	f7fd ff29 	bl	800c932 <memchr>
 800eae0:	2800      	cmp	r0, #0
 800eae2:	d006      	beq.n	800eaf2 <_svfiprintf_r+0x14e>
 800eae4:	2340      	movs	r3, #64	; 0x40
 800eae6:	1b80      	subs	r0, r0, r6
 800eae8:	4083      	lsls	r3, r0
 800eaea:	6822      	ldr	r2, [r4, #0]
 800eaec:	3501      	adds	r5, #1
 800eaee:	4313      	orrs	r3, r2
 800eaf0:	6023      	str	r3, [r4, #0]
 800eaf2:	7829      	ldrb	r1, [r5, #0]
 800eaf4:	2206      	movs	r2, #6
 800eaf6:	4828      	ldr	r0, [pc, #160]	; (800eb98 <_svfiprintf_r+0x1f4>)
 800eaf8:	1c6e      	adds	r6, r5, #1
 800eafa:	7621      	strb	r1, [r4, #24]
 800eafc:	f7fd ff19 	bl	800c932 <memchr>
 800eb00:	2800      	cmp	r0, #0
 800eb02:	d03c      	beq.n	800eb7e <_svfiprintf_r+0x1da>
 800eb04:	4b25      	ldr	r3, [pc, #148]	; (800eb9c <_svfiprintf_r+0x1f8>)
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d125      	bne.n	800eb56 <_svfiprintf_r+0x1b2>
 800eb0a:	2207      	movs	r2, #7
 800eb0c:	9b07      	ldr	r3, [sp, #28]
 800eb0e:	3307      	adds	r3, #7
 800eb10:	4393      	bics	r3, r2
 800eb12:	3308      	adds	r3, #8
 800eb14:	9307      	str	r3, [sp, #28]
 800eb16:	6963      	ldr	r3, [r4, #20]
 800eb18:	9a04      	ldr	r2, [sp, #16]
 800eb1a:	189b      	adds	r3, r3, r2
 800eb1c:	6163      	str	r3, [r4, #20]
 800eb1e:	e764      	b.n	800e9ea <_svfiprintf_r+0x46>
 800eb20:	4343      	muls	r3, r0
 800eb22:	0035      	movs	r5, r6
 800eb24:	2101      	movs	r1, #1
 800eb26:	189b      	adds	r3, r3, r2
 800eb28:	e7a6      	b.n	800ea78 <_svfiprintf_r+0xd4>
 800eb2a:	2301      	movs	r3, #1
 800eb2c:	425b      	negs	r3, r3
 800eb2e:	e7d0      	b.n	800ead2 <_svfiprintf_r+0x12e>
 800eb30:	2300      	movs	r3, #0
 800eb32:	200a      	movs	r0, #10
 800eb34:	001a      	movs	r2, r3
 800eb36:	3501      	adds	r5, #1
 800eb38:	6063      	str	r3, [r4, #4]
 800eb3a:	7829      	ldrb	r1, [r5, #0]
 800eb3c:	1c6e      	adds	r6, r5, #1
 800eb3e:	3930      	subs	r1, #48	; 0x30
 800eb40:	2909      	cmp	r1, #9
 800eb42:	d903      	bls.n	800eb4c <_svfiprintf_r+0x1a8>
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d0c5      	beq.n	800ead4 <_svfiprintf_r+0x130>
 800eb48:	9209      	str	r2, [sp, #36]	; 0x24
 800eb4a:	e7c3      	b.n	800ead4 <_svfiprintf_r+0x130>
 800eb4c:	4342      	muls	r2, r0
 800eb4e:	0035      	movs	r5, r6
 800eb50:	2301      	movs	r3, #1
 800eb52:	1852      	adds	r2, r2, r1
 800eb54:	e7f1      	b.n	800eb3a <_svfiprintf_r+0x196>
 800eb56:	aa07      	add	r2, sp, #28
 800eb58:	9200      	str	r2, [sp, #0]
 800eb5a:	0021      	movs	r1, r4
 800eb5c:	003a      	movs	r2, r7
 800eb5e:	4b10      	ldr	r3, [pc, #64]	; (800eba0 <_svfiprintf_r+0x1fc>)
 800eb60:	9803      	ldr	r0, [sp, #12]
 800eb62:	f7fc fdc7 	bl	800b6f4 <_printf_float>
 800eb66:	9004      	str	r0, [sp, #16]
 800eb68:	9b04      	ldr	r3, [sp, #16]
 800eb6a:	3301      	adds	r3, #1
 800eb6c:	d1d3      	bne.n	800eb16 <_svfiprintf_r+0x172>
 800eb6e:	89bb      	ldrh	r3, [r7, #12]
 800eb70:	980d      	ldr	r0, [sp, #52]	; 0x34
 800eb72:	065b      	lsls	r3, r3, #25
 800eb74:	d400      	bmi.n	800eb78 <_svfiprintf_r+0x1d4>
 800eb76:	e72c      	b.n	800e9d2 <_svfiprintf_r+0x2e>
 800eb78:	2001      	movs	r0, #1
 800eb7a:	4240      	negs	r0, r0
 800eb7c:	e729      	b.n	800e9d2 <_svfiprintf_r+0x2e>
 800eb7e:	aa07      	add	r2, sp, #28
 800eb80:	9200      	str	r2, [sp, #0]
 800eb82:	0021      	movs	r1, r4
 800eb84:	003a      	movs	r2, r7
 800eb86:	4b06      	ldr	r3, [pc, #24]	; (800eba0 <_svfiprintf_r+0x1fc>)
 800eb88:	9803      	ldr	r0, [sp, #12]
 800eb8a:	f7fd f879 	bl	800bc80 <_printf_i>
 800eb8e:	e7ea      	b.n	800eb66 <_svfiprintf_r+0x1c2>
 800eb90:	08010234 	.word	0x08010234
 800eb94:	0801023a 	.word	0x0801023a
 800eb98:	0801023e 	.word	0x0801023e
 800eb9c:	0800b6f5 	.word	0x0800b6f5
 800eba0:	0800e8e1 	.word	0x0800e8e1

0800eba4 <_sungetc_r>:
 800eba4:	b570      	push	{r4, r5, r6, lr}
 800eba6:	0014      	movs	r4, r2
 800eba8:	1c4b      	adds	r3, r1, #1
 800ebaa:	d103      	bne.n	800ebb4 <_sungetc_r+0x10>
 800ebac:	2501      	movs	r5, #1
 800ebae:	426d      	negs	r5, r5
 800ebb0:	0028      	movs	r0, r5
 800ebb2:	bd70      	pop	{r4, r5, r6, pc}
 800ebb4:	8993      	ldrh	r3, [r2, #12]
 800ebb6:	2220      	movs	r2, #32
 800ebb8:	4393      	bics	r3, r2
 800ebba:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800ebbc:	81a3      	strh	r3, [r4, #12]
 800ebbe:	b2ce      	uxtb	r6, r1
 800ebc0:	6863      	ldr	r3, [r4, #4]
 800ebc2:	b2cd      	uxtb	r5, r1
 800ebc4:	2a00      	cmp	r2, #0
 800ebc6:	d010      	beq.n	800ebea <_sungetc_r+0x46>
 800ebc8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800ebca:	429a      	cmp	r2, r3
 800ebcc:	dd07      	ble.n	800ebde <_sungetc_r+0x3a>
 800ebce:	6823      	ldr	r3, [r4, #0]
 800ebd0:	3b01      	subs	r3, #1
 800ebd2:	6023      	str	r3, [r4, #0]
 800ebd4:	701e      	strb	r6, [r3, #0]
 800ebd6:	6863      	ldr	r3, [r4, #4]
 800ebd8:	3301      	adds	r3, #1
 800ebda:	6063      	str	r3, [r4, #4]
 800ebdc:	e7e8      	b.n	800ebb0 <_sungetc_r+0xc>
 800ebde:	0021      	movs	r1, r4
 800ebe0:	f000 fda4 	bl	800f72c <__submore>
 800ebe4:	2800      	cmp	r0, #0
 800ebe6:	d0f2      	beq.n	800ebce <_sungetc_r+0x2a>
 800ebe8:	e7e0      	b.n	800ebac <_sungetc_r+0x8>
 800ebea:	6921      	ldr	r1, [r4, #16]
 800ebec:	6822      	ldr	r2, [r4, #0]
 800ebee:	2900      	cmp	r1, #0
 800ebf0:	d007      	beq.n	800ec02 <_sungetc_r+0x5e>
 800ebf2:	4291      	cmp	r1, r2
 800ebf4:	d205      	bcs.n	800ec02 <_sungetc_r+0x5e>
 800ebf6:	1e51      	subs	r1, r2, #1
 800ebf8:	7808      	ldrb	r0, [r1, #0]
 800ebfa:	42a8      	cmp	r0, r5
 800ebfc:	d101      	bne.n	800ec02 <_sungetc_r+0x5e>
 800ebfe:	6021      	str	r1, [r4, #0]
 800ec00:	e7ea      	b.n	800ebd8 <_sungetc_r+0x34>
 800ec02:	6423      	str	r3, [r4, #64]	; 0x40
 800ec04:	0023      	movs	r3, r4
 800ec06:	3344      	adds	r3, #68	; 0x44
 800ec08:	6363      	str	r3, [r4, #52]	; 0x34
 800ec0a:	2303      	movs	r3, #3
 800ec0c:	63a3      	str	r3, [r4, #56]	; 0x38
 800ec0e:	0023      	movs	r3, r4
 800ec10:	3346      	adds	r3, #70	; 0x46
 800ec12:	63e2      	str	r2, [r4, #60]	; 0x3c
 800ec14:	701e      	strb	r6, [r3, #0]
 800ec16:	6023      	str	r3, [r4, #0]
 800ec18:	2301      	movs	r3, #1
 800ec1a:	e7de      	b.n	800ebda <_sungetc_r+0x36>

0800ec1c <__ssrefill_r>:
 800ec1c:	b510      	push	{r4, lr}
 800ec1e:	000c      	movs	r4, r1
 800ec20:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ec22:	2900      	cmp	r1, #0
 800ec24:	d00e      	beq.n	800ec44 <__ssrefill_r+0x28>
 800ec26:	0023      	movs	r3, r4
 800ec28:	3344      	adds	r3, #68	; 0x44
 800ec2a:	4299      	cmp	r1, r3
 800ec2c:	d001      	beq.n	800ec32 <__ssrefill_r+0x16>
 800ec2e:	f7fe fd43 	bl	800d6b8 <_free_r>
 800ec32:	2000      	movs	r0, #0
 800ec34:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ec36:	6360      	str	r0, [r4, #52]	; 0x34
 800ec38:	6063      	str	r3, [r4, #4]
 800ec3a:	4283      	cmp	r3, r0
 800ec3c:	d002      	beq.n	800ec44 <__ssrefill_r+0x28>
 800ec3e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ec40:	6023      	str	r3, [r4, #0]
 800ec42:	bd10      	pop	{r4, pc}
 800ec44:	6923      	ldr	r3, [r4, #16]
 800ec46:	2001      	movs	r0, #1
 800ec48:	6023      	str	r3, [r4, #0]
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	89a2      	ldrh	r2, [r4, #12]
 800ec4e:	6063      	str	r3, [r4, #4]
 800ec50:	3320      	adds	r3, #32
 800ec52:	4313      	orrs	r3, r2
 800ec54:	81a3      	strh	r3, [r4, #12]
 800ec56:	4240      	negs	r0, r0
 800ec58:	e7f3      	b.n	800ec42 <__ssrefill_r+0x26>
	...

0800ec5c <__ssvfiscanf_r>:
 800ec5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec5e:	4cae      	ldr	r4, [pc, #696]	; (800ef18 <__ssvfiscanf_r+0x2bc>)
 800ec60:	0006      	movs	r6, r0
 800ec62:	44a5      	add	sp, r4
 800ec64:	000c      	movs	r4, r1
 800ec66:	2100      	movs	r1, #0
 800ec68:	20be      	movs	r0, #190	; 0xbe
 800ec6a:	9146      	str	r1, [sp, #280]	; 0x118
 800ec6c:	9147      	str	r1, [sp, #284]	; 0x11c
 800ec6e:	a903      	add	r1, sp, #12
 800ec70:	9148      	str	r1, [sp, #288]	; 0x120
 800ec72:	49aa      	ldr	r1, [pc, #680]	; (800ef1c <__ssvfiscanf_r+0x2c0>)
 800ec74:	0040      	lsls	r0, r0, #1
 800ec76:	ad43      	add	r5, sp, #268	; 0x10c
 800ec78:	5029      	str	r1, [r5, r0]
 800ec7a:	25c0      	movs	r5, #192	; 0xc0
 800ec7c:	49a8      	ldr	r1, [pc, #672]	; (800ef20 <__ssvfiscanf_r+0x2c4>)
 800ec7e:	006d      	lsls	r5, r5, #1
 800ec80:	a843      	add	r0, sp, #268	; 0x10c
 800ec82:	5141      	str	r1, [r0, r5]
 800ec84:	9302      	str	r3, [sp, #8]
 800ec86:	7815      	ldrb	r5, [r2, #0]
 800ec88:	2d00      	cmp	r5, #0
 800ec8a:	d100      	bne.n	800ec8e <__ssvfiscanf_r+0x32>
 800ec8c:	e141      	b.n	800ef12 <__ssvfiscanf_r+0x2b6>
 800ec8e:	4ba5      	ldr	r3, [pc, #660]	; (800ef24 <__ssvfiscanf_r+0x2c8>)
 800ec90:	2008      	movs	r0, #8
 800ec92:	5d59      	ldrb	r1, [r3, r5]
 800ec94:	9300      	str	r3, [sp, #0]
 800ec96:	2308      	movs	r3, #8
 800ec98:	1c57      	adds	r7, r2, #1
 800ec9a:	400b      	ands	r3, r1
 800ec9c:	4201      	tst	r1, r0
 800ec9e:	d01e      	beq.n	800ecde <__ssvfiscanf_r+0x82>
 800eca0:	6863      	ldr	r3, [r4, #4]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	dd11      	ble.n	800ecca <__ssvfiscanf_r+0x6e>
 800eca6:	6823      	ldr	r3, [r4, #0]
 800eca8:	9900      	ldr	r1, [sp, #0]
 800ecaa:	781a      	ldrb	r2, [r3, #0]
 800ecac:	5c8a      	ldrb	r2, [r1, r2]
 800ecae:	2108      	movs	r1, #8
 800ecb0:	420a      	tst	r2, r1
 800ecb2:	d101      	bne.n	800ecb8 <__ssvfiscanf_r+0x5c>
 800ecb4:	003a      	movs	r2, r7
 800ecb6:	e7e6      	b.n	800ec86 <__ssvfiscanf_r+0x2a>
 800ecb8:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800ecba:	3301      	adds	r3, #1
 800ecbc:	3201      	adds	r2, #1
 800ecbe:	9247      	str	r2, [sp, #284]	; 0x11c
 800ecc0:	6862      	ldr	r2, [r4, #4]
 800ecc2:	6023      	str	r3, [r4, #0]
 800ecc4:	3a01      	subs	r2, #1
 800ecc6:	6062      	str	r2, [r4, #4]
 800ecc8:	e7ea      	b.n	800eca0 <__ssvfiscanf_r+0x44>
 800ecca:	22c0      	movs	r2, #192	; 0xc0
 800eccc:	ab43      	add	r3, sp, #268	; 0x10c
 800ecce:	0052      	lsls	r2, r2, #1
 800ecd0:	0021      	movs	r1, r4
 800ecd2:	0030      	movs	r0, r6
 800ecd4:	589b      	ldr	r3, [r3, r2]
 800ecd6:	4798      	blx	r3
 800ecd8:	2800      	cmp	r0, #0
 800ecda:	d0e4      	beq.n	800eca6 <__ssvfiscanf_r+0x4a>
 800ecdc:	e7ea      	b.n	800ecb4 <__ssvfiscanf_r+0x58>
 800ecde:	2d25      	cmp	r5, #37	; 0x25
 800ece0:	d162      	bne.n	800eda8 <__ssvfiscanf_r+0x14c>
 800ece2:	9345      	str	r3, [sp, #276]	; 0x114
 800ece4:	9343      	str	r3, [sp, #268]	; 0x10c
 800ece6:	7853      	ldrb	r3, [r2, #1]
 800ece8:	2b2a      	cmp	r3, #42	; 0x2a
 800ecea:	d102      	bne.n	800ecf2 <__ssvfiscanf_r+0x96>
 800ecec:	3b1a      	subs	r3, #26
 800ecee:	9343      	str	r3, [sp, #268]	; 0x10c
 800ecf0:	1c97      	adds	r7, r2, #2
 800ecf2:	003d      	movs	r5, r7
 800ecf4:	220a      	movs	r2, #10
 800ecf6:	7829      	ldrb	r1, [r5, #0]
 800ecf8:	1c6b      	adds	r3, r5, #1
 800ecfa:	9301      	str	r3, [sp, #4]
 800ecfc:	000b      	movs	r3, r1
 800ecfe:	3b30      	subs	r3, #48	; 0x30
 800ed00:	2b09      	cmp	r3, #9
 800ed02:	d91e      	bls.n	800ed42 <__ssvfiscanf_r+0xe6>
 800ed04:	4f88      	ldr	r7, [pc, #544]	; (800ef28 <__ssvfiscanf_r+0x2cc>)
 800ed06:	2203      	movs	r2, #3
 800ed08:	0038      	movs	r0, r7
 800ed0a:	f7fd fe12 	bl	800c932 <memchr>
 800ed0e:	2800      	cmp	r0, #0
 800ed10:	d006      	beq.n	800ed20 <__ssvfiscanf_r+0xc4>
 800ed12:	2301      	movs	r3, #1
 800ed14:	1bc0      	subs	r0, r0, r7
 800ed16:	4083      	lsls	r3, r0
 800ed18:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800ed1a:	9d01      	ldr	r5, [sp, #4]
 800ed1c:	4313      	orrs	r3, r2
 800ed1e:	9343      	str	r3, [sp, #268]	; 0x10c
 800ed20:	1c6f      	adds	r7, r5, #1
 800ed22:	782d      	ldrb	r5, [r5, #0]
 800ed24:	2d78      	cmp	r5, #120	; 0x78
 800ed26:	d807      	bhi.n	800ed38 <__ssvfiscanf_r+0xdc>
 800ed28:	2d57      	cmp	r5, #87	; 0x57
 800ed2a:	d811      	bhi.n	800ed50 <__ssvfiscanf_r+0xf4>
 800ed2c:	2d25      	cmp	r5, #37	; 0x25
 800ed2e:	d03b      	beq.n	800eda8 <__ssvfiscanf_r+0x14c>
 800ed30:	d835      	bhi.n	800ed9e <__ssvfiscanf_r+0x142>
 800ed32:	2d00      	cmp	r5, #0
 800ed34:	d100      	bne.n	800ed38 <__ssvfiscanf_r+0xdc>
 800ed36:	e0e9      	b.n	800ef0c <__ssvfiscanf_r+0x2b0>
 800ed38:	2303      	movs	r3, #3
 800ed3a:	9349      	str	r3, [sp, #292]	; 0x124
 800ed3c:	3307      	adds	r3, #7
 800ed3e:	9344      	str	r3, [sp, #272]	; 0x110
 800ed40:	e06d      	b.n	800ee1e <__ssvfiscanf_r+0x1c2>
 800ed42:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800ed44:	9d01      	ldr	r5, [sp, #4]
 800ed46:	4353      	muls	r3, r2
 800ed48:	3b30      	subs	r3, #48	; 0x30
 800ed4a:	185b      	adds	r3, r3, r1
 800ed4c:	9345      	str	r3, [sp, #276]	; 0x114
 800ed4e:	e7d2      	b.n	800ecf6 <__ssvfiscanf_r+0x9a>
 800ed50:	0028      	movs	r0, r5
 800ed52:	3858      	subs	r0, #88	; 0x58
 800ed54:	2820      	cmp	r0, #32
 800ed56:	d8ef      	bhi.n	800ed38 <__ssvfiscanf_r+0xdc>
 800ed58:	f7f1 f9e8 	bl	800012c <__gnu_thumb1_case_shi>
 800ed5c:	ffee004d 	.word	0xffee004d
 800ed60:	007fffee 	.word	0x007fffee
 800ed64:	ffeeffee 	.word	0xffeeffee
 800ed68:	ffeeffee 	.word	0xffeeffee
 800ed6c:	ffeeffee 	.word	0xffeeffee
 800ed70:	008affee 	.word	0x008affee
 800ed74:	0024007d 	.word	0x0024007d
 800ed78:	00240024 	.word	0x00240024
 800ed7c:	0059ffee 	.word	0x0059ffee
 800ed80:	ffeeffee 	.word	0xffeeffee
 800ed84:	ffeeffee 	.word	0xffeeffee
 800ed88:	005d0092 	.word	0x005d0092
 800ed8c:	ffee0049 	.word	0xffee0049
 800ed90:	0090ffee 	.word	0x0090ffee
 800ed94:	007dffee 	.word	0x007dffee
 800ed98:	ffeeffee 	.word	0xffeeffee
 800ed9c:	004d      	.short	0x004d
 800ed9e:	3d45      	subs	r5, #69	; 0x45
 800eda0:	2d02      	cmp	r5, #2
 800eda2:	d8c9      	bhi.n	800ed38 <__ssvfiscanf_r+0xdc>
 800eda4:	2305      	movs	r3, #5
 800eda6:	e039      	b.n	800ee1c <__ssvfiscanf_r+0x1c0>
 800eda8:	6863      	ldr	r3, [r4, #4]
 800edaa:	2b00      	cmp	r3, #0
 800edac:	dd0d      	ble.n	800edca <__ssvfiscanf_r+0x16e>
 800edae:	6823      	ldr	r3, [r4, #0]
 800edb0:	781a      	ldrb	r2, [r3, #0]
 800edb2:	42aa      	cmp	r2, r5
 800edb4:	d000      	beq.n	800edb8 <__ssvfiscanf_r+0x15c>
 800edb6:	e0ac      	b.n	800ef12 <__ssvfiscanf_r+0x2b6>
 800edb8:	3301      	adds	r3, #1
 800edba:	6862      	ldr	r2, [r4, #4]
 800edbc:	6023      	str	r3, [r4, #0]
 800edbe:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800edc0:	3a01      	subs	r2, #1
 800edc2:	3301      	adds	r3, #1
 800edc4:	6062      	str	r2, [r4, #4]
 800edc6:	9347      	str	r3, [sp, #284]	; 0x11c
 800edc8:	e774      	b.n	800ecb4 <__ssvfiscanf_r+0x58>
 800edca:	22c0      	movs	r2, #192	; 0xc0
 800edcc:	ab43      	add	r3, sp, #268	; 0x10c
 800edce:	0052      	lsls	r2, r2, #1
 800edd0:	0021      	movs	r1, r4
 800edd2:	0030      	movs	r0, r6
 800edd4:	589b      	ldr	r3, [r3, r2]
 800edd6:	4798      	blx	r3
 800edd8:	2800      	cmp	r0, #0
 800edda:	d0e8      	beq.n	800edae <__ssvfiscanf_r+0x152>
 800eddc:	9846      	ldr	r0, [sp, #280]	; 0x118
 800edde:	2800      	cmp	r0, #0
 800ede0:	d000      	beq.n	800ede4 <__ssvfiscanf_r+0x188>
 800ede2:	e08f      	b.n	800ef04 <__ssvfiscanf_r+0x2a8>
 800ede4:	3801      	subs	r0, #1
 800ede6:	23a5      	movs	r3, #165	; 0xa5
 800ede8:	009b      	lsls	r3, r3, #2
 800edea:	449d      	add	sp, r3
 800edec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800edee:	2320      	movs	r3, #32
 800edf0:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800edf2:	4313      	orrs	r3, r2
 800edf4:	9343      	str	r3, [sp, #268]	; 0x10c
 800edf6:	2380      	movs	r3, #128	; 0x80
 800edf8:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800edfa:	009b      	lsls	r3, r3, #2
 800edfc:	4313      	orrs	r3, r2
 800edfe:	9343      	str	r3, [sp, #268]	; 0x10c
 800ee00:	2310      	movs	r3, #16
 800ee02:	9344      	str	r3, [sp, #272]	; 0x110
 800ee04:	236e      	movs	r3, #110	; 0x6e
 800ee06:	42ab      	cmp	r3, r5
 800ee08:	419b      	sbcs	r3, r3
 800ee0a:	425b      	negs	r3, r3
 800ee0c:	e001      	b.n	800ee12 <__ssvfiscanf_r+0x1b6>
 800ee0e:	2300      	movs	r3, #0
 800ee10:	9344      	str	r3, [sp, #272]	; 0x110
 800ee12:	3303      	adds	r3, #3
 800ee14:	e002      	b.n	800ee1c <__ssvfiscanf_r+0x1c0>
 800ee16:	2308      	movs	r3, #8
 800ee18:	9344      	str	r3, [sp, #272]	; 0x110
 800ee1a:	3b04      	subs	r3, #4
 800ee1c:	9349      	str	r3, [sp, #292]	; 0x124
 800ee1e:	6863      	ldr	r3, [r4, #4]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	dd3c      	ble.n	800ee9e <__ssvfiscanf_r+0x242>
 800ee24:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800ee26:	065b      	lsls	r3, r3, #25
 800ee28:	d406      	bmi.n	800ee38 <__ssvfiscanf_r+0x1dc>
 800ee2a:	6823      	ldr	r3, [r4, #0]
 800ee2c:	9900      	ldr	r1, [sp, #0]
 800ee2e:	781a      	ldrb	r2, [r3, #0]
 800ee30:	5c8a      	ldrb	r2, [r1, r2]
 800ee32:	2108      	movs	r1, #8
 800ee34:	420a      	tst	r2, r1
 800ee36:	d13c      	bne.n	800eeb2 <__ssvfiscanf_r+0x256>
 800ee38:	9b49      	ldr	r3, [sp, #292]	; 0x124
 800ee3a:	2b02      	cmp	r3, #2
 800ee3c:	dc4e      	bgt.n	800eedc <__ssvfiscanf_r+0x280>
 800ee3e:	0022      	movs	r2, r4
 800ee40:	0030      	movs	r0, r6
 800ee42:	ab02      	add	r3, sp, #8
 800ee44:	a943      	add	r1, sp, #268	; 0x10c
 800ee46:	f000 f9b7 	bl	800f1b8 <_scanf_chars>
 800ee4a:	2801      	cmp	r0, #1
 800ee4c:	d061      	beq.n	800ef12 <__ssvfiscanf_r+0x2b6>
 800ee4e:	2802      	cmp	r0, #2
 800ee50:	d000      	beq.n	800ee54 <__ssvfiscanf_r+0x1f8>
 800ee52:	e72f      	b.n	800ecb4 <__ssvfiscanf_r+0x58>
 800ee54:	e7c2      	b.n	800eddc <__ssvfiscanf_r+0x180>
 800ee56:	230a      	movs	r3, #10
 800ee58:	e7d3      	b.n	800ee02 <__ssvfiscanf_r+0x1a6>
 800ee5a:	0039      	movs	r1, r7
 800ee5c:	a803      	add	r0, sp, #12
 800ee5e:	f000 fc29 	bl	800f6b4 <__sccl>
 800ee62:	2340      	movs	r3, #64	; 0x40
 800ee64:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800ee66:	0007      	movs	r7, r0
 800ee68:	4313      	orrs	r3, r2
 800ee6a:	9343      	str	r3, [sp, #268]	; 0x10c
 800ee6c:	2301      	movs	r3, #1
 800ee6e:	e7d5      	b.n	800ee1c <__ssvfiscanf_r+0x1c0>
 800ee70:	2340      	movs	r3, #64	; 0x40
 800ee72:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800ee74:	4313      	orrs	r3, r2
 800ee76:	9343      	str	r3, [sp, #268]	; 0x10c
 800ee78:	2300      	movs	r3, #0
 800ee7a:	e7cf      	b.n	800ee1c <__ssvfiscanf_r+0x1c0>
 800ee7c:	2302      	movs	r3, #2
 800ee7e:	e7cd      	b.n	800ee1c <__ssvfiscanf_r+0x1c0>
 800ee80:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800ee82:	06d3      	lsls	r3, r2, #27
 800ee84:	d500      	bpl.n	800ee88 <__ssvfiscanf_r+0x22c>
 800ee86:	e715      	b.n	800ecb4 <__ssvfiscanf_r+0x58>
 800ee88:	9b02      	ldr	r3, [sp, #8]
 800ee8a:	9947      	ldr	r1, [sp, #284]	; 0x11c
 800ee8c:	1d18      	adds	r0, r3, #4
 800ee8e:	9002      	str	r0, [sp, #8]
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	07d5      	lsls	r5, r2, #31
 800ee94:	d501      	bpl.n	800ee9a <__ssvfiscanf_r+0x23e>
 800ee96:	8019      	strh	r1, [r3, #0]
 800ee98:	e70c      	b.n	800ecb4 <__ssvfiscanf_r+0x58>
 800ee9a:	6019      	str	r1, [r3, #0]
 800ee9c:	e70a      	b.n	800ecb4 <__ssvfiscanf_r+0x58>
 800ee9e:	22c0      	movs	r2, #192	; 0xc0
 800eea0:	ab43      	add	r3, sp, #268	; 0x10c
 800eea2:	0052      	lsls	r2, r2, #1
 800eea4:	0021      	movs	r1, r4
 800eea6:	0030      	movs	r0, r6
 800eea8:	589b      	ldr	r3, [r3, r2]
 800eeaa:	4798      	blx	r3
 800eeac:	2800      	cmp	r0, #0
 800eeae:	d0b9      	beq.n	800ee24 <__ssvfiscanf_r+0x1c8>
 800eeb0:	e794      	b.n	800eddc <__ssvfiscanf_r+0x180>
 800eeb2:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800eeb4:	3201      	adds	r2, #1
 800eeb6:	9247      	str	r2, [sp, #284]	; 0x11c
 800eeb8:	6862      	ldr	r2, [r4, #4]
 800eeba:	3a01      	subs	r2, #1
 800eebc:	6062      	str	r2, [r4, #4]
 800eebe:	2a00      	cmp	r2, #0
 800eec0:	dd02      	ble.n	800eec8 <__ssvfiscanf_r+0x26c>
 800eec2:	3301      	adds	r3, #1
 800eec4:	6023      	str	r3, [r4, #0]
 800eec6:	e7b0      	b.n	800ee2a <__ssvfiscanf_r+0x1ce>
 800eec8:	22c0      	movs	r2, #192	; 0xc0
 800eeca:	ab43      	add	r3, sp, #268	; 0x10c
 800eecc:	0052      	lsls	r2, r2, #1
 800eece:	0021      	movs	r1, r4
 800eed0:	0030      	movs	r0, r6
 800eed2:	589b      	ldr	r3, [r3, r2]
 800eed4:	4798      	blx	r3
 800eed6:	2800      	cmp	r0, #0
 800eed8:	d0a7      	beq.n	800ee2a <__ssvfiscanf_r+0x1ce>
 800eeda:	e77f      	b.n	800eddc <__ssvfiscanf_r+0x180>
 800eedc:	2b04      	cmp	r3, #4
 800eede:	dc06      	bgt.n	800eeee <__ssvfiscanf_r+0x292>
 800eee0:	0022      	movs	r2, r4
 800eee2:	0030      	movs	r0, r6
 800eee4:	ab02      	add	r3, sp, #8
 800eee6:	a943      	add	r1, sp, #268	; 0x10c
 800eee8:	f000 f9c4 	bl	800f274 <_scanf_i>
 800eeec:	e7ad      	b.n	800ee4a <__ssvfiscanf_r+0x1ee>
 800eeee:	4b0f      	ldr	r3, [pc, #60]	; (800ef2c <__ssvfiscanf_r+0x2d0>)
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d100      	bne.n	800eef6 <__ssvfiscanf_r+0x29a>
 800eef4:	e6de      	b.n	800ecb4 <__ssvfiscanf_r+0x58>
 800eef6:	0022      	movs	r2, r4
 800eef8:	0030      	movs	r0, r6
 800eefa:	ab02      	add	r3, sp, #8
 800eefc:	a943      	add	r1, sp, #268	; 0x10c
 800eefe:	f7fc ffcf 	bl	800bea0 <_scanf_float>
 800ef02:	e7a2      	b.n	800ee4a <__ssvfiscanf_r+0x1ee>
 800ef04:	89a3      	ldrh	r3, [r4, #12]
 800ef06:	065b      	lsls	r3, r3, #25
 800ef08:	d400      	bmi.n	800ef0c <__ssvfiscanf_r+0x2b0>
 800ef0a:	e76c      	b.n	800ede6 <__ssvfiscanf_r+0x18a>
 800ef0c:	2001      	movs	r0, #1
 800ef0e:	4240      	negs	r0, r0
 800ef10:	e769      	b.n	800ede6 <__ssvfiscanf_r+0x18a>
 800ef12:	9846      	ldr	r0, [sp, #280]	; 0x118
 800ef14:	e767      	b.n	800ede6 <__ssvfiscanf_r+0x18a>
 800ef16:	46c0      	nop			; (mov r8, r8)
 800ef18:	fffffd6c 	.word	0xfffffd6c
 800ef1c:	0800eba5 	.word	0x0800eba5
 800ef20:	0800ec1d 	.word	0x0800ec1d
 800ef24:	0800feb1 	.word	0x0800feb1
 800ef28:	0801023a 	.word	0x0801023a
 800ef2c:	0800bea1 	.word	0x0800bea1

0800ef30 <__sfputc_r>:
 800ef30:	6893      	ldr	r3, [r2, #8]
 800ef32:	b510      	push	{r4, lr}
 800ef34:	3b01      	subs	r3, #1
 800ef36:	6093      	str	r3, [r2, #8]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	da04      	bge.n	800ef46 <__sfputc_r+0x16>
 800ef3c:	6994      	ldr	r4, [r2, #24]
 800ef3e:	42a3      	cmp	r3, r4
 800ef40:	db07      	blt.n	800ef52 <__sfputc_r+0x22>
 800ef42:	290a      	cmp	r1, #10
 800ef44:	d005      	beq.n	800ef52 <__sfputc_r+0x22>
 800ef46:	6813      	ldr	r3, [r2, #0]
 800ef48:	1c58      	adds	r0, r3, #1
 800ef4a:	6010      	str	r0, [r2, #0]
 800ef4c:	7019      	strb	r1, [r3, #0]
 800ef4e:	0008      	movs	r0, r1
 800ef50:	bd10      	pop	{r4, pc}
 800ef52:	f7fd fb87 	bl	800c664 <__swbuf_r>
 800ef56:	0001      	movs	r1, r0
 800ef58:	e7f9      	b.n	800ef4e <__sfputc_r+0x1e>

0800ef5a <__sfputs_r>:
 800ef5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef5c:	0006      	movs	r6, r0
 800ef5e:	000f      	movs	r7, r1
 800ef60:	0014      	movs	r4, r2
 800ef62:	18d5      	adds	r5, r2, r3
 800ef64:	42ac      	cmp	r4, r5
 800ef66:	d101      	bne.n	800ef6c <__sfputs_r+0x12>
 800ef68:	2000      	movs	r0, #0
 800ef6a:	e007      	b.n	800ef7c <__sfputs_r+0x22>
 800ef6c:	7821      	ldrb	r1, [r4, #0]
 800ef6e:	003a      	movs	r2, r7
 800ef70:	0030      	movs	r0, r6
 800ef72:	f7ff ffdd 	bl	800ef30 <__sfputc_r>
 800ef76:	3401      	adds	r4, #1
 800ef78:	1c43      	adds	r3, r0, #1
 800ef7a:	d1f3      	bne.n	800ef64 <__sfputs_r+0xa>
 800ef7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ef80 <_vfiprintf_r>:
 800ef80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef82:	b0a1      	sub	sp, #132	; 0x84
 800ef84:	000f      	movs	r7, r1
 800ef86:	0015      	movs	r5, r2
 800ef88:	001e      	movs	r6, r3
 800ef8a:	9003      	str	r0, [sp, #12]
 800ef8c:	2800      	cmp	r0, #0
 800ef8e:	d004      	beq.n	800ef9a <_vfiprintf_r+0x1a>
 800ef90:	6a03      	ldr	r3, [r0, #32]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d101      	bne.n	800ef9a <_vfiprintf_r+0x1a>
 800ef96:	f7fd fa1b 	bl	800c3d0 <__sinit>
 800ef9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ef9c:	07db      	lsls	r3, r3, #31
 800ef9e:	d405      	bmi.n	800efac <_vfiprintf_r+0x2c>
 800efa0:	89bb      	ldrh	r3, [r7, #12]
 800efa2:	059b      	lsls	r3, r3, #22
 800efa4:	d402      	bmi.n	800efac <_vfiprintf_r+0x2c>
 800efa6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800efa8:	f7fd fcc1 	bl	800c92e <__retarget_lock_acquire_recursive>
 800efac:	89bb      	ldrh	r3, [r7, #12]
 800efae:	071b      	lsls	r3, r3, #28
 800efb0:	d502      	bpl.n	800efb8 <_vfiprintf_r+0x38>
 800efb2:	693b      	ldr	r3, [r7, #16]
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d113      	bne.n	800efe0 <_vfiprintf_r+0x60>
 800efb8:	0039      	movs	r1, r7
 800efba:	9803      	ldr	r0, [sp, #12]
 800efbc:	f7fd fb94 	bl	800c6e8 <__swsetup_r>
 800efc0:	2800      	cmp	r0, #0
 800efc2:	d00d      	beq.n	800efe0 <_vfiprintf_r+0x60>
 800efc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800efc6:	07db      	lsls	r3, r3, #31
 800efc8:	d503      	bpl.n	800efd2 <_vfiprintf_r+0x52>
 800efca:	2001      	movs	r0, #1
 800efcc:	4240      	negs	r0, r0
 800efce:	b021      	add	sp, #132	; 0x84
 800efd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800efd2:	89bb      	ldrh	r3, [r7, #12]
 800efd4:	059b      	lsls	r3, r3, #22
 800efd6:	d4f8      	bmi.n	800efca <_vfiprintf_r+0x4a>
 800efd8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800efda:	f7fd fca9 	bl	800c930 <__retarget_lock_release_recursive>
 800efde:	e7f4      	b.n	800efca <_vfiprintf_r+0x4a>
 800efe0:	2300      	movs	r3, #0
 800efe2:	ac08      	add	r4, sp, #32
 800efe4:	6163      	str	r3, [r4, #20]
 800efe6:	3320      	adds	r3, #32
 800efe8:	7663      	strb	r3, [r4, #25]
 800efea:	3310      	adds	r3, #16
 800efec:	76a3      	strb	r3, [r4, #26]
 800efee:	9607      	str	r6, [sp, #28]
 800eff0:	002e      	movs	r6, r5
 800eff2:	7833      	ldrb	r3, [r6, #0]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d001      	beq.n	800effc <_vfiprintf_r+0x7c>
 800eff8:	2b25      	cmp	r3, #37	; 0x25
 800effa:	d148      	bne.n	800f08e <_vfiprintf_r+0x10e>
 800effc:	1b73      	subs	r3, r6, r5
 800effe:	9305      	str	r3, [sp, #20]
 800f000:	42ae      	cmp	r6, r5
 800f002:	d00b      	beq.n	800f01c <_vfiprintf_r+0x9c>
 800f004:	002a      	movs	r2, r5
 800f006:	0039      	movs	r1, r7
 800f008:	9803      	ldr	r0, [sp, #12]
 800f00a:	f7ff ffa6 	bl	800ef5a <__sfputs_r>
 800f00e:	3001      	adds	r0, #1
 800f010:	d100      	bne.n	800f014 <_vfiprintf_r+0x94>
 800f012:	e0af      	b.n	800f174 <_vfiprintf_r+0x1f4>
 800f014:	6963      	ldr	r3, [r4, #20]
 800f016:	9a05      	ldr	r2, [sp, #20]
 800f018:	189b      	adds	r3, r3, r2
 800f01a:	6163      	str	r3, [r4, #20]
 800f01c:	7833      	ldrb	r3, [r6, #0]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d100      	bne.n	800f024 <_vfiprintf_r+0xa4>
 800f022:	e0a7      	b.n	800f174 <_vfiprintf_r+0x1f4>
 800f024:	2201      	movs	r2, #1
 800f026:	2300      	movs	r3, #0
 800f028:	4252      	negs	r2, r2
 800f02a:	6062      	str	r2, [r4, #4]
 800f02c:	a904      	add	r1, sp, #16
 800f02e:	3254      	adds	r2, #84	; 0x54
 800f030:	1852      	adds	r2, r2, r1
 800f032:	1c75      	adds	r5, r6, #1
 800f034:	6023      	str	r3, [r4, #0]
 800f036:	60e3      	str	r3, [r4, #12]
 800f038:	60a3      	str	r3, [r4, #8]
 800f03a:	7013      	strb	r3, [r2, #0]
 800f03c:	65a3      	str	r3, [r4, #88]	; 0x58
 800f03e:	4b59      	ldr	r3, [pc, #356]	; (800f1a4 <_vfiprintf_r+0x224>)
 800f040:	2205      	movs	r2, #5
 800f042:	0018      	movs	r0, r3
 800f044:	7829      	ldrb	r1, [r5, #0]
 800f046:	9305      	str	r3, [sp, #20]
 800f048:	f7fd fc73 	bl	800c932 <memchr>
 800f04c:	1c6e      	adds	r6, r5, #1
 800f04e:	2800      	cmp	r0, #0
 800f050:	d11f      	bne.n	800f092 <_vfiprintf_r+0x112>
 800f052:	6822      	ldr	r2, [r4, #0]
 800f054:	06d3      	lsls	r3, r2, #27
 800f056:	d504      	bpl.n	800f062 <_vfiprintf_r+0xe2>
 800f058:	2353      	movs	r3, #83	; 0x53
 800f05a:	a904      	add	r1, sp, #16
 800f05c:	185b      	adds	r3, r3, r1
 800f05e:	2120      	movs	r1, #32
 800f060:	7019      	strb	r1, [r3, #0]
 800f062:	0713      	lsls	r3, r2, #28
 800f064:	d504      	bpl.n	800f070 <_vfiprintf_r+0xf0>
 800f066:	2353      	movs	r3, #83	; 0x53
 800f068:	a904      	add	r1, sp, #16
 800f06a:	185b      	adds	r3, r3, r1
 800f06c:	212b      	movs	r1, #43	; 0x2b
 800f06e:	7019      	strb	r1, [r3, #0]
 800f070:	782b      	ldrb	r3, [r5, #0]
 800f072:	2b2a      	cmp	r3, #42	; 0x2a
 800f074:	d016      	beq.n	800f0a4 <_vfiprintf_r+0x124>
 800f076:	002e      	movs	r6, r5
 800f078:	2100      	movs	r1, #0
 800f07a:	200a      	movs	r0, #10
 800f07c:	68e3      	ldr	r3, [r4, #12]
 800f07e:	7832      	ldrb	r2, [r6, #0]
 800f080:	1c75      	adds	r5, r6, #1
 800f082:	3a30      	subs	r2, #48	; 0x30
 800f084:	2a09      	cmp	r2, #9
 800f086:	d94e      	bls.n	800f126 <_vfiprintf_r+0x1a6>
 800f088:	2900      	cmp	r1, #0
 800f08a:	d111      	bne.n	800f0b0 <_vfiprintf_r+0x130>
 800f08c:	e017      	b.n	800f0be <_vfiprintf_r+0x13e>
 800f08e:	3601      	adds	r6, #1
 800f090:	e7af      	b.n	800eff2 <_vfiprintf_r+0x72>
 800f092:	9b05      	ldr	r3, [sp, #20]
 800f094:	6822      	ldr	r2, [r4, #0]
 800f096:	1ac0      	subs	r0, r0, r3
 800f098:	2301      	movs	r3, #1
 800f09a:	4083      	lsls	r3, r0
 800f09c:	4313      	orrs	r3, r2
 800f09e:	0035      	movs	r5, r6
 800f0a0:	6023      	str	r3, [r4, #0]
 800f0a2:	e7cc      	b.n	800f03e <_vfiprintf_r+0xbe>
 800f0a4:	9b07      	ldr	r3, [sp, #28]
 800f0a6:	1d19      	adds	r1, r3, #4
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	9107      	str	r1, [sp, #28]
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	db01      	blt.n	800f0b4 <_vfiprintf_r+0x134>
 800f0b0:	930b      	str	r3, [sp, #44]	; 0x2c
 800f0b2:	e004      	b.n	800f0be <_vfiprintf_r+0x13e>
 800f0b4:	425b      	negs	r3, r3
 800f0b6:	60e3      	str	r3, [r4, #12]
 800f0b8:	2302      	movs	r3, #2
 800f0ba:	4313      	orrs	r3, r2
 800f0bc:	6023      	str	r3, [r4, #0]
 800f0be:	7833      	ldrb	r3, [r6, #0]
 800f0c0:	2b2e      	cmp	r3, #46	; 0x2e
 800f0c2:	d10a      	bne.n	800f0da <_vfiprintf_r+0x15a>
 800f0c4:	7873      	ldrb	r3, [r6, #1]
 800f0c6:	2b2a      	cmp	r3, #42	; 0x2a
 800f0c8:	d135      	bne.n	800f136 <_vfiprintf_r+0x1b6>
 800f0ca:	9b07      	ldr	r3, [sp, #28]
 800f0cc:	3602      	adds	r6, #2
 800f0ce:	1d1a      	adds	r2, r3, #4
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	9207      	str	r2, [sp, #28]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	db2b      	blt.n	800f130 <_vfiprintf_r+0x1b0>
 800f0d8:	9309      	str	r3, [sp, #36]	; 0x24
 800f0da:	4d33      	ldr	r5, [pc, #204]	; (800f1a8 <_vfiprintf_r+0x228>)
 800f0dc:	2203      	movs	r2, #3
 800f0de:	0028      	movs	r0, r5
 800f0e0:	7831      	ldrb	r1, [r6, #0]
 800f0e2:	f7fd fc26 	bl	800c932 <memchr>
 800f0e6:	2800      	cmp	r0, #0
 800f0e8:	d006      	beq.n	800f0f8 <_vfiprintf_r+0x178>
 800f0ea:	2340      	movs	r3, #64	; 0x40
 800f0ec:	1b40      	subs	r0, r0, r5
 800f0ee:	4083      	lsls	r3, r0
 800f0f0:	6822      	ldr	r2, [r4, #0]
 800f0f2:	3601      	adds	r6, #1
 800f0f4:	4313      	orrs	r3, r2
 800f0f6:	6023      	str	r3, [r4, #0]
 800f0f8:	7831      	ldrb	r1, [r6, #0]
 800f0fa:	2206      	movs	r2, #6
 800f0fc:	482b      	ldr	r0, [pc, #172]	; (800f1ac <_vfiprintf_r+0x22c>)
 800f0fe:	1c75      	adds	r5, r6, #1
 800f100:	7621      	strb	r1, [r4, #24]
 800f102:	f7fd fc16 	bl	800c932 <memchr>
 800f106:	2800      	cmp	r0, #0
 800f108:	d043      	beq.n	800f192 <_vfiprintf_r+0x212>
 800f10a:	4b29      	ldr	r3, [pc, #164]	; (800f1b0 <_vfiprintf_r+0x230>)
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d125      	bne.n	800f15c <_vfiprintf_r+0x1dc>
 800f110:	2207      	movs	r2, #7
 800f112:	9b07      	ldr	r3, [sp, #28]
 800f114:	3307      	adds	r3, #7
 800f116:	4393      	bics	r3, r2
 800f118:	3308      	adds	r3, #8
 800f11a:	9307      	str	r3, [sp, #28]
 800f11c:	6963      	ldr	r3, [r4, #20]
 800f11e:	9a04      	ldr	r2, [sp, #16]
 800f120:	189b      	adds	r3, r3, r2
 800f122:	6163      	str	r3, [r4, #20]
 800f124:	e764      	b.n	800eff0 <_vfiprintf_r+0x70>
 800f126:	4343      	muls	r3, r0
 800f128:	002e      	movs	r6, r5
 800f12a:	2101      	movs	r1, #1
 800f12c:	189b      	adds	r3, r3, r2
 800f12e:	e7a6      	b.n	800f07e <_vfiprintf_r+0xfe>
 800f130:	2301      	movs	r3, #1
 800f132:	425b      	negs	r3, r3
 800f134:	e7d0      	b.n	800f0d8 <_vfiprintf_r+0x158>
 800f136:	2300      	movs	r3, #0
 800f138:	200a      	movs	r0, #10
 800f13a:	001a      	movs	r2, r3
 800f13c:	3601      	adds	r6, #1
 800f13e:	6063      	str	r3, [r4, #4]
 800f140:	7831      	ldrb	r1, [r6, #0]
 800f142:	1c75      	adds	r5, r6, #1
 800f144:	3930      	subs	r1, #48	; 0x30
 800f146:	2909      	cmp	r1, #9
 800f148:	d903      	bls.n	800f152 <_vfiprintf_r+0x1d2>
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d0c5      	beq.n	800f0da <_vfiprintf_r+0x15a>
 800f14e:	9209      	str	r2, [sp, #36]	; 0x24
 800f150:	e7c3      	b.n	800f0da <_vfiprintf_r+0x15a>
 800f152:	4342      	muls	r2, r0
 800f154:	002e      	movs	r6, r5
 800f156:	2301      	movs	r3, #1
 800f158:	1852      	adds	r2, r2, r1
 800f15a:	e7f1      	b.n	800f140 <_vfiprintf_r+0x1c0>
 800f15c:	aa07      	add	r2, sp, #28
 800f15e:	9200      	str	r2, [sp, #0]
 800f160:	0021      	movs	r1, r4
 800f162:	003a      	movs	r2, r7
 800f164:	4b13      	ldr	r3, [pc, #76]	; (800f1b4 <_vfiprintf_r+0x234>)
 800f166:	9803      	ldr	r0, [sp, #12]
 800f168:	f7fc fac4 	bl	800b6f4 <_printf_float>
 800f16c:	9004      	str	r0, [sp, #16]
 800f16e:	9b04      	ldr	r3, [sp, #16]
 800f170:	3301      	adds	r3, #1
 800f172:	d1d3      	bne.n	800f11c <_vfiprintf_r+0x19c>
 800f174:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f176:	07db      	lsls	r3, r3, #31
 800f178:	d405      	bmi.n	800f186 <_vfiprintf_r+0x206>
 800f17a:	89bb      	ldrh	r3, [r7, #12]
 800f17c:	059b      	lsls	r3, r3, #22
 800f17e:	d402      	bmi.n	800f186 <_vfiprintf_r+0x206>
 800f180:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f182:	f7fd fbd5 	bl	800c930 <__retarget_lock_release_recursive>
 800f186:	89bb      	ldrh	r3, [r7, #12]
 800f188:	065b      	lsls	r3, r3, #25
 800f18a:	d500      	bpl.n	800f18e <_vfiprintf_r+0x20e>
 800f18c:	e71d      	b.n	800efca <_vfiprintf_r+0x4a>
 800f18e:	980d      	ldr	r0, [sp, #52]	; 0x34
 800f190:	e71d      	b.n	800efce <_vfiprintf_r+0x4e>
 800f192:	aa07      	add	r2, sp, #28
 800f194:	9200      	str	r2, [sp, #0]
 800f196:	0021      	movs	r1, r4
 800f198:	003a      	movs	r2, r7
 800f19a:	4b06      	ldr	r3, [pc, #24]	; (800f1b4 <_vfiprintf_r+0x234>)
 800f19c:	9803      	ldr	r0, [sp, #12]
 800f19e:	f7fc fd6f 	bl	800bc80 <_printf_i>
 800f1a2:	e7e3      	b.n	800f16c <_vfiprintf_r+0x1ec>
 800f1a4:	08010234 	.word	0x08010234
 800f1a8:	0801023a 	.word	0x0801023a
 800f1ac:	0801023e 	.word	0x0801023e
 800f1b0:	0800b6f5 	.word	0x0800b6f5
 800f1b4:	0800ef5b 	.word	0x0800ef5b

0800f1b8 <_scanf_chars>:
 800f1b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f1ba:	0015      	movs	r5, r2
 800f1bc:	688a      	ldr	r2, [r1, #8]
 800f1be:	000c      	movs	r4, r1
 800f1c0:	9001      	str	r0, [sp, #4]
 800f1c2:	2a00      	cmp	r2, #0
 800f1c4:	d105      	bne.n	800f1d2 <_scanf_chars+0x1a>
 800f1c6:	6989      	ldr	r1, [r1, #24]
 800f1c8:	3201      	adds	r2, #1
 800f1ca:	2900      	cmp	r1, #0
 800f1cc:	d000      	beq.n	800f1d0 <_scanf_chars+0x18>
 800f1ce:	3a02      	subs	r2, #2
 800f1d0:	60a2      	str	r2, [r4, #8]
 800f1d2:	6822      	ldr	r2, [r4, #0]
 800f1d4:	06d2      	lsls	r2, r2, #27
 800f1d6:	d403      	bmi.n	800f1e0 <_scanf_chars+0x28>
 800f1d8:	681a      	ldr	r2, [r3, #0]
 800f1da:	1d11      	adds	r1, r2, #4
 800f1dc:	6019      	str	r1, [r3, #0]
 800f1de:	6817      	ldr	r7, [r2, #0]
 800f1e0:	2600      	movs	r6, #0
 800f1e2:	69a0      	ldr	r0, [r4, #24]
 800f1e4:	2800      	cmp	r0, #0
 800f1e6:	d013      	beq.n	800f210 <_scanf_chars+0x58>
 800f1e8:	2801      	cmp	r0, #1
 800f1ea:	d108      	bne.n	800f1fe <_scanf_chars+0x46>
 800f1ec:	682b      	ldr	r3, [r5, #0]
 800f1ee:	6962      	ldr	r2, [r4, #20]
 800f1f0:	781b      	ldrb	r3, [r3, #0]
 800f1f2:	5cd3      	ldrb	r3, [r2, r3]
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d10b      	bne.n	800f210 <_scanf_chars+0x58>
 800f1f8:	2e00      	cmp	r6, #0
 800f1fa:	d038      	beq.n	800f26e <_scanf_chars+0xb6>
 800f1fc:	e026      	b.n	800f24c <_scanf_chars+0x94>
 800f1fe:	2802      	cmp	r0, #2
 800f200:	d124      	bne.n	800f24c <_scanf_chars+0x94>
 800f202:	682b      	ldr	r3, [r5, #0]
 800f204:	4a1a      	ldr	r2, [pc, #104]	; (800f270 <_scanf_chars+0xb8>)
 800f206:	781b      	ldrb	r3, [r3, #0]
 800f208:	5cd3      	ldrb	r3, [r2, r3]
 800f20a:	2208      	movs	r2, #8
 800f20c:	4213      	tst	r3, r2
 800f20e:	d11d      	bne.n	800f24c <_scanf_chars+0x94>
 800f210:	2210      	movs	r2, #16
 800f212:	6823      	ldr	r3, [r4, #0]
 800f214:	3601      	adds	r6, #1
 800f216:	4213      	tst	r3, r2
 800f218:	d103      	bne.n	800f222 <_scanf_chars+0x6a>
 800f21a:	682b      	ldr	r3, [r5, #0]
 800f21c:	781b      	ldrb	r3, [r3, #0]
 800f21e:	703b      	strb	r3, [r7, #0]
 800f220:	3701      	adds	r7, #1
 800f222:	682a      	ldr	r2, [r5, #0]
 800f224:	686b      	ldr	r3, [r5, #4]
 800f226:	3201      	adds	r2, #1
 800f228:	602a      	str	r2, [r5, #0]
 800f22a:	68a2      	ldr	r2, [r4, #8]
 800f22c:	3b01      	subs	r3, #1
 800f22e:	3a01      	subs	r2, #1
 800f230:	606b      	str	r3, [r5, #4]
 800f232:	60a2      	str	r2, [r4, #8]
 800f234:	2a00      	cmp	r2, #0
 800f236:	d009      	beq.n	800f24c <_scanf_chars+0x94>
 800f238:	2b00      	cmp	r3, #0
 800f23a:	dcd2      	bgt.n	800f1e2 <_scanf_chars+0x2a>
 800f23c:	23c0      	movs	r3, #192	; 0xc0
 800f23e:	005b      	lsls	r3, r3, #1
 800f240:	0029      	movs	r1, r5
 800f242:	58e3      	ldr	r3, [r4, r3]
 800f244:	9801      	ldr	r0, [sp, #4]
 800f246:	4798      	blx	r3
 800f248:	2800      	cmp	r0, #0
 800f24a:	d0ca      	beq.n	800f1e2 <_scanf_chars+0x2a>
 800f24c:	6822      	ldr	r2, [r4, #0]
 800f24e:	2310      	movs	r3, #16
 800f250:	0011      	movs	r1, r2
 800f252:	4019      	ands	r1, r3
 800f254:	421a      	tst	r2, r3
 800f256:	d106      	bne.n	800f266 <_scanf_chars+0xae>
 800f258:	68e3      	ldr	r3, [r4, #12]
 800f25a:	3301      	adds	r3, #1
 800f25c:	60e3      	str	r3, [r4, #12]
 800f25e:	69a3      	ldr	r3, [r4, #24]
 800f260:	2b00      	cmp	r3, #0
 800f262:	d000      	beq.n	800f266 <_scanf_chars+0xae>
 800f264:	7039      	strb	r1, [r7, #0]
 800f266:	2000      	movs	r0, #0
 800f268:	6923      	ldr	r3, [r4, #16]
 800f26a:	199b      	adds	r3, r3, r6
 800f26c:	6123      	str	r3, [r4, #16]
 800f26e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f270:	0800feb1 	.word	0x0800feb1

0800f274 <_scanf_i>:
 800f274:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f276:	b08b      	sub	sp, #44	; 0x2c
 800f278:	9301      	str	r3, [sp, #4]
 800f27a:	4b7a      	ldr	r3, [pc, #488]	; (800f464 <_scanf_i+0x1f0>)
 800f27c:	0016      	movs	r6, r2
 800f27e:	9004      	str	r0, [sp, #16]
 800f280:	aa07      	add	r2, sp, #28
 800f282:	cba1      	ldmia	r3!, {r0, r5, r7}
 800f284:	c2a1      	stmia	r2!, {r0, r5, r7}
 800f286:	4a78      	ldr	r2, [pc, #480]	; (800f468 <_scanf_i+0x1f4>)
 800f288:	698b      	ldr	r3, [r1, #24]
 800f28a:	000c      	movs	r4, r1
 800f28c:	9205      	str	r2, [sp, #20]
 800f28e:	2b03      	cmp	r3, #3
 800f290:	d001      	beq.n	800f296 <_scanf_i+0x22>
 800f292:	4b76      	ldr	r3, [pc, #472]	; (800f46c <_scanf_i+0x1f8>)
 800f294:	9305      	str	r3, [sp, #20]
 800f296:	22ae      	movs	r2, #174	; 0xae
 800f298:	2000      	movs	r0, #0
 800f29a:	68a3      	ldr	r3, [r4, #8]
 800f29c:	0052      	lsls	r2, r2, #1
 800f29e:	1e59      	subs	r1, r3, #1
 800f2a0:	9003      	str	r0, [sp, #12]
 800f2a2:	4291      	cmp	r1, r2
 800f2a4:	d905      	bls.n	800f2b2 <_scanf_i+0x3e>
 800f2a6:	3b5e      	subs	r3, #94	; 0x5e
 800f2a8:	3bff      	subs	r3, #255	; 0xff
 800f2aa:	9303      	str	r3, [sp, #12]
 800f2ac:	235e      	movs	r3, #94	; 0x5e
 800f2ae:	33ff      	adds	r3, #255	; 0xff
 800f2b0:	60a3      	str	r3, [r4, #8]
 800f2b2:	0023      	movs	r3, r4
 800f2b4:	331c      	adds	r3, #28
 800f2b6:	9300      	str	r3, [sp, #0]
 800f2b8:	23d0      	movs	r3, #208	; 0xd0
 800f2ba:	2700      	movs	r7, #0
 800f2bc:	6822      	ldr	r2, [r4, #0]
 800f2be:	011b      	lsls	r3, r3, #4
 800f2c0:	4313      	orrs	r3, r2
 800f2c2:	6023      	str	r3, [r4, #0]
 800f2c4:	9b00      	ldr	r3, [sp, #0]
 800f2c6:	9302      	str	r3, [sp, #8]
 800f2c8:	6833      	ldr	r3, [r6, #0]
 800f2ca:	a807      	add	r0, sp, #28
 800f2cc:	7819      	ldrb	r1, [r3, #0]
 800f2ce:	00bb      	lsls	r3, r7, #2
 800f2d0:	2202      	movs	r2, #2
 800f2d2:	5818      	ldr	r0, [r3, r0]
 800f2d4:	f7fd fb2d 	bl	800c932 <memchr>
 800f2d8:	2800      	cmp	r0, #0
 800f2da:	d02a      	beq.n	800f332 <_scanf_i+0xbe>
 800f2dc:	2f01      	cmp	r7, #1
 800f2de:	d161      	bne.n	800f3a4 <_scanf_i+0x130>
 800f2e0:	6863      	ldr	r3, [r4, #4]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d106      	bne.n	800f2f4 <_scanf_i+0x80>
 800f2e6:	3308      	adds	r3, #8
 800f2e8:	6822      	ldr	r2, [r4, #0]
 800f2ea:	6063      	str	r3, [r4, #4]
 800f2ec:	33f9      	adds	r3, #249	; 0xf9
 800f2ee:	33ff      	adds	r3, #255	; 0xff
 800f2f0:	4313      	orrs	r3, r2
 800f2f2:	6023      	str	r3, [r4, #0]
 800f2f4:	6823      	ldr	r3, [r4, #0]
 800f2f6:	4a5e      	ldr	r2, [pc, #376]	; (800f470 <_scanf_i+0x1fc>)
 800f2f8:	4013      	ands	r3, r2
 800f2fa:	6023      	str	r3, [r4, #0]
 800f2fc:	68a3      	ldr	r3, [r4, #8]
 800f2fe:	1e5a      	subs	r2, r3, #1
 800f300:	60a2      	str	r2, [r4, #8]
 800f302:	2b00      	cmp	r3, #0
 800f304:	d015      	beq.n	800f332 <_scanf_i+0xbe>
 800f306:	6833      	ldr	r3, [r6, #0]
 800f308:	1c5a      	adds	r2, r3, #1
 800f30a:	6032      	str	r2, [r6, #0]
 800f30c:	781b      	ldrb	r3, [r3, #0]
 800f30e:	9a02      	ldr	r2, [sp, #8]
 800f310:	7013      	strb	r3, [r2, #0]
 800f312:	6873      	ldr	r3, [r6, #4]
 800f314:	1c55      	adds	r5, r2, #1
 800f316:	3b01      	subs	r3, #1
 800f318:	6073      	str	r3, [r6, #4]
 800f31a:	9502      	str	r5, [sp, #8]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	dc08      	bgt.n	800f332 <_scanf_i+0xbe>
 800f320:	23c0      	movs	r3, #192	; 0xc0
 800f322:	005b      	lsls	r3, r3, #1
 800f324:	0031      	movs	r1, r6
 800f326:	58e3      	ldr	r3, [r4, r3]
 800f328:	9804      	ldr	r0, [sp, #16]
 800f32a:	4798      	blx	r3
 800f32c:	2800      	cmp	r0, #0
 800f32e:	d000      	beq.n	800f332 <_scanf_i+0xbe>
 800f330:	e080      	b.n	800f434 <_scanf_i+0x1c0>
 800f332:	3701      	adds	r7, #1
 800f334:	2f03      	cmp	r7, #3
 800f336:	d1c7      	bne.n	800f2c8 <_scanf_i+0x54>
 800f338:	6863      	ldr	r3, [r4, #4]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d101      	bne.n	800f342 <_scanf_i+0xce>
 800f33e:	330a      	adds	r3, #10
 800f340:	6063      	str	r3, [r4, #4]
 800f342:	2110      	movs	r1, #16
 800f344:	2700      	movs	r7, #0
 800f346:	6863      	ldr	r3, [r4, #4]
 800f348:	6960      	ldr	r0, [r4, #20]
 800f34a:	1ac9      	subs	r1, r1, r3
 800f34c:	4b49      	ldr	r3, [pc, #292]	; (800f474 <_scanf_i+0x200>)
 800f34e:	18c9      	adds	r1, r1, r3
 800f350:	f000 f9b0 	bl	800f6b4 <__sccl>
 800f354:	9d02      	ldr	r5, [sp, #8]
 800f356:	68a3      	ldr	r3, [r4, #8]
 800f358:	6820      	ldr	r0, [r4, #0]
 800f35a:	9302      	str	r3, [sp, #8]
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d040      	beq.n	800f3e2 <_scanf_i+0x16e>
 800f360:	6831      	ldr	r1, [r6, #0]
 800f362:	6963      	ldr	r3, [r4, #20]
 800f364:	780a      	ldrb	r2, [r1, #0]
 800f366:	5c9b      	ldrb	r3, [r3, r2]
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d03a      	beq.n	800f3e2 <_scanf_i+0x16e>
 800f36c:	2a30      	cmp	r2, #48	; 0x30
 800f36e:	d129      	bne.n	800f3c4 <_scanf_i+0x150>
 800f370:	2380      	movs	r3, #128	; 0x80
 800f372:	011b      	lsls	r3, r3, #4
 800f374:	4218      	tst	r0, r3
 800f376:	d025      	beq.n	800f3c4 <_scanf_i+0x150>
 800f378:	9b03      	ldr	r3, [sp, #12]
 800f37a:	3701      	adds	r7, #1
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d005      	beq.n	800f38c <_scanf_i+0x118>
 800f380:	001a      	movs	r2, r3
 800f382:	9b02      	ldr	r3, [sp, #8]
 800f384:	3a01      	subs	r2, #1
 800f386:	3301      	adds	r3, #1
 800f388:	9203      	str	r2, [sp, #12]
 800f38a:	60a3      	str	r3, [r4, #8]
 800f38c:	6873      	ldr	r3, [r6, #4]
 800f38e:	3b01      	subs	r3, #1
 800f390:	6073      	str	r3, [r6, #4]
 800f392:	2b00      	cmp	r3, #0
 800f394:	dd1d      	ble.n	800f3d2 <_scanf_i+0x15e>
 800f396:	6833      	ldr	r3, [r6, #0]
 800f398:	3301      	adds	r3, #1
 800f39a:	6033      	str	r3, [r6, #0]
 800f39c:	68a3      	ldr	r3, [r4, #8]
 800f39e:	3b01      	subs	r3, #1
 800f3a0:	60a3      	str	r3, [r4, #8]
 800f3a2:	e7d8      	b.n	800f356 <_scanf_i+0xe2>
 800f3a4:	2f02      	cmp	r7, #2
 800f3a6:	d1a9      	bne.n	800f2fc <_scanf_i+0x88>
 800f3a8:	21c0      	movs	r1, #192	; 0xc0
 800f3aa:	2380      	movs	r3, #128	; 0x80
 800f3ac:	6822      	ldr	r2, [r4, #0]
 800f3ae:	00c9      	lsls	r1, r1, #3
 800f3b0:	4011      	ands	r1, r2
 800f3b2:	009b      	lsls	r3, r3, #2
 800f3b4:	4299      	cmp	r1, r3
 800f3b6:	d1bf      	bne.n	800f338 <_scanf_i+0xc4>
 800f3b8:	3bf1      	subs	r3, #241	; 0xf1
 800f3ba:	3bff      	subs	r3, #255	; 0xff
 800f3bc:	6063      	str	r3, [r4, #4]
 800f3be:	33f0      	adds	r3, #240	; 0xf0
 800f3c0:	4313      	orrs	r3, r2
 800f3c2:	e79a      	b.n	800f2fa <_scanf_i+0x86>
 800f3c4:	4b2c      	ldr	r3, [pc, #176]	; (800f478 <_scanf_i+0x204>)
 800f3c6:	4003      	ands	r3, r0
 800f3c8:	6023      	str	r3, [r4, #0]
 800f3ca:	780b      	ldrb	r3, [r1, #0]
 800f3cc:	702b      	strb	r3, [r5, #0]
 800f3ce:	3501      	adds	r5, #1
 800f3d0:	e7dc      	b.n	800f38c <_scanf_i+0x118>
 800f3d2:	23c0      	movs	r3, #192	; 0xc0
 800f3d4:	005b      	lsls	r3, r3, #1
 800f3d6:	0031      	movs	r1, r6
 800f3d8:	58e3      	ldr	r3, [r4, r3]
 800f3da:	9804      	ldr	r0, [sp, #16]
 800f3dc:	4798      	blx	r3
 800f3de:	2800      	cmp	r0, #0
 800f3e0:	d0dc      	beq.n	800f39c <_scanf_i+0x128>
 800f3e2:	6823      	ldr	r3, [r4, #0]
 800f3e4:	05db      	lsls	r3, r3, #23
 800f3e6:	d50e      	bpl.n	800f406 <_scanf_i+0x192>
 800f3e8:	9b00      	ldr	r3, [sp, #0]
 800f3ea:	429d      	cmp	r5, r3
 800f3ec:	d907      	bls.n	800f3fe <_scanf_i+0x18a>
 800f3ee:	23be      	movs	r3, #190	; 0xbe
 800f3f0:	3d01      	subs	r5, #1
 800f3f2:	005b      	lsls	r3, r3, #1
 800f3f4:	0032      	movs	r2, r6
 800f3f6:	7829      	ldrb	r1, [r5, #0]
 800f3f8:	58e3      	ldr	r3, [r4, r3]
 800f3fa:	9804      	ldr	r0, [sp, #16]
 800f3fc:	4798      	blx	r3
 800f3fe:	9b00      	ldr	r3, [sp, #0]
 800f400:	2001      	movs	r0, #1
 800f402:	429d      	cmp	r5, r3
 800f404:	d029      	beq.n	800f45a <_scanf_i+0x1e6>
 800f406:	6821      	ldr	r1, [r4, #0]
 800f408:	2310      	movs	r3, #16
 800f40a:	000a      	movs	r2, r1
 800f40c:	401a      	ands	r2, r3
 800f40e:	4219      	tst	r1, r3
 800f410:	d11c      	bne.n	800f44c <_scanf_i+0x1d8>
 800f412:	702a      	strb	r2, [r5, #0]
 800f414:	6863      	ldr	r3, [r4, #4]
 800f416:	9900      	ldr	r1, [sp, #0]
 800f418:	9804      	ldr	r0, [sp, #16]
 800f41a:	9e05      	ldr	r6, [sp, #20]
 800f41c:	47b0      	blx	r6
 800f41e:	9b01      	ldr	r3, [sp, #4]
 800f420:	6822      	ldr	r2, [r4, #0]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	0691      	lsls	r1, r2, #26
 800f426:	d507      	bpl.n	800f438 <_scanf_i+0x1c4>
 800f428:	9901      	ldr	r1, [sp, #4]
 800f42a:	1d1a      	adds	r2, r3, #4
 800f42c:	600a      	str	r2, [r1, #0]
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	6018      	str	r0, [r3, #0]
 800f432:	e008      	b.n	800f446 <_scanf_i+0x1d2>
 800f434:	2700      	movs	r7, #0
 800f436:	e7d4      	b.n	800f3e2 <_scanf_i+0x16e>
 800f438:	1d19      	adds	r1, r3, #4
 800f43a:	07d6      	lsls	r6, r2, #31
 800f43c:	d50f      	bpl.n	800f45e <_scanf_i+0x1ea>
 800f43e:	9a01      	ldr	r2, [sp, #4]
 800f440:	6011      	str	r1, [r2, #0]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	8018      	strh	r0, [r3, #0]
 800f446:	68e3      	ldr	r3, [r4, #12]
 800f448:	3301      	adds	r3, #1
 800f44a:	60e3      	str	r3, [r4, #12]
 800f44c:	2000      	movs	r0, #0
 800f44e:	9b00      	ldr	r3, [sp, #0]
 800f450:	1aed      	subs	r5, r5, r3
 800f452:	6923      	ldr	r3, [r4, #16]
 800f454:	19ed      	adds	r5, r5, r7
 800f456:	195b      	adds	r3, r3, r5
 800f458:	6123      	str	r3, [r4, #16]
 800f45a:	b00b      	add	sp, #44	; 0x2c
 800f45c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f45e:	9a01      	ldr	r2, [sp, #4]
 800f460:	6011      	str	r1, [r2, #0]
 800f462:	e7e4      	b.n	800f42e <_scanf_i+0x1ba>
 800f464:	0800fbe4 	.word	0x0800fbe4
 800f468:	0800e8bd 	.word	0x0800e8bd
 800f46c:	0800fa0d 	.word	0x0800fa0d
 800f470:	fffffaff 	.word	0xfffffaff
 800f474:	08010245 	.word	0x08010245
 800f478:	fffff6ff 	.word	0xfffff6ff

0800f47c <__sflush_r>:
 800f47c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f47e:	898b      	ldrh	r3, [r1, #12]
 800f480:	0005      	movs	r5, r0
 800f482:	000c      	movs	r4, r1
 800f484:	071a      	lsls	r2, r3, #28
 800f486:	d45c      	bmi.n	800f542 <__sflush_r+0xc6>
 800f488:	684a      	ldr	r2, [r1, #4]
 800f48a:	2a00      	cmp	r2, #0
 800f48c:	dc04      	bgt.n	800f498 <__sflush_r+0x1c>
 800f48e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800f490:	2a00      	cmp	r2, #0
 800f492:	dc01      	bgt.n	800f498 <__sflush_r+0x1c>
 800f494:	2000      	movs	r0, #0
 800f496:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f498:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800f49a:	2f00      	cmp	r7, #0
 800f49c:	d0fa      	beq.n	800f494 <__sflush_r+0x18>
 800f49e:	2200      	movs	r2, #0
 800f4a0:	2080      	movs	r0, #128	; 0x80
 800f4a2:	682e      	ldr	r6, [r5, #0]
 800f4a4:	602a      	str	r2, [r5, #0]
 800f4a6:	001a      	movs	r2, r3
 800f4a8:	0140      	lsls	r0, r0, #5
 800f4aa:	6a21      	ldr	r1, [r4, #32]
 800f4ac:	4002      	ands	r2, r0
 800f4ae:	4203      	tst	r3, r0
 800f4b0:	d034      	beq.n	800f51c <__sflush_r+0xa0>
 800f4b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f4b4:	89a3      	ldrh	r3, [r4, #12]
 800f4b6:	075b      	lsls	r3, r3, #29
 800f4b8:	d506      	bpl.n	800f4c8 <__sflush_r+0x4c>
 800f4ba:	6863      	ldr	r3, [r4, #4]
 800f4bc:	1ac0      	subs	r0, r0, r3
 800f4be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d001      	beq.n	800f4c8 <__sflush_r+0x4c>
 800f4c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f4c6:	1ac0      	subs	r0, r0, r3
 800f4c8:	0002      	movs	r2, r0
 800f4ca:	2300      	movs	r3, #0
 800f4cc:	0028      	movs	r0, r5
 800f4ce:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800f4d0:	6a21      	ldr	r1, [r4, #32]
 800f4d2:	47b8      	blx	r7
 800f4d4:	89a2      	ldrh	r2, [r4, #12]
 800f4d6:	1c43      	adds	r3, r0, #1
 800f4d8:	d106      	bne.n	800f4e8 <__sflush_r+0x6c>
 800f4da:	6829      	ldr	r1, [r5, #0]
 800f4dc:	291d      	cmp	r1, #29
 800f4de:	d82c      	bhi.n	800f53a <__sflush_r+0xbe>
 800f4e0:	4b2a      	ldr	r3, [pc, #168]	; (800f58c <__sflush_r+0x110>)
 800f4e2:	410b      	asrs	r3, r1
 800f4e4:	07db      	lsls	r3, r3, #31
 800f4e6:	d428      	bmi.n	800f53a <__sflush_r+0xbe>
 800f4e8:	2300      	movs	r3, #0
 800f4ea:	6063      	str	r3, [r4, #4]
 800f4ec:	6923      	ldr	r3, [r4, #16]
 800f4ee:	6023      	str	r3, [r4, #0]
 800f4f0:	04d2      	lsls	r2, r2, #19
 800f4f2:	d505      	bpl.n	800f500 <__sflush_r+0x84>
 800f4f4:	1c43      	adds	r3, r0, #1
 800f4f6:	d102      	bne.n	800f4fe <__sflush_r+0x82>
 800f4f8:	682b      	ldr	r3, [r5, #0]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d100      	bne.n	800f500 <__sflush_r+0x84>
 800f4fe:	6560      	str	r0, [r4, #84]	; 0x54
 800f500:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f502:	602e      	str	r6, [r5, #0]
 800f504:	2900      	cmp	r1, #0
 800f506:	d0c5      	beq.n	800f494 <__sflush_r+0x18>
 800f508:	0023      	movs	r3, r4
 800f50a:	3344      	adds	r3, #68	; 0x44
 800f50c:	4299      	cmp	r1, r3
 800f50e:	d002      	beq.n	800f516 <__sflush_r+0x9a>
 800f510:	0028      	movs	r0, r5
 800f512:	f7fe f8d1 	bl	800d6b8 <_free_r>
 800f516:	2000      	movs	r0, #0
 800f518:	6360      	str	r0, [r4, #52]	; 0x34
 800f51a:	e7bc      	b.n	800f496 <__sflush_r+0x1a>
 800f51c:	2301      	movs	r3, #1
 800f51e:	0028      	movs	r0, r5
 800f520:	47b8      	blx	r7
 800f522:	1c43      	adds	r3, r0, #1
 800f524:	d1c6      	bne.n	800f4b4 <__sflush_r+0x38>
 800f526:	682b      	ldr	r3, [r5, #0]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d0c3      	beq.n	800f4b4 <__sflush_r+0x38>
 800f52c:	2b1d      	cmp	r3, #29
 800f52e:	d001      	beq.n	800f534 <__sflush_r+0xb8>
 800f530:	2b16      	cmp	r3, #22
 800f532:	d101      	bne.n	800f538 <__sflush_r+0xbc>
 800f534:	602e      	str	r6, [r5, #0]
 800f536:	e7ad      	b.n	800f494 <__sflush_r+0x18>
 800f538:	89a2      	ldrh	r2, [r4, #12]
 800f53a:	2340      	movs	r3, #64	; 0x40
 800f53c:	4313      	orrs	r3, r2
 800f53e:	81a3      	strh	r3, [r4, #12]
 800f540:	e7a9      	b.n	800f496 <__sflush_r+0x1a>
 800f542:	690e      	ldr	r6, [r1, #16]
 800f544:	2e00      	cmp	r6, #0
 800f546:	d0a5      	beq.n	800f494 <__sflush_r+0x18>
 800f548:	680f      	ldr	r7, [r1, #0]
 800f54a:	600e      	str	r6, [r1, #0]
 800f54c:	1bba      	subs	r2, r7, r6
 800f54e:	9201      	str	r2, [sp, #4]
 800f550:	2200      	movs	r2, #0
 800f552:	079b      	lsls	r3, r3, #30
 800f554:	d100      	bne.n	800f558 <__sflush_r+0xdc>
 800f556:	694a      	ldr	r2, [r1, #20]
 800f558:	60a2      	str	r2, [r4, #8]
 800f55a:	9b01      	ldr	r3, [sp, #4]
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	dd99      	ble.n	800f494 <__sflush_r+0x18>
 800f560:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f562:	0032      	movs	r2, r6
 800f564:	001f      	movs	r7, r3
 800f566:	0028      	movs	r0, r5
 800f568:	9b01      	ldr	r3, [sp, #4]
 800f56a:	6a21      	ldr	r1, [r4, #32]
 800f56c:	47b8      	blx	r7
 800f56e:	2800      	cmp	r0, #0
 800f570:	dc06      	bgt.n	800f580 <__sflush_r+0x104>
 800f572:	2340      	movs	r3, #64	; 0x40
 800f574:	2001      	movs	r0, #1
 800f576:	89a2      	ldrh	r2, [r4, #12]
 800f578:	4240      	negs	r0, r0
 800f57a:	4313      	orrs	r3, r2
 800f57c:	81a3      	strh	r3, [r4, #12]
 800f57e:	e78a      	b.n	800f496 <__sflush_r+0x1a>
 800f580:	9b01      	ldr	r3, [sp, #4]
 800f582:	1836      	adds	r6, r6, r0
 800f584:	1a1b      	subs	r3, r3, r0
 800f586:	9301      	str	r3, [sp, #4]
 800f588:	e7e7      	b.n	800f55a <__sflush_r+0xde>
 800f58a:	46c0      	nop			; (mov r8, r8)
 800f58c:	dfbffffe 	.word	0xdfbffffe

0800f590 <_fflush_r>:
 800f590:	690b      	ldr	r3, [r1, #16]
 800f592:	b570      	push	{r4, r5, r6, lr}
 800f594:	0005      	movs	r5, r0
 800f596:	000c      	movs	r4, r1
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d102      	bne.n	800f5a2 <_fflush_r+0x12>
 800f59c:	2500      	movs	r5, #0
 800f59e:	0028      	movs	r0, r5
 800f5a0:	bd70      	pop	{r4, r5, r6, pc}
 800f5a2:	2800      	cmp	r0, #0
 800f5a4:	d004      	beq.n	800f5b0 <_fflush_r+0x20>
 800f5a6:	6a03      	ldr	r3, [r0, #32]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d101      	bne.n	800f5b0 <_fflush_r+0x20>
 800f5ac:	f7fc ff10 	bl	800c3d0 <__sinit>
 800f5b0:	220c      	movs	r2, #12
 800f5b2:	5ea3      	ldrsh	r3, [r4, r2]
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d0f1      	beq.n	800f59c <_fflush_r+0xc>
 800f5b8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f5ba:	07d2      	lsls	r2, r2, #31
 800f5bc:	d404      	bmi.n	800f5c8 <_fflush_r+0x38>
 800f5be:	059b      	lsls	r3, r3, #22
 800f5c0:	d402      	bmi.n	800f5c8 <_fflush_r+0x38>
 800f5c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f5c4:	f7fd f9b3 	bl	800c92e <__retarget_lock_acquire_recursive>
 800f5c8:	0028      	movs	r0, r5
 800f5ca:	0021      	movs	r1, r4
 800f5cc:	f7ff ff56 	bl	800f47c <__sflush_r>
 800f5d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f5d2:	0005      	movs	r5, r0
 800f5d4:	07db      	lsls	r3, r3, #31
 800f5d6:	d4e2      	bmi.n	800f59e <_fflush_r+0xe>
 800f5d8:	89a3      	ldrh	r3, [r4, #12]
 800f5da:	059b      	lsls	r3, r3, #22
 800f5dc:	d4df      	bmi.n	800f59e <_fflush_r+0xe>
 800f5de:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f5e0:	f7fd f9a6 	bl	800c930 <__retarget_lock_release_recursive>
 800f5e4:	e7db      	b.n	800f59e <_fflush_r+0xe>
	...

0800f5e8 <__swhatbuf_r>:
 800f5e8:	b570      	push	{r4, r5, r6, lr}
 800f5ea:	000e      	movs	r6, r1
 800f5ec:	001d      	movs	r5, r3
 800f5ee:	230e      	movs	r3, #14
 800f5f0:	5ec9      	ldrsh	r1, [r1, r3]
 800f5f2:	0014      	movs	r4, r2
 800f5f4:	b096      	sub	sp, #88	; 0x58
 800f5f6:	2900      	cmp	r1, #0
 800f5f8:	da0c      	bge.n	800f614 <__swhatbuf_r+0x2c>
 800f5fa:	89b2      	ldrh	r2, [r6, #12]
 800f5fc:	2380      	movs	r3, #128	; 0x80
 800f5fe:	0011      	movs	r1, r2
 800f600:	4019      	ands	r1, r3
 800f602:	421a      	tst	r2, r3
 800f604:	d013      	beq.n	800f62e <__swhatbuf_r+0x46>
 800f606:	2100      	movs	r1, #0
 800f608:	3b40      	subs	r3, #64	; 0x40
 800f60a:	2000      	movs	r0, #0
 800f60c:	6029      	str	r1, [r5, #0]
 800f60e:	6023      	str	r3, [r4, #0]
 800f610:	b016      	add	sp, #88	; 0x58
 800f612:	bd70      	pop	{r4, r5, r6, pc}
 800f614:	466a      	mov	r2, sp
 800f616:	f000 f90f 	bl	800f838 <_fstat_r>
 800f61a:	2800      	cmp	r0, #0
 800f61c:	dbed      	blt.n	800f5fa <__swhatbuf_r+0x12>
 800f61e:	23f0      	movs	r3, #240	; 0xf0
 800f620:	9901      	ldr	r1, [sp, #4]
 800f622:	021b      	lsls	r3, r3, #8
 800f624:	4019      	ands	r1, r3
 800f626:	4b03      	ldr	r3, [pc, #12]	; (800f634 <__swhatbuf_r+0x4c>)
 800f628:	18c9      	adds	r1, r1, r3
 800f62a:	424b      	negs	r3, r1
 800f62c:	4159      	adcs	r1, r3
 800f62e:	2380      	movs	r3, #128	; 0x80
 800f630:	00db      	lsls	r3, r3, #3
 800f632:	e7ea      	b.n	800f60a <__swhatbuf_r+0x22>
 800f634:	ffffe000 	.word	0xffffe000

0800f638 <__smakebuf_r>:
 800f638:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f63a:	2602      	movs	r6, #2
 800f63c:	898b      	ldrh	r3, [r1, #12]
 800f63e:	0005      	movs	r5, r0
 800f640:	000c      	movs	r4, r1
 800f642:	4233      	tst	r3, r6
 800f644:	d006      	beq.n	800f654 <__smakebuf_r+0x1c>
 800f646:	0023      	movs	r3, r4
 800f648:	3347      	adds	r3, #71	; 0x47
 800f64a:	6023      	str	r3, [r4, #0]
 800f64c:	6123      	str	r3, [r4, #16]
 800f64e:	2301      	movs	r3, #1
 800f650:	6163      	str	r3, [r4, #20]
 800f652:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800f654:	466a      	mov	r2, sp
 800f656:	ab01      	add	r3, sp, #4
 800f658:	f7ff ffc6 	bl	800f5e8 <__swhatbuf_r>
 800f65c:	9900      	ldr	r1, [sp, #0]
 800f65e:	0007      	movs	r7, r0
 800f660:	0028      	movs	r0, r5
 800f662:	f7fb f8a9 	bl	800a7b8 <_malloc_r>
 800f666:	2800      	cmp	r0, #0
 800f668:	d108      	bne.n	800f67c <__smakebuf_r+0x44>
 800f66a:	220c      	movs	r2, #12
 800f66c:	5ea3      	ldrsh	r3, [r4, r2]
 800f66e:	059a      	lsls	r2, r3, #22
 800f670:	d4ef      	bmi.n	800f652 <__smakebuf_r+0x1a>
 800f672:	2203      	movs	r2, #3
 800f674:	4393      	bics	r3, r2
 800f676:	431e      	orrs	r6, r3
 800f678:	81a6      	strh	r6, [r4, #12]
 800f67a:	e7e4      	b.n	800f646 <__smakebuf_r+0xe>
 800f67c:	2380      	movs	r3, #128	; 0x80
 800f67e:	89a2      	ldrh	r2, [r4, #12]
 800f680:	6020      	str	r0, [r4, #0]
 800f682:	4313      	orrs	r3, r2
 800f684:	81a3      	strh	r3, [r4, #12]
 800f686:	9b00      	ldr	r3, [sp, #0]
 800f688:	6120      	str	r0, [r4, #16]
 800f68a:	6163      	str	r3, [r4, #20]
 800f68c:	9b01      	ldr	r3, [sp, #4]
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d00c      	beq.n	800f6ac <__smakebuf_r+0x74>
 800f692:	0028      	movs	r0, r5
 800f694:	230e      	movs	r3, #14
 800f696:	5ee1      	ldrsh	r1, [r4, r3]
 800f698:	f000 f8e0 	bl	800f85c <_isatty_r>
 800f69c:	2800      	cmp	r0, #0
 800f69e:	d005      	beq.n	800f6ac <__smakebuf_r+0x74>
 800f6a0:	2303      	movs	r3, #3
 800f6a2:	89a2      	ldrh	r2, [r4, #12]
 800f6a4:	439a      	bics	r2, r3
 800f6a6:	3b02      	subs	r3, #2
 800f6a8:	4313      	orrs	r3, r2
 800f6aa:	81a3      	strh	r3, [r4, #12]
 800f6ac:	89a3      	ldrh	r3, [r4, #12]
 800f6ae:	433b      	orrs	r3, r7
 800f6b0:	81a3      	strh	r3, [r4, #12]
 800f6b2:	e7ce      	b.n	800f652 <__smakebuf_r+0x1a>

0800f6b4 <__sccl>:
 800f6b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f6b6:	780b      	ldrb	r3, [r1, #0]
 800f6b8:	0004      	movs	r4, r0
 800f6ba:	2b5e      	cmp	r3, #94	; 0x5e
 800f6bc:	d019      	beq.n	800f6f2 <__sccl+0x3e>
 800f6be:	2200      	movs	r2, #0
 800f6c0:	1c4d      	adds	r5, r1, #1
 800f6c2:	0021      	movs	r1, r4
 800f6c4:	1c60      	adds	r0, r4, #1
 800f6c6:	30ff      	adds	r0, #255	; 0xff
 800f6c8:	700a      	strb	r2, [r1, #0]
 800f6ca:	3101      	adds	r1, #1
 800f6cc:	4281      	cmp	r1, r0
 800f6ce:	d1fb      	bne.n	800f6c8 <__sccl+0x14>
 800f6d0:	1e68      	subs	r0, r5, #1
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d00c      	beq.n	800f6f0 <__sccl+0x3c>
 800f6d6:	2101      	movs	r1, #1
 800f6d8:	262d      	movs	r6, #45	; 0x2d
 800f6da:	404a      	eors	r2, r1
 800f6dc:	0028      	movs	r0, r5
 800f6de:	54e2      	strb	r2, [r4, r3]
 800f6e0:	7801      	ldrb	r1, [r0, #0]
 800f6e2:	1c45      	adds	r5, r0, #1
 800f6e4:	292d      	cmp	r1, #45	; 0x2d
 800f6e6:	d00c      	beq.n	800f702 <__sccl+0x4e>
 800f6e8:	295d      	cmp	r1, #93	; 0x5d
 800f6ea:	d01d      	beq.n	800f728 <__sccl+0x74>
 800f6ec:	2900      	cmp	r1, #0
 800f6ee:	d104      	bne.n	800f6fa <__sccl+0x46>
 800f6f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f6f2:	2201      	movs	r2, #1
 800f6f4:	784b      	ldrb	r3, [r1, #1]
 800f6f6:	1c8d      	adds	r5, r1, #2
 800f6f8:	e7e3      	b.n	800f6c2 <__sccl+0xe>
 800f6fa:	000b      	movs	r3, r1
 800f6fc:	e7ee      	b.n	800f6dc <__sccl+0x28>
 800f6fe:	0033      	movs	r3, r6
 800f700:	e7ec      	b.n	800f6dc <__sccl+0x28>
 800f702:	7841      	ldrb	r1, [r0, #1]
 800f704:	295d      	cmp	r1, #93	; 0x5d
 800f706:	d0fa      	beq.n	800f6fe <__sccl+0x4a>
 800f708:	428b      	cmp	r3, r1
 800f70a:	dcf8      	bgt.n	800f6fe <__sccl+0x4a>
 800f70c:	001d      	movs	r5, r3
 800f70e:	3002      	adds	r0, #2
 800f710:	3501      	adds	r5, #1
 800f712:	5562      	strb	r2, [r4, r5]
 800f714:	42a9      	cmp	r1, r5
 800f716:	dcfb      	bgt.n	800f710 <__sccl+0x5c>
 800f718:	2500      	movs	r5, #0
 800f71a:	1c5f      	adds	r7, r3, #1
 800f71c:	428b      	cmp	r3, r1
 800f71e:	da01      	bge.n	800f724 <__sccl+0x70>
 800f720:	1acd      	subs	r5, r1, r3
 800f722:	3d01      	subs	r5, #1
 800f724:	197b      	adds	r3, r7, r5
 800f726:	e7db      	b.n	800f6e0 <__sccl+0x2c>
 800f728:	0028      	movs	r0, r5
 800f72a:	e7e1      	b.n	800f6f0 <__sccl+0x3c>

0800f72c <__submore>:
 800f72c:	000b      	movs	r3, r1
 800f72e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f730:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800f732:	3344      	adds	r3, #68	; 0x44
 800f734:	000c      	movs	r4, r1
 800f736:	429d      	cmp	r5, r3
 800f738:	d11c      	bne.n	800f774 <__submore+0x48>
 800f73a:	2680      	movs	r6, #128	; 0x80
 800f73c:	00f6      	lsls	r6, r6, #3
 800f73e:	0031      	movs	r1, r6
 800f740:	f7fb f83a 	bl	800a7b8 <_malloc_r>
 800f744:	2800      	cmp	r0, #0
 800f746:	d102      	bne.n	800f74e <__submore+0x22>
 800f748:	2001      	movs	r0, #1
 800f74a:	4240      	negs	r0, r0
 800f74c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f74e:	0023      	movs	r3, r4
 800f750:	6360      	str	r0, [r4, #52]	; 0x34
 800f752:	63a6      	str	r6, [r4, #56]	; 0x38
 800f754:	3346      	adds	r3, #70	; 0x46
 800f756:	781a      	ldrb	r2, [r3, #0]
 800f758:	4b10      	ldr	r3, [pc, #64]	; (800f79c <__submore+0x70>)
 800f75a:	54c2      	strb	r2, [r0, r3]
 800f75c:	0023      	movs	r3, r4
 800f75e:	3345      	adds	r3, #69	; 0x45
 800f760:	781a      	ldrb	r2, [r3, #0]
 800f762:	4b0f      	ldr	r3, [pc, #60]	; (800f7a0 <__submore+0x74>)
 800f764:	54c2      	strb	r2, [r0, r3]
 800f766:	782a      	ldrb	r2, [r5, #0]
 800f768:	4b0e      	ldr	r3, [pc, #56]	; (800f7a4 <__submore+0x78>)
 800f76a:	54c2      	strb	r2, [r0, r3]
 800f76c:	18c0      	adds	r0, r0, r3
 800f76e:	6020      	str	r0, [r4, #0]
 800f770:	2000      	movs	r0, #0
 800f772:	e7eb      	b.n	800f74c <__submore+0x20>
 800f774:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 800f776:	0029      	movs	r1, r5
 800f778:	0073      	lsls	r3, r6, #1
 800f77a:	001a      	movs	r2, r3
 800f77c:	9301      	str	r3, [sp, #4]
 800f77e:	f7fb f8b7 	bl	800a8f0 <_realloc_r>
 800f782:	1e05      	subs	r5, r0, #0
 800f784:	d0e0      	beq.n	800f748 <__submore+0x1c>
 800f786:	1987      	adds	r7, r0, r6
 800f788:	0001      	movs	r1, r0
 800f78a:	0032      	movs	r2, r6
 800f78c:	0038      	movs	r0, r7
 800f78e:	f7fd f8db 	bl	800c948 <memcpy>
 800f792:	9b01      	ldr	r3, [sp, #4]
 800f794:	6027      	str	r7, [r4, #0]
 800f796:	6365      	str	r5, [r4, #52]	; 0x34
 800f798:	63a3      	str	r3, [r4, #56]	; 0x38
 800f79a:	e7e9      	b.n	800f770 <__submore+0x44>
 800f79c:	000003ff 	.word	0x000003ff
 800f7a0:	000003fe 	.word	0x000003fe
 800f7a4:	000003fd 	.word	0x000003fd

0800f7a8 <memmove>:
 800f7a8:	b510      	push	{r4, lr}
 800f7aa:	4288      	cmp	r0, r1
 800f7ac:	d902      	bls.n	800f7b4 <memmove+0xc>
 800f7ae:	188b      	adds	r3, r1, r2
 800f7b0:	4298      	cmp	r0, r3
 800f7b2:	d303      	bcc.n	800f7bc <memmove+0x14>
 800f7b4:	2300      	movs	r3, #0
 800f7b6:	e007      	b.n	800f7c8 <memmove+0x20>
 800f7b8:	5c8b      	ldrb	r3, [r1, r2]
 800f7ba:	5483      	strb	r3, [r0, r2]
 800f7bc:	3a01      	subs	r2, #1
 800f7be:	d2fb      	bcs.n	800f7b8 <memmove+0x10>
 800f7c0:	bd10      	pop	{r4, pc}
 800f7c2:	5ccc      	ldrb	r4, [r1, r3]
 800f7c4:	54c4      	strb	r4, [r0, r3]
 800f7c6:	3301      	adds	r3, #1
 800f7c8:	429a      	cmp	r2, r3
 800f7ca:	d1fa      	bne.n	800f7c2 <memmove+0x1a>
 800f7cc:	e7f8      	b.n	800f7c0 <memmove+0x18>

0800f7ce <_raise_r>:
 800f7ce:	b570      	push	{r4, r5, r6, lr}
 800f7d0:	0004      	movs	r4, r0
 800f7d2:	000d      	movs	r5, r1
 800f7d4:	291f      	cmp	r1, #31
 800f7d6:	d904      	bls.n	800f7e2 <_raise_r+0x14>
 800f7d8:	2316      	movs	r3, #22
 800f7da:	6003      	str	r3, [r0, #0]
 800f7dc:	2001      	movs	r0, #1
 800f7de:	4240      	negs	r0, r0
 800f7e0:	bd70      	pop	{r4, r5, r6, pc}
 800f7e2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d004      	beq.n	800f7f2 <_raise_r+0x24>
 800f7e8:	008a      	lsls	r2, r1, #2
 800f7ea:	189b      	adds	r3, r3, r2
 800f7ec:	681a      	ldr	r2, [r3, #0]
 800f7ee:	2a00      	cmp	r2, #0
 800f7f0:	d108      	bne.n	800f804 <_raise_r+0x36>
 800f7f2:	0020      	movs	r0, r4
 800f7f4:	f000 f856 	bl	800f8a4 <_getpid_r>
 800f7f8:	002a      	movs	r2, r5
 800f7fa:	0001      	movs	r1, r0
 800f7fc:	0020      	movs	r0, r4
 800f7fe:	f000 f83f 	bl	800f880 <_kill_r>
 800f802:	e7ed      	b.n	800f7e0 <_raise_r+0x12>
 800f804:	2000      	movs	r0, #0
 800f806:	2a01      	cmp	r2, #1
 800f808:	d0ea      	beq.n	800f7e0 <_raise_r+0x12>
 800f80a:	1c51      	adds	r1, r2, #1
 800f80c:	d103      	bne.n	800f816 <_raise_r+0x48>
 800f80e:	2316      	movs	r3, #22
 800f810:	3001      	adds	r0, #1
 800f812:	6023      	str	r3, [r4, #0]
 800f814:	e7e4      	b.n	800f7e0 <_raise_r+0x12>
 800f816:	2400      	movs	r4, #0
 800f818:	0028      	movs	r0, r5
 800f81a:	601c      	str	r4, [r3, #0]
 800f81c:	4790      	blx	r2
 800f81e:	0020      	movs	r0, r4
 800f820:	e7de      	b.n	800f7e0 <_raise_r+0x12>
	...

0800f824 <raise>:
 800f824:	b510      	push	{r4, lr}
 800f826:	4b03      	ldr	r3, [pc, #12]	; (800f834 <raise+0x10>)
 800f828:	0001      	movs	r1, r0
 800f82a:	6818      	ldr	r0, [r3, #0]
 800f82c:	f7ff ffcf 	bl	800f7ce <_raise_r>
 800f830:	bd10      	pop	{r4, pc}
 800f832:	46c0      	nop			; (mov r8, r8)
 800f834:	200002ac 	.word	0x200002ac

0800f838 <_fstat_r>:
 800f838:	2300      	movs	r3, #0
 800f83a:	b570      	push	{r4, r5, r6, lr}
 800f83c:	4d06      	ldr	r5, [pc, #24]	; (800f858 <_fstat_r+0x20>)
 800f83e:	0004      	movs	r4, r0
 800f840:	0008      	movs	r0, r1
 800f842:	0011      	movs	r1, r2
 800f844:	602b      	str	r3, [r5, #0]
 800f846:	f7f6 f996 	bl	8005b76 <_fstat>
 800f84a:	1c43      	adds	r3, r0, #1
 800f84c:	d103      	bne.n	800f856 <_fstat_r+0x1e>
 800f84e:	682b      	ldr	r3, [r5, #0]
 800f850:	2b00      	cmp	r3, #0
 800f852:	d000      	beq.n	800f856 <_fstat_r+0x1e>
 800f854:	6023      	str	r3, [r4, #0]
 800f856:	bd70      	pop	{r4, r5, r6, pc}
 800f858:	20000b58 	.word	0x20000b58

0800f85c <_isatty_r>:
 800f85c:	2300      	movs	r3, #0
 800f85e:	b570      	push	{r4, r5, r6, lr}
 800f860:	4d06      	ldr	r5, [pc, #24]	; (800f87c <_isatty_r+0x20>)
 800f862:	0004      	movs	r4, r0
 800f864:	0008      	movs	r0, r1
 800f866:	602b      	str	r3, [r5, #0]
 800f868:	f7f6 f993 	bl	8005b92 <_isatty>
 800f86c:	1c43      	adds	r3, r0, #1
 800f86e:	d103      	bne.n	800f878 <_isatty_r+0x1c>
 800f870:	682b      	ldr	r3, [r5, #0]
 800f872:	2b00      	cmp	r3, #0
 800f874:	d000      	beq.n	800f878 <_isatty_r+0x1c>
 800f876:	6023      	str	r3, [r4, #0]
 800f878:	bd70      	pop	{r4, r5, r6, pc}
 800f87a:	46c0      	nop			; (mov r8, r8)
 800f87c:	20000b58 	.word	0x20000b58

0800f880 <_kill_r>:
 800f880:	2300      	movs	r3, #0
 800f882:	b570      	push	{r4, r5, r6, lr}
 800f884:	4d06      	ldr	r5, [pc, #24]	; (800f8a0 <_kill_r+0x20>)
 800f886:	0004      	movs	r4, r0
 800f888:	0008      	movs	r0, r1
 800f88a:	0011      	movs	r1, r2
 800f88c:	602b      	str	r3, [r5, #0]
 800f88e:	f7f6 f913 	bl	8005ab8 <_kill>
 800f892:	1c43      	adds	r3, r0, #1
 800f894:	d103      	bne.n	800f89e <_kill_r+0x1e>
 800f896:	682b      	ldr	r3, [r5, #0]
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d000      	beq.n	800f89e <_kill_r+0x1e>
 800f89c:	6023      	str	r3, [r4, #0]
 800f89e:	bd70      	pop	{r4, r5, r6, pc}
 800f8a0:	20000b58 	.word	0x20000b58

0800f8a4 <_getpid_r>:
 800f8a4:	b510      	push	{r4, lr}
 800f8a6:	f7f6 f901 	bl	8005aac <_getpid>
 800f8aa:	bd10      	pop	{r4, pc}

0800f8ac <_calloc_r>:
 800f8ac:	b570      	push	{r4, r5, r6, lr}
 800f8ae:	0c0b      	lsrs	r3, r1, #16
 800f8b0:	0c15      	lsrs	r5, r2, #16
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d11e      	bne.n	800f8f4 <_calloc_r+0x48>
 800f8b6:	2d00      	cmp	r5, #0
 800f8b8:	d10c      	bne.n	800f8d4 <_calloc_r+0x28>
 800f8ba:	b289      	uxth	r1, r1
 800f8bc:	b294      	uxth	r4, r2
 800f8be:	434c      	muls	r4, r1
 800f8c0:	0021      	movs	r1, r4
 800f8c2:	f7fa ff79 	bl	800a7b8 <_malloc_r>
 800f8c6:	1e05      	subs	r5, r0, #0
 800f8c8:	d01b      	beq.n	800f902 <_calloc_r+0x56>
 800f8ca:	0022      	movs	r2, r4
 800f8cc:	2100      	movs	r1, #0
 800f8ce:	f7fc ff6f 	bl	800c7b0 <memset>
 800f8d2:	e016      	b.n	800f902 <_calloc_r+0x56>
 800f8d4:	1c2b      	adds	r3, r5, #0
 800f8d6:	1c0c      	adds	r4, r1, #0
 800f8d8:	b289      	uxth	r1, r1
 800f8da:	b292      	uxth	r2, r2
 800f8dc:	434a      	muls	r2, r1
 800f8de:	b2a1      	uxth	r1, r4
 800f8e0:	b29c      	uxth	r4, r3
 800f8e2:	434c      	muls	r4, r1
 800f8e4:	0c13      	lsrs	r3, r2, #16
 800f8e6:	18e4      	adds	r4, r4, r3
 800f8e8:	0c23      	lsrs	r3, r4, #16
 800f8ea:	d107      	bne.n	800f8fc <_calloc_r+0x50>
 800f8ec:	0424      	lsls	r4, r4, #16
 800f8ee:	b292      	uxth	r2, r2
 800f8f0:	4314      	orrs	r4, r2
 800f8f2:	e7e5      	b.n	800f8c0 <_calloc_r+0x14>
 800f8f4:	2d00      	cmp	r5, #0
 800f8f6:	d101      	bne.n	800f8fc <_calloc_r+0x50>
 800f8f8:	1c14      	adds	r4, r2, #0
 800f8fa:	e7ed      	b.n	800f8d8 <_calloc_r+0x2c>
 800f8fc:	230c      	movs	r3, #12
 800f8fe:	2500      	movs	r5, #0
 800f900:	6003      	str	r3, [r0, #0]
 800f902:	0028      	movs	r0, r5
 800f904:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f908 <_strtoul_l.constprop.0>:
 800f908:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f90a:	b087      	sub	sp, #28
 800f90c:	9202      	str	r2, [sp, #8]
 800f90e:	4a3e      	ldr	r2, [pc, #248]	; (800fa08 <_strtoul_l.constprop.0+0x100>)
 800f910:	001e      	movs	r6, r3
 800f912:	9101      	str	r1, [sp, #4]
 800f914:	000b      	movs	r3, r1
 800f916:	4694      	mov	ip, r2
 800f918:	2108      	movs	r1, #8
 800f91a:	9005      	str	r0, [sp, #20]
 800f91c:	001a      	movs	r2, r3
 800f91e:	4660      	mov	r0, ip
 800f920:	7814      	ldrb	r4, [r2, #0]
 800f922:	3301      	adds	r3, #1
 800f924:	5d00      	ldrb	r0, [r0, r4]
 800f926:	001d      	movs	r5, r3
 800f928:	0007      	movs	r7, r0
 800f92a:	400f      	ands	r7, r1
 800f92c:	4208      	tst	r0, r1
 800f92e:	d1f5      	bne.n	800f91c <_strtoul_l.constprop.0+0x14>
 800f930:	2c2d      	cmp	r4, #45	; 0x2d
 800f932:	d13d      	bne.n	800f9b0 <_strtoul_l.constprop.0+0xa8>
 800f934:	2701      	movs	r7, #1
 800f936:	781c      	ldrb	r4, [r3, #0]
 800f938:	1c95      	adds	r5, r2, #2
 800f93a:	2e00      	cmp	r6, #0
 800f93c:	d05f      	beq.n	800f9fe <_strtoul_l.constprop.0+0xf6>
 800f93e:	2e10      	cmp	r6, #16
 800f940:	d109      	bne.n	800f956 <_strtoul_l.constprop.0+0x4e>
 800f942:	2c30      	cmp	r4, #48	; 0x30
 800f944:	d107      	bne.n	800f956 <_strtoul_l.constprop.0+0x4e>
 800f946:	2220      	movs	r2, #32
 800f948:	782b      	ldrb	r3, [r5, #0]
 800f94a:	4393      	bics	r3, r2
 800f94c:	2b58      	cmp	r3, #88	; 0x58
 800f94e:	d151      	bne.n	800f9f4 <_strtoul_l.constprop.0+0xec>
 800f950:	2610      	movs	r6, #16
 800f952:	786c      	ldrb	r4, [r5, #1]
 800f954:	3502      	adds	r5, #2
 800f956:	2001      	movs	r0, #1
 800f958:	0031      	movs	r1, r6
 800f95a:	4240      	negs	r0, r0
 800f95c:	f7f0 fbf0 	bl	8000140 <__udivsi3>
 800f960:	9003      	str	r0, [sp, #12]
 800f962:	2001      	movs	r0, #1
 800f964:	0031      	movs	r1, r6
 800f966:	4240      	negs	r0, r0
 800f968:	f7f0 fc70 	bl	800024c <__aeabi_uidivmod>
 800f96c:	2300      	movs	r3, #0
 800f96e:	2201      	movs	r2, #1
 800f970:	9104      	str	r1, [sp, #16]
 800f972:	2101      	movs	r1, #1
 800f974:	0018      	movs	r0, r3
 800f976:	4694      	mov	ip, r2
 800f978:	4249      	negs	r1, r1
 800f97a:	0022      	movs	r2, r4
 800f97c:	3a30      	subs	r2, #48	; 0x30
 800f97e:	2a09      	cmp	r2, #9
 800f980:	d903      	bls.n	800f98a <_strtoul_l.constprop.0+0x82>
 800f982:	3a11      	subs	r2, #17
 800f984:	2a19      	cmp	r2, #25
 800f986:	d818      	bhi.n	800f9ba <_strtoul_l.constprop.0+0xb2>
 800f988:	320a      	adds	r2, #10
 800f98a:	4296      	cmp	r6, r2
 800f98c:	dd19      	ble.n	800f9c2 <_strtoul_l.constprop.0+0xba>
 800f98e:	1c5c      	adds	r4, r3, #1
 800f990:	d00b      	beq.n	800f9aa <_strtoul_l.constprop.0+0xa2>
 800f992:	9c03      	ldr	r4, [sp, #12]
 800f994:	000b      	movs	r3, r1
 800f996:	4284      	cmp	r4, r0
 800f998:	d307      	bcc.n	800f9aa <_strtoul_l.constprop.0+0xa2>
 800f99a:	d103      	bne.n	800f9a4 <_strtoul_l.constprop.0+0x9c>
 800f99c:	9c04      	ldr	r4, [sp, #16]
 800f99e:	000b      	movs	r3, r1
 800f9a0:	4294      	cmp	r4, r2
 800f9a2:	db02      	blt.n	800f9aa <_strtoul_l.constprop.0+0xa2>
 800f9a4:	4663      	mov	r3, ip
 800f9a6:	4370      	muls	r0, r6
 800f9a8:	1810      	adds	r0, r2, r0
 800f9aa:	782c      	ldrb	r4, [r5, #0]
 800f9ac:	3501      	adds	r5, #1
 800f9ae:	e7e4      	b.n	800f97a <_strtoul_l.constprop.0+0x72>
 800f9b0:	2c2b      	cmp	r4, #43	; 0x2b
 800f9b2:	d1c2      	bne.n	800f93a <_strtoul_l.constprop.0+0x32>
 800f9b4:	781c      	ldrb	r4, [r3, #0]
 800f9b6:	1c95      	adds	r5, r2, #2
 800f9b8:	e7bf      	b.n	800f93a <_strtoul_l.constprop.0+0x32>
 800f9ba:	0022      	movs	r2, r4
 800f9bc:	3a61      	subs	r2, #97	; 0x61
 800f9be:	2a19      	cmp	r2, #25
 800f9c0:	d9e2      	bls.n	800f988 <_strtoul_l.constprop.0+0x80>
 800f9c2:	1c5a      	adds	r2, r3, #1
 800f9c4:	d108      	bne.n	800f9d8 <_strtoul_l.constprop.0+0xd0>
 800f9c6:	2222      	movs	r2, #34	; 0x22
 800f9c8:	9905      	ldr	r1, [sp, #20]
 800f9ca:	0018      	movs	r0, r3
 800f9cc:	600a      	str	r2, [r1, #0]
 800f9ce:	9a02      	ldr	r2, [sp, #8]
 800f9d0:	2a00      	cmp	r2, #0
 800f9d2:	d109      	bne.n	800f9e8 <_strtoul_l.constprop.0+0xe0>
 800f9d4:	b007      	add	sp, #28
 800f9d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f9d8:	2f00      	cmp	r7, #0
 800f9da:	d000      	beq.n	800f9de <_strtoul_l.constprop.0+0xd6>
 800f9dc:	4240      	negs	r0, r0
 800f9de:	9a02      	ldr	r2, [sp, #8]
 800f9e0:	2a00      	cmp	r2, #0
 800f9e2:	d0f7      	beq.n	800f9d4 <_strtoul_l.constprop.0+0xcc>
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d001      	beq.n	800f9ec <_strtoul_l.constprop.0+0xe4>
 800f9e8:	1e6b      	subs	r3, r5, #1
 800f9ea:	9301      	str	r3, [sp, #4]
 800f9ec:	9b02      	ldr	r3, [sp, #8]
 800f9ee:	9a01      	ldr	r2, [sp, #4]
 800f9f0:	601a      	str	r2, [r3, #0]
 800f9f2:	e7ef      	b.n	800f9d4 <_strtoul_l.constprop.0+0xcc>
 800f9f4:	2430      	movs	r4, #48	; 0x30
 800f9f6:	2e00      	cmp	r6, #0
 800f9f8:	d1ad      	bne.n	800f956 <_strtoul_l.constprop.0+0x4e>
 800f9fa:	3608      	adds	r6, #8
 800f9fc:	e7ab      	b.n	800f956 <_strtoul_l.constprop.0+0x4e>
 800f9fe:	2c30      	cmp	r4, #48	; 0x30
 800fa00:	d0a1      	beq.n	800f946 <_strtoul_l.constprop.0+0x3e>
 800fa02:	260a      	movs	r6, #10
 800fa04:	e7a7      	b.n	800f956 <_strtoul_l.constprop.0+0x4e>
 800fa06:	46c0      	nop			; (mov r8, r8)
 800fa08:	0800feb1 	.word	0x0800feb1

0800fa0c <_strtoul_r>:
 800fa0c:	b510      	push	{r4, lr}
 800fa0e:	f7ff ff7b 	bl	800f908 <_strtoul_l.constprop.0>
 800fa12:	bd10      	pop	{r4, pc}

0800fa14 <_init>:
 800fa14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa16:	46c0      	nop			; (mov r8, r8)
 800fa18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa1a:	bc08      	pop	{r3}
 800fa1c:	469e      	mov	lr, r3
 800fa1e:	4770      	bx	lr

0800fa20 <_fini>:
 800fa20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa22:	46c0      	nop			; (mov r8, r8)
 800fa24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa26:	bc08      	pop	{r3}
 800fa28:	469e      	mov	lr, r3
 800fa2a:	4770      	bx	lr
